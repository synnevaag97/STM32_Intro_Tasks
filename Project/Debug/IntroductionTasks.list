
IntroductionTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800dce0  0800dce0  0001dce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1ec  0800e1ec  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1ec  0800e1ec  0001e1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1f4  0800e1f4  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1f4  0800e1f4  0001e1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1f8  0800e1f8  0001e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800e1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c8  2**0
                  CONTENTS
 10 .bss          00005e5c  200002c8  200002c8  000202c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006124  20006124  000202c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002003e  00000000  00000000  0002033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d10  00000000  00000000  00040379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c18  00000000  00000000  00045090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159c  00000000  00000000  00046ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000272a8  00000000  00000000  00048244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000228c2  00000000  00000000  0006f4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc124  00000000  00000000  00091dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008768  00000000  00000000  0016ded4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0017663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcc4 	.word	0x0800dcc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800dcc4 	.word	0x0800dcc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200002e4 	.word	0x200002e4
 8000ed4:	20000384 	.word	0x20000384

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b0b0      	sub	sp, #192	; 0xc0
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fd35 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8b9 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f985 	bl	80011f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eea:	f000 f91f 	bl	800112c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000eee:	f000 f94b 	bl	8001188 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of blinking_resource */
  osMutexDef(blinking_resource);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  blinking_resourceHandle = osMutexCreate(osMutex(blinking_resource));
 8000efe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f006 ff5d 	bl	8007dc2 <osMutexCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a44      	ldr	r2, [pc, #272]	; (800101c <main+0x144>)
 8000f0c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQ1 */
  osMessageQDef(myQ1, 8, uint16_t);
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <main+0x148>)
 8000f10:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQ1Handle = osMessageCreate(osMessageQ(myQ1), NULL);
 8000f1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 ffeb 	bl	8007efc <osMessageCreate>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <main+0x14c>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of accTask */
  osThreadDef(accTask, acc_fetch, osPriorityLow, 0, 1000);
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <main+0x150>)
 8000f2e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000f32:	461d      	mov	r5, r3
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accTaskHandle = osThreadCreate(osThread(accTask), NULL);
 8000f40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fedb 	bl	8007d02 <osThreadCreate>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a37      	ldr	r2, [pc, #220]	; (800102c <main+0x154>)
 8000f50:	6013      	str	r3, [r2, #0]

  /* definition and creation of tmpTask */
  osThreadDef(tmpTask, tmp_fetch, osPriorityLow, 0, 1000);
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <main+0x158>)
 8000f54:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000f58:	461d      	mov	r5, r3
 8000f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tmpTaskHandle = osThreadCreate(osThread(tmpTask), NULL);
 8000f66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fec8 	bl	8007d02 <osThreadCreate>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <main+0x15c>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledGreenTask */
  osThreadDef(ledGreenTask, ledGreen, osPriorityNormal, 0, 128);
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <main+0x160>)
 8000f7a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f7e:	461d      	mov	r5, r3
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledGreenTaskHandle = osThreadCreate(osThread(ledGreenTask), NULL);
 8000f8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 feb5 	bl	8007d02 <osThreadCreate>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <main+0x164>)
 8000f9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledOrangeTask */
  osThreadDef(ledOrangeTask, ledOrange, osPriorityNormal, 0, 128);
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <main+0x168>)
 8000fa0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledOrangeTaskHandle = osThreadCreate(osThread(ledOrangeTask), NULL);
 8000fb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fea2 	bl	8007d02 <osThreadCreate>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a20      	ldr	r2, [pc, #128]	; (8001044 <main+0x16c>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledRedTask */
  osThreadDef(ledRedTask, ledRed, osPriorityNormal, 0, 128);
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <main+0x170>)
 8000fc6:	f107 041c 	add.w	r4, r7, #28
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledRedTaskHandle = osThreadCreate(osThread(ledRedTask), NULL);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 fe8f 	bl	8007d02 <osThreadCreate>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <main+0x174>)
 8000fe8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledBlueTask */
  osThreadDef(ledBlueTask, ledBlue, osPriorityNormal, 0, 128);
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <main+0x178>)
 8000fec:	463c      	mov	r4, r7
 8000fee:	461d      	mov	r5, r3
 8000ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledBlueTaskHandle = osThreadCreate(osThread(ledBlueTask), NULL);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fe7e 	bl	8007d02 <osThreadCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <main+0x17c>)
 800100a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800100c:	f006 fe72 	bl	8007cf4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fcdc 	bl	80019d0 <HAL_Delay>
 8001018:	e7fa      	b.n	8001010 <main+0x138>
 800101a:	bf00      	nop
 800101c:	2000064c 	.word	0x2000064c
 8001020:	0800dce0 	.word	0x0800dce0
 8001024:	20000648 	.word	0x20000648
 8001028:	0800dcf8 	.word	0x0800dcf8
 800102c:	20000630 	.word	0x20000630
 8001030:	0800dd1c 	.word	0x0800dd1c
 8001034:	20000634 	.word	0x20000634
 8001038:	0800dd48 	.word	0x0800dd48
 800103c:	20000638 	.word	0x20000638
 8001040:	0800dd74 	.word	0x0800dd74
 8001044:	2000063c 	.word	0x2000063c
 8001048:	0800dd9c 	.word	0x0800dd9c
 800104c:	20000640 	.word	0x20000640
 8001050:	0800ddc4 	.word	0x0800ddc4
 8001054:	20000644 	.word	0x20000644

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00a fcdd 	bl	800ba26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemClock_Config+0xd0>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010cc:	23a8      	movs	r3, #168	; 0xa8
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fae1 	bl	80036a4 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e8:	f000 f9ce 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fd42 	bl	8003b94 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001116:	f000 f9b7 	bl	8001488 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C1_Init+0x50>)
 800116a:	f000 ff07 	bl	8001f7c <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f988 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000584 	.word	0x20000584
 8001180:	40005400 	.word	0x40005400
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_SPI1_Init+0x64>)
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <MX_SPI1_Init+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI1_Init+0x64>)
 8001194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI1_Init+0x64>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI1_Init+0x64>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI1_Init+0x64>)
 80011bc:	2228      	movs	r2, #40	; 0x28
 80011be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI1_Init+0x64>)
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_SPI1_Init+0x64>)
 80011da:	f002 ff2d 	bl	8004038 <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e4:	f000 f950 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200005d8 	.word	0x200005d8
 80011f0:	40013000 	.word	0x40013000

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b44      	ldr	r3, [pc, #272]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a43      	ldr	r2, [pc, #268]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <MX_GPIO_Init+0x12c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <MX_GPIO_Init+0x12c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <MX_GPIO_Init+0x12c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a27      	ldr	r2, [pc, #156]	; (8001320 <MX_GPIO_Init+0x12c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_GPIO_Init+0x12c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2108      	movs	r1, #8
 800129a:	4822      	ldr	r0, [pc, #136]	; (8001324 <MX_GPIO_Init+0x130>)
 800129c:	f000 fe3a 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012a6:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x134>)
 80012a8:	f000 fe34 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ac:	2308      	movs	r3, #8
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_GPIO_Init+0x130>)
 80012c4:	f000 fc8a 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_GPIO_Init+0x138>)
 80012dc:	f000 fc7e 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0x134>)
 80012fa:	f000 fc6f 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001302:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_GPIO_Init+0x130>)
 8001314:	f000 fc62 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40021000 	.word	0x40021000
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40020000 	.word	0x40020000

08001330 <blink_led_5_time>:

/* USER CODE BEGIN 4 */


void blink_led_5_time(uint16_t GPIO_PIN){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	osMutexWait(blinking_resourceHandle, HAL_MAX_DELAY);
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <blink_led_5_time+0x50>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f04f 31ff 	mov.w	r1, #4294967295
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fd56 	bl	8007df4 <osMutexWait>
	for (int i = 0; i < 5; i++){
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e00b      	b.n	8001366 <blink_led_5_time+0x36>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <blink_led_5_time+0x54>)
 8001354:	f000 fdf7 	bl	8001f46 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135c:	f000 fb38 	bl	80019d0 <HAL_Delay>
	for (int i = 0; i < 5; i++){
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b04      	cmp	r3, #4
 800136a:	ddf0      	ble.n	800134e <blink_led_5_time+0x1e>
	}
	osMutexRelease(blinking_resourceHandle);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <blink_led_5_time+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f006 fd8d 	bl	8007e90 <osMutexRelease>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000064c 	.word	0x2000064c
 8001384:	40020c00 	.word	0x40020c00

08001388 <acc_fetch>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_acc_fetch */
void acc_fetch(void const * argument)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09c      	sub	sp, #112	; 0x70
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001390:	f009 f8a4 	bl	800a4dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t buffer[100];
  for(;;)
  {
	  sprintf((char*) &buffer, "In for loop for acc \r\n");
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	490a      	ldr	r1, [pc, #40]	; (80013c4 <acc_fetch+0x3c>)
 800139a:	4618      	mov	r0, r3
 800139c:	f00a fae0 	bl	800b960 <siprintf>
	  size_t length = strlen((char*) &buffer);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff63 	bl	8000270 <strlen>
 80013aa:	66f8      	str	r0, [r7, #108]	; 0x6c
	  CDC_Transmit_FS(buffer, length);
 80013ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 f94e 	bl	800a658 <CDC_Transmit_FS>
	  //task5(&hspi1);
    osDelay(100);
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f006 fcec 	bl	8007d9a <osDelay>
  {
 80013c2:	e7e7      	b.n	8001394 <acc_fetch+0xc>
 80013c4:	0800dde0 	.word	0x0800dde0

080013c8 <tmp_fetch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tmp_fetch */
void tmp_fetch(void const * argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	; 0x70
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tmp_fetch */
	/* Infinite loop */
	uint8_t buffer[100];
	for(;;)
	{
		sprintf((char*) &buffer, "In for loop for temp \r\n");
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	490a      	ldr	r1, [pc, #40]	; (8001400 <tmp_fetch+0x38>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00a fac2 	bl	800b960 <siprintf>
		size_t length = strlen((char*) &buffer);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff45 	bl	8000270 <strlen>
 80013e6:	66f8      	str	r0, [r7, #108]	; 0x6c
		CDC_Transmit_FS(buffer, length);
 80013e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 f930 	bl	800a658 <CDC_Transmit_FS>

		//task3(&hi2c1);
		osDelay(100);
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f006 fcce 	bl	8007d9a <osDelay>
	{
 80013fe:	e7e7      	b.n	80013d0 <tmp_fetch+0x8>
 8001400:	0800ddf8 	.word	0x0800ddf8

08001404 <ledGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledGreen */
void ledGreen(void const * argument)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledGreen */
  /* Infinite loop */
  for(;;)
  {
	blink_led_5_time(GPIO_PIN_12);
 800140c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001410:	f7ff ff8e 	bl	8001330 <blink_led_5_time>
    osDelay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f006 fcc0 	bl	8007d9a <osDelay>
	blink_led_5_time(GPIO_PIN_12);
 800141a:	e7f7      	b.n	800140c <ledGreen+0x8>

0800141c <ledOrange>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledOrange */
void ledOrange(void const * argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledOrange */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_13);
 8001424:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001428:	f7ff ff82 	bl	8001330 <blink_led_5_time>
    osDelay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f006 fcb4 	bl	8007d9a <osDelay>
	  blink_led_5_time(GPIO_PIN_13);
 8001432:	e7f7      	b.n	8001424 <ledOrange+0x8>

08001434 <ledRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledRed */
void ledRed(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledRed */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_14);
 800143c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001440:	f7ff ff76 	bl	8001330 <blink_led_5_time>
    osDelay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f006 fca8 	bl	8007d9a <osDelay>
	  blink_led_5_time(GPIO_PIN_14);
 800144a:	e7f7      	b.n	800143c <ledRed+0x8>

0800144c <ledBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledBlue */
void ledBlue(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledBlue */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_15);
 8001454:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001458:	f7ff ff6a 	bl	8001330 <blink_led_5_time>
    osDelay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f006 fc9c 	bl	8007d9a <osDelay>
	  blink_led_5_time(GPIO_PIN_15);
 8001462:	e7f7      	b.n	8001454 <ledBlue+0x8>

08001464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001476:	f000 fa8b 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_MspInit+0x54>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_MspInit+0x54>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_MspInit+0x54>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_MspInit+0x54>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	f06f 0001 	mvn.w	r0, #1
 80014da:	f000 fb55 	bl	8001b88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12b      	bne.n	8001566 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	2304      	movs	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x8c>)
 8001546:	f000 fb49 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_I2C_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_SPI_MspInit+0x84>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d12b      	bne.n	80015f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_SPI_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015d6:	23e0      	movs	r3, #224	; 0xe0
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e6:	2305      	movs	r3, #5
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_SPI_MspInit+0x8c>)
 80015f2:	f000 faf3 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40013000 	.word	0x40013000
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_InitTick+0xd4>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <HAL_InitTick+0xd4>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6453      	str	r3, [r2, #68]	; 0x44
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_InitTick+0xd4>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fcc6 	bl	8003fd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001648:	f002 fcb0 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 800164c:	4603      	mov	r3, r0
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_InitTick+0xd8>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	3b01      	subs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_InitTick+0xdc>)
 8001662:	4a22      	ldr	r2, [pc, #136]	; (80016ec <HAL_InitTick+0xe0>)
 8001664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_InitTick+0xdc>)
 8001668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800166c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_InitTick+0xdc>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_InitTick+0xdc>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_InitTick+0xdc>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_InitTick+0xdc>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HAL_InitTick+0xdc>)
 8001688:	f002 fd5f 	bl	800414a <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11b      	bne.n	80016d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <HAL_InitTick+0xdc>)
 800169c:	f002 fdae 	bl	80041fc <HAL_TIM_Base_Start_IT>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d111      	bne.n	80016d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016ae:	2019      	movs	r0, #25
 80016b0:	f000 fa86 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d808      	bhi.n	80016cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016ba:	2200      	movs	r2, #0
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	2019      	movs	r0, #25
 80016c0:	f000 fa62 	bl	8001b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_InitTick+0xe4>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e002      	b.n	80016d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	20000650 	.word	0x20000650
 80016ec:	40010000 	.word	0x40010000
 80016f0:	20000004 	.word	0x20000004

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001726:	f002 fdd9 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000650 	.word	0x20000650

08001734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <OTG_FS_IRQHandler+0x10>)
 800173a:	f000 fea7 	bl	800248c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200058d4 	.word	0x200058d4

08001748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_kill>:

int _kill(int pid, int sig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001762:	f00a fa09 	bl	800bb78 <__errno>
 8001766:	4603      	mov	r3, r0
 8001768:	2216      	movs	r2, #22
 800176a:	601a      	str	r2, [r3, #0]
  return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_exit>:

void _exit (int status)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe7 	bl	8001758 <_kill>
  while (1) {}    /* Make sure we hang here */
 800178a:	e7fe      	b.n	800178a <_exit+0x12>

0800178c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
  }

  return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e009      	b.n	80017ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf1      	blt.n	80017d8 <_write+0x12>
  }
  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_close>:

int _close(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f00a f96e 	bl	800bb78 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20020000 	.word	0x20020000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000698 	.word	0x20000698
 80018d0:	20006128 	.word	0x20006128

080018d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018fc:	f7ff ffea 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	; (8001944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f00a f92d 	bl	800bb84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7ff fad5 	bl	8000ed8 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800193c:	0800e1fc 	.word	0x0800e1fc
  ldr r2, =_sbss
 8001940:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001944:	20006124 	.word	0x20006124

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_Init+0x40>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_Init+0x40>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x40>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f8fc 	bl	8001b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	200f      	movs	r0, #15
 800197c:	f7ff fe46 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fd88 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	2000069c 	.word	0x2000069c

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2000069c 	.word	0x2000069c

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffde 	bl	80019b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff4c 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9a:	f7ff ff61 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f7ff ffb1 	bl	8001b0c <NVIC_EncodePriority>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff80 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff54 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e16b      	b.n	8001ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 815a 	bne.w	8001eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80b4 	beq.w	8001eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x32c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x330>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00e      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001de6:	2308      	movs	r3, #8
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae90 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40021c00 	.word	0x40021c00
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f58:	887a      	ldrh	r2, [r7, #2]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	041a      	lsls	r2, r3, #16
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	400b      	ands	r3, r1
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12b      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff faa2 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f001 ffd0 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a81      	ldr	r2, [pc, #516]	; (80021f0 <HAL_I2C_Init+0x274>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d807      	bhi.n	8002000 <HAL_I2C_Init+0x84>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a80      	ldr	r2, [pc, #512]	; (80021f4 <HAL_I2C_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e006      	b.n	800200e <HAL_I2C_Init+0x92>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a7d      	ldr	r2, [pc, #500]	; (80021f8 <HAL_I2C_Init+0x27c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e7      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a78      	ldr	r2, [pc, #480]	; (80021fc <HAL_I2C_Init+0x280>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d802      	bhi.n	8002050 <HAL_I2C_Init+0xd4>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	e009      	b.n	8002064 <HAL_I2C_Init+0xe8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a69      	ldr	r2, [pc, #420]	; (8002200 <HAL_I2C_Init+0x284>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	3301      	adds	r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	495c      	ldr	r1, [pc, #368]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d819      	bhi.n	80020b8 <HAL_I2C_Init+0x13c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002098:	400b      	ands	r3, r1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_I2C_Init+0x138>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e59      	subs	r1, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	e051      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e04f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Init+0x168>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e012      	b.n	800210a <HAL_I2C_Init+0x18e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	0099      	lsls	r1, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x196>
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_I2C_Init+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e58      	subs	r0, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6911      	ldr	r1, [r2, #16]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	000186a0 	.word	0x000186a0
 80021f4:	001e847f 	.word	0x001e847f
 80021f8:	003d08ff 	.word	0x003d08ff
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e101      	b.n	800241a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f008 fb59 	bl	800a8e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002244:	d102      	bne.n	800224c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f002 fb32 	bl	80048ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7c1a      	ldrb	r2, [r3, #16]
 800225e:	f88d 2000 	strb.w	r2, [sp]
 8002262:	3304      	adds	r3, #4
 8002264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002266:	f002 fa11 	bl	800468c <USB_CoreInit>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0ce      	b.n	800241a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fb2a 	bl	80048dc <USB_SetCurrentMode>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0bf      	b.n	800241a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e04a      	b.n	8002336 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3315      	adds	r3, #21
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3314      	adds	r3, #20
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	b298      	uxth	r0, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	332e      	adds	r3, #46	; 0x2e
 80022dc:	4602      	mov	r2, r0
 80022de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3318      	adds	r3, #24
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331c      	adds	r3, #28
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3320      	adds	r3, #32
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3324      	adds	r3, #36	; 0x24
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	3301      	adds	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	791b      	ldrb	r3, [r3, #4]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3af      	bcc.n	80022a0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e044      	b.n	80023d0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3b5      	bcc.n	8002346 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7c1a      	ldrb	r2, [r3, #16]
 80023e2:	f88d 2000 	strb.w	r2, [sp]
 80023e6:	3304      	adds	r3, #4
 80023e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ea:	f002 fac3 	bl	8004974 <USB_DevInit>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e00c      	b.n	800241a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fb07 	bl	8005a26 <USB_DevDisconnect>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_Start+0x1c>
 800243a:	2302      	movs	r3, #2
 800243c:	e022      	b.n	8002484 <HAL_PCD_Start+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fa14 	bl	8004898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fab5 	bl	80059e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fb73 	bl	8005b8e <USB_GetMode>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 848c 	bne.w	8002dc8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fad7 	bl	8005a68 <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8482 	beq.w	8002dc6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fac4 	bl	8005a68 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 0202 	and.w	r2, r2, #2
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fab2 	bl	8005a68 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b10      	cmp	r3, #16
 800250c:	d161      	bne.n	80025d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0210 	bic.w	r2, r2, #16
 800251c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f003 020f 	and.w	r2, r3, #15
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	0c5b      	lsrs	r3, r3, #17
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	2b02      	cmp	r3, #2
 8002548:	d124      	bne.n	8002594 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d035      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f003 f8e9 	bl	8005740 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257a:	441a      	add	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258c:	441a      	add	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	615a      	str	r2, [r3, #20]
 8002592:	e016      	b.n	80025c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	0c5b      	lsrs	r3, r3, #17
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	2b06      	cmp	r3, #6
 800259e:	d110      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80025a6:	2208      	movs	r2, #8
 80025a8:	4619      	mov	r1, r3
 80025aa:	6a38      	ldr	r0, [r7, #32]
 80025ac:	f003 f8c8 	bl	8005740 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025bc:	441a      	add	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0210 	orr.w	r2, r2, #16
 80025d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fa46 	bl	8005a68 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025e6:	f040 80a7 	bne.w	8002738 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fa4b 	bl	8005a8e <USB_ReadDevAllOutEpInterrupt>
 80025f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025fa:	e099      	b.n	8002730 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 808e 	beq.w	8002724 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fa6f 	bl	8005af6 <USB_ReadDevOutEPInterrupt>
 8002618:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fea1 	bl	8003380 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	2308      	movs	r3, #8
 8002658:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 ff77 	bl	8003550 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	461a      	mov	r2, r3
 800267a:	2310      	movs	r3, #16
 800267c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d030      	beq.n	80026ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d109      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f008 fa0e 	bl	800aaf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	2302      	movs	r3, #2
 80026e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002700:	461a      	mov	r2, r3
 8002702:	2320      	movs	r3, #32
 8002704:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3301      	adds	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	f47f af62 	bne.w	80025fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 f993 	bl	8005a68 <USB_ReadInterrupts>
 8002742:	4603      	mov	r3, r0
 8002744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800274c:	f040 80db 	bne.w	8002906 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 f9b4 	bl	8005ac2 <USB_ReadDevAllInEpInterrupt>
 800275a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002760:	e0cd      	b.n	80028fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80c2 	beq.w	80028f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f003 f9da 	bl	8005b32 <USB_ReadDevInEPInterrupt>
 800277e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d057      	beq.n	800283a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	2201      	movs	r2, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69f9      	ldr	r1, [r7, #28]
 80027a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027aa:	4013      	ands	r3, r2
 80027ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	461a      	mov	r2, r3
 80027bc:	2301      	movs	r3, #1
 80027be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	799b      	ldrb	r3, [r3, #6]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d132      	bne.n	800282e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3320      	adds	r3, #32
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4403      	add	r3, r0
 80027e8:	331c      	adds	r3, #28
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4419      	add	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3320      	adds	r3, #32
 80027fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_PCD_IRQHandler+0x3a2>
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002826:	461a      	mov	r2, r3
 8002828:	2101      	movs	r1, #1
 800282a:	f003 f9e1 	bl	8005bf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f008 f8d8 	bl	800a9ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002850:	461a      	mov	r2, r3
 8002852:	2308      	movs	r3, #8
 8002854:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286c:	461a      	mov	r2, r3
 800286e:	2310      	movs	r3, #16
 8002870:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002888:	461a      	mov	r2, r3
 800288a:	2340      	movs	r3, #64	; 0x40
 800288c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289a:	6a38      	ldr	r0, [r7, #32]
 800289c:	f002 f9ce 	bl	8004c3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	3310      	adds	r3, #16
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2200      	movs	r2, #0
 80028c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f008 f925 	bl	800ab18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	2302      	movs	r3, #2
 80028de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fcbb 	bl	8003268 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f af2e 	bne.w	8002762 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 f8ac 	bl	8005a68 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291a:	d122      	bne.n	8002962 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fea1 	bl	800368c <HAL_PCDEx_LPM_Callback>
 800294a:	e002      	b.n	8002952 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f008 f8c3 	bl	800aad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f003 f87e 	bl	8005a68 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002976:	d112      	bne.n	800299e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f008 f87f 	bl	800aa8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800299c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 f860 	bl	8005a68 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	f040 80b7 	bne.w	8002b24 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2110      	movs	r1, #16
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 f933 	bl	8004c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029da:	e046      	b.n	8002a6a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	461a      	mov	r2, r3
 80029ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a00:	0151      	lsls	r1, r2, #5
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	440a      	add	r2, r1
 8002a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	3301      	adds	r3, #1
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d3b2      	bcc.n	80029dc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7bdb      	ldrb	r3, [r3, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 030b 	orr.w	r3, r3, #11
 8002aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f043 030b 	orr.w	r3, r3, #11
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	e015      	b.n	8002aec <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ad6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae6:	f043 030b 	orr.w	r3, r3, #11
 8002aea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002afe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f003 f86e 	bl	8005bf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 ff9d 	bl	8005a68 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b38:	d123      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 f833 	bl	8005baa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 f8f0 	bl	8004d2e <USB_GetDevSpeed>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681c      	ldr	r4, [r3, #0]
 8002b5a:	f001 fa07 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8002b5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b64:	461a      	mov	r2, r3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f001 fdf4 	bl	8004754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f007 ff64 	bl	800aa3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 ff6e 	bl	8005a68 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d10a      	bne.n	8002bac <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f007 ff41 	bl	800aa1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 0208 	and.w	r2, r2, #8
 8002baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 ff59 	bl	8005a68 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d123      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e014      	b.n	8002bfc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb08 	bl	8003206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	791b      	ldrb	r3, [r3, #4]
 8002c00:	461a      	mov	r2, r3
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d3e4      	bcc.n	8002bd2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 ff2b 	bl	8005a68 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1c:	d13c      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e02b      	b.n	8002c7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3318      	adds	r3, #24
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d115      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da12      	bge.n	8002c76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3317      	adds	r3, #23
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fac8 	bl	8003206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3301      	adds	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	791b      	ldrb	r3, [r3, #4]
 8002c80:	461a      	mov	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d3cd      	bcc.n	8002c24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fee3 	bl	8005a68 <USB_ReadInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d156      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cae:	2301      	movs	r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e045      	b.n	8002d40 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d12e      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da2b      	bge.n	8002d3a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002cee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d121      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d36:	6053      	str	r3, [r2, #4]
            break;
 8002d38:	e008      	b.n	8002d4c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	791b      	ldrb	r3, [r3, #4]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d3b3      	bcc.n	8002cb4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fe81 	bl	8005a68 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d10a      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f007 fee2 	bl	800ab3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fe6b 	bl	8005a68 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d115      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f007 fed2 	bl	800ab58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e000      	b.n	8002dc8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002dc6:	bf00      	nop
    }
  }
}
 8002dc8:	3734      	adds	r7, #52	; 0x34
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}

08002dce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_SetAddress+0x1a>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e012      	b.n	8002e0e <HAL_PCD_SetAddress+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 fdca 	bl	8005998 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	4608      	mov	r0, r1
 8002e20:	4611      	mov	r1, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	70fb      	strb	r3, [r7, #3]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	803b      	strh	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0f      	bge.n	8002e5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3310      	adds	r3, #16
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00f      	b.n	8002e7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e88:	883a      	ldrh	r2, [r7, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	78ba      	ldrb	r2, [r7, #2]
 8002e92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_EP_Open+0xaa>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e00e      	b.n	8002ede <HAL_PCD_EP_Open+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 ff52 	bl	8004d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002edc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da0f      	bge.n	8002f1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	3310      	adds	r3, #16
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	705a      	strb	r2, [r3, #1]
 8002f18:	e00f      	b.n	8002f3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_PCD_EP_Close+0x6e>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e00e      	b.n	8002f72 <HAL_PCD_EP_Close+0x8c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 ff90 	bl	8004e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	460b      	mov	r3, r1
 8002f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	799b      	ldrb	r3, [r3, #6]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	799b      	ldrb	r3, [r3, #6]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	f002 f82d 	bl	8005040 <USB_EPStartXfer>

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3310      	adds	r3, #16
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	3304      	adds	r3, #4
 8003046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	b2da      	uxtb	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	799b      	ldrb	r3, [r3, #6]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	461a      	mov	r2, r3
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	f001 ffdb 	bl	8005040 <USB_EPStartXfer>

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	7912      	ldrb	r2, [r2, #4]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04f      	b.n	8003152 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0f      	bge.n	80030da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
 80030d8:	e00d      	b.n	80030f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_PCD_EP_SetStall+0x82>
 8003112:	2302      	movs	r3, #2
 8003114:	e01d      	b.n	8003152 <HAL_PCD_EP_SetStall+0xbe>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fb63 	bl	80057f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7999      	ldrb	r1, [r3, #6]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003142:	461a      	mov	r2, r3
 8003144:	f002 fd54 	bl	8005bf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	7912      	ldrb	r2, [r2, #4]
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e042      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0f      	bge.n	80031a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3310      	adds	r3, #16
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	705a      	strb	r2, [r3, #1]
 800319e:	e00f      	b.n	80031c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_ClrStall+0x86>
 80031dc:	2302      	movs	r3, #2
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fb6c 	bl	80058cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0c      	bge.n	8003234 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 020f 	and.w	r2, r3, #15
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	3310      	adds	r3, #16
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e00c      	b.n	800324e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	4618      	mov	r0, r3
 8003256:	f002 f98b 	bl	8005570 <USB_EPStopXfer>
 800325a:	4603      	mov	r3, r0
 800325c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800325e:	7afb      	ldrb	r3, [r7, #11]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3310      	adds	r3, #16
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d901      	bls.n	80032a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e06b      	b.n	8003378 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d902      	bls.n	80032bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3303      	adds	r3, #3
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032c4:	e02a      	b.n	800331c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3303      	adds	r3, #3
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68d9      	ldr	r1, [r3, #12]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4603      	mov	r3, r0
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f002 f9e0 	bl	80056c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d809      	bhi.n	8003346 <PCD_WriteEmptyTxFifo+0xde>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333a:	429a      	cmp	r2, r3
 800333c:	d203      	bcs.n	8003346 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1bf      	bne.n	80032c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	429a      	cmp	r2, r3
 8003350:	d811      	bhi.n	8003376 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	43db      	mvns	r3, r3
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003372:	4013      	ands	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	333c      	adds	r3, #60	; 0x3c
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	799b      	ldrb	r3, [r3, #6]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d17b      	bne.n	80034ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	4a61      	ldr	r2, [pc, #388]	; (8003548 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f240 80b9 	bls.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80b3 	beq.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e8:	6093      	str	r3, [r2, #8]
 80033ea:	e0a7      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	461a      	mov	r2, r3
 8003404:	2320      	movs	r3, #32
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e098      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8093 	bne.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d90f      	bls.n	800343e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	e07e      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	0159      	lsls	r1, r3, #5
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	440b      	add	r3, r1
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d114      	bne.n	80034a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003488:	461a      	mov	r2, r3
 800348a:	2101      	movs	r1, #1
 800348c:	f002 fbb0 	bl	8005bf0 <USB_EP0_OutStart>
 8003490:	e006      	b.n	80034a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f007 fa84 	bl	800a9b4 <HAL_PCD_DataOutStageCallback>
 80034ac:	e046      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d124      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	e032      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	2320      	movs	r3, #32
 80034f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f007 fa5b 	bl	800a9b4 <HAL_PCD_DataOutStageCallback>
 80034fe:	e01d      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d114      	bne.n	8003530 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003528:	461a      	mov	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f002 fb60 	bl	8005bf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f007 fa3c 	bl	800a9b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	4f54300a 	.word	0x4f54300a
 800354c:	4f54310a 	.word	0x4f54310a

08003550 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d90e      	bls.n	80035a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f007 f9f3 	bl	800a990 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d90c      	bls.n	80035cc <PCD_EP_OutSetupPacket_int+0x7c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	799b      	ldrb	r3, [r3, #6]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d108      	bne.n	80035cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80035c4:	461a      	mov	r2, r3
 80035c6:	2101      	movs	r1, #1
 80035c8:	f002 fb12 	bl	8005bf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	4f54300a 	.word	0x4f54300a

080035dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
 80035e8:	4613      	mov	r3, r2
 80035ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035fa:	883b      	ldrh	r3, [r7, #0]
 80035fc:	0419      	lsls	r1, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	430a      	orrs	r2, r1
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
 8003608:	e028      	b.n	800365c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4413      	add	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e00d      	b.n	800363a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3340      	adds	r3, #64	; 0x40
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	3301      	adds	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	3b01      	subs	r3, #1
 8003640:	429a      	cmp	r2, r3
 8003642:	d3ec      	bcc.n	800361e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003644:	883b      	ldrh	r3, [r7, #0]
 8003646:	0418      	lsls	r0, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	3b01      	subs	r3, #1
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4302      	orrs	r2, r0
 8003654:	3340      	adds	r3, #64	; 0x40
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e267      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e242      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a68      	ldr	r2, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe f92c 	bl	80019b8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe f928 	bl	80019b8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e207      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe f918 	bl	80019b8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe f914 	bl	80019b8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f3      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1c7      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe f8cd 	bl	80019b8 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003822:	f7fe f8c9 	bl	80019b8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1a8      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f8ac 	bl	80019b8 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003864:	f7fe f8a8 	bl	80019b8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e187      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe f88c 	bl	80019b8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe f888 	bl	80019b8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e167      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e01b      	b.n	80038fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe f875 	bl	80019b8 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e00e      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe f871 	bl	80019b8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d907      	bls.n	80038f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e150      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470000 	.word	0x42470000
 80038ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8097 	beq.w	8003a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a7c      	ldr	r2, [pc, #496]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b77      	ldr	r3, [pc, #476]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b74      	ldr	r3, [pc, #464]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe f831 	bl	80019b8 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe f82d 	bl	80019b8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e10c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x2ea>
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 80039b0:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a54      	ldr	r2, [pc, #336]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fff2 	bl	80019b8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fd ffee 	bl	80019b8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0cb      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fd ffdc 	bl	80019b8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd ffd8 	bl	80019b8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0b5      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ee      	bne.n	8003a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a1 	beq.w	8003b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d05c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d141      	bne.n	8003ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd ffac 	bl	80019b8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd ffa8 	bl	80019b8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e087      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	491b      	ldr	r1, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fd ff81 	bl	80019b8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fd ff7d 	bl	80019b8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e05c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x416>
 8003ad8:	e054      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd ff6a 	bl	80019b8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd ff66 	bl	80019b8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e045      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cc      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90c      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e067      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4934      	ldr	r1, [pc, #208]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fd fe98 	bl	80019b8 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd fe94 	bl	80019b8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d20c      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fc66 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0800de60 	.word	0x0800de60
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b094      	sub	sp, #80	; 0x50
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d70:	2300      	movs	r3, #0
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b79      	ldr	r3, [pc, #484]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80e1 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e0db      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d98:	e0db      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9e:	e0d8      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003daa:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d063      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dca:	2300      	movs	r3, #0
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	f04f 0000 	mov.w	r0, #0
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	0159      	lsls	r1, r3, #5
 8003de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de4:	0150      	lsls	r0, r2, #5
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4621      	mov	r1, r4
 8003dec:	1a51      	subs	r1, r2, r1
 8003dee:	6139      	str	r1, [r7, #16]
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb63 0301 	sbc.w	r3, r3, r1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e04:	4659      	mov	r1, fp
 8003e06:	018b      	lsls	r3, r1, #6
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0e:	4651      	mov	r1, sl
 8003e10:	018a      	lsls	r2, r1, #6
 8003e12:	4651      	mov	r1, sl
 8003e14:	ebb2 0801 	subs.w	r8, r2, r1
 8003e18:	4659      	mov	r1, fp
 8003e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	eb18 0303 	adds.w	r3, r8, r3
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	462b      	mov	r3, r5
 8003e40:	eb49 0303 	adc.w	r3, r9, r3
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e52:	4629      	mov	r1, r5
 8003e54:	024b      	lsls	r3, r1, #9
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	024a      	lsls	r2, r1, #9
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e70:	f7fc fe9a 	bl	8000ba8 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7c:	e058      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	2200      	movs	r2, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	4611      	mov	r1, r2
 8003e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	f04f 0000 	mov.w	r0, #0
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	0159      	lsls	r1, r3, #5
 8003ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eaa:	0150      	lsls	r0, r2, #5
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	eb45 0303 	adc.w	r3, r5, r3
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f06:	4629      	mov	r1, r5
 8003f08:	028b      	lsls	r3, r1, #10
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f10:	4621      	mov	r1, r4
 8003f12:	028a      	lsls	r2, r1, #10
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	61fa      	str	r2, [r7, #28]
 8003f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f24:	f7fc fe40 	bl	8000ba8 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3750      	adds	r7, #80	; 0x50
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	00f42400 	.word	0x00f42400
 8003f68:	007a1200 	.word	0x007a1200

08003f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000

08003f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f88:	f7ff fff0 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0a9b      	lsrs	r3, r3, #10
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	0800de70 	.word	0x0800de70

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb0:	f7ff ffdc 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0b5b      	lsrs	r3, r3, #13
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	0800de70 	.word	0x0800de70

08003fd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_RCC_GetClockConfig+0x60>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	40023c00 	.word	0x40023c00

08004038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e07b      	b.n	8004142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405a:	d009      	beq.n	8004070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
 8004062:	e005      	b.n	8004070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fa76 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	ea42 0103 	orr.w	r1, r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0104 	and.w	r1, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0210 	and.w	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e041      	b.n	80041e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f839 	bl	80041e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 f9bf 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04e      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d01d      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_TIM_Base_Start_IT+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x80>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d111      	bne.n	80042a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b06      	cmp	r3, #6
 800428c:	d010      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	e007      	b.n	80042b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40001800 	.word	0x40001800

080042dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f8d2 	bl	80044d0 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8c4 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8d5 	bl	80044e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01b      	beq.n	800438c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0204 	mvn.w	r2, #4
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8ac 	bl	80044d0 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f89e 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8af 	bl	80044e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d020      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0208 	mvn.w	r2, #8
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2204      	movs	r2, #4
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f886 	bl	80044d0 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f878 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f889 	bl	80044e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d020      	beq.n	8004424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2208      	movs	r2, #8
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f860 	bl	80044d0 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f852 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f863 	bl	80044e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0201 	mvn.w	r2, #1
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd f80e 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f906 	bl	8004678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f834 	bl	80044f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8d8 	bl	8004664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a46      	ldr	r2, [pc, #280]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d00f      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a43      	ldr	r2, [pc, #268]	; (800463c <TIM_Base_SetConfig+0x130>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a42      	ldr	r2, [pc, #264]	; (8004640 <TIM_Base_SetConfig+0x134>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a41      	ldr	r2, [pc, #260]	; (8004644 <TIM_Base_SetConfig+0x138>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d027      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a32      	ldr	r2, [pc, #200]	; (800463c <TIM_Base_SetConfig+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d023      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a31      	ldr	r2, [pc, #196]	; (8004640 <TIM_Base_SetConfig+0x134>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a30      	ldr	r2, [pc, #192]	; (8004644 <TIM_Base_SetConfig+0x138>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2e      	ldr	r2, [pc, #184]	; (800464c <TIM_Base_SetConfig+0x140>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2d      	ldr	r2, [pc, #180]	; (8004650 <TIM_Base_SetConfig+0x144>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <TIM_Base_SetConfig+0x148>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <TIM_Base_SetConfig+0x14c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	; (800465c <TIM_Base_SetConfig+0x150>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <TIM_Base_SetConfig+0x154>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0xf8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]
  }
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40010400 	.word	0x40010400
 800464c:	40014000 	.word	0x40014000
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800
 8004658:	40001800 	.word	0x40001800
 800465c:	40001c00 	.word	0x40001c00
 8004660:	40002000 	.word	0x40002000

08004664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800468c:	b084      	sub	sp, #16
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	f107 001c 	add.w	r0, r7, #28
 800469a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800469e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d123      	bne.n	80046ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fae2 	bl	8005cac <USB_CoreReset>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e01b      	b.n	8004726 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 fad6 	bl	8005cac <USB_CoreReset>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004704:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
 8004718:	e005      	b.n	8004726 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004726:	7fbb      	ldrb	r3, [r7, #30]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d10b      	bne.n	8004744 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f043 0206 	orr.w	r2, r3, #6
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004750:	b004      	add	sp, #16
 8004752:	4770      	bx	lr

08004754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d165      	bne.n	8004834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a41      	ldr	r2, [pc, #260]	; (8004870 <USB_SetTurnaroundTime+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d906      	bls.n	800477e <USB_SetTurnaroundTime+0x2a>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a40      	ldr	r2, [pc, #256]	; (8004874 <USB_SetTurnaroundTime+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d202      	bcs.n	800477e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004778:	230f      	movs	r3, #15
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e062      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <USB_SetTurnaroundTime+0x120>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d306      	bcc.n	8004794 <USB_SetTurnaroundTime+0x40>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <USB_SetTurnaroundTime+0x124>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d202      	bcs.n	8004794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800478e:	230e      	movs	r3, #14
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e057      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <USB_SetTurnaroundTime+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d306      	bcc.n	80047aa <USB_SetTurnaroundTime+0x56>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a37      	ldr	r2, [pc, #220]	; (800487c <USB_SetTurnaroundTime+0x128>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d202      	bcs.n	80047aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047a4:	230d      	movs	r3, #13
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e04c      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a33      	ldr	r2, [pc, #204]	; (800487c <USB_SetTurnaroundTime+0x128>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d306      	bcc.n	80047c0 <USB_SetTurnaroundTime+0x6c>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a32      	ldr	r2, [pc, #200]	; (8004880 <USB_SetTurnaroundTime+0x12c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d802      	bhi.n	80047c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047ba:	230c      	movs	r3, #12
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e041      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a2f      	ldr	r2, [pc, #188]	; (8004880 <USB_SetTurnaroundTime+0x12c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d906      	bls.n	80047d6 <USB_SetTurnaroundTime+0x82>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a2e      	ldr	r2, [pc, #184]	; (8004884 <USB_SetTurnaroundTime+0x130>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d802      	bhi.n	80047d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047d0:	230b      	movs	r3, #11
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e036      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <USB_SetTurnaroundTime+0x130>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d906      	bls.n	80047ec <USB_SetTurnaroundTime+0x98>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a29      	ldr	r2, [pc, #164]	; (8004888 <USB_SetTurnaroundTime+0x134>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d802      	bhi.n	80047ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047e6:	230a      	movs	r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e02b      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4a26      	ldr	r2, [pc, #152]	; (8004888 <USB_SetTurnaroundTime+0x134>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d906      	bls.n	8004802 <USB_SetTurnaroundTime+0xae>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a25      	ldr	r2, [pc, #148]	; (800488c <USB_SetTurnaroundTime+0x138>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d202      	bcs.n	8004802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047fc:	2309      	movs	r3, #9
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e020      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a21      	ldr	r2, [pc, #132]	; (800488c <USB_SetTurnaroundTime+0x138>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d306      	bcc.n	8004818 <USB_SetTurnaroundTime+0xc4>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a20      	ldr	r2, [pc, #128]	; (8004890 <USB_SetTurnaroundTime+0x13c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004812:	2308      	movs	r3, #8
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e015      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <USB_SetTurnaroundTime+0x13c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d906      	bls.n	800482e <USB_SetTurnaroundTime+0xda>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <USB_SetTurnaroundTime+0x140>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d202      	bcs.n	800482e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004828:	2307      	movs	r3, #7
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e00a      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800482e:	2306      	movs	r3, #6
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e007      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800483a:	2309      	movs	r3, #9
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e001      	b.n	8004844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004840:	2309      	movs	r3, #9
 8004842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800485c:	431a      	orrs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	00d8acbf 	.word	0x00d8acbf
 8004874:	00e4e1c0 	.word	0x00e4e1c0
 8004878:	00f42400 	.word	0x00f42400
 800487c:	01067380 	.word	0x01067380
 8004880:	011a499f 	.word	0x011a499f
 8004884:	01312cff 	.word	0x01312cff
 8004888:	014ca43f 	.word	0x014ca43f
 800488c:	016e3600 	.word	0x016e3600
 8004890:	01a6ab1f 	.word	0x01a6ab1f
 8004894:	01e84800 	.word	0x01e84800

08004898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 0201 	bic.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d115      	bne.n	800492a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800490a:	200a      	movs	r0, #10
 800490c:	f7fd f860 	bl	80019d0 <HAL_Delay>
      ms += 10U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	330a      	adds	r3, #10
 8004914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f001 f939 	bl	8005b8e <USB_GetMode>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d01e      	beq.n	8004960 <USB_SetCurrentMode+0x84>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2bc7      	cmp	r3, #199	; 0xc7
 8004926:	d9f0      	bls.n	800490a <USB_SetCurrentMode+0x2e>
 8004928:	e01a      	b.n	8004960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d115      	bne.n	800495c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800493c:	200a      	movs	r0, #10
 800493e:	f7fd f847 	bl	80019d0 <HAL_Delay>
      ms += 10U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	330a      	adds	r3, #10
 8004946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f920 	bl	8005b8e <USB_GetMode>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <USB_SetCurrentMode+0x84>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2bc7      	cmp	r3, #199	; 0xc7
 8004958:	d9f0      	bls.n	800493c <USB_SetCurrentMode+0x60>
 800495a:	e001      	b.n	8004960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e005      	b.n	800496c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2bc8      	cmp	r3, #200	; 0xc8
 8004964:	d101      	bne.n	800496a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004974:	b084      	sub	sp, #16
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	e009      	b.n	80049a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3340      	adds	r3, #64	; 0x40
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	2200      	movs	r2, #0
 80049a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b0e      	cmp	r3, #14
 80049ac:	d9f2      	bls.n	8004994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11c      	bne.n	80049f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
 80049ee:	e00b      	b.n	8004a08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a24:	2100      	movs	r1, #0
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f968 	bl	8004cfc <USB_SetDevSpeed>
 8004a2c:	e008      	b.n	8004a40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a2e:	2101      	movs	r1, #1
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f963 	bl	8004cfc <USB_SetDevSpeed>
 8004a36:	e003      	b.n	8004a40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a38:	2103      	movs	r1, #3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f95e 	bl	8004cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a40:	2110      	movs	r1, #16
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8fa 	bl	8004c3c <USB_FlushTxFifo>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f924 	bl	8004ca0 <USB_FlushRxFifo>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e043      	b.n	8004b14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa2:	d118      	bne.n	8004ad6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e013      	b.n	8004ae8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e008      	b.n	8004ae8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	461a      	mov	r2, r3
 8004b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	3301      	adds	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b18:	461a      	mov	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d3b5      	bcc.n	8004a8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e043      	b.n	8004bae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3c:	d118      	bne.n	8004b70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	461a      	mov	r2, r3
 8004b52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e013      	b.n	8004b82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e008      	b.n	8004b82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3301      	adds	r3, #1
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d3b5      	bcc.n	8004b26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f043 0210 	orr.w	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <USB_DevInit+0x2c4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bfc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f043 0208 	orr.w	r2, r3, #8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d107      	bne.n	8004c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c34:	b004      	add	sp, #16
 8004c36:	4770      	bx	lr
 8004c38:	803c3800 	.word	0x803c3800

08004c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c56:	d901      	bls.n	8004c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e01b      	b.n	8004c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	daf2      	bge.n	8004c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	019b      	lsls	r3, r3, #6
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c80:	d901      	bls.n	8004c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e006      	b.n	8004c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d0f0      	beq.n	8004c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e018      	b.n	8004cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	daf2      	bge.n	8004cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2210      	movs	r2, #16
 8004cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cdc:	d901      	bls.n	8004ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e006      	b.n	8004cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d0f0      	beq.n	8004cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]
 8004d52:	e00a      	b.n	8004d6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d002      	beq.n	8004d60 <USB_GetDevSpeed+0x32>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d102      	bne.n	8004d66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d60:	2302      	movs	r3, #2
 8004d62:	75fb      	strb	r3, [r7, #23]
 8004d64:	e001      	b.n	8004d6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d66:	230f      	movs	r3, #15
 8004d68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d13a      	bne.n	8004e0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d155      	bne.n	8004e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004de8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004df0:	4313      	orrs	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e036      	b.n	8004e78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11a      	bne.n	8004e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	791b      	ldrb	r3, [r3, #4]
 8004e5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d161      	bne.n	8004f68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eba:	d11f      	bne.n	8004efc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f40:	4013      	ands	r3, r2
 8004f42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	0159      	lsls	r1, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4b35      	ldr	r3, [pc, #212]	; (8005038 <USB_DeactivateEndpoint+0x1b0>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]
 8004f66:	e060      	b.n	800502a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f7e:	d11f      	bne.n	8004fc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005004:	4013      	ands	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	440b      	add	r3, r1
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	4619      	mov	r1, r3
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <USB_DeactivateEndpoint+0x1b4>)
 8005026:	4013      	ands	r3, r2
 8005028:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	ec337800 	.word	0xec337800
 800503c:	eff37800 	.word	0xeff37800

08005040 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b01      	cmp	r3, #1
 800505e:	f040 817a 	bne.w	8005356 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d132      	bne.n	80050d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005084:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005088:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800508c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	0cdb      	lsrs	r3, r3, #19
 80050ca:	04db      	lsls	r3, r3, #19
 80050cc:	6113      	str	r3, [r2, #16]
 80050ce:	e092      	b.n	80051f6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	0cdb      	lsrs	r3, r3, #19
 80050ec:	04db      	lsls	r3, r3, #19
 80050ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800510e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005112:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11a      	bne.n	8005150 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514c:	6113      	str	r3, [r2, #16]
 800514e:	e01b      	b.n	8005188 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6919      	ldr	r1, [r3, #16]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	440b      	add	r3, r1
 8005168:	1e59      	subs	r1, r3, #1
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005172:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005174:	4ba2      	ldr	r3, [pc, #648]	; (8005400 <USB_EPStartXfer+0x3c0>)
 8005176:	400b      	ands	r3, r1
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	0148      	lsls	r0, r1, #5
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	4401      	add	r1, r0
 8005180:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	0148      	lsls	r0, r1, #5
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	4401      	add	r1, r0
 80051a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051aa:	4313      	orrs	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11f      	bne.n	80051f6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d14b      	bne.n	8005294 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	461a      	mov	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	791b      	ldrb	r3, [r3, #4]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d128      	bne.n	8005272 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d110      	bne.n	8005252 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e00f      	b.n	8005272 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e165      	b.n	8005560 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	791b      	ldrb	r3, [r3, #4]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d015      	beq.n	80052e8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 814d 	beq.w	8005560 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e2:	4313      	orrs	r3, r2
 80052e4:	634b      	str	r3, [r1, #52]	; 0x34
 80052e6:	e13b      	b.n	8005560 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e00f      	b.n	800533a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005338:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68d9      	ldr	r1, [r3, #12]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	b298      	uxth	r0, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4603      	mov	r3, r0
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f9b8 	bl	80056c4 <USB_WritePacket>
 8005354:	e104      	b.n	8005560 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	0cdb      	lsrs	r3, r3, #19
 8005372:	04db      	lsls	r3, r3, #19
 8005374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005398:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d131      	bne.n	8005404 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ce:	69b9      	ldr	r1, [r7, #24]
 80053d0:	0148      	lsls	r0, r1, #5
 80053d2:	69f9      	ldr	r1, [r7, #28]
 80053d4:	4401      	add	r1, r0
 80053d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053da:	4313      	orrs	r3, r2
 80053dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053fc:	6113      	str	r3, [r2, #16]
 80053fe:	e061      	b.n	80054c4 <USB_EPStartXfer+0x484>
 8005400:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d123      	bne.n	8005454 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005422:	69b9      	ldr	r1, [r7, #24]
 8005424:	0148      	lsls	r0, r1, #5
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	4401      	add	r1, r0
 800542a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800542e:	4313      	orrs	r3, r2
 8005430:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005450:	6113      	str	r3, [r2, #16]
 8005452:	e037      	b.n	80054c4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4413      	add	r3, r2
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	8afa      	ldrh	r2, [r7, #22]
 8005470:	fb03 f202 	mul.w	r2, r3, r2
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	8afb      	ldrh	r3, [r7, #22]
 8005488:	04d9      	lsls	r1, r3, #19
 800548a:	4b38      	ldr	r3, [pc, #224]	; (800556c <USB_EPStartXfer+0x52c>)
 800548c:	400b      	ands	r3, r1
 800548e:	69b9      	ldr	r1, [r7, #24]
 8005490:	0148      	lsls	r0, r1, #5
 8005492:	69f9      	ldr	r1, [r7, #28]
 8005494:	4401      	add	r1, r0
 8005496:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	0148      	lsls	r0, r1, #5
 80054b8:	69f9      	ldr	r1, [r7, #28]
 80054ba:	4401      	add	r1, r0
 80054bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c0:	4313      	orrs	r3, r2
 80054c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10d      	bne.n	80054e6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	460a      	mov	r2, r1
 80054e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	791b      	ldrb	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d128      	bne.n	8005540 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d110      	bne.n	8005520 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e00f      	b.n	8005540 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800555e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	1ff80000 	.word	0x1ff80000

08005570 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d14a      	bne.n	8005624 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a6:	f040 8086 	bne.w	80056b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	7812      	ldrb	r2, [r2, #0]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80055fe:	4293      	cmp	r3, r2
 8005600:	d902      	bls.n	8005608 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
          break;
 8005606:	e056      	b.n	80056b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005620:	d0e7      	beq.n	80055f2 <USB_EPStopXfer+0x82>
 8005622:	e048      	b.n	80056b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563c:	d13b      	bne.n	80056b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005684:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005692:	4293      	cmp	r3, r2
 8005694:	d902      	bls.n	800569c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
          break;
 800569a:	e00c      	b.n	80056b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b4:	d0e7      	beq.n	8005686 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	460b      	mov	r3, r1
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d123      	bne.n	8005732 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ea:	88bb      	ldrh	r3, [r7, #4]
 80056ec:	3303      	adds	r3, #3
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e018      	b.n	800572a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	031a      	lsls	r2, r3, #12
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005704:	461a      	mov	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3301      	adds	r3, #1
 8005710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3301      	adds	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	3301      	adds	r3, #1
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d3e2      	bcc.n	80056f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3724      	adds	r7, #36	; 0x24
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005740:	b480      	push	{r7}
 8005742:	b08b      	sub	sp, #44	; 0x2c
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	b29b      	uxth	r3, r3
 800575c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	e014      	b.n	8005796 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	601a      	str	r2, [r3, #0]
    pDest++;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	3301      	adds	r3, #1
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	3301      	adds	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	3301      	adds	r3, #1
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	3301      	adds	r3, #1
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	3301      	adds	r3, #1
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3e6      	bcc.n	800576c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01e      	beq.n	80057e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ae:	461a      	mov	r2, r3
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	701a      	strb	r2, [r3, #0]
      i++;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	3301      	adds	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	3301      	adds	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057d6:	8bfb      	ldrh	r3, [r7, #30]
 80057d8:	3b01      	subs	r3, #1
 80057da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057dc:	8bfb      	ldrh	r3, [r7, #30]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1ea      	bne.n	80057b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	372c      	adds	r7, #44	; 0x2c
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d12c      	bne.n	8005866 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	db12      	blt.n	8005844 <USB_EPSetStall+0x54>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005842:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e02b      	b.n	80058be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	db12      	blt.n	800589e <USB_EPSetStall+0xae>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800589c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d128      	bne.n	800593a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005906:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	791b      	ldrb	r3, [r3, #4]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d003      	beq.n	8005918 <USB_EPClearStall+0x4c>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d138      	bne.n	800598a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e027      	b.n	800598a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005958:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	791b      	ldrb	r3, [r3, #4]
 800595e:	2b03      	cmp	r3, #3
 8005960:	d003      	beq.n	800596a <USB_EPClearStall+0x9e>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d10f      	bne.n	800598a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005988:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a12:	f023 0302 	bic.w	r3, r3, #2
 8005a16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	0c1b      	lsrs	r3, r3, #16
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	b29b      	uxth	r3, r3
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b24:	68bb      	ldr	r3, [r7, #8]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b62:	01db      	lsls	r3, r3, #7
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b80:	68bb      	ldr	r3, [r7, #8]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bc8:	f023 0307 	bic.w	r3, r3, #7
 8005bcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	333c      	adds	r3, #60	; 0x3c
 8005c06:	3304      	adds	r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <USB_EP0_OutStart+0xb8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d90a      	bls.n	8005c2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c24:	d101      	bne.n	8005c2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e037      	b.n	8005c9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f043 0318 	orr.w	r3, r3, #24
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10f      	bne.n	8005c98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	4f54300a 	.word	0x4f54300a

08005cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cc4:	d901      	bls.n	8005cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e01b      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	daf2      	bge.n	8005cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cee:	d901      	bls.n	8005cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d0f0      	beq.n	8005ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d20:	f005 f8b2 	bl	800ae88 <USBD_static_malloc>
 8005d24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	32b0      	adds	r2, #176	; 0xb0
 8005d36:	2100      	movs	r1, #0
 8005d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0d4      	b.n	8005eea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d44:	2100      	movs	r1, #0
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f005 fe6d 	bl	800ba26 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	32b0      	adds	r2, #176	; 0xb0
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	32b0      	adds	r2, #176	; 0xb0
 8005d66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7c1b      	ldrb	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d138      	bne.n	8005dea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d78:	4b5e      	ldr	r3, [pc, #376]	; (8005ef4 <USBD_CDC_Init+0x1e4>)
 8005d7a:	7819      	ldrb	r1, [r3, #0]
 8005d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d80:	2202      	movs	r2, #2
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f004 ff5d 	bl	800ac42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d88:	4b5a      	ldr	r3, [pc, #360]	; (8005ef4 <USBD_CDC_Init+0x1e4>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 020f 	and.w	r2, r3, #15
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	3324      	adds	r3, #36	; 0x24
 8005d9e:	2201      	movs	r2, #1
 8005da0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005da2:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005da4:	7819      	ldrb	r1, [r3, #0]
 8005da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005daa:	2202      	movs	r2, #2
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f004 ff48 	bl	800ac42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005db2:	4b51      	ldr	r3, [pc, #324]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	f003 020f 	and.w	r2, r3, #15
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dca:	2201      	movs	r2, #1
 8005dcc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dce:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <USBD_CDC_Init+0x1ec>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f003 020f 	and.w	r2, r3, #15
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	3326      	adds	r3, #38	; 0x26
 8005de4:	2210      	movs	r2, #16
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	e035      	b.n	8005e56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dea:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <USBD_CDC_Init+0x1e4>)
 8005dec:	7819      	ldrb	r1, [r3, #0]
 8005dee:	2340      	movs	r3, #64	; 0x40
 8005df0:	2202      	movs	r2, #2
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f004 ff25 	bl	800ac42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005df8:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <USBD_CDC_Init+0x1e4>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 020f 	and.w	r2, r3, #15
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3324      	adds	r3, #36	; 0x24
 8005e0e:	2201      	movs	r2, #1
 8005e10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005e14:	7819      	ldrb	r1, [r3, #0]
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	2202      	movs	r2, #2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f004 ff11 	bl	800ac42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e20:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e38:	2201      	movs	r2, #1
 8005e3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e3c:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <USBD_CDC_Init+0x1ec>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 020f 	and.w	r2, r3, #15
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3326      	adds	r3, #38	; 0x26
 8005e52:	2210      	movs	r2, #16
 8005e54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e56:	4b29      	ldr	r3, [pc, #164]	; (8005efc <USBD_CDC_Init+0x1ec>)
 8005e58:	7819      	ldrb	r1, [r3, #0]
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f004 feef 	bl	800ac42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <USBD_CDC_Init+0x1ec>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	33b0      	adds	r3, #176	; 0xb0
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e018      	b.n	8005eea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7c1b      	ldrb	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005ec2:	7819      	ldrb	r1, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f004 ffa6 	bl	800ae20 <USBD_LL_PrepareReceive>
 8005ed4:	e008      	b.n	8005ee8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <USBD_CDC_Init+0x1e8>)
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee0:	2340      	movs	r3, #64	; 0x40
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f004 ff9c 	bl	800ae20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000093 	.word	0x20000093
 8005ef8:	20000094 	.word	0x20000094
 8005efc:	20000095 	.word	0x20000095

08005f00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f0c:	4b3a      	ldr	r3, [pc, #232]	; (8005ff8 <USBD_CDC_DeInit+0xf8>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f004 febb 	bl	800ac8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f18:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <USBD_CDC_DeInit+0xf8>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 020f 	and.w	r2, r3, #15
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	2200      	movs	r2, #0
 8005f30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f32:	4b32      	ldr	r3, [pc, #200]	; (8005ffc <USBD_CDC_DeInit+0xfc>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f004 fea8 	bl	800ac8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <USBD_CDC_DeInit+0xfc>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f56:	2200      	movs	r2, #0
 8005f58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <USBD_CDC_DeInit+0x100>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f004 fe94 	bl	800ac8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f66:	4b26      	ldr	r3, [pc, #152]	; (8006000 <USBD_CDC_DeInit+0x100>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f80:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <USBD_CDC_DeInit+0x100>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 020f 	and.w	r2, r3, #15
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	3326      	adds	r3, #38	; 0x26
 8005f96:	2200      	movs	r2, #0
 8005f98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	32b0      	adds	r2, #176	; 0xb0
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01f      	beq.n	8005fec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	33b0      	adds	r3, #176	; 0xb0
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32b0      	adds	r2, #176	; 0xb0
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f004 ff68 	bl	800aea4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	32b0      	adds	r2, #176	; 0xb0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000093 	.word	0x20000093
 8005ffc:	20000094 	.word	0x20000094
 8006000:	20000095 	.word	0x20000095

08006004 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32b0      	adds	r2, #176	; 0xb0
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006030:	2303      	movs	r3, #3
 8006032:	e0bf      	b.n	80061b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800603c:	2b00      	cmp	r3, #0
 800603e:	d050      	beq.n	80060e2 <USBD_CDC_Setup+0xde>
 8006040:	2b20      	cmp	r3, #32
 8006042:	f040 80af 	bne.w	80061a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d03a      	beq.n	80060c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b25b      	sxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	da1b      	bge.n	8006090 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	33b0      	adds	r3, #176	; 0xb0
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800606e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	88d2      	ldrh	r2, [r2, #6]
 8006074:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	88db      	ldrh	r3, [r3, #6]
 800607a:	2b07      	cmp	r3, #7
 800607c:	bf28      	it	cs
 800607e:	2307      	movcs	r3, #7
 8006080:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	89fa      	ldrh	r2, [r7, #14]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fd89 	bl	8007ba0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800608e:	e090      	b.n	80061b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785a      	ldrb	r2, [r3, #1]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	88db      	ldrh	r3, [r3, #6]
 800609e:	2b3f      	cmp	r3, #63	; 0x3f
 80060a0:	d803      	bhi.n	80060aa <USBD_CDC_Setup+0xa6>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	88db      	ldrh	r3, [r3, #6]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	e000      	b.n	80060ac <USBD_CDC_Setup+0xa8>
 80060aa:	2240      	movs	r2, #64	; 0x40
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060b2:	6939      	ldr	r1, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060ba:	461a      	mov	r2, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fd9b 	bl	8007bf8 <USBD_CtlPrepareRx>
      break;
 80060c2:	e076      	b.n	80061b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	33b0      	adds	r3, #176	; 0xb0
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	7850      	ldrb	r0, [r2, #1]
 80060da:	2200      	movs	r2, #0
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	4798      	blx	r3
      break;
 80060e0:	e067      	b.n	80061b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b0b      	cmp	r3, #11
 80060e8:	d851      	bhi.n	800618e <USBD_CDC_Setup+0x18a>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <USBD_CDC_Setup+0xec>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006121 	.word	0x08006121
 80060f4:	0800619d 	.word	0x0800619d
 80060f8:	0800618f 	.word	0x0800618f
 80060fc:	0800618f 	.word	0x0800618f
 8006100:	0800618f 	.word	0x0800618f
 8006104:	0800618f 	.word	0x0800618f
 8006108:	0800618f 	.word	0x0800618f
 800610c:	0800618f 	.word	0x0800618f
 8006110:	0800618f 	.word	0x0800618f
 8006114:	0800618f 	.word	0x0800618f
 8006118:	0800614b 	.word	0x0800614b
 800611c:	08006175 	.word	0x08006175
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b03      	cmp	r3, #3
 800612a:	d107      	bne.n	800613c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800612c:	f107 030a 	add.w	r3, r7, #10
 8006130:	2202      	movs	r2, #2
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fd33 	bl	8007ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800613a:	e032      	b.n	80061a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fcbd 	bl	8007abe <USBD_CtlError>
            ret = USBD_FAIL;
 8006144:	2303      	movs	r3, #3
 8006146:	75fb      	strb	r3, [r7, #23]
          break;
 8006148:	e02b      	b.n	80061a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d107      	bne.n	8006166 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006156:	f107 030d 	add.w	r3, r7, #13
 800615a:	2201      	movs	r2, #1
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fd1e 	bl	8007ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006164:	e01d      	b.n	80061a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 fca8 	bl	8007abe <USBD_CtlError>
            ret = USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	75fb      	strb	r3, [r7, #23]
          break;
 8006172:	e016      	b.n	80061a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b03      	cmp	r3, #3
 800617e:	d00f      	beq.n	80061a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fc9b 	bl	8007abe <USBD_CtlError>
            ret = USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800618c:	e008      	b.n	80061a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fc94 	bl	8007abe <USBD_CtlError>
          ret = USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	75fb      	strb	r3, [r7, #23]
          break;
 800619a:	e002      	b.n	80061a2 <USBD_CDC_Setup+0x19e>
          break;
 800619c:	bf00      	nop
 800619e:	e008      	b.n	80061b2 <USBD_CDC_Setup+0x1ae>
          break;
 80061a0:	bf00      	nop
      }
      break;
 80061a2:	e006      	b.n	80061b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fc89 	bl	8007abe <USBD_CtlError>
      ret = USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	32b0      	adds	r2, #176	; 0xb0
 80061da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e065      	b.n	80062b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	32b0      	adds	r2, #176	; 0xb0
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	3318      	adds	r3, #24
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d02f      	beq.n	8006270 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	3318      	adds	r3, #24
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 010f 	and.w	r1, r3, #15
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	460b      	mov	r3, r1
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4403      	add	r3, r0
 8006238:	331c      	adds	r3, #28
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006246:	2b00      	cmp	r3, #0
 8006248:	d112      	bne.n	8006270 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3318      	adds	r3, #24
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006262:	78f9      	ldrb	r1, [r7, #3]
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f004 fdb8 	bl	800adde <USBD_LL_Transmit>
 800626e:	e01f      	b.n	80062b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	33b0      	adds	r3, #176	; 0xb0
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	33b0      	adds	r3, #176	; 0xb0
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	32b0      	adds	r2, #176	; 0xb0
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	32b0      	adds	r2, #176	; 0xb0
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e01a      	b.n	8006322 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f004 fdb6 	bl	800ae62 <USBD_LL_GetRxDataSize>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	33b0      	adds	r3, #176	; 0xb0
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800631c:	4611      	mov	r1, r2
 800631e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	32b0      	adds	r2, #176	; 0xb0
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	e025      	b.n	8006398 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	33b0      	adds	r3, #176	; 0xb0
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <USBD_CDC_EP0_RxReady+0x6c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006366:	2bff      	cmp	r3, #255	; 0xff
 8006368:	d015      	beq.n	8006396 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	33b0      	adds	r3, #176	; 0xb0
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006382:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800638a:	b292      	uxth	r2, r2
 800638c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	22ff      	movs	r2, #255	; 0xff
 8006392:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063a8:	2182      	movs	r1, #130	; 0x82
 80063aa:	4818      	ldr	r0, [pc, #96]	; (800640c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063ac:	f000 fd4f 	bl	8006e4e <USBD_GetEpDesc>
 80063b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063b2:	2101      	movs	r1, #1
 80063b4:	4815      	ldr	r0, [pc, #84]	; (800640c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063b6:	f000 fd4a 	bl	8006e4e <USBD_GetEpDesc>
 80063ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063bc:	2181      	movs	r1, #129	; 0x81
 80063be:	4813      	ldr	r0, [pc, #76]	; (800640c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063c0:	f000 fd45 	bl	8006e4e <USBD_GetEpDesc>
 80063c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2210      	movs	r2, #16
 80063d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2200      	movs	r2, #0
 80063dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e0:	711a      	strb	r2, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f4:	711a      	strb	r2, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2243      	movs	r2, #67	; 0x43
 80063fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006400:	4b02      	ldr	r3, [pc, #8]	; (800640c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000050 	.word	0x20000050

08006410 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006418:	2182      	movs	r1, #130	; 0x82
 800641a:	4818      	ldr	r0, [pc, #96]	; (800647c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800641c:	f000 fd17 	bl	8006e4e <USBD_GetEpDesc>
 8006420:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006422:	2101      	movs	r1, #1
 8006424:	4815      	ldr	r0, [pc, #84]	; (800647c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006426:	f000 fd12 	bl	8006e4e <USBD_GetEpDesc>
 800642a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800642c:	2181      	movs	r1, #129	; 0x81
 800642e:	4813      	ldr	r0, [pc, #76]	; (800647c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006430:	f000 fd0d 	bl	8006e4e <USBD_GetEpDesc>
 8006434:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2210      	movs	r2, #16
 8006440:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2200      	movs	r2, #0
 800644c:	711a      	strb	r2, [r3, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f042 0202 	orr.w	r2, r2, #2
 8006454:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	711a      	strb	r2, [r3, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f042 0202 	orr.w	r2, r2, #2
 8006468:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2243      	movs	r2, #67	; 0x43
 800646e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006470:	4b02      	ldr	r3, [pc, #8]	; (800647c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000050 	.word	0x20000050

08006480 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006488:	2182      	movs	r1, #130	; 0x82
 800648a:	4818      	ldr	r0, [pc, #96]	; (80064ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800648c:	f000 fcdf 	bl	8006e4e <USBD_GetEpDesc>
 8006490:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006492:	2101      	movs	r1, #1
 8006494:	4815      	ldr	r0, [pc, #84]	; (80064ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006496:	f000 fcda 	bl	8006e4e <USBD_GetEpDesc>
 800649a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800649c:	2181      	movs	r1, #129	; 0x81
 800649e:	4813      	ldr	r0, [pc, #76]	; (80064ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064a0:	f000 fcd5 	bl	8006e4e <USBD_GetEpDesc>
 80064a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2210      	movs	r2, #16
 80064b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c0:	711a      	strb	r2, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d006      	beq.n	80064da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2243      	movs	r2, #67	; 0x43
 80064de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000050 	.word	0x20000050

080064f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	220a      	movs	r2, #10
 80064fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000000c 	.word	0x2000000c

08006510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	e009      	b.n	8006538 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	32b0      	adds	r2, #176	; 0xb0
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	e008      	b.n	800657c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	32b0      	adds	r2, #176	; 0xb0
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e004      	b.n	80065b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32b0      	adds	r2, #176	; 0xb0
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e025      	b.n	8006636 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11f      	bne.n	8006634 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <USBD_CDC_TransmitPacket+0x7c>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4403      	add	r3, r0
 8006616:	3318      	adds	r3, #24
 8006618:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <USBD_CDC_TransmitPacket+0x7c>)
 800661c:	7819      	ldrb	r1, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f004 fbd7 	bl	800adde <USBD_LL_Transmit>

    ret = USBD_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000093 	.word	0x20000093

08006644 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	32b0      	adds	r2, #176	; 0xb0
 8006666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800666e:	2303      	movs	r3, #3
 8006670:	e018      	b.n	80066a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7c1b      	ldrb	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <USBD_CDC_ReceivePacket+0x68>)
 800667c:	7819      	ldrb	r1, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f004 fbc9 	bl	800ae20 <USBD_LL_PrepareReceive>
 800668e:	e008      	b.n	80066a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <USBD_CDC_ReceivePacket+0x68>)
 8006692:	7819      	ldrb	r1, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f004 fbbf 	bl	800ae20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000094 	.word	0x20000094

080066b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e01f      	b.n	8006708 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	79fa      	ldrb	r2, [r7, #7]
 80066fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f004 fa39 	bl	800ab74 <USBD_LL_Init>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	e025      	b.n	8006774 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32ae      	adds	r2, #174	; 0xae
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00f      	beq.n	8006764 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	32ae      	adds	r2, #174	; 0xae
 800674e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	f107 020e 	add.w	r2, r7, #14
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	4602      	mov	r2, r0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f004 fa41 	bl	800ac0c <USBD_LL_Start>
 800678a:	4603      	mov	r3, r0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800679c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	4611      	mov	r1, r2
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	4611      	mov	r1, r2
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f001 f90e 	bl	8007a4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2b02      	cmp	r3, #2
 8006850:	d01a      	beq.n	8006888 <USBD_LL_SetupStage+0x72>
 8006852:	2b02      	cmp	r3, #2
 8006854:	d822      	bhi.n	800689c <USBD_LL_SetupStage+0x86>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <USBD_LL_SetupStage+0x4a>
 800685a:	2b01      	cmp	r3, #1
 800685c:	d00a      	beq.n	8006874 <USBD_LL_SetupStage+0x5e>
 800685e:	e01d      	b.n	800689c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fb65 	bl	8006f38 <USBD_StdDevReq>
 800686e:	4603      	mov	r3, r0
 8006870:	73fb      	strb	r3, [r7, #15]
      break;
 8006872:	e020      	b.n	80068b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fbcd 	bl	800701c <USBD_StdItfReq>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
      break;
 8006886:	e016      	b.n	80068b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fc2f 	bl	80070f4 <USBD_StdEPReq>
 8006896:	4603      	mov	r3, r0
 8006898:	73fb      	strb	r3, [r7, #15]
      break;
 800689a:	e00c      	b.n	80068b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f004 fa0e 	bl	800accc <USBD_LL_StallEP>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]
      break;
 80068b4:	bf00      	nop
  }

  return ret;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	460b      	mov	r3, r1
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d16e      	bne.n	80069b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	f040 8098 	bne.w	8006a1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d913      	bls.n	8006920 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4293      	cmp	r3, r2
 8006910:	bf28      	it	cs
 8006912:	4613      	movcs	r3, r2
 8006914:	461a      	mov	r2, r3
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f001 f98a 	bl	8007c32 <USBD_CtlContinueRx>
 800691e:	e07d      	b.n	8006a1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2b02      	cmp	r3, #2
 800692c:	d014      	beq.n	8006958 <USBD_LL_DataOutStage+0x98>
 800692e:	2b02      	cmp	r3, #2
 8006930:	d81d      	bhi.n	800696e <USBD_LL_DataOutStage+0xae>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <USBD_LL_DataOutStage+0x7c>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d003      	beq.n	8006942 <USBD_LL_DataOutStage+0x82>
 800693a:	e018      	b.n	800696e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	75bb      	strb	r3, [r7, #22]
            break;
 8006940:	e018      	b.n	8006974 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4619      	mov	r1, r3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fa64 	bl	8006e1a <USBD_CoreFindIF>
 8006952:	4603      	mov	r3, r0
 8006954:	75bb      	strb	r3, [r7, #22]
            break;
 8006956:	e00d      	b.n	8006974 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fa66 	bl	8006e34 <USBD_CoreFindEP>
 8006968:	4603      	mov	r3, r0
 800696a:	75bb      	strb	r3, [r7, #22]
            break;
 800696c:	e002      	b.n	8006974 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	75bb      	strb	r3, [r7, #22]
            break;
 8006972:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006974:	7dbb      	ldrb	r3, [r7, #22]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d119      	bne.n	80069ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d113      	bne.n	80069ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006986:	7dba      	ldrb	r2, [r7, #22]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	32ae      	adds	r2, #174	; 0xae
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006996:	7dba      	ldrb	r2, [r7, #22]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800699e:	7dba      	ldrb	r2, [r7, #22]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	32ae      	adds	r2, #174	; 0xae
 80069a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 f950 	bl	8007c54 <USBD_CtlSendStatus>
 80069b4:	e032      	b.n	8006a1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa37 	bl	8006e34 <USBD_CoreFindEP>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ca:	7dbb      	ldrb	r3, [r7, #22]
 80069cc:	2bff      	cmp	r3, #255	; 0xff
 80069ce:	d025      	beq.n	8006a1c <USBD_LL_DataOutStage+0x15c>
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d122      	bne.n	8006a1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d117      	bne.n	8006a12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069e2:	7dba      	ldrb	r2, [r7, #22]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	32ae      	adds	r2, #174	; 0xae
 80069e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069fa:	7dba      	ldrb	r2, [r7, #22]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	32ae      	adds	r2, #174	; 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	7afa      	ldrb	r2, [r7, #11]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	e000      	b.n	8006a1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d16f      	bne.n	8006b1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d15a      	bne.n	8006b00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d914      	bls.n	8006a80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f001 f8b2 	bl	8007bd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a72:	2300      	movs	r3, #0
 8006a74:	2200      	movs	r2, #0
 8006a76:	2100      	movs	r1, #0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f004 f9d1 	bl	800ae20 <USBD_LL_PrepareReceive>
 8006a7e:	e03f      	b.n	8006b00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d11c      	bne.n	8006ac6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d316      	bcc.n	8006ac6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d20f      	bcs.n	8006ac6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f001 f893 	bl	8007bd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f004 f9ae 	bl	800ae20 <USBD_LL_PrepareReceive>
 8006ac4:	e01c      	b.n	8006b00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d10f      	bne.n	8006af2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006af2:	2180      	movs	r1, #128	; 0x80
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f004 f8e9 	bl	800accc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f001 f8bd 	bl	8007c7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d03a      	beq.n	8006b80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fe42 	bl	8006794 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b18:	e032      	b.n	8006b80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f985 	bl	8006e34 <USBD_CoreFindEP>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	2bff      	cmp	r3, #255	; 0xff
 8006b32:	d025      	beq.n	8006b80 <USBD_LL_DataInStage+0x15a>
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d122      	bne.n	8006b80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d11c      	bne.n	8006b80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b46:	7dfa      	ldrb	r2, [r7, #23]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	32ae      	adds	r2, #174	; 0xae
 8006b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d014      	beq.n	8006b80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b56:	7dfa      	ldrb	r2, [r7, #23]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b5e:	7dfa      	ldrb	r2, [r7, #23]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	32ae      	adds	r2, #174	; 0xae
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	7afa      	ldrb	r2, [r7, #11]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	4798      	blx	r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b76:	7dbb      	ldrb	r3, [r7, #22]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b7c:	7dbb      	ldrb	r3, [r7, #22]
 8006b7e:	e000      	b.n	8006b82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d014      	beq.n	8006bf0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00e      	beq.n	8006bf0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6852      	ldr	r2, [r2, #4]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	4611      	mov	r1, r2
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f004 f823 	bl	800ac42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2240      	movs	r2, #64	; 0x40
 8006c08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f004 f815 	bl	800ac42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2240      	movs	r2, #64	; 0x40
 8006c22:	621a      	str	r2, [r3, #32]

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d006      	beq.n	8006c70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d106      	bne.n	8006ca8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d110      	bne.n	8006cec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	32ae      	adds	r2, #174	; 0xae
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e01c      	b.n	8006d52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d115      	bne.n	8006d50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32ae      	adds	r2, #174	; 0xae
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32ae      	adds	r2, #174	; 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	32ae      	adds	r2, #174	; 0xae
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e01c      	b.n	8006db6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d115      	bne.n	8006db4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32ae      	adds	r2, #174	; 0xae
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32ae      	adds	r2, #174	; 0xae
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	4611      	mov	r1, r2
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6852      	ldr	r2, [r2, #4]
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	4611      	mov	r1, r2
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b086      	sub	sp, #24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	885b      	ldrh	r3, [r3, #2]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d920      	bls.n	8006eb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e7e:	e013      	b.n	8006ea8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e80:	f107 030a 	add.w	r3, r7, #10
 8006e84:	4619      	mov	r1, r3
 8006e86:	6978      	ldr	r0, [r7, #20]
 8006e88:	f000 f81b 	bl	8006ec2 <USBD_GetNextDesc>
 8006e8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d108      	bne.n	8006ea8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	789b      	ldrb	r3, [r3, #2]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d008      	beq.n	8006eb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	885b      	ldrh	r3, [r3, #2]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d8e5      	bhi.n	8006e80 <USBD_GetEpDesc+0x32>
 8006eb4:	e000      	b.n	8006eb8 <USBD_GetEpDesc+0x6a>
          break;
 8006eb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006eb8:	693b      	ldr	r3, [r7, #16]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	881a      	ldrh	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f1a:	8a3b      	ldrh	r3, [r7, #16]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	b21a      	sxth	r2, r3
 8006f20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	b21b      	sxth	r3, r3
 8006f28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d005      	beq.n	8006f5e <USBD_StdDevReq+0x26>
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d857      	bhi.n	8007006 <USBD_StdDevReq+0xce>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00f      	beq.n	8006f7a <USBD_StdDevReq+0x42>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d153      	bne.n	8007006 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	32ae      	adds	r2, #174	; 0xae
 8006f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	e04a      	b.n	8007010 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d83b      	bhi.n	8006ffa <USBD_StdDevReq+0xc2>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <USBD_StdDevReq+0x50>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006ffb 	.word	0x08006ffb
 8006f94:	08006fe7 	.word	0x08006fe7
 8006f98:	08006ffb 	.word	0x08006ffb
 8006f9c:	08006fbb 	.word	0x08006fbb
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006ffb 	.word	0x08006ffb
 8006fa8:	08006fd3 	.word	0x08006fd3
 8006fac:	08006fc5 	.word	0x08006fc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa3c 	bl	8007430 <USBD_GetDescriptor>
          break;
 8006fb8:	e024      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fba1 	bl	8007704 <USBD_SetAddress>
          break;
 8006fc2:	e01f      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fbe0 	bl	800778c <USBD_SetConfig>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd0:	e018      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fc83 	bl	80078e0 <USBD_GetConfig>
          break;
 8006fda:	e013      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fcb4 	bl	800794c <USBD_GetStatus>
          break;
 8006fe4:	e00e      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fce3 	bl	80079b4 <USBD_SetFeature>
          break;
 8006fee:	e009      	b.n	8007004 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fd07 	bl	8007a06 <USBD_ClrFeature>
          break;
 8006ff8:	e004      	b.n	8007004 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fd5e 	bl	8007abe <USBD_CtlError>
          break;
 8007002:	bf00      	nop
      }
      break;
 8007004:	e004      	b.n	8007010 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fd58 	bl	8007abe <USBD_CtlError>
      break;
 800700e:	bf00      	nop
  }

  return ret;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop

0800701c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d005      	beq.n	8007042 <USBD_StdItfReq+0x26>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d852      	bhi.n	80070e0 <USBD_StdItfReq+0xc4>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <USBD_StdItfReq+0x26>
 800703e:	2b20      	cmp	r3, #32
 8007040:	d14e      	bne.n	80070e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007048:	b2db      	uxtb	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	2b02      	cmp	r3, #2
 800704e:	d840      	bhi.n	80070d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	889b      	ldrh	r3, [r3, #4]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	d836      	bhi.n	80070c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	889b      	ldrh	r3, [r3, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fed9 	bl	8006e1a <USBD_CoreFindIF>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2bff      	cmp	r3, #255	; 0xff
 8007070:	d01d      	beq.n	80070ae <USBD_StdItfReq+0x92>
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11a      	bne.n	80070ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007078:	7bba      	ldrb	r2, [r7, #14]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32ae      	adds	r2, #174	; 0xae
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007088:	7bba      	ldrb	r2, [r7, #14]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007090:	7bba      	ldrb	r2, [r7, #14]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32ae      	adds	r2, #174	; 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070a6:	e004      	b.n	80070b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070ac:	e001      	b.n	80070b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070ae:	2303      	movs	r3, #3
 80070b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <USBD_StdItfReq+0xc0>
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10d      	bne.n	80070dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fdc7 	bl	8007c54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070c6:	e009      	b.n	80070dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fcf7 	bl	8007abe <USBD_CtlError>
          break;
 80070d0:	e004      	b.n	80070dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fcf2 	bl	8007abe <USBD_CtlError>
          break;
 80070da:	e000      	b.n	80070de <USBD_StdItfReq+0xc2>
          break;
 80070dc:	bf00      	nop
      }
      break;
 80070de:	e004      	b.n	80070ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fceb 	bl	8007abe <USBD_CtlError>
      break;
 80070e8:	bf00      	nop
  }

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	889b      	ldrh	r3, [r3, #4]
 8007106:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007110:	2b40      	cmp	r3, #64	; 0x40
 8007112:	d007      	beq.n	8007124 <USBD_StdEPReq+0x30>
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	f200 817f 	bhi.w	8007418 <USBD_StdEPReq+0x324>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d02a      	beq.n	8007174 <USBD_StdEPReq+0x80>
 800711e:	2b20      	cmp	r3, #32
 8007120:	f040 817a 	bne.w	8007418 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fe83 	bl	8006e34 <USBD_CoreFindEP>
 800712e:	4603      	mov	r3, r0
 8007130:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007132:	7b7b      	ldrb	r3, [r7, #13]
 8007134:	2bff      	cmp	r3, #255	; 0xff
 8007136:	f000 8174 	beq.w	8007422 <USBD_StdEPReq+0x32e>
 800713a:	7b7b      	ldrb	r3, [r7, #13]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 8170 	bne.w	8007422 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007142:	7b7a      	ldrb	r2, [r7, #13]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800714a:	7b7a      	ldrb	r2, [r7, #13]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	32ae      	adds	r2, #174	; 0xae
 8007150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8163 	beq.w	8007422 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800715c:	7b7a      	ldrb	r2, [r7, #13]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	32ae      	adds	r2, #174	; 0xae
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007172:	e156      	b.n	8007422 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d008      	beq.n	800718e <USBD_StdEPReq+0x9a>
 800717c:	2b03      	cmp	r3, #3
 800717e:	f300 8145 	bgt.w	800740c <USBD_StdEPReq+0x318>
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 809b 	beq.w	80072be <USBD_StdEPReq+0x1ca>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d03c      	beq.n	8007206 <USBD_StdEPReq+0x112>
 800718c:	e13e      	b.n	800740c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d002      	beq.n	80071a0 <USBD_StdEPReq+0xac>
 800719a:	2b03      	cmp	r3, #3
 800719c:	d016      	beq.n	80071cc <USBD_StdEPReq+0xd8>
 800719e:	e02c      	b.n	80071fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <USBD_StdEPReq+0xce>
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d00a      	beq.n	80071c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f003 fd8b 	bl	800accc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071b6:	2180      	movs	r1, #128	; 0x80
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f003 fd87 	bl	800accc <USBD_LL_StallEP>
 80071be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c0:	e020      	b.n	8007204 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fc7a 	bl	8007abe <USBD_CtlError>
              break;
 80071ca:	e01b      	b.n	8007204 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	885b      	ldrh	r3, [r3, #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10e      	bne.n	80071f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <USBD_StdEPReq+0xfe>
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b80      	cmp	r3, #128	; 0x80
 80071de:	d008      	beq.n	80071f2 <USBD_StdEPReq+0xfe>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	88db      	ldrh	r3, [r3, #6]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f003 fd6d 	bl	800accc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fd2e 	bl	8007c54 <USBD_CtlSendStatus>

              break;
 80071f8:	e004      	b.n	8007204 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fc5e 	bl	8007abe <USBD_CtlError>
              break;
 8007202:	bf00      	nop
          }
          break;
 8007204:	e107      	b.n	8007416 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d002      	beq.n	8007218 <USBD_StdEPReq+0x124>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d016      	beq.n	8007244 <USBD_StdEPReq+0x150>
 8007216:	e04b      	b.n	80072b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <USBD_StdEPReq+0x146>
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d00a      	beq.n	800723a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f003 fd4f 	bl	800accc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f003 fd4b 	bl	800accc <USBD_LL_StallEP>
 8007236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007238:	e040      	b.n	80072bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc3e 	bl	8007abe <USBD_CtlError>
              break;
 8007242:	e03b      	b.n	80072bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d136      	bne.n	80072ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f003 fd55 	bl	800ad0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fcf7 	bl	8007c54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fde2 	bl	8006e34 <USBD_CoreFindEP>
 8007270:	4603      	mov	r3, r0
 8007272:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007274:	7b7b      	ldrb	r3, [r7, #13]
 8007276:	2bff      	cmp	r3, #255	; 0xff
 8007278:	d01f      	beq.n	80072ba <USBD_StdEPReq+0x1c6>
 800727a:	7b7b      	ldrb	r3, [r7, #13]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007280:	7b7a      	ldrb	r2, [r7, #13]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007288:	7b7a      	ldrb	r2, [r7, #13]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32ae      	adds	r2, #174	; 0xae
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d010      	beq.n	80072ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007298:	7b7a      	ldrb	r2, [r7, #13]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32ae      	adds	r2, #174	; 0xae
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072ae:	e004      	b.n	80072ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fc03 	bl	8007abe <USBD_CtlError>
              break;
 80072b8:	e000      	b.n	80072bc <USBD_StdEPReq+0x1c8>
              break;
 80072ba:	bf00      	nop
          }
          break;
 80072bc:	e0ab      	b.n	8007416 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d002      	beq.n	80072d0 <USBD_StdEPReq+0x1dc>
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d032      	beq.n	8007334 <USBD_StdEPReq+0x240>
 80072ce:	e097      	b.n	8007400 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <USBD_StdEPReq+0x1f2>
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d004      	beq.n	80072e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fbed 	bl	8007abe <USBD_CtlError>
                break;
 80072e4:	e091      	b.n	800740a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da0b      	bge.n	8007306 <USBD_StdEPReq+0x212>
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	3310      	adds	r3, #16
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
 8007304:	e00b      	b.n	800731e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	4413      	add	r3, r2
 800731c:	3304      	adds	r3, #4
 800731e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2202      	movs	r2, #2
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc37 	bl	8007ba0 <USBD_CtlSendData>
              break;
 8007332:	e06a      	b.n	800740a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	da11      	bge.n	8007360 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	f003 020f 	and.w	r2, r3, #15
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3324      	adds	r3, #36	; 0x24
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d117      	bne.n	8007386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fbb0 	bl	8007abe <USBD_CtlError>
                  break;
 800735e:	e054      	b.n	800740a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	f003 020f 	and.w	r2, r3, #15
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb9d 	bl	8007abe <USBD_CtlError>
                  break;
 8007384:	e041      	b.n	800740a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	da0b      	bge.n	80073a6 <USBD_StdEPReq+0x2b2>
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	3310      	adds	r3, #16
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	3304      	adds	r3, #4
 80073a4:	e00b      	b.n	80073be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <USBD_StdEPReq+0x2d8>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d103      	bne.n	80073d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e00e      	b.n	80073f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f003 fcb5 	bl	800ad48 <USBD_LL_IsStallEP>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2202      	movs	r2, #2
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fbd1 	bl	8007ba0 <USBD_CtlSendData>
              break;
 80073fe:	e004      	b.n	800740a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb5b 	bl	8007abe <USBD_CtlError>
              break;
 8007408:	bf00      	nop
          }
          break;
 800740a:	e004      	b.n	8007416 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fb55 	bl	8007abe <USBD_CtlError>
          break;
 8007414:	bf00      	nop
      }
      break;
 8007416:	e005      	b.n	8007424 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fb4f 	bl	8007abe <USBD_CtlError>
      break;
 8007420:	e000      	b.n	8007424 <USBD_StdEPReq+0x330>
      break;
 8007422:	bf00      	nop
  }

  return ret;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	2b06      	cmp	r3, #6
 8007452:	f200 8128 	bhi.w	80076a6 <USBD_GetDescriptor+0x276>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBD_GetDescriptor+0x2c>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	08007479 	.word	0x08007479
 8007460:	08007491 	.word	0x08007491
 8007464:	080074d1 	.word	0x080074d1
 8007468:	080076a7 	.word	0x080076a7
 800746c:	080076a7 	.word	0x080076a7
 8007470:	08007647 	.word	0x08007647
 8007474:	08007673 	.word	0x08007673
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
      break;
 800748e:	e112      	b.n	80076b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7c1b      	ldrb	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f107 0208 	add.w	r2, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	2202      	movs	r2, #2
 80074b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074b2:	e100      	b.n	80076b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f107 0208 	add.w	r2, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
      break;
 80074ce:	e0f2      	b.n	80076b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	885b      	ldrh	r3, [r3, #2]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	f200 80ac 	bhi.w	8007634 <USBD_GetDescriptor+0x204>
 80074dc:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <USBD_GetDescriptor+0xb4>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	08007531 	.word	0x08007531
 80074ec:	08007565 	.word	0x08007565
 80074f0:	08007599 	.word	0x08007599
 80074f4:	080075cd 	.word	0x080075cd
 80074f8:	08007601 	.word	0x08007601
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	7c12      	ldrb	r2, [r2, #16]
 8007514:	f107 0108 	add.w	r1, r7, #8
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751e:	e091      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 facb 	bl	8007abe <USBD_CtlError>
            err++;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	3301      	adds	r3, #1
 800752c:	72fb      	strb	r3, [r7, #11]
          break;
 800752e:	e089      	b.n	8007644 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007552:	e077      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fab1 	bl	8007abe <USBD_CtlError>
            err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
          break;
 8007562:	e06f      	b.n	8007644 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e05d      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa97 	bl	8007abe <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e055      	b.n	8007644 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7c12      	ldrb	r2, [r2, #16]
 80075b0:	f107 0108 	add.w	r1, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ba:	e043      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa7d 	bl	8007abe <USBD_CtlError>
            err++;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	3301      	adds	r3, #1
 80075c8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ca:	e03b      	b.n	8007644 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ee:	e029      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa63 	bl	8007abe <USBD_CtlError>
            err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
          break;
 80075fe:	e021      	b.n	8007644 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007622:	e00f      	b.n	8007644 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa49 	bl	8007abe <USBD_CtlError>
            err++;
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	3301      	adds	r3, #1
 8007630:	72fb      	strb	r3, [r7, #11]
          break;
 8007632:	e007      	b.n	8007644 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa41 	bl	8007abe <USBD_CtlError>
          err++;
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	3301      	adds	r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007642:	bf00      	nop
      }
      break;
 8007644:	e037      	b.n	80076b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7c1b      	ldrb	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	f107 0208 	add.w	r2, r7, #8
 800765a:	4610      	mov	r0, r2
 800765c:	4798      	blx	r3
 800765e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007660:	e029      	b.n	80076b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa2a 	bl	8007abe <USBD_CtlError>
        err++;
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	3301      	adds	r3, #1
 800766e:	72fb      	strb	r3, [r7, #11]
      break;
 8007670:	e021      	b.n	80076b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1b      	ldrb	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10d      	bne.n	8007696 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f107 0208 	add.w	r2, r7, #8
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	2207      	movs	r2, #7
 8007692:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007694:	e00f      	b.n	80076b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa10 	bl	8007abe <USBD_CtlError>
        err++;
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	3301      	adds	r3, #1
 80076a2:	72fb      	strb	r3, [r7, #11]
      break;
 80076a4:	e007      	b.n	80076b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa08 	bl	8007abe <USBD_CtlError>
      err++;
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	3301      	adds	r3, #1
 80076b2:	72fb      	strb	r3, [r7, #11]
      break;
 80076b4:	bf00      	nop
  }

  if (err != 0U)
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d11e      	bne.n	80076fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d016      	beq.n	80076f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88da      	ldrh	r2, [r3, #6]
 80076ce:	893b      	ldrh	r3, [r7, #8]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	bf28      	it	cs
 80076d4:	4613      	movcs	r3, r2
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076da:	893b      	ldrh	r3, [r7, #8]
 80076dc:	461a      	mov	r2, r3
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa5d 	bl	8007ba0 <USBD_CtlSendData>
 80076e6:	e009      	b.n	80076fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9e7 	bl	8007abe <USBD_CtlError>
 80076f0:	e004      	b.n	80076fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 faae 	bl	8007c54 <USBD_CtlSendStatus>
 80076f8:	e000      	b.n	80076fc <USBD_GetDescriptor+0x2cc>
    return;
 80076fa:	bf00      	nop
  }
}
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	889b      	ldrh	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d131      	bne.n	800777a <USBD_SetAddress+0x76>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	88db      	ldrh	r3, [r3, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d12d      	bne.n	800777a <USBD_SetAddress+0x76>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	885b      	ldrh	r3, [r3, #2]
 8007722:	2b7f      	cmp	r3, #127	; 0x7f
 8007724:	d829      	bhi.n	800777a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d104      	bne.n	8007748 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9bc 	bl	8007abe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	e01d      	b.n	8007784 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7bfa      	ldrb	r2, [r7, #15]
 800774c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f003 fb23 	bl	800ada0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa7a 	bl	8007c54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776e:	e009      	b.n	8007784 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007778:	e004      	b.n	8007784 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f99e 	bl	8007abe <USBD_CtlError>
  }
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	4b4e      	ldr	r3, [pc, #312]	; (80078dc <USBD_SetConfig+0x150>)
 80077a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <USBD_SetConfig+0x150>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d905      	bls.n	80077b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f985 	bl	8007abe <USBD_CtlError>
    return USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e08c      	b.n	80078d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d002      	beq.n	80077ca <USBD_SetConfig+0x3e>
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d029      	beq.n	800781c <USBD_SetConfig+0x90>
 80077c8:	e075      	b.n	80078b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ca:	4b44      	ldr	r3, [pc, #272]	; (80078dc <USBD_SetConfig+0x150>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d020      	beq.n	8007814 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077d2:	4b42      	ldr	r3, [pc, #264]	; (80078dc <USBD_SetConfig+0x150>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077dc:	4b3f      	ldr	r3, [pc, #252]	; (80078dc <USBD_SetConfig+0x150>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fe ffe1 	bl	80067aa <USBD_SetClassConfig>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f962 	bl	8007abe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007802:	e065      	b.n	80078d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fa25 	bl	8007c54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2203      	movs	r2, #3
 800780e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007812:	e05d      	b.n	80078d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fa1d 	bl	8007c54 <USBD_CtlSendStatus>
      break;
 800781a:	e059      	b.n	80078d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800781c:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <USBD_SetConfig+0x150>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d112      	bne.n	800784a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800782c:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <USBD_SetConfig+0x150>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007836:	4b29      	ldr	r3, [pc, #164]	; (80078dc <USBD_SetConfig+0x150>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fe ffd0 	bl	80067e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa06 	bl	8007c54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007848:	e042      	b.n	80078d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <USBD_SetConfig+0x150>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	d02a      	beq.n	80078ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7fe ffbe 	bl	80067e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007866:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <USBD_SetConfig+0x150>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007870:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <USBD_SetConfig+0x150>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fe ff97 	bl	80067aa <USBD_SetClassConfig>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00f      	beq.n	80078a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f918 	bl	8007abe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fe ffa3 	bl	80067e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078a4:	e014      	b.n	80078d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f9d4 	bl	8007c54 <USBD_CtlSendStatus>
      break;
 80078ac:	e010      	b.n	80078d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9d0 	bl	8007c54 <USBD_CtlSendStatus>
      break;
 80078b4:	e00c      	b.n	80078d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f900 	bl	8007abe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <USBD_SetConfig+0x150>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fe ff8c 	bl	80067e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
      break;
 80078ce:	bf00      	nop
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	200006a0 	.word	0x200006a0

080078e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	88db      	ldrh	r3, [r3, #6]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d004      	beq.n	80078fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8e2 	bl	8007abe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078fa:	e023      	b.n	8007944 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	dc02      	bgt.n	800790e <USBD_GetConfig+0x2e>
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc03      	bgt.n	8007914 <USBD_GetConfig+0x34>
 800790c:	e015      	b.n	800793a <USBD_GetConfig+0x5a>
 800790e:	2b03      	cmp	r3, #3
 8007910:	d00b      	beq.n	800792a <USBD_GetConfig+0x4a>
 8007912:	e012      	b.n	800793a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3308      	adds	r3, #8
 800791e:	2201      	movs	r2, #1
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f93c 	bl	8007ba0 <USBD_CtlSendData>
        break;
 8007928:	e00c      	b.n	8007944 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3304      	adds	r3, #4
 800792e:	2201      	movs	r2, #1
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f934 	bl	8007ba0 <USBD_CtlSendData>
        break;
 8007938:	e004      	b.n	8007944 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8be 	bl	8007abe <USBD_CtlError>
        break;
 8007942:	bf00      	nop
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	2b02      	cmp	r3, #2
 8007962:	d81e      	bhi.n	80079a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	88db      	ldrh	r3, [r3, #6]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d004      	beq.n	8007976 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8a5 	bl	8007abe <USBD_CtlError>
        break;
 8007974:	e01a      	b.n	80079ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f043 0202 	orr.w	r2, r3, #2
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	330c      	adds	r3, #12
 8007996:	2202      	movs	r2, #2
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f900 	bl	8007ba0 <USBD_CtlSendData>
      break;
 80079a0:	e004      	b.n	80079ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f88a 	bl	8007abe <USBD_CtlError>
      break;
 80079aa:	bf00      	nop
  }
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d107      	bne.n	80079d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f940 	bl	8007c54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079d4:	e013      	b.n	80079fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d10b      	bne.n	80079f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	889b      	ldrh	r3, [r3, #4]
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f930 	bl	8007c54 <USBD_CtlSendStatus>
}
 80079f4:	e003      	b.n	80079fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f860 	bl	8007abe <USBD_CtlError>
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d80b      	bhi.n	8007a36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d10c      	bne.n	8007a40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f910 	bl	8007c54 <USBD_CtlSendStatus>
      }
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f840 	bl	8007abe <USBD_CtlError>
      break;
 8007a3e:	e000      	b.n	8007a42 <USBD_ClrFeature+0x3c>
      break;
 8007a40:	bf00      	nop
  }
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff fa41 	bl	8006efc <SWAPBYTE>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fa34 	bl	8006efc <SWAPBYTE>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff fa27 	bl	8006efc <SWAPBYTE>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	80da      	strh	r2, [r3, #6]
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f003 f8fe 	bl	800accc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f003 f8fa 	bl	800accc <USBD_LL_StallEP>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d036      	beq.n	8007b64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007afa:	6938      	ldr	r0, [r7, #16]
 8007afc:	f000 f836 	bl	8007b6c <USBD_GetLen>
 8007b00:	4603      	mov	r3, r0
 8007b02:	3301      	adds	r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	2203      	movs	r2, #3
 8007b28:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b30:	e013      	b.n	8007b5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4413      	add	r3, r2
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	3301      	adds	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]
    idx++;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	3301      	adds	r3, #1
 8007b48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	4413      	add	r3, r2
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	3301      	adds	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e7      	bne.n	8007b32 <USBD_GetString+0x52>
 8007b62:	e000      	b.n	8007b66 <USBD_GetString+0x86>
    return;
 8007b64:	bf00      	nop
  }
}
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b7c:	e005      	b.n	8007b8a <USBD_GetLen+0x1e>
  {
    len++;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	3301      	adds	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f5      	bne.n	8007b7e <USBD_GetLen+0x12>
  }

  return len;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f003 f909 	bl	800adde <USBD_LL_Transmit>

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	2100      	movs	r1, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f003 f8f8 	bl	800adde <USBD_LL_Transmit>

  return USBD_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2203      	movs	r2, #3
 8007c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	2100      	movs	r1, #0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f003 f8fc 	bl	800ae20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	2100      	movs	r1, #0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f003 f8eb 	bl	800ae20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2204      	movs	r2, #4
 8007c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c64:	2300      	movs	r3, #0
 8007c66:	2200      	movs	r2, #0
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f003 f8b7 	bl	800adde <USBD_LL_Transmit>

  return USBD_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2205      	movs	r2, #5
 8007c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f003 f8c5 	bl	800ae20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cb2:	2b84      	cmp	r3, #132	; 0x84
 8007cb4:	d005      	beq.n	8007cc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3303      	adds	r3, #3
 8007cc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cd6:	f3ef 8305 	mrs	r3, IPSR
 8007cda:	607b      	str	r3, [r7, #4]
  return(result);
 8007cdc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bf14      	ite	ne
 8007ce2:	2301      	movne	r3, #1
 8007ce4:	2300      	moveq	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cf8:	f001 f980 	bl	8008ffc <vTaskStartScheduler>
  
  return osOK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d04:	b089      	sub	sp, #36	; 0x24
 8007d06:	af04      	add	r7, sp, #16
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d020      	beq.n	8007d56 <osThreadCreate+0x54>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01c      	beq.n	8007d56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685c      	ldr	r4, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691e      	ldr	r6, [r3, #16]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff ffb6 	bl	8007ca0 <makeFreeRtosPriority>
 8007d34:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d3e:	9202      	str	r2, [sp, #8]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	9100      	str	r1, [sp, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	4632      	mov	r2, r6
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 ff78 	bl	8008c40 <xTaskCreateStatic>
 8007d50:	4603      	mov	r3, r0
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e01c      	b.n	8007d90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685c      	ldr	r4, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d62:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ff98 	bl	8007ca0 <makeFreeRtosPriority>
 8007d70:	4602      	mov	r2, r0
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	9200      	str	r2, [sp, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4629      	mov	r1, r5
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 ffba 	bl	8008cfa <xTaskCreate>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <osDelay+0x16>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	e000      	b.n	8007db2 <osDelay+0x18>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 f8ee 	bl	8008f94 <vTaskDelay>
  
  return osOK;
 8007db8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	2001      	movs	r0, #1
 8007dda:	f000 fad6 	bl	800838a <xQueueCreateMutexStatic>
 8007dde:	4603      	mov	r3, r0
 8007de0:	e003      	b.n	8007dea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007de2:	2001      	movs	r0, #1
 8007de4:	f000 fab9 	bl	800835a <xQueueCreateMutex>
 8007de8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <osMutexWait+0x18>
    return osErrorParameter;
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	e03a      	b.n	8007e82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d103      	bne.n	8007e20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e009      	b.n	8007e34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <osMutexWait+0x40>
      ticks = 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e34:	f7ff ff4c 	bl	8007cd0 <inHandlerMode>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	461a      	mov	r2, r3
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd52 	bl	80088f0 <xQueueReceiveFromISR>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d001      	beq.n	8007e56 <osMutexWait+0x62>
      return osErrorOS;
 8007e52:	23ff      	movs	r3, #255	; 0xff
 8007e54:	e015      	b.n	8007e82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d011      	beq.n	8007e80 <osMutexWait+0x8c>
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <osMutexWait+0x98>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	e008      	b.n	8007e80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc31 	bl	80086d8 <xQueueSemaphoreTake>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d001      	beq.n	8007e80 <osMutexWait+0x8c>
    return osErrorOS;
 8007e7c:	23ff      	movs	r3, #255	; 0xff
 8007e7e:	e000      	b.n	8007e82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007ea0:	f7ff ff16 	bl	8007cd0 <inHandlerMode>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d016      	beq.n	8007ed8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007eaa:	f107 0308 	add.w	r3, r7, #8
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb83 	bl	80085bc <xQueueGiveFromISR>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d001      	beq.n	8007ec0 <osMutexRelease+0x30>
      return osErrorOS;
 8007ebc:	23ff      	movs	r3, #255	; 0xff
 8007ebe:	e017      	b.n	8007ef0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d013      	beq.n	8007eee <osMutexRelease+0x5e>
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <osMutexRelease+0x68>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	e00a      	b.n	8007eee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa6e 	bl	80083c0 <xQueueGenericSend>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d001      	beq.n	8007eee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007eea:	23ff      	movs	r3, #255	; 0xff
 8007eec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <osMessageCreate+0x36>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00d      	beq.n	8007f32 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6859      	ldr	r1, [r3, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2400      	movs	r4, #0
 8007f28:	9400      	str	r4, [sp, #0]
 8007f2a:	f000 f92b 	bl	8008184 <xQueueGenericCreateStatic>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	e008      	b.n	8007f44 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f000 f999 	bl	8008274 <xQueueGenericCreate>
 8007f42:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd90      	pop	{r4, r7, pc}

08007f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f103 0208 	add.w	r2, r3, #8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f103 0208 	add.w	r2, r3, #8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d103      	bne.n	800800e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e00c      	b.n	8008028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3308      	adds	r3, #8
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <vListInsert+0x2e>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	d2f6      	bcs.n	8008016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6852      	ldr	r2, [r2, #4]
 8008080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d103      	bne.n	8008094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	1e5a      	subs	r2, r3, #1
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080de:	f001 fef1 	bl	8009ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	3b01      	subs	r3, #1
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d114      	bne.n	800815e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01a      	beq.n	8008172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3310      	adds	r3, #16
 8008140:	4618      	mov	r0, r3
 8008142:	f001 f9ad 	bl	80094a0 <xTaskRemoveFromEventList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <xQueueGenericReset+0xcc>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	e009      	b.n	8008172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3310      	adds	r3, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fef2 	bl	8007f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3324      	adds	r3, #36	; 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff feed 	bl	8007f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f001 fed7 	bl	8009f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008176:	2301      	movs	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08e      	sub	sp, #56	; 0x38
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <xQueueGenericCreateStatic+0x52>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <xQueueGenericCreateStatic+0x56>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGenericCreateStatic+0x58>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <xQueueGenericCreateStatic+0x7e>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <xQueueGenericCreateStatic+0x82>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <xQueueGenericCreateStatic+0x84>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61fb      	str	r3, [r7, #28]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008222:	2348      	movs	r3, #72	; 0x48
 8008224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b48      	cmp	r3, #72	; 0x48
 800822a:	d00a      	beq.n	8008242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61bb      	str	r3, [r7, #24]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f83f 	bl	80082e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800826c:	4618      	mov	r0, r3
 800826e:	3730      	adds	r7, #48	; 0x30
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	613b      	str	r3, [r7, #16]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3348      	adds	r3, #72	; 0x48
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 ff2b 	bl	800a108 <pvPortMalloc>
 80082b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d011      	beq.n	80082de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	3348      	adds	r3, #72	; 0x48
 80082c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082cc:	79fa      	ldrb	r2, [r7, #7]
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	4613      	mov	r3, r2
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f805 	bl	80082e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082de:	69bb      	ldr	r3, [r7, #24]
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e002      	b.n	800830a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008316:	2101      	movs	r1, #1
 8008318:	69b8      	ldr	r0, [r7, #24]
 800831a:	f7ff fecb 	bl	80080b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00e      	beq.n	8008352 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008346:	2300      	movs	r3, #0
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f837 	bl	80083c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	4603      	mov	r3, r0
 8008362:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	461a      	mov	r2, r3
 8008370:	6939      	ldr	r1, [r7, #16]
 8008372:	6978      	ldr	r0, [r7, #20]
 8008374:	f7ff ff7e 	bl	8008274 <xQueueGenericCreate>
 8008378:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff ffd3 	bl	8008326 <prvInitialiseMutex>

		return xNewQueue;
 8008380:	68fb      	ldr	r3, [r7, #12]
	}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800838a:	b580      	push	{r7, lr}
 800838c:	b088      	sub	sp, #32
 800838e:	af02      	add	r7, sp, #8
 8008390:	4603      	mov	r3, r0
 8008392:	6039      	str	r1, [r7, #0]
 8008394:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	6939      	ldr	r1, [r7, #16]
 80083a8:	6978      	ldr	r0, [r7, #20]
 80083aa:	f7ff feeb 	bl	8008184 <xQueueGenericCreateStatic>
 80083ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff ffb8 	bl	8008326 <prvInitialiseMutex>

		return xNewQueue;
 80083b6:	68fb      	ldr	r3, [r7, #12]
	}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08e      	sub	sp, #56	; 0x38
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ce:	2300      	movs	r3, #0
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericSend+0x32>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <xQueueGenericSend+0x40>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <xQueueGenericSend+0x44>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <xQueueGenericSend+0x46>
 8008404:	2300      	movs	r3, #0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <xQueueGenericSend+0x60>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <xQueueGenericSend+0x6e>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <xQueueGenericSend+0x72>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <xQueueGenericSend+0x74>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <xQueueGenericSend+0x8e>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	623b      	str	r3, [r7, #32]
}
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800844e:	f001 f9e7 	bl	8009820 <xTaskGetSchedulerState>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <xQueueGenericSend+0x9e>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <xQueueGenericSend+0xa2>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <xQueueGenericSend+0xa4>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueGenericSend+0xbe>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800847e:	f001 fd21 	bl	8009ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <xQueueGenericSend+0xd4>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d129      	bne.n	80084e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800849a:	f000 fac1 	bl	8008a20 <prvCopyDataToQueue>
 800849e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d010      	beq.n	80084ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fff7 	bl	80094a0 <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d013      	beq.n	80084e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <xQueueGenericSend+0x1f8>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	e00a      	b.n	80084e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b39      	ldr	r3, [pc, #228]	; (80085b8 <xQueueGenericSend+0x1f8>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084e0:	f001 fd20 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e063      	b.n	80085b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084ee:	f001 fd19 	bl	8009f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e05c      	b.n	80085b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4618      	mov	r0, r3
 8008502:	f001 f82f 	bl	8009564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800850a:	f001 fd0b 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800850e:	f000 fddf 	bl	80090d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008512:	f001 fcd7 	bl	8009ec4 <vPortEnterCritical>
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800851c:	b25b      	sxtb	r3, r3
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d103      	bne.n	800852c <xQueueGenericSend+0x16c>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x182>
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008542:	f001 fcef 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008546:	1d3a      	adds	r2, r7, #4
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f001 f81e 	bl	8009590 <xTaskCheckForTimeOut>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d124      	bne.n	80085a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800855a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800855c:	f000 fb58 	bl	8008c10 <prvIsQueueFull>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d018      	beq.n	8008598 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	3310      	adds	r3, #16
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f000 ff72 	bl	8009458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008576:	f000 fae3 	bl	8008b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800857a:	f000 fdb7 	bl	80090ec <xTaskResumeAll>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f af7c 	bne.w	800847e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <xQueueGenericSend+0x1f8>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	e772      	b.n	800847e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800859a:	f000 fad1 	bl	8008b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800859e:	f000 fda5 	bl	80090ec <xTaskResumeAll>
 80085a2:	e76c      	b.n	800847e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a6:	f000 facb 	bl	8008b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085aa:	f000 fd9f 	bl	80090ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3738      	adds	r7, #56	; 0x38
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	; 0x38
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	623b      	str	r3, [r7, #32]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <xQueueGiveFromISR+0x48>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <xQueueGiveFromISR+0x58>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <xQueueGiveFromISR+0x5c>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <xQueueGiveFromISR+0x5e>
 8008618:	2300      	movs	r3, #0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <xQueueGiveFromISR+0x78>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61bb      	str	r3, [r7, #24]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008634:	f001 fd28 	bl	800a088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008638:	f3ef 8211 	mrs	r2, BASEPRI
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	617a      	str	r2, [r7, #20]
 800864e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008650:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008652:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008660:	429a      	cmp	r2, r3
 8008662:	d22b      	bcs.n	80086bc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008676:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	d112      	bne.n	80086a6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	3324      	adds	r3, #36	; 0x24
 800868c:	4618      	mov	r0, r3
 800868e:	f000 ff07 	bl	80094a0 <xTaskRemoveFromEventList>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00e      	beq.n	80086b6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2201      	movs	r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e007      	b.n	80086b6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086aa:	3301      	adds	r3, #1
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	b25a      	sxtb	r2, r3
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086b6:	2301      	movs	r3, #1
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ba:	e001      	b.n	80086c0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3738      	adds	r7, #56	; 0x38
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <xQueueSemaphoreTake+0x32>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	623b      	str	r3, [r7, #32]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	61fb      	str	r3, [r7, #28]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008728:	f001 f87a 	bl	8009820 <xTaskGetSchedulerState>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xQueueSemaphoreTake+0x60>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueSemaphoreTake+0x64>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueSemaphoreTake+0x66>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	61bb      	str	r3, [r7, #24]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008758:	f001 fbb4 	bl	8009ec4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d024      	beq.n	80087b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008778:	f001 f9fa 	bl	8009b70 <pvTaskIncrementMutexHeldCount>
 800877c:	4602      	mov	r2, r0
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00f      	beq.n	80087aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	3310      	adds	r3, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fe86 	bl	80094a0 <xTaskRemoveFromEventList>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800879a:	4b54      	ldr	r3, [pc, #336]	; (80088ec <xQueueSemaphoreTake+0x214>)
 800879c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087aa:	f001 fbbb 	bl	8009f24 <vPortExitCritical>
				return pdPASS;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e097      	b.n	80088e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d111      	bne.n	80087dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80087d4:	f001 fba6 	bl	8009f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087d8:	2300      	movs	r3, #0
 80087da:	e082      	b.n	80088e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087e2:	f107 030c 	add.w	r3, r7, #12
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 febc 	bl	8009564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087f0:	f001 fb98 	bl	8009f24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087f4:	f000 fc6c 	bl	80090d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087f8:	f001 fb64 	bl	8009ec4 <vPortEnterCritical>
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008802:	b25b      	sxtb	r3, r3
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d103      	bne.n	8008812 <xQueueSemaphoreTake+0x13a>
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008818:	b25b      	sxtb	r3, r3
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d103      	bne.n	8008828 <xQueueSemaphoreTake+0x150>
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008828:	f001 fb7c 	bl	8009f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800882c:	463a      	mov	r2, r7
 800882e:	f107 030c 	add.w	r3, r7, #12
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f000 feab 	bl	8009590 <xTaskCheckForTimeOut>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d132      	bne.n	80088a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008842:	f000 f9cf 	bl	8008be4 <prvIsQueueEmpty>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d026      	beq.n	800889a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008854:	f001 fb36 	bl	8009ec4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fffd 	bl	800985c <xTaskPriorityInherit>
 8008862:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008864:	f001 fb5e 	bl	8009f24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	3324      	adds	r3, #36	; 0x24
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fdf1 	bl	8009458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008878:	f000 f962 	bl	8008b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800887c:	f000 fc36 	bl	80090ec <xTaskResumeAll>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	f47f af68 	bne.w	8008758 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008888:	4b18      	ldr	r3, [pc, #96]	; (80088ec <xQueueSemaphoreTake+0x214>)
 800888a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	e75e      	b.n	8008758 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800889a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800889c:	f000 f950 	bl	8008b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a0:	f000 fc24 	bl	80090ec <xTaskResumeAll>
 80088a4:	e758      	b.n	8008758 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80088a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088a8:	f000 f94a 	bl	8008b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ac:	f000 fc1e 	bl	80090ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088b2:	f000 f997 	bl	8008be4 <prvIsQueueEmpty>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f43f af4d 	beq.w	8008758 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00d      	beq.n	80088e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80088c4:	f001 fafe 	bl	8009ec4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80088c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ca:	f000 f891 	bl	80089f0 <prvGetDisinheritPriorityAfterTimeout>
 80088ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f8bc 	bl	8009a54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80088dc:	f001 fb22 	bl	8009f24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3738      	adds	r7, #56	; 0x38
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08e      	sub	sp, #56	; 0x38
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	623b      	str	r3, [r7, #32]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <xQueueReceiveFromISR+0x3a>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <xQueueReceiveFromISR+0x3e>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xQueueReceiveFromISR+0x40>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61fb      	str	r3, [r7, #28]
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800894a:	f001 fb9d 	bl	800a088 <vPortValidateInterruptPriority>
	__asm volatile
 800894e:	f3ef 8211 	mrs	r2, BASEPRI
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	61ba      	str	r2, [r7, #24]
 8008964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02f      	beq.n	80089d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800897c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008984:	f000 f8b6 	bl	8008af4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	1e5a      	subs	r2, r3, #1
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d112      	bne.n	80089c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d016      	beq.n	80089d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	3310      	adds	r3, #16
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fd7a 	bl	80094a0 <xTaskRemoveFromEventList>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e007      	b.n	80089d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089c4:	3301      	adds	r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	b25a      	sxtb	r2, r3
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089d0:	2301      	movs	r3, #1
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	e001      	b.n	80089da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f383 8811 	msr	BASEPRI, r3
}
 80089e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3738      	adds	r7, #56	; 0x38
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f1c3 0307 	rsb	r3, r3, #7
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e001      	b.n	8008a12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a12:	68fb      	ldr	r3, [r7, #12]
	}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d14d      	bne.n	8008ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ff7c 	bl	8009948 <xTaskPriorityDisinherit>
 8008a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	609a      	str	r2, [r3, #8]
 8008a58:	e043      	b.n	8008ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d119      	bne.n	8008a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6858      	ldr	r0, [r3, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	f003 f8b1 	bl	800bbd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d32b      	bcc.n	8008ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	e026      	b.n	8008ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	68d8      	ldr	r0, [r3, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	f003 f897 	bl	800bbd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	425b      	negs	r3, r3
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d207      	bcs.n	8008ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	425b      	negs	r3, r3
 8008aca:	441a      	add	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d105      	bne.n	8008ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008aea:	697b      	ldr	r3, [r7, #20]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d018      	beq.n	8008b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	441a      	add	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d303      	bcc.n	8008b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68d9      	ldr	r1, [r3, #12]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	461a      	mov	r2, r3
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f003 f84d 	bl	800bbd2 <memcpy>
	}
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b48:	f001 f9bc 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b54:	e011      	b.n	8008b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d012      	beq.n	8008b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3324      	adds	r3, #36	; 0x24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fc9c 	bl	80094a0 <xTaskRemoveFromEventList>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b6e:	f000 fd71 	bl	8009654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dce9      	bgt.n	8008b56 <prvUnlockQueue+0x16>
 8008b82:	e000      	b.n	8008b86 <prvUnlockQueue+0x46>
					break;
 8008b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b8e:	f001 f9c9 	bl	8009f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b92:	f001 f997 	bl	8009ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b9e:	e011      	b.n	8008bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d012      	beq.n	8008bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3310      	adds	r3, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fc77 	bl	80094a0 <xTaskRemoveFromEventList>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bb8:	f000 fd4c 	bl	8009654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dce9      	bgt.n	8008ba0 <prvUnlockQueue+0x60>
 8008bcc:	e000      	b.n	8008bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	22ff      	movs	r2, #255	; 0xff
 8008bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bd8:	f001 f9a4 	bl	8009f24 <vPortExitCritical>
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bec:	f001 f96a 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e001      	b.n	8008c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c02:	f001 f98f 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c18:	f001 f954 	bl	8009ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d102      	bne.n	8008c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	e001      	b.n	8008c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c32:	f001 f977 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 8008c36:	68fb      	ldr	r3, [r7, #12]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	623b      	str	r3, [r7, #32]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	61fb      	str	r3, [r7, #28]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c86:	23a0      	movs	r3, #160	; 0xa0
 8008c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2ba0      	cmp	r3, #160	; 0xa0
 8008c8e:	d00a      	beq.n	8008ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61bb      	str	r3, [r7, #24]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01e      	beq.n	8008cec <xTaskCreateStatic+0xac>
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	68b9      	ldr	r1, [r7, #8]
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f850 	bl	8008d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ce6:	f000 f8eb 	bl	8008ec0 <prvAddNewTaskToReadyList>
 8008cea:	e001      	b.n	8008cf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cf0:	697b      	ldr	r3, [r7, #20]
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3728      	adds	r7, #40	; 0x28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b08c      	sub	sp, #48	; 0x30
 8008cfe:	af04      	add	r7, sp, #16
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f9fa 	bl	800a108 <pvPortMalloc>
 8008d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00e      	beq.n	8008d3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d1c:	20a0      	movs	r0, #160	; 0xa0
 8008d1e:	f001 f9f3 	bl	800a108 <pvPortMalloc>
 8008d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d30:	e005      	b.n	8008d3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d32:	6978      	ldr	r0, [r7, #20]
 8008d34:	f001 fab4 	bl	800a2a0 <vPortFree>
 8008d38:	e001      	b.n	8008d3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d017      	beq.n	8008d74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 f80e 	bl	8008d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d68:	69f8      	ldr	r0, [r7, #28]
 8008d6a:	f000 f8a9 	bl	8008ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	e002      	b.n	8008d7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d74:	f04f 33ff 	mov.w	r3, #4294967295
 8008d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <prvInitialiseNewTask+0x48>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	617b      	str	r3, [r7, #20]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01f      	beq.n	8008e12 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e012      	b.n	8008dfe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	7819      	ldrb	r1, [r3, #0]
 8008de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	3334      	adds	r3, #52	; 0x34
 8008de8:	460a      	mov	r2, r1
 8008dea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d006      	beq.n	8008e06 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	2b0f      	cmp	r3, #15
 8008e02:	d9e9      	bls.n	8008dd8 <prvInitialiseNewTask+0x54>
 8008e04:	e000      	b.n	8008e08 <prvInitialiseNewTask+0x84>
			{
				break;
 8008e06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e10:	e003      	b.n	8008e1a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	2b06      	cmp	r3, #6
 8008e1e:	d901      	bls.n	8008e24 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e20:	2306      	movs	r3, #6
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	2200      	movs	r2, #0
 8008e34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff f8a6 	bl	8007f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	3318      	adds	r3, #24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff f8a1 	bl	8007f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	f1c3 0207 	rsb	r2, r3, #7
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	334c      	adds	r3, #76	; 0x4c
 8008e74:	224c      	movs	r2, #76	; 0x4c
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fdd4 	bl	800ba26 <memset>
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <prvInitialiseNewTask+0x130>)
 8008e82:	651a      	str	r2, [r3, #80]	; 0x50
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <prvInitialiseNewTask+0x134>)
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	4a0b      	ldr	r2, [pc, #44]	; (8008ebc <prvInitialiseNewTask+0x138>)
 8008e8e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	69b8      	ldr	r0, [r7, #24]
 8008e96:	f000 fee5 	bl	8009c64 <pxPortInitialiseStack>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eac:	bf00      	nop
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20005fd8 	.word	0x20005fd8
 8008eb8:	20006040 	.word	0x20006040
 8008ebc:	200060a8 	.word	0x200060a8

08008ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ec8:	f000 fffc 	bl	8009ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ecc:	4b2a      	ldr	r3, [pc, #168]	; (8008f78 <prvAddNewTaskToReadyList+0xb8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <prvAddNewTaskToReadyList+0xb8>)
 8008ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ed6:	4b29      	ldr	r3, [pc, #164]	; (8008f7c <prvAddNewTaskToReadyList+0xbc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ede:	4a27      	ldr	r2, [pc, #156]	; (8008f7c <prvAddNewTaskToReadyList+0xbc>)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ee4:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <prvAddNewTaskToReadyList+0xb8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d110      	bne.n	8008f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008eec:	f000 fbd6 	bl	800969c <prvInitialiseTaskLists>
 8008ef0:	e00d      	b.n	8008f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ef2:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <prvAddNewTaskToReadyList+0xc0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d109      	bne.n	8008f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <prvAddNewTaskToReadyList+0xbc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d802      	bhi.n	8008f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f08:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <prvAddNewTaskToReadyList+0xbc>)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f0e:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <prvAddNewTaskToReadyList+0xc4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3301      	adds	r3, #1
 8008f14:	4a1b      	ldr	r2, [pc, #108]	; (8008f84 <prvAddNewTaskToReadyList+0xc4>)
 8008f16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <prvAddNewTaskToReadyList+0xc8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <prvAddNewTaskToReadyList+0xc8>)
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <prvAddNewTaskToReadyList+0xcc>)
 8008f38:	441a      	add	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7ff f830 	bl	8007fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f46:	f000 ffed 	bl	8009f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <prvAddNewTaskToReadyList+0xc0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00e      	beq.n	8008f70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f52:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <prvAddNewTaskToReadyList+0xbc>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d207      	bcs.n	8008f70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <prvAddNewTaskToReadyList+0xd0>)
 8008f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	200007a4 	.word	0x200007a4
 8008f7c:	200006a4 	.word	0x200006a4
 8008f80:	200007b0 	.word	0x200007b0
 8008f84:	200007c0 	.word	0x200007c0
 8008f88:	200007ac 	.word	0x200007ac
 8008f8c:	200006a8 	.word	0x200006a8
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d017      	beq.n	8008fd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <vTaskDelay+0x60>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <vTaskDelay+0x30>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	60bb      	str	r3, [r7, #8]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fc4:	f000 f884 	bl	80090d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fde4 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fd0:	f000 f88c 	bl	80090ec <xTaskResumeAll>
 8008fd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d107      	bne.n	8008fec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <vTaskDelay+0x64>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200007cc 	.word	0x200007cc
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	; 0x28
 8009000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800900a:	463a      	mov	r2, r7
 800900c:	1d39      	adds	r1, r7, #4
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4618      	mov	r0, r3
 8009014:	f7f7 ff46 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	9202      	str	r2, [sp, #8]
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	2300      	movs	r3, #0
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	460a      	mov	r2, r1
 800902a:	4921      	ldr	r1, [pc, #132]	; (80090b0 <vTaskStartScheduler+0xb4>)
 800902c:	4821      	ldr	r0, [pc, #132]	; (80090b4 <vTaskStartScheduler+0xb8>)
 800902e:	f7ff fe07 	bl	8008c40 <xTaskCreateStatic>
 8009032:	4603      	mov	r3, r0
 8009034:	4a20      	ldr	r2, [pc, #128]	; (80090b8 <vTaskStartScheduler+0xbc>)
 8009036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009038:	4b1f      	ldr	r3, [pc, #124]	; (80090b8 <vTaskStartScheduler+0xbc>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e001      	b.n	800904a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d11b      	bne.n	8009088 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	613b      	str	r3, [r7, #16]
}
 8009062:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <vTaskStartScheduler+0xc0>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	334c      	adds	r3, #76	; 0x4c
 800906a:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <vTaskStartScheduler+0xc4>)
 800906c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <vTaskStartScheduler+0xc8>)
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <vTaskStartScheduler+0xcc>)
 8009078:	2201      	movs	r2, #1
 800907a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800907c:	4b13      	ldr	r3, [pc, #76]	; (80090cc <vTaskStartScheduler+0xd0>)
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009082:	f000 fe7d 	bl	8009d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009086:	e00e      	b.n	80090a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908e:	d10a      	bne.n	80090a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <vTaskStartScheduler+0xa8>
}
 80090a6:	bf00      	nop
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	0800de10 	.word	0x0800de10
 80090b4:	0800966d 	.word	0x0800966d
 80090b8:	200007c8 	.word	0x200007c8
 80090bc:	200006a4 	.word	0x200006a4
 80090c0:	20000158 	.word	0x20000158
 80090c4:	200007c4 	.word	0x200007c4
 80090c8:	200007b0 	.word	0x200007b0
 80090cc:	200007a8 	.word	0x200007a8

080090d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090d4:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <vTaskSuspendAll+0x18>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	4a03      	ldr	r2, [pc, #12]	; (80090e8 <vTaskSuspendAll+0x18>)
 80090dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090de:	bf00      	nop
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	200007cc 	.word	0x200007cc

080090ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090fa:	4b41      	ldr	r3, [pc, #260]	; (8009200 <xTaskResumeAll+0x114>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <xTaskResumeAll+0x2c>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	e7fe      	b.n	8009116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009118:	f000 fed4 	bl	8009ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800911c:	4b38      	ldr	r3, [pc, #224]	; (8009200 <xTaskResumeAll+0x114>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3b01      	subs	r3, #1
 8009122:	4a37      	ldr	r2, [pc, #220]	; (8009200 <xTaskResumeAll+0x114>)
 8009124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009126:	4b36      	ldr	r3, [pc, #216]	; (8009200 <xTaskResumeAll+0x114>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d161      	bne.n	80091f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800912e:	4b35      	ldr	r3, [pc, #212]	; (8009204 <xTaskResumeAll+0x118>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d05d      	beq.n	80091f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009136:	e02e      	b.n	8009196 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	4b33      	ldr	r3, [pc, #204]	; (8009208 <xTaskResumeAll+0x11c>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3318      	adds	r3, #24
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe ff8b 	bl	8008060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe ff86 	bl	8008060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	2201      	movs	r2, #1
 800915a:	409a      	lsls	r2, r3
 800915c:	4b2b      	ldr	r3, [pc, #172]	; (800920c <xTaskResumeAll+0x120>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4313      	orrs	r3, r2
 8009162:	4a2a      	ldr	r2, [pc, #168]	; (800920c <xTaskResumeAll+0x120>)
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4a27      	ldr	r2, [pc, #156]	; (8009210 <xTaskResumeAll+0x124>)
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3304      	adds	r3, #4
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f7fe ff12 	bl	8007fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4b23      	ldr	r3, [pc, #140]	; (8009214 <xTaskResumeAll+0x128>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	429a      	cmp	r2, r3
 800918e:	d302      	bcc.n	8009196 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009190:	4b21      	ldr	r3, [pc, #132]	; (8009218 <xTaskResumeAll+0x12c>)
 8009192:	2201      	movs	r2, #1
 8009194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009196:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <xTaskResumeAll+0x11c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1cc      	bne.n	8009138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091a4:	f000 fb1c 	bl	80097e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <xTaskResumeAll+0x130>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d010      	beq.n	80091d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091b4:	f000 f836 	bl	8009224 <xTaskIncrementTick>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091be:	4b16      	ldr	r3, [pc, #88]	; (8009218 <xTaskResumeAll+0x12c>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1f1      	bne.n	80091b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80091d0:	4b12      	ldr	r3, [pc, #72]	; (800921c <xTaskResumeAll+0x130>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <xTaskResumeAll+0x12c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <xTaskResumeAll+0x134>)
 80091e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091f2:	f000 fe97 	bl	8009f24 <vPortExitCritical>

	return xAlreadyYielded;
 80091f6:	68bb      	ldr	r3, [r7, #8]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200007cc 	.word	0x200007cc
 8009204:	200007a4 	.word	0x200007a4
 8009208:	20000764 	.word	0x20000764
 800920c:	200007ac 	.word	0x200007ac
 8009210:	200006a8 	.word	0x200006a8
 8009214:	200006a4 	.word	0x200006a4
 8009218:	200007b8 	.word	0x200007b8
 800921c:	200007b4 	.word	0x200007b4
 8009220:	e000ed04 	.word	0xe000ed04

08009224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800922e:	4b4e      	ldr	r3, [pc, #312]	; (8009368 <xTaskIncrementTick+0x144>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 808e 	bne.w	8009354 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009238:	4b4c      	ldr	r3, [pc, #304]	; (800936c <xTaskIncrementTick+0x148>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3301      	adds	r3, #1
 800923e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009240:	4a4a      	ldr	r2, [pc, #296]	; (800936c <xTaskIncrementTick+0x148>)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d120      	bne.n	800928e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800924c:	4b48      	ldr	r3, [pc, #288]	; (8009370 <xTaskIncrementTick+0x14c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <xTaskIncrementTick+0x48>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	603b      	str	r3, [r7, #0]
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <xTaskIncrementTick+0x46>
 800926c:	4b40      	ldr	r3, [pc, #256]	; (8009370 <xTaskIncrementTick+0x14c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	4b40      	ldr	r3, [pc, #256]	; (8009374 <xTaskIncrementTick+0x150>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a3e      	ldr	r2, [pc, #248]	; (8009370 <xTaskIncrementTick+0x14c>)
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	4a3e      	ldr	r2, [pc, #248]	; (8009374 <xTaskIncrementTick+0x150>)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <xTaskIncrementTick+0x154>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	4a3c      	ldr	r2, [pc, #240]	; (8009378 <xTaskIncrementTick+0x154>)
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	f000 faa9 	bl	80097e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800928e:	4b3b      	ldr	r3, [pc, #236]	; (800937c <xTaskIncrementTick+0x158>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	429a      	cmp	r2, r3
 8009296:	d348      	bcc.n	800932a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009298:	4b35      	ldr	r3, [pc, #212]	; (8009370 <xTaskIncrementTick+0x14c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a2:	4b36      	ldr	r3, [pc, #216]	; (800937c <xTaskIncrementTick+0x158>)
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295
 80092a8:	601a      	str	r2, [r3, #0]
					break;
 80092aa:	e03e      	b.n	800932a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ac:	4b30      	ldr	r3, [pc, #192]	; (8009370 <xTaskIncrementTick+0x14c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d203      	bcs.n	80092cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092c4:	4a2d      	ldr	r2, [pc, #180]	; (800937c <xTaskIncrementTick+0x158>)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092ca:	e02e      	b.n	800932a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fec5 	bl	8008060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3318      	adds	r3, #24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe febc 	bl	8008060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	2201      	movs	r2, #1
 80092ee:	409a      	lsls	r2, r3
 80092f0:	4b23      	ldr	r3, [pc, #140]	; (8009380 <xTaskIncrementTick+0x15c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	4a22      	ldr	r2, [pc, #136]	; (8009380 <xTaskIncrementTick+0x15c>)
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <xTaskIncrementTick+0x160>)
 8009308:	441a      	add	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f7fe fe48 	bl	8007fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931a:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <xTaskIncrementTick+0x164>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	429a      	cmp	r2, r3
 8009322:	d3b9      	bcc.n	8009298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009328:	e7b6      	b.n	8009298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800932a:	4b17      	ldr	r3, [pc, #92]	; (8009388 <xTaskIncrementTick+0x164>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009330:	4914      	ldr	r1, [pc, #80]	; (8009384 <xTaskIncrementTick+0x160>)
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d901      	bls.n	8009346 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009342:	2301      	movs	r3, #1
 8009344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <xTaskIncrementTick+0x168>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d007      	beq.n	800935e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800934e:	2301      	movs	r3, #1
 8009350:	617b      	str	r3, [r7, #20]
 8009352:	e004      	b.n	800935e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009354:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <xTaskIncrementTick+0x16c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	4a0d      	ldr	r2, [pc, #52]	; (8009390 <xTaskIncrementTick+0x16c>)
 800935c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800935e:	697b      	ldr	r3, [r7, #20]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	200007cc 	.word	0x200007cc
 800936c:	200007a8 	.word	0x200007a8
 8009370:	2000075c 	.word	0x2000075c
 8009374:	20000760 	.word	0x20000760
 8009378:	200007bc 	.word	0x200007bc
 800937c:	200007c4 	.word	0x200007c4
 8009380:	200007ac 	.word	0x200007ac
 8009384:	200006a8 	.word	0x200006a8
 8009388:	200006a4 	.word	0x200006a4
 800938c:	200007b8 	.word	0x200007b8
 8009390:	200007b4 	.word	0x200007b4

08009394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800939a:	4b29      	ldr	r3, [pc, #164]	; (8009440 <vTaskSwitchContext+0xac>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093a2:	4b28      	ldr	r3, [pc, #160]	; (8009444 <vTaskSwitchContext+0xb0>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093a8:	e044      	b.n	8009434 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80093aa:	4b26      	ldr	r3, [pc, #152]	; (8009444 <vTaskSwitchContext+0xb0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <vTaskSwitchContext+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	fab3 f383 	clz	r3, r3
 80093bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	f1c3 031f 	rsb	r3, r3, #31
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	4921      	ldr	r1, [pc, #132]	; (800944c <vTaskSwitchContext+0xb8>)
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	440b      	add	r3, r1
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	607b      	str	r3, [r7, #4]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vTaskSwitchContext+0x5a>
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4a14      	ldr	r2, [pc, #80]	; (800944c <vTaskSwitchContext+0xb8>)
 80093fc:	4413      	add	r3, r2
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	3308      	adds	r3, #8
 8009412:	429a      	cmp	r2, r3
 8009414:	d104      	bne.n	8009420 <vTaskSwitchContext+0x8c>
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	605a      	str	r2, [r3, #4]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <vTaskSwitchContext+0xbc>)
 8009428:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <vTaskSwitchContext+0xbc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	334c      	adds	r3, #76	; 0x4c
 8009430:	4a08      	ldr	r2, [pc, #32]	; (8009454 <vTaskSwitchContext+0xc0>)
 8009432:	6013      	str	r3, [r2, #0]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	200007cc 	.word	0x200007cc
 8009444:	200007b8 	.word	0x200007b8
 8009448:	200007ac 	.word	0x200007ac
 800944c:	200006a8 	.word	0x200006a8
 8009450:	200006a4 	.word	0x200006a4
 8009454:	20000158 	.word	0x20000158

08009458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	60fb      	str	r3, [r7, #12]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <vTaskPlaceOnEventList+0x44>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3318      	adds	r3, #24
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fe fdb1 	bl	8007fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800948c:	2101      	movs	r1, #1
 800948e:	6838      	ldr	r0, [r7, #0]
 8009490:	f000 fb82 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	200006a4 	.word	0x200006a4

080094a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3318      	adds	r3, #24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fdc5 	bl	8008060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d6:	4b1d      	ldr	r3, [pc, #116]	; (800954c <xTaskRemoveFromEventList+0xac>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d11c      	bne.n	8009518 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fdbc 	bl	8008060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	2201      	movs	r2, #1
 80094ee:	409a      	lsls	r2, r3
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <xTaskRemoveFromEventList+0xb0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	4a16      	ldr	r2, [pc, #88]	; (8009550 <xTaskRemoveFromEventList+0xb0>)
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4a13      	ldr	r2, [pc, #76]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 8009508:	441a      	add	r2, r3
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	3304      	adds	r3, #4
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7fe fd48 	bl	8007fa6 <vListInsertEnd>
 8009516:	e005      	b.n	8009524 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	3318      	adds	r3, #24
 800951c:	4619      	mov	r1, r3
 800951e:	480e      	ldr	r0, [pc, #56]	; (8009558 <xTaskRemoveFromEventList+0xb8>)
 8009520:	f7fe fd41 	bl	8007fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <xTaskRemoveFromEventList+0xbc>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	429a      	cmp	r2, r3
 8009530:	d905      	bls.n	800953e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009532:	2301      	movs	r3, #1
 8009534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <xTaskRemoveFromEventList+0xc0>)
 8009538:	2201      	movs	r2, #1
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	e001      	b.n	8009542 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200007cc 	.word	0x200007cc
 8009550:	200007ac 	.word	0x200007ac
 8009554:	200006a8 	.word	0x200006a8
 8009558:	20000764 	.word	0x20000764
 800955c:	200006a4 	.word	0x200006a4
 8009560:	200007b8 	.word	0x200007b8

08009564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <vTaskInternalSetTimeOutState+0x24>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <vTaskInternalSetTimeOutState+0x28>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	200007bc 	.word	0x200007bc
 800958c:	200007a8 	.word	0x200007a8

08009590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60fb      	str	r3, [r7, #12]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095d2:	f000 fc77 	bl	8009ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095d6:	4b1d      	ldr	r3, [pc, #116]	; (800964c <xTaskCheckForTimeOut+0xbc>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ee:	d102      	bne.n	80095f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
 80095f4:	e023      	b.n	800963e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <xTaskCheckForTimeOut+0xc0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d007      	beq.n	8009612 <xTaskCheckForTimeOut+0x82>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	61fb      	str	r3, [r7, #28]
 8009610:	e015      	b.n	800963e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d20b      	bcs.n	8009634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	1ad2      	subs	r2, r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff9b 	bl	8009564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	e004      	b.n	800963e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800963e:	f000 fc71 	bl	8009f24 <vPortExitCritical>

	return xReturn;
 8009642:	69fb      	ldr	r3, [r7, #28]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	200007a8 	.word	0x200007a8
 8009650:	200007bc 	.word	0x200007bc

08009654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009658:	4b03      	ldr	r3, [pc, #12]	; (8009668 <vTaskMissedYield+0x14>)
 800965a:	2201      	movs	r2, #1
 800965c:	601a      	str	r2, [r3, #0]
}
 800965e:	bf00      	nop
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	200007b8 	.word	0x200007b8

0800966c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009674:	f000 f852 	bl	800971c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009678:	4b06      	ldr	r3, [pc, #24]	; (8009694 <prvIdleTask+0x28>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d9f9      	bls.n	8009674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009680:	4b05      	ldr	r3, [pc, #20]	; (8009698 <prvIdleTask+0x2c>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009690:	e7f0      	b.n	8009674 <prvIdleTask+0x8>
 8009692:	bf00      	nop
 8009694:	200006a8 	.word	0x200006a8
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
 80096a6:	e00c      	b.n	80096c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4a12      	ldr	r2, [pc, #72]	; (80096fc <prvInitialiseTaskLists+0x60>)
 80096b4:	4413      	add	r3, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fc48 	bl	8007f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3301      	adds	r3, #1
 80096c0:	607b      	str	r3, [r7, #4]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b06      	cmp	r3, #6
 80096c6:	d9ef      	bls.n	80096a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096c8:	480d      	ldr	r0, [pc, #52]	; (8009700 <prvInitialiseTaskLists+0x64>)
 80096ca:	f7fe fc3f 	bl	8007f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ce:	480d      	ldr	r0, [pc, #52]	; (8009704 <prvInitialiseTaskLists+0x68>)
 80096d0:	f7fe fc3c 	bl	8007f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096d4:	480c      	ldr	r0, [pc, #48]	; (8009708 <prvInitialiseTaskLists+0x6c>)
 80096d6:	f7fe fc39 	bl	8007f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096da:	480c      	ldr	r0, [pc, #48]	; (800970c <prvInitialiseTaskLists+0x70>)
 80096dc:	f7fe fc36 	bl	8007f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096e0:	480b      	ldr	r0, [pc, #44]	; (8009710 <prvInitialiseTaskLists+0x74>)
 80096e2:	f7fe fc33 	bl	8007f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096e6:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <prvInitialiseTaskLists+0x78>)
 80096e8:	4a05      	ldr	r2, [pc, #20]	; (8009700 <prvInitialiseTaskLists+0x64>)
 80096ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <prvInitialiseTaskLists+0x7c>)
 80096ee:	4a05      	ldr	r2, [pc, #20]	; (8009704 <prvInitialiseTaskLists+0x68>)
 80096f0:	601a      	str	r2, [r3, #0]
}
 80096f2:	bf00      	nop
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	200006a8 	.word	0x200006a8
 8009700:	20000734 	.word	0x20000734
 8009704:	20000748 	.word	0x20000748
 8009708:	20000764 	.word	0x20000764
 800970c:	20000778 	.word	0x20000778
 8009710:	20000790 	.word	0x20000790
 8009714:	2000075c 	.word	0x2000075c
 8009718:	20000760 	.word	0x20000760

0800971c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009722:	e019      	b.n	8009758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009724:	f000 fbce 	bl	8009ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009728:	4b10      	ldr	r3, [pc, #64]	; (800976c <prvCheckTasksWaitingTermination+0x50>)
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3304      	adds	r3, #4
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fc93 	bl	8008060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <prvCheckTasksWaitingTermination+0x54>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3b01      	subs	r3, #1
 8009740:	4a0b      	ldr	r2, [pc, #44]	; (8009770 <prvCheckTasksWaitingTermination+0x54>)
 8009742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009744:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <prvCheckTasksWaitingTermination+0x58>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3b01      	subs	r3, #1
 800974a:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <prvCheckTasksWaitingTermination+0x58>)
 800974c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800974e:	f000 fbe9 	bl	8009f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f810 	bl	8009778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <prvCheckTasksWaitingTermination+0x58>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e1      	bne.n	8009724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009760:	bf00      	nop
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000778 	.word	0x20000778
 8009770:	200007a4 	.word	0x200007a4
 8009774:	2000078c 	.word	0x2000078c

08009778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	334c      	adds	r3, #76	; 0x4c
 8009784:	4618      	mov	r0, r3
 8009786:	f002 f96b 	bl	800ba60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009790:	2b00      	cmp	r3, #0
 8009792:	d108      	bne.n	80097a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fd81 	bl	800a2a0 <vPortFree>
				vPortFree( pxTCB );
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fd7e 	bl	800a2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097a4:	e018      	b.n	80097d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d103      	bne.n	80097b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fd75 	bl	800a2a0 <vPortFree>
	}
 80097b6:	e00f      	b.n	80097d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d00a      	beq.n	80097d8 <prvDeleteTCB+0x60>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60fb      	str	r3, [r7, #12]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <prvDeleteTCB+0x5e>
	}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <prvResetNextTaskUnblockTime+0x38>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <prvResetNextTaskUnblockTime+0x3c>)
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097f8:	e008      	b.n	800980c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fa:	4b07      	ldr	r3, [pc, #28]	; (8009818 <prvResetNextTaskUnblockTime+0x38>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4a04      	ldr	r2, [pc, #16]	; (800981c <prvResetNextTaskUnblockTime+0x3c>)
 800980a:	6013      	str	r3, [r2, #0]
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	2000075c 	.word	0x2000075c
 800981c:	200007c4 	.word	0x200007c4

08009820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <xTaskGetSchedulerState+0x34>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800982e:	2301      	movs	r3, #1
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	e008      	b.n	8009846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <xTaskGetSchedulerState+0x38>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800983c:	2302      	movs	r3, #2
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e001      	b.n	8009846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009842:	2300      	movs	r3, #0
 8009844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009846:	687b      	ldr	r3, [r7, #4]
	}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	200007b0 	.word	0x200007b0
 8009858:	200007cc 	.word	0x200007cc

0800985c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05e      	beq.n	8009930 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4b31      	ldr	r3, [pc, #196]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	429a      	cmp	r2, r3
 800987e:	d24e      	bcs.n	800991e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	db06      	blt.n	8009896 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009888:	4b2c      	ldr	r3, [pc, #176]	; (800993c <xTaskPriorityInherit+0xe0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	f1c3 0207 	rsb	r2, r3, #7
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6959      	ldr	r1, [r3, #20]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4a26      	ldr	r2, [pc, #152]	; (8009940 <xTaskPriorityInherit+0xe4>)
 80098a8:	4413      	add	r3, r2
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d12f      	bne.n	800990e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fbd4 	bl	8008060 <uxListRemove>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	2201      	movs	r2, #1
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	43da      	mvns	r2, r3
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4013      	ands	r3, r2
 80098d0:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098d4:	4b19      	ldr	r3, [pc, #100]	; (800993c <xTaskPriorityInherit+0xe0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a15      	ldr	r2, [pc, #84]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a10      	ldr	r2, [pc, #64]	; (8009940 <xTaskPriorityInherit+0xe4>)
 80098fe:	441a      	add	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7fe fb4d 	bl	8007fa6 <vListInsertEnd>
 800990c:	e004      	b.n	8009918 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800990e:	4b0b      	ldr	r3, [pc, #44]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	e008      	b.n	8009930 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	429a      	cmp	r2, r3
 800992a:	d201      	bcs.n	8009930 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009930:	68fb      	ldr	r3, [r7, #12]
	}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200006a4 	.word	0x200006a4
 8009940:	200006a8 	.word	0x200006a8
 8009944:	200007ac 	.word	0x200007ac

08009948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d06e      	beq.n	8009a3c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800995e:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <xTaskPriorityDisinherit+0x100>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	429a      	cmp	r2, r3
 8009966:	d00a      	beq.n	800997e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	60fb      	str	r3, [r7, #12]
}
 800997a:	bf00      	nop
 800997c:	e7fe      	b.n	800997c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a0:	1e5a      	subs	r2, r3, #1
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d044      	beq.n	8009a3c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d140      	bne.n	8009a3c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3304      	adds	r3, #4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fb4e 	bl	8008060 <uxListRemove>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d115      	bne.n	80099f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	491f      	ldr	r1, [pc, #124]	; (8009a4c <xTaskPriorityDisinherit+0x104>)
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xTaskPriorityDisinherit+0xae>
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e4:	2201      	movs	r2, #1
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	43da      	mvns	r2, r3
 80099ec:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4013      	ands	r3, r2
 80099f2:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 80099f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	f1c3 0207 	rsb	r2, r3, #7
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	2201      	movs	r2, #1
 8009a10:	409a      	lsls	r2, r3
 8009a12:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <xTaskPriorityDisinherit+0x104>)
 8009a2a:	441a      	add	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fe fab7 	bl	8007fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a3c:	697b      	ldr	r3, [r7, #20]
	}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200006a4 	.word	0x200006a4
 8009a4c:	200006a8 	.word	0x200006a8
 8009a50:	200007ac 	.word	0x200007ac

08009a54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d077      	beq.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60fb      	str	r3, [r7, #12]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d902      	bls.n	8009a9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e002      	b.n	8009aa0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d058      	beq.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d153      	bne.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	; (8009b64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d10a      	bne.n	8009ad4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	db04      	blt.n	8009af2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f1c3 0207 	rsb	r2, r3, #7
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	6959      	ldr	r1, [r3, #20]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a19      	ldr	r2, [pc, #100]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b02:	4413      	add	r3, r2
 8009b04:	4299      	cmp	r1, r3
 8009b06:	d129      	bne.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe faa7 	bl	8008060 <uxListRemove>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43da      	mvns	r2, r3
 8009b24:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	2201      	movs	r2, #1
 8009b34:	409a      	lsls	r2, r3
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	4a0b      	ldr	r2, [pc, #44]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4a06      	ldr	r2, [pc, #24]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe fa25 	bl	8007fa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b5c:	bf00      	nop
 8009b5e:	3720      	adds	r7, #32
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200006a4 	.word	0x200006a4
 8009b68:	200006a8 	.word	0x200006a8
 8009b6c:	200007ac 	.word	0x200007ac

08009b70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b74:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b82:	3201      	adds	r2, #1
 8009b84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009b86:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b88:	681b      	ldr	r3, [r3, #0]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	200006a4 	.word	0x200006a4

08009b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba8:	4b28      	ldr	r3, [pc, #160]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fa56 	bl	8008060 <uxListRemove>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bba:	4b24      	ldr	r3, [pc, #144]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	43da      	mvns	r2, r3
 8009bc8:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d10a      	bne.n	8009bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009be0:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	481a      	ldr	r0, [pc, #104]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bea:	f7fe f9dc 	bl	8007fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bee:	e026      	b.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bf8:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d209      	bcs.n	8009c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3304      	adds	r3, #4
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7fe f9ea 	bl	8007fee <vListInsert>
}
 8009c1a:	e010      	b.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3304      	adds	r3, #4
 8009c26:	4619      	mov	r1, r3
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f7fe f9e0 	bl	8007fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d202      	bcs.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	6013      	str	r3, [r2, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200007a8 	.word	0x200007a8
 8009c4c:	200006a4 	.word	0x200006a4
 8009c50:	200007ac 	.word	0x200007ac
 8009c54:	20000790 	.word	0x20000790
 8009c58:	20000760 	.word	0x20000760
 8009c5c:	2000075c 	.word	0x2000075c
 8009c60:	200007c4 	.word	0x200007c4

08009c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3b04      	subs	r3, #4
 8009c74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3b04      	subs	r3, #4
 8009c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f023 0201 	bic.w	r2, r3, #1
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3b04      	subs	r3, #4
 8009c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c94:	4a0c      	ldr	r2, [pc, #48]	; (8009cc8 <pxPortInitialiseStack+0x64>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3b14      	subs	r3, #20
 8009c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3b04      	subs	r3, #4
 8009caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f06f 0202 	mvn.w	r2, #2
 8009cb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3b20      	subs	r3, #32
 8009cb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cba:	68fb      	ldr	r3, [r7, #12]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	08009ccd 	.word	0x08009ccd

08009ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <prvTaskExitError+0x54>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cde:	d00a      	beq.n	8009cf6 <prvTaskExitError+0x2a>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <prvTaskExitError+0x28>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	60bb      	str	r3, [r7, #8]
}
 8009d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d0a:	bf00      	nop
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0fc      	beq.n	8009d0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	20000098 	.word	0x20000098
	...

08009d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <pxCurrentTCBConst2>)
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	6808      	ldr	r0, [r1, #0]
 8009d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3a:	f380 8809 	msr	PSP, r0
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f04f 0000 	mov.w	r0, #0
 8009d46:	f380 8811 	msr	BASEPRI, r0
 8009d4a:	4770      	bx	lr
 8009d4c:	f3af 8000 	nop.w

08009d50 <pxCurrentTCBConst2>:
 8009d50:	200006a4 	.word	0x200006a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop

08009d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d58:	4808      	ldr	r0, [pc, #32]	; (8009d7c <prvPortStartFirstTask+0x24>)
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	6800      	ldr	r0, [r0, #0]
 8009d5e:	f380 8808 	msr	MSP, r0
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8814 	msr	CONTROL, r0
 8009d6a:	b662      	cpsie	i
 8009d6c:	b661      	cpsie	f
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	df00      	svc	0
 8009d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d7a:	bf00      	nop
 8009d7c:	e000ed08 	.word	0xe000ed08

08009d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d86:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a46      	ldr	r2, [pc, #280]	; (8009ea4 <xPortStartScheduler+0x124>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d10a      	bne.n	8009da6 <xPortStartScheduler+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009da6:	4b3e      	ldr	r3, [pc, #248]	; (8009ea0 <xPortStartScheduler+0x120>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a3f      	ldr	r2, [pc, #252]	; (8009ea8 <xPortStartScheduler+0x128>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10a      	bne.n	8009dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dc6:	4b39      	ldr	r3, [pc, #228]	; (8009eac <xPortStartScheduler+0x12c>)
 8009dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	22ff      	movs	r2, #255	; 0xff
 8009dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	4b31      	ldr	r3, [pc, #196]	; (8009eb0 <xPortStartScheduler+0x130>)
 8009dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dee:	4b31      	ldr	r3, [pc, #196]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df0:	2207      	movs	r2, #7
 8009df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009df4:	e009      	b.n	8009e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009df6:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	4a2d      	ldr	r2, [pc, #180]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e12:	2b80      	cmp	r3, #128	; 0x80
 8009e14:	d0ef      	beq.n	8009df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e16:	4b27      	ldr	r3, [pc, #156]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f1c3 0307 	rsb	r3, r3, #7
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d00a      	beq.n	8009e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60bb      	str	r3, [r7, #8]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <xPortStartScheduler+0x134>)
 8009e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e56:	4b18      	ldr	r3, [pc, #96]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e62:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <xPortStartScheduler+0x138>)
 8009e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e6e:	f000 f8dd 	bl	800a02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e72:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <xPortStartScheduler+0x13c>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e78:	f000 f8fc 	bl	800a074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0f      	ldr	r2, [pc, #60]	; (8009ec0 <xPortStartScheduler+0x140>)
 8009e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e88:	f7ff ff66 	bl	8009d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e8c:	f7ff fa82 	bl	8009394 <vTaskSwitchContext>
	prvTaskExitError();
 8009e90:	f7ff ff1c 	bl	8009ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	e000ed00 	.word	0xe000ed00
 8009ea4:	410fc271 	.word	0x410fc271
 8009ea8:	410fc270 	.word	0x410fc270
 8009eac:	e000e400 	.word	0xe000e400
 8009eb0:	200007d0 	.word	0x200007d0
 8009eb4:	200007d4 	.word	0x200007d4
 8009eb8:	e000ed20 	.word	0xe000ed20
 8009ebc:	20000098 	.word	0x20000098
 8009ec0:	e000ef34 	.word	0xe000ef34

08009ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	607b      	str	r3, [r7, #4]
}
 8009edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a0d      	ldr	r2, [pc, #52]	; (8009f1c <vPortEnterCritical+0x58>)
 8009ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <vPortEnterCritical+0x58>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d10f      	bne.n	8009f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <vPortEnterCritical+0x5c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	603b      	str	r3, [r7, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <vPortEnterCritical+0x4a>
	}
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	20000098 	.word	0x20000098
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <vPortExitCritical+0x50>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <vPortExitCritical+0x24>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
}
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <vPortExitCritical+0x50>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <vPortExitCritical+0x50>)
 8009f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <vPortExitCritical+0x50>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <vPortExitCritical+0x42>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f383 8811 	msr	BASEPRI, r3
}
 8009f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000098 	.word	0x20000098
	...

08009f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f80:	f3ef 8009 	mrs	r0, PSP
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <pxCurrentTCBConst>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	f01e 0f10 	tst.w	lr, #16
 8009f90:	bf08      	it	eq
 8009f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fa4:	f380 8811 	msr	BASEPRI, r0
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f7ff f9f0 	bl	8009394 <vTaskSwitchContext>
 8009fb4:	f04f 0000 	mov.w	r0, #0
 8009fb8:	f380 8811 	msr	BASEPRI, r0
 8009fbc:	bc09      	pop	{r0, r3}
 8009fbe:	6819      	ldr	r1, [r3, #0]
 8009fc0:	6808      	ldr	r0, [r1, #0]
 8009fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc6:	f01e 0f10 	tst.w	lr, #16
 8009fca:	bf08      	it	eq
 8009fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fd0:	f380 8809 	msr	PSP, r0
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst>:
 8009fe0:	200006a4 	.word	0x200006a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	607b      	str	r3, [r7, #4]
}
 800a000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a002:	f7ff f90f 	bl	8009224 <xTaskIncrementTick>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <SysTick_Handler+0x40>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f383 8811 	msr	BASEPRI, r3
}
 800a01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <vPortSetupTimerInterrupt+0x38>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <vPortSetupTimerInterrupt+0x3c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <vPortSetupTimerInterrupt+0x40>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	099b      	lsrs	r3, r3, #6
 800a048:	4a09      	ldr	r2, [pc, #36]	; (800a070 <vPortSetupTimerInterrupt+0x44>)
 800a04a:	3b01      	subs	r3, #1
 800a04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <vPortSetupTimerInterrupt+0x34>)
 800a050:	2207      	movs	r2, #7
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	e000e010 	.word	0xe000e010
 800a064:	e000e018 	.word	0xe000e018
 800a068:	20000000 	.word	0x20000000
 800a06c:	10624dd3 	.word	0x10624dd3
 800a070:	e000e014 	.word	0xe000e014

0800a074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a084 <vPortEnableVFP+0x10>
 800a078:	6801      	ldr	r1, [r0, #0]
 800a07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a07e:	6001      	str	r1, [r0, #0]
 800a080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a082:	bf00      	nop
 800a084:	e000ed88 	.word	0xe000ed88

0800a088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d914      	bls.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <vPortValidateInterruptPriority+0x70>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0a4:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <vPortValidateInterruptPriority+0x74>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	7afa      	ldrb	r2, [r7, #11]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20a      	bcs.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <vPortValidateInterruptPriority+0x78>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <vPortValidateInterruptPriority+0x7c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	603b      	str	r3, [r7, #0]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	e000e3f0 	.word	0xe000e3f0
 800a0fc:	200007d0 	.word	0x200007d0
 800a100:	e000ed0c 	.word	0xe000ed0c
 800a104:	200007d4 	.word	0x200007d4

0800a108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a114:	f7fe ffdc 	bl	80090d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a118:	4b5b      	ldr	r3, [pc, #364]	; (800a288 <pvPortMalloc+0x180>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a120:	f000 f920 	bl	800a364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a124:	4b59      	ldr	r3, [pc, #356]	; (800a28c <pvPortMalloc+0x184>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f040 8093 	bne.w	800a258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01d      	beq.n	800a174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a138:	2208      	movs	r2, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d014      	beq.n	800a174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <pvPortMalloc+0x6c>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	617b      	str	r3, [r7, #20]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d06e      	beq.n	800a258 <pvPortMalloc+0x150>
 800a17a:	4b45      	ldr	r3, [pc, #276]	; (800a290 <pvPortMalloc+0x188>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d869      	bhi.n	800a258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a184:	4b43      	ldr	r3, [pc, #268]	; (800a294 <pvPortMalloc+0x18c>)
 800a186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <pvPortMalloc+0x18c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a18e:	e004      	b.n	800a19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d903      	bls.n	800a1ac <pvPortMalloc+0xa4>
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1f1      	bne.n	800a190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1ac:	4b36      	ldr	r3, [pc, #216]	; (800a288 <pvPortMalloc+0x180>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d050      	beq.n	800a258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	4413      	add	r3, r2
 800a1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d91f      	bls.n	800a218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	613b      	str	r3, [r7, #16]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a212:	69b8      	ldr	r0, [r7, #24]
 800a214:	f000 f908 	bl	800a428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <pvPortMalloc+0x188>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	4a1b      	ldr	r2, [pc, #108]	; (800a290 <pvPortMalloc+0x188>)
 800a224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <pvPortMalloc+0x188>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <pvPortMalloc+0x190>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d203      	bcs.n	800a23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <pvPortMalloc+0x188>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <pvPortMalloc+0x190>)
 800a238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <pvPortMalloc+0x184>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	431a      	orrs	r2, r3
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <pvPortMalloc+0x194>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3301      	adds	r3, #1
 800a254:	4a11      	ldr	r2, [pc, #68]	; (800a29c <pvPortMalloc+0x194>)
 800a256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a258:	f7fe ff48 	bl	80090ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <pvPortMalloc+0x174>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60fb      	str	r3, [r7, #12]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <pvPortMalloc+0x172>
	return pvReturn;
 800a27c:	69fb      	ldr	r3, [r7, #28]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200043e0 	.word	0x200043e0
 800a28c:	200043f4 	.word	0x200043f4
 800a290:	200043e4 	.word	0x200043e4
 800a294:	200043d8 	.word	0x200043d8
 800a298:	200043e8 	.word	0x200043e8
 800a29c:	200043ec 	.word	0x200043ec

0800a2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04d      	beq.n	800a34e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	4b24      	ldr	r3, [pc, #144]	; (800a358 <vPortFree+0xb8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vPortFree+0x44>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60fb      	str	r3, [r7, #12]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <vPortFree+0x62>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60bb      	str	r3, [r7, #8]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <vPortFree+0xb8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01e      	beq.n	800a34e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11a      	bne.n	800a34e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <vPortFree+0xb8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	43db      	mvns	r3, r3
 800a322:	401a      	ands	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a328:	f7fe fed2 	bl	80090d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <vPortFree+0xbc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4413      	add	r3, r2
 800a336:	4a09      	ldr	r2, [pc, #36]	; (800a35c <vPortFree+0xbc>)
 800a338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f000 f874 	bl	800a428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <vPortFree+0xc0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	4a06      	ldr	r2, [pc, #24]	; (800a360 <vPortFree+0xc0>)
 800a348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a34a:	f7fe fecf 	bl	80090ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200043f4 	.word	0x200043f4
 800a35c:	200043e4 	.word	0x200043e4
 800a360:	200043f0 	.word	0x200043f0

0800a364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a36a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <prvHeapInit+0xac>)
 800a372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <prvHeapInit+0xac>)
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a39c:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <prvHeapInit+0xb0>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <prvHeapInit+0xb0>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <prvHeapInit+0xb4>)
 800a3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvHeapInit+0xb4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <prvHeapInit+0xb4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <prvHeapInit+0xb4>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <prvHeapInit+0xb8>)
 800a3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <prvHeapInit+0xbc>)
 800a3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <prvHeapInit+0xc0>)
 800a3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	200007d8 	.word	0x200007d8
 800a414:	200043d8 	.word	0x200043d8
 800a418:	200043e0 	.word	0x200043e0
 800a41c:	200043e8 	.word	0x200043e8
 800a420:	200043e4 	.word	0x200043e4
 800a424:	200043f4 	.word	0x200043f4

0800a428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <prvInsertBlockIntoFreeList+0xac>)
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e002      	b.n	800a43c <prvInsertBlockIntoFreeList+0x14>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d8f7      	bhi.n	800a436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4413      	add	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d108      	bne.n	800a46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	441a      	add	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d118      	bne.n	800a4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d00d      	beq.n	800a4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	441a      	add	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e008      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e003      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d002      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	200043d8 	.word	0x200043d8
 800a4d8:	200043e0 	.word	0x200043e0

0800a4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4912      	ldr	r1, [pc, #72]	; (800a52c <MX_USB_DEVICE_Init+0x50>)
 800a4e4:	4812      	ldr	r0, [pc, #72]	; (800a530 <MX_USB_DEVICE_Init+0x54>)
 800a4e6:	f7fc f8e3 	bl	80066b0 <USBD_Init>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4f0:	f7f6 ffca 	bl	8001488 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4f4:	490f      	ldr	r1, [pc, #60]	; (800a534 <MX_USB_DEVICE_Init+0x58>)
 800a4f6:	480e      	ldr	r0, [pc, #56]	; (800a530 <MX_USB_DEVICE_Init+0x54>)
 800a4f8:	f7fc f90a 	bl	8006710 <USBD_RegisterClass>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a502:	f7f6 ffc1 	bl	8001488 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a506:	490c      	ldr	r1, [pc, #48]	; (800a538 <MX_USB_DEVICE_Init+0x5c>)
 800a508:	4809      	ldr	r0, [pc, #36]	; (800a530 <MX_USB_DEVICE_Init+0x54>)
 800a50a:	f7fc f801 	bl	8006510 <USBD_CDC_RegisterInterface>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a514:	f7f6 ffb8 	bl	8001488 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a518:	4805      	ldr	r0, [pc, #20]	; (800a530 <MX_USB_DEVICE_Init+0x54>)
 800a51a:	f7fc f92f 	bl	800677c <USBD_Start>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a524:	f7f6 ffb0 	bl	8001488 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a528:	bf00      	nop
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	200000b0 	.word	0x200000b0
 800a530:	200043f8 	.word	0x200043f8
 800a534:	20000018 	.word	0x20000018
 800a538:	2000009c 	.word	0x2000009c

0800a53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a540:	2200      	movs	r2, #0
 800a542:	4905      	ldr	r1, [pc, #20]	; (800a558 <CDC_Init_FS+0x1c>)
 800a544:	4805      	ldr	r0, [pc, #20]	; (800a55c <CDC_Init_FS+0x20>)
 800a546:	f7fb fffd 	bl	8006544 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a54a:	4905      	ldr	r1, [pc, #20]	; (800a560 <CDC_Init_FS+0x24>)
 800a54c:	4803      	ldr	r0, [pc, #12]	; (800a55c <CDC_Init_FS+0x20>)
 800a54e:	f7fc f81b 	bl	8006588 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a554:	4618      	mov	r0, r3
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20004ed4 	.word	0x20004ed4
 800a55c:	200043f8 	.word	0x200043f8
 800a560:	200046d4 	.word	0x200046d4

0800a564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
 800a580:	4613      	mov	r3, r2
 800a582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	2b23      	cmp	r3, #35	; 0x23
 800a588:	d84a      	bhi.n	800a620 <CDC_Control_FS+0xac>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <CDC_Control_FS+0x1c>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a621 	.word	0x0800a621
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a621 	.word	0x0800a621
 800a59c:	0800a621 	.word	0x0800a621
 800a5a0:	0800a621 	.word	0x0800a621
 800a5a4:	0800a621 	.word	0x0800a621
 800a5a8:	0800a621 	.word	0x0800a621
 800a5ac:	0800a621 	.word	0x0800a621
 800a5b0:	0800a621 	.word	0x0800a621
 800a5b4:	0800a621 	.word	0x0800a621
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a621 	.word	0x0800a621
 800a5c0:	0800a621 	.word	0x0800a621
 800a5c4:	0800a621 	.word	0x0800a621
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a621 	.word	0x0800a621
 800a5d8:	0800a621 	.word	0x0800a621
 800a5dc:	0800a621 	.word	0x0800a621
 800a5e0:	0800a621 	.word	0x0800a621
 800a5e4:	0800a621 	.word	0x0800a621
 800a5e8:	0800a621 	.word	0x0800a621
 800a5ec:	0800a621 	.word	0x0800a621
 800a5f0:	0800a621 	.word	0x0800a621
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a621 	.word	0x0800a621
 800a600:	0800a621 	.word	0x0800a621
 800a604:	0800a621 	.word	0x0800a621
 800a608:	0800a621 	.word	0x0800a621
 800a60c:	0800a621 	.word	0x0800a621
 800a610:	0800a621 	.word	0x0800a621
 800a614:	0800a621 	.word	0x0800a621
 800a618:	0800a621 	.word	0x0800a621
 800a61c:	0800a621 	.word	0x0800a621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a620:	bf00      	nop
  }

  return (USBD_OK);
 800a622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	4805      	ldr	r0, [pc, #20]	; (800a654 <CDC_Receive_FS+0x24>)
 800a63e:	f7fb ffa3 	bl	8006588 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a642:	4804      	ldr	r0, [pc, #16]	; (800a654 <CDC_Receive_FS+0x24>)
 800a644:	f7fb fffe 	bl	8006644 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	200043f8 	.word	0x200043f8

0800a658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <CDC_Transmit_FS+0x48>)
 800a66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e00b      	b.n	800a696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a67e:	887b      	ldrh	r3, [r7, #2]
 800a680:	461a      	mov	r2, r3
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	4806      	ldr	r0, [pc, #24]	; (800a6a0 <CDC_Transmit_FS+0x48>)
 800a686:	f7fb ff5d 	bl	8006544 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <CDC_Transmit_FS+0x48>)
 800a68c:	f7fb ff9a 	bl	80065c4 <USBD_CDC_TransmitPacket>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200043f8 	.word	0x200043f8

0800a6a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	6039      	str	r1, [r7, #0]
 800a6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2212      	movs	r2, #18
 800a6d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6da:	4b03      	ldr	r3, [pc, #12]	; (800a6e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	200000cc 	.word	0x200000cc

0800a6ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	200000e0 	.word	0x200000e0

0800a710 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d105      	bne.n	800a72e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	4907      	ldr	r1, [pc, #28]	; (800a744 <USBD_FS_ProductStrDescriptor+0x34>)
 800a726:	4808      	ldr	r0, [pc, #32]	; (800a748 <USBD_FS_ProductStrDescriptor+0x38>)
 800a728:	f7fd f9da 	bl	8007ae0 <USBD_GetString>
 800a72c:	e004      	b.n	800a738 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	4904      	ldr	r1, [pc, #16]	; (800a744 <USBD_FS_ProductStrDescriptor+0x34>)
 800a732:	4805      	ldr	r0, [pc, #20]	; (800a748 <USBD_FS_ProductStrDescriptor+0x38>)
 800a734:	f7fd f9d4 	bl	8007ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a738:	4b02      	ldr	r3, [pc, #8]	; (800a744 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200056d4 	.word	0x200056d4
 800a748:	0800de18 	.word	0x0800de18

0800a74c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	4904      	ldr	r1, [pc, #16]	; (800a76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a75c:	4804      	ldr	r0, [pc, #16]	; (800a770 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a75e:	f7fd f9bf 	bl	8007ae0 <USBD_GetString>
  return USBD_StrDesc;
 800a762:	4b02      	ldr	r3, [pc, #8]	; (800a76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	200056d4 	.word	0x200056d4
 800a770:	0800de30 	.word	0x0800de30

0800a774 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	6039      	str	r1, [r7, #0]
 800a77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	221a      	movs	r2, #26
 800a784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a786:	f000 f843 	bl	800a810 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a78a:	4b02      	ldr	r3, [pc, #8]	; (800a794 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	200000e4 	.word	0x200000e4

0800a798 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4907      	ldr	r1, [pc, #28]	; (800a7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ae:	4808      	ldr	r0, [pc, #32]	; (800a7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7b0:	f7fd f996 	bl	8007ae0 <USBD_GetString>
 800a7b4:	e004      	b.n	800a7c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4904      	ldr	r1, [pc, #16]	; (800a7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ba:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7bc:	f7fd f990 	bl	8007ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	200056d4 	.word	0x200056d4
 800a7d0:	0800de44 	.word	0x0800de44

0800a7d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d105      	bne.n	800a7f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4907      	ldr	r1, [pc, #28]	; (800a808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ea:	4808      	ldr	r0, [pc, #32]	; (800a80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7ec:	f7fd f978 	bl	8007ae0 <USBD_GetString>
 800a7f0:	e004      	b.n	800a7fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	4904      	ldr	r1, [pc, #16]	; (800a808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7f6:	4805      	ldr	r0, [pc, #20]	; (800a80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7f8:	f7fd f972 	bl	8007ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7fc:	4b02      	ldr	r3, [pc, #8]	; (800a808 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200056d4 	.word	0x200056d4
 800a80c:	0800de50 	.word	0x0800de50

0800a810 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a816:	4b0f      	ldr	r3, [pc, #60]	; (800a854 <Get_SerialNum+0x44>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a81c:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <Get_SerialNum+0x48>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a822:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <Get_SerialNum+0x4c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4413      	add	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a836:	2208      	movs	r2, #8
 800a838:	4909      	ldr	r1, [pc, #36]	; (800a860 <Get_SerialNum+0x50>)
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f814 	bl	800a868 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a840:	2204      	movs	r2, #4
 800a842:	4908      	ldr	r1, [pc, #32]	; (800a864 <Get_SerialNum+0x54>)
 800a844:	68b8      	ldr	r0, [r7, #8]
 800a846:	f000 f80f 	bl	800a868 <IntToUnicode>
  }
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	1fff7a10 	.word	0x1fff7a10
 800a858:	1fff7a14 	.word	0x1fff7a14
 800a85c:	1fff7a18 	.word	0x1fff7a18
 800a860:	200000e6 	.word	0x200000e6
 800a864:	200000f6 	.word	0x200000f6

0800a868 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a87a:	2300      	movs	r3, #0
 800a87c:	75fb      	strb	r3, [r7, #23]
 800a87e:	e027      	b.n	800a8d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	0f1b      	lsrs	r3, r3, #28
 800a884:	2b09      	cmp	r3, #9
 800a886:	d80b      	bhi.n	800a8a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	0f1b      	lsrs	r3, r3, #28
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	4619      	mov	r1, r3
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	440b      	add	r3, r1
 800a898:	3230      	adds	r2, #48	; 0x30
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	e00a      	b.n	800a8b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	0f1b      	lsrs	r3, r3, #28
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3237      	adds	r2, #55	; 0x37
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	75fb      	strb	r3, [r7, #23]
 800a8d0:	7dfa      	ldrb	r2, [r7, #23]
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d3d3      	bcc.n	800a880 <IntToUnicode+0x18>
  }
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8f0:	f107 0314 	add.w	r3, r7, #20
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	605a      	str	r2, [r3, #4]
 800a8fa:	609a      	str	r2, [r3, #8]
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a908:	d13a      	bne.n	800a980 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a90a:	2300      	movs	r3, #0
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	4b1e      	ldr	r3, [pc, #120]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	4a1d      	ldr	r2, [pc, #116]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	6313      	str	r3, [r2, #48]	; 0x30
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a92a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a92c:	2302      	movs	r3, #2
 800a92e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a934:	2303      	movs	r3, #3
 800a936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a938:	230a      	movs	r3, #10
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a93c:	f107 0314 	add.w	r3, r7, #20
 800a940:	4619      	mov	r1, r3
 800a942:	4812      	ldr	r0, [pc, #72]	; (800a98c <HAL_PCD_MspInit+0xa4>)
 800a944:	f7f7 f94a 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94c:	4a0e      	ldr	r2, [pc, #56]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a952:	6353      	str	r3, [r2, #52]	; 0x34
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a95e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a962:	6453      	str	r3, [r2, #68]	; 0x44
 800a964:	4b08      	ldr	r3, [pc, #32]	; (800a988 <HAL_PCD_MspInit+0xa0>)
 800a966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a970:	2200      	movs	r2, #0
 800a972:	2105      	movs	r1, #5
 800a974:	2043      	movs	r0, #67	; 0x43
 800a976:	f7f7 f907 	bl	8001b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a97a:	2043      	movs	r0, #67	; 0x43
 800a97c:	f7f7 f920 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a980:	bf00      	nop
 800a982:	3728      	adds	r7, #40	; 0x28
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	40023800 	.word	0x40023800
 800a98c:	40020000 	.word	0x40020000

0800a990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fb ff35 	bl	8006816 <USBD_LL_SetupStage>
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	f7fb ff6f 	bl	80068c0 <USBD_LL_DataOutStage>
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	4613      	mov	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	3320      	adds	r3, #32
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7fc f808 	bl	8006a26 <USBD_LL_DataInStage>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fc f942 	bl	8006cb6 <USBD_LL_SOF>
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa42:	2301      	movs	r3, #1
 800aa44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	79db      	ldrb	r3, [r3, #7]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]
 800aa52:	e008      	b.n	800aa66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	79db      	ldrb	r3, [r3, #7]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d102      	bne.n	800aa62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	e001      	b.n	800aa66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa62:	f7f6 fd11 	bl	8001488 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa6c:	7bfa      	ldrb	r2, [r7, #15]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fc f8dc 	bl	8006c2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fc f884 	bl	8006b8a <USBD_LL_Reset>
}
 800aa82:	bf00      	nop
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fc f8d7 	bl	8006c4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aab2:	f043 0301 	orr.w	r3, r3, #1
 800aab6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7adb      	ldrb	r3, [r3, #11]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d005      	beq.n	800aacc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aac0:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <HAL_PCD_SuspendCallback+0x48>)
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	4a03      	ldr	r2, [pc, #12]	; (800aad4 <HAL_PCD_SuspendCallback+0x48>)
 800aac6:	f043 0306 	orr.w	r3, r3, #6
 800aaca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	e000ed00 	.word	0xe000ed00

0800aad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fc f8cd 	bl	8006c86 <USBD_LL_Resume>
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab06:	78fa      	ldrb	r2, [r7, #3]
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fc f925 	bl	8006d5a <USBD_LL_IsoOUTIncomplete>
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab2a:	78fa      	ldrb	r2, [r7, #3]
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fc f8e1 	bl	8006cf6 <USBD_LL_IsoINIncomplete>
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fc f937 	bl	8006dbe <USBD_LL_DevConnected>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fc f934 	bl	8006dd4 <USBD_LL_DevDisconnected>
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d13c      	bne.n	800abfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab84:	4a20      	ldr	r2, [pc, #128]	; (800ac08 <USBD_LL_Init+0x94>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <USBD_LL_Init+0x94>)
 800ab90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab94:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <USBD_LL_Init+0x94>)
 800ab96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ab9c:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <USBD_LL_Init+0x94>)
 800ab9e:	2204      	movs	r2, #4
 800aba0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aba2:	4b19      	ldr	r3, [pc, #100]	; (800ac08 <USBD_LL_Init+0x94>)
 800aba4:	2202      	movs	r2, #2
 800aba6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aba8:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <USBD_LL_Init+0x94>)
 800abaa:	2200      	movs	r2, #0
 800abac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <USBD_LL_Init+0x94>)
 800abb0:	2202      	movs	r2, #2
 800abb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abb4:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <USBD_LL_Init+0x94>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <USBD_LL_Init+0x94>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abc0:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <USBD_LL_Init+0x94>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <USBD_LL_Init+0x94>)
 800abc8:	2200      	movs	r2, #0
 800abca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abcc:	4b0e      	ldr	r3, [pc, #56]	; (800ac08 <USBD_LL_Init+0x94>)
 800abce:	2200      	movs	r2, #0
 800abd0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abd2:	480d      	ldr	r0, [pc, #52]	; (800ac08 <USBD_LL_Init+0x94>)
 800abd4:	f7f7 fb16 	bl	8002204 <HAL_PCD_Init>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abde:	f7f6 fc53 	bl	8001488 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abe2:	2180      	movs	r1, #128	; 0x80
 800abe4:	4808      	ldr	r0, [pc, #32]	; (800ac08 <USBD_LL_Init+0x94>)
 800abe6:	f7f8 fd40 	bl	800366a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800abea:	2240      	movs	r2, #64	; 0x40
 800abec:	2100      	movs	r1, #0
 800abee:	4806      	ldr	r0, [pc, #24]	; (800ac08 <USBD_LL_Init+0x94>)
 800abf0:	f7f8 fcf4 	bl	80035dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800abf4:	2280      	movs	r2, #128	; 0x80
 800abf6:	2101      	movs	r1, #1
 800abf8:	4803      	ldr	r0, [pc, #12]	; (800ac08 <USBD_LL_Init+0x94>)
 800abfa:	f7f8 fcef 	bl	80035dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	200058d4 	.word	0x200058d4

0800ac0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f7 fbfd 	bl	8002422 <HAL_PCD_Start>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f942 	bl	800aeb8 <USBD_Get_USB_Status>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4603      	mov	r3, r0
 800ac52:	70fb      	strb	r3, [r7, #3]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70bb      	strb	r3, [r7, #2]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac6a:	78bb      	ldrb	r3, [r7, #2]
 800ac6c:	883a      	ldrh	r2, [r7, #0]
 800ac6e:	78f9      	ldrb	r1, [r7, #3]
 800ac70:	f7f8 f8d1 	bl	8002e16 <HAL_PCD_EP_Open>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f91c 	bl	800aeb8 <USBD_Get_USB_Status>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	460b      	mov	r3, r1
 800ac98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f7f8 f91a 	bl	8002ee6 <HAL_PCD_EP_Close>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 f8fd 	bl	800aeb8 <USBD_Get_USB_Status>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ace6:	78fa      	ldrb	r2, [r7, #3]
 800ace8:	4611      	mov	r1, r2
 800acea:	4618      	mov	r0, r3
 800acec:	f7f8 f9d2 	bl	8003094 <HAL_PCD_EP_SetStall>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f8de 	bl	800aeb8 <USBD_Get_USB_Status>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f8 fa16 	bl	800315a <HAL_PCD_EP_ClrStall>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f8bf 	bl	800aeb8 <USBD_Get_USB_Status>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	da0b      	bge.n	800ad7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	3316      	adds	r3, #22
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	e00b      	b.n	800ad94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	4613      	mov	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	440b      	add	r3, r1
 800ad8e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ad92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adba:	78fa      	ldrb	r2, [r7, #3]
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f8 f805 	bl	8002dce <HAL_PCD_SetAddress>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f874 	bl	800aeb8 <USBD_Get_USB_Status>
 800add0:	4603      	mov	r3, r0
 800add2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add4:	7bbb      	ldrb	r3, [r7, #14]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
 800adea:	460b      	mov	r3, r1
 800adec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adfc:	7af9      	ldrb	r1, [r7, #11]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	f7f8 f90d 	bl	8003020 <HAL_PCD_EP_Transmit>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f853 	bl	800aeb8 <USBD_Get_USB_Status>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae16:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae3e:	7af9      	ldrb	r1, [r7, #11]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	f7f8 f899 	bl	8002f7a <HAL_PCD_EP_Receive>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f832 	bl	800aeb8 <USBD_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae58:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae74:	78fa      	ldrb	r2, [r7, #3]
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7f8 f8b9 	bl	8002ff0 <HAL_PCD_EP_GetRxCount>
 800ae7e:	4603      	mov	r3, r0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae90:	4b03      	ldr	r3, [pc, #12]	; (800aea0 <USBD_static_malloc+0x18>)
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20005db8 	.word	0x20005db8

0800aea4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]

}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d817      	bhi.n	800aefc <USBD_Get_USB_Status+0x44>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <USBD_Get_USB_Status+0x1c>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800aee5 	.word	0x0800aee5
 800aed8:	0800aeeb 	.word	0x0800aeeb
 800aedc:	0800aef1 	.word	0x0800aef1
 800aee0:	0800aef7 	.word	0x0800aef7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]
    break;
 800aee8:	e00b      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	73fb      	strb	r3, [r7, #15]
    break;
 800aeee:	e008      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
    break;
 800aef4:	e005      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	73fb      	strb	r3, [r7, #15]
    break;
 800aefa:	e002      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	bf00      	nop
  }
  return usb_status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <__cvt>:
 800af10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	ec55 4b10 	vmov	r4, r5, d0
 800af18:	2d00      	cmp	r5, #0
 800af1a:	460e      	mov	r6, r1
 800af1c:	4619      	mov	r1, r3
 800af1e:	462b      	mov	r3, r5
 800af20:	bfbb      	ittet	lt
 800af22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af26:	461d      	movlt	r5, r3
 800af28:	2300      	movge	r3, #0
 800af2a:	232d      	movlt	r3, #45	; 0x2d
 800af2c:	700b      	strb	r3, [r1, #0]
 800af2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af34:	4691      	mov	r9, r2
 800af36:	f023 0820 	bic.w	r8, r3, #32
 800af3a:	bfbc      	itt	lt
 800af3c:	4622      	movlt	r2, r4
 800af3e:	4614      	movlt	r4, r2
 800af40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af44:	d005      	beq.n	800af52 <__cvt+0x42>
 800af46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af4a:	d100      	bne.n	800af4e <__cvt+0x3e>
 800af4c:	3601      	adds	r6, #1
 800af4e:	2102      	movs	r1, #2
 800af50:	e000      	b.n	800af54 <__cvt+0x44>
 800af52:	2103      	movs	r1, #3
 800af54:	ab03      	add	r3, sp, #12
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	ab02      	add	r3, sp, #8
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	ec45 4b10 	vmov	d0, r4, r5
 800af60:	4653      	mov	r3, sl
 800af62:	4632      	mov	r2, r6
 800af64:	f000 fecc 	bl	800bd00 <_dtoa_r>
 800af68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af6c:	4607      	mov	r7, r0
 800af6e:	d102      	bne.n	800af76 <__cvt+0x66>
 800af70:	f019 0f01 	tst.w	r9, #1
 800af74:	d022      	beq.n	800afbc <__cvt+0xac>
 800af76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af7a:	eb07 0906 	add.w	r9, r7, r6
 800af7e:	d110      	bne.n	800afa2 <__cvt+0x92>
 800af80:	783b      	ldrb	r3, [r7, #0]
 800af82:	2b30      	cmp	r3, #48	; 0x30
 800af84:	d10a      	bne.n	800af9c <__cvt+0x8c>
 800af86:	2200      	movs	r2, #0
 800af88:	2300      	movs	r3, #0
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800af92:	b918      	cbnz	r0, 800af9c <__cvt+0x8c>
 800af94:	f1c6 0601 	rsb	r6, r6, #1
 800af98:	f8ca 6000 	str.w	r6, [sl]
 800af9c:	f8da 3000 	ldr.w	r3, [sl]
 800afa0:	4499      	add	r9, r3
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800afae:	b108      	cbz	r0, 800afb4 <__cvt+0xa4>
 800afb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800afb4:	2230      	movs	r2, #48	; 0x30
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	454b      	cmp	r3, r9
 800afba:	d307      	bcc.n	800afcc <__cvt+0xbc>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afc0:	1bdb      	subs	r3, r3, r7
 800afc2:	4638      	mov	r0, r7
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	b004      	add	sp, #16
 800afc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afcc:	1c59      	adds	r1, r3, #1
 800afce:	9103      	str	r1, [sp, #12]
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	e7f0      	b.n	800afb6 <__cvt+0xa6>

0800afd4 <__exponent>:
 800afd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd6:	4603      	mov	r3, r0
 800afd8:	2900      	cmp	r1, #0
 800afda:	bfb8      	it	lt
 800afdc:	4249      	neglt	r1, r1
 800afde:	f803 2b02 	strb.w	r2, [r3], #2
 800afe2:	bfb4      	ite	lt
 800afe4:	222d      	movlt	r2, #45	; 0x2d
 800afe6:	222b      	movge	r2, #43	; 0x2b
 800afe8:	2909      	cmp	r1, #9
 800afea:	7042      	strb	r2, [r0, #1]
 800afec:	dd2a      	ble.n	800b044 <__exponent+0x70>
 800afee:	f10d 0207 	add.w	r2, sp, #7
 800aff2:	4617      	mov	r7, r2
 800aff4:	260a      	movs	r6, #10
 800aff6:	4694      	mov	ip, r2
 800aff8:	fb91 f5f6 	sdiv	r5, r1, r6
 800affc:	fb06 1415 	mls	r4, r6, r5, r1
 800b000:	3430      	adds	r4, #48	; 0x30
 800b002:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b006:	460c      	mov	r4, r1
 800b008:	2c63      	cmp	r4, #99	; 0x63
 800b00a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b00e:	4629      	mov	r1, r5
 800b010:	dcf1      	bgt.n	800aff6 <__exponent+0x22>
 800b012:	3130      	adds	r1, #48	; 0x30
 800b014:	f1ac 0402 	sub.w	r4, ip, #2
 800b018:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b01c:	1c41      	adds	r1, r0, #1
 800b01e:	4622      	mov	r2, r4
 800b020:	42ba      	cmp	r2, r7
 800b022:	d30a      	bcc.n	800b03a <__exponent+0x66>
 800b024:	f10d 0209 	add.w	r2, sp, #9
 800b028:	eba2 020c 	sub.w	r2, r2, ip
 800b02c:	42bc      	cmp	r4, r7
 800b02e:	bf88      	it	hi
 800b030:	2200      	movhi	r2, #0
 800b032:	4413      	add	r3, r2
 800b034:	1a18      	subs	r0, r3, r0
 800b036:	b003      	add	sp, #12
 800b038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b03e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b042:	e7ed      	b.n	800b020 <__exponent+0x4c>
 800b044:	2330      	movs	r3, #48	; 0x30
 800b046:	3130      	adds	r1, #48	; 0x30
 800b048:	7083      	strb	r3, [r0, #2]
 800b04a:	70c1      	strb	r1, [r0, #3]
 800b04c:	1d03      	adds	r3, r0, #4
 800b04e:	e7f1      	b.n	800b034 <__exponent+0x60>

0800b050 <_printf_float>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	ed2d 8b02 	vpush	{d8}
 800b058:	b08d      	sub	sp, #52	; 0x34
 800b05a:	460c      	mov	r4, r1
 800b05c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b060:	4616      	mov	r6, r2
 800b062:	461f      	mov	r7, r3
 800b064:	4605      	mov	r5, r0
 800b066:	f000 fce7 	bl	800ba38 <_localeconv_r>
 800b06a:	f8d0 a000 	ldr.w	sl, [r0]
 800b06e:	4650      	mov	r0, sl
 800b070:	f7f5 f8fe 	bl	8000270 <strlen>
 800b074:	2300      	movs	r3, #0
 800b076:	930a      	str	r3, [sp, #40]	; 0x28
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	f8d8 3000 	ldr.w	r3, [r8]
 800b080:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b084:	3307      	adds	r3, #7
 800b086:	f023 0307 	bic.w	r3, r3, #7
 800b08a:	f103 0208 	add.w	r2, r3, #8
 800b08e:	f8c8 2000 	str.w	r2, [r8]
 800b092:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b09a:	9307      	str	r3, [sp, #28]
 800b09c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0a0:	ee08 0a10 	vmov	s16, r0
 800b0a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ac:	4b9e      	ldr	r3, [pc, #632]	; (800b328 <_printf_float+0x2d8>)
 800b0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b2:	f7f5 fd3b 	bl	8000b2c <__aeabi_dcmpun>
 800b0b6:	bb88      	cbnz	r0, 800b11c <_printf_float+0xcc>
 800b0b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	; (800b328 <_printf_float+0x2d8>)
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c2:	f7f5 fd15 	bl	8000af0 <__aeabi_dcmple>
 800b0c6:	bb48      	cbnz	r0, 800b11c <_printf_float+0xcc>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	f7f5 fd04 	bl	8000adc <__aeabi_dcmplt>
 800b0d4:	b110      	cbz	r0, 800b0dc <_printf_float+0x8c>
 800b0d6:	232d      	movs	r3, #45	; 0x2d
 800b0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0dc:	4a93      	ldr	r2, [pc, #588]	; (800b32c <_printf_float+0x2dc>)
 800b0de:	4b94      	ldr	r3, [pc, #592]	; (800b330 <_printf_float+0x2e0>)
 800b0e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0e4:	bf94      	ite	ls
 800b0e6:	4690      	movls	r8, r2
 800b0e8:	4698      	movhi	r8, r3
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	6123      	str	r3, [r4, #16]
 800b0ee:	9b05      	ldr	r3, [sp, #20]
 800b0f0:	f023 0304 	bic.w	r3, r3, #4
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	f04f 0900 	mov.w	r9, #0
 800b0fa:	9700      	str	r7, [sp, #0]
 800b0fc:	4633      	mov	r3, r6
 800b0fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f000 f9da 	bl	800b4bc <_printf_common>
 800b108:	3001      	adds	r0, #1
 800b10a:	f040 8090 	bne.w	800b22e <_printf_float+0x1de>
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	b00d      	add	sp, #52	; 0x34
 800b114:	ecbd 8b02 	vpop	{d8}
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	4642      	mov	r2, r8
 800b11e:	464b      	mov	r3, r9
 800b120:	4640      	mov	r0, r8
 800b122:	4649      	mov	r1, r9
 800b124:	f7f5 fd02 	bl	8000b2c <__aeabi_dcmpun>
 800b128:	b140      	cbz	r0, 800b13c <_printf_float+0xec>
 800b12a:	464b      	mov	r3, r9
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	bfbc      	itt	lt
 800b130:	232d      	movlt	r3, #45	; 0x2d
 800b132:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b136:	4a7f      	ldr	r2, [pc, #508]	; (800b334 <_printf_float+0x2e4>)
 800b138:	4b7f      	ldr	r3, [pc, #508]	; (800b338 <_printf_float+0x2e8>)
 800b13a:	e7d1      	b.n	800b0e0 <_printf_float+0x90>
 800b13c:	6863      	ldr	r3, [r4, #4]
 800b13e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b142:	9206      	str	r2, [sp, #24]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	d13f      	bne.n	800b1c8 <_printf_float+0x178>
 800b148:	2306      	movs	r3, #6
 800b14a:	6063      	str	r3, [r4, #4]
 800b14c:	9b05      	ldr	r3, [sp, #20]
 800b14e:	6861      	ldr	r1, [r4, #4]
 800b150:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b154:	2300      	movs	r3, #0
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	ab0a      	add	r3, sp, #40	; 0x28
 800b15a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b15e:	ab09      	add	r3, sp, #36	; 0x24
 800b160:	ec49 8b10 	vmov	d0, r8, r9
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b16c:	4628      	mov	r0, r5
 800b16e:	f7ff fecf 	bl	800af10 <__cvt>
 800b172:	9b06      	ldr	r3, [sp, #24]
 800b174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b176:	2b47      	cmp	r3, #71	; 0x47
 800b178:	4680      	mov	r8, r0
 800b17a:	d108      	bne.n	800b18e <_printf_float+0x13e>
 800b17c:	1cc8      	adds	r0, r1, #3
 800b17e:	db02      	blt.n	800b186 <_printf_float+0x136>
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	4299      	cmp	r1, r3
 800b184:	dd41      	ble.n	800b20a <_printf_float+0x1ba>
 800b186:	f1ab 0302 	sub.w	r3, fp, #2
 800b18a:	fa5f fb83 	uxtb.w	fp, r3
 800b18e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b192:	d820      	bhi.n	800b1d6 <_printf_float+0x186>
 800b194:	3901      	subs	r1, #1
 800b196:	465a      	mov	r2, fp
 800b198:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b19c:	9109      	str	r1, [sp, #36]	; 0x24
 800b19e:	f7ff ff19 	bl	800afd4 <__exponent>
 800b1a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1a4:	1813      	adds	r3, r2, r0
 800b1a6:	2a01      	cmp	r2, #1
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	dc02      	bgt.n	800b1b4 <_printf_float+0x164>
 800b1ae:	6822      	ldr	r2, [r4, #0]
 800b1b0:	07d2      	lsls	r2, r2, #31
 800b1b2:	d501      	bpl.n	800b1b8 <_printf_float+0x168>
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d09c      	beq.n	800b0fa <_printf_float+0xaa>
 800b1c0:	232d      	movs	r3, #45	; 0x2d
 800b1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c6:	e798      	b.n	800b0fa <_printf_float+0xaa>
 800b1c8:	9a06      	ldr	r2, [sp, #24]
 800b1ca:	2a47      	cmp	r2, #71	; 0x47
 800b1cc:	d1be      	bne.n	800b14c <_printf_float+0xfc>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1bc      	bne.n	800b14c <_printf_float+0xfc>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7b9      	b.n	800b14a <_printf_float+0xfa>
 800b1d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1da:	d118      	bne.n	800b20e <_printf_float+0x1be>
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	6863      	ldr	r3, [r4, #4]
 800b1e0:	dd0b      	ble.n	800b1fa <_printf_float+0x1aa>
 800b1e2:	6121      	str	r1, [r4, #16]
 800b1e4:	b913      	cbnz	r3, 800b1ec <_printf_float+0x19c>
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	07d0      	lsls	r0, r2, #31
 800b1ea:	d502      	bpl.n	800b1f2 <_printf_float+0x1a2>
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	440b      	add	r3, r1
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1f4:	f04f 0900 	mov.w	r9, #0
 800b1f8:	e7de      	b.n	800b1b8 <_printf_float+0x168>
 800b1fa:	b913      	cbnz	r3, 800b202 <_printf_float+0x1b2>
 800b1fc:	6822      	ldr	r2, [r4, #0]
 800b1fe:	07d2      	lsls	r2, r2, #31
 800b200:	d501      	bpl.n	800b206 <_printf_float+0x1b6>
 800b202:	3302      	adds	r3, #2
 800b204:	e7f4      	b.n	800b1f0 <_printf_float+0x1a0>
 800b206:	2301      	movs	r3, #1
 800b208:	e7f2      	b.n	800b1f0 <_printf_float+0x1a0>
 800b20a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b210:	4299      	cmp	r1, r3
 800b212:	db05      	blt.n	800b220 <_printf_float+0x1d0>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	6121      	str	r1, [r4, #16]
 800b218:	07d8      	lsls	r0, r3, #31
 800b21a:	d5ea      	bpl.n	800b1f2 <_printf_float+0x1a2>
 800b21c:	1c4b      	adds	r3, r1, #1
 800b21e:	e7e7      	b.n	800b1f0 <_printf_float+0x1a0>
 800b220:	2900      	cmp	r1, #0
 800b222:	bfd4      	ite	le
 800b224:	f1c1 0202 	rsble	r2, r1, #2
 800b228:	2201      	movgt	r2, #1
 800b22a:	4413      	add	r3, r2
 800b22c:	e7e0      	b.n	800b1f0 <_printf_float+0x1a0>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	055a      	lsls	r2, r3, #21
 800b232:	d407      	bmi.n	800b244 <_printf_float+0x1f4>
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	4642      	mov	r2, r8
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	d12c      	bne.n	800b29c <_printf_float+0x24c>
 800b242:	e764      	b.n	800b10e <_printf_float+0xbe>
 800b244:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b248:	f240 80e0 	bls.w	800b40c <_printf_float+0x3bc>
 800b24c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b250:	2200      	movs	r2, #0
 800b252:	2300      	movs	r3, #0
 800b254:	f7f5 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d034      	beq.n	800b2c6 <_printf_float+0x276>
 800b25c:	4a37      	ldr	r2, [pc, #220]	; (800b33c <_printf_float+0x2ec>)
 800b25e:	2301      	movs	r3, #1
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af51 	beq.w	800b10e <_printf_float+0xbe>
 800b26c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b270:	429a      	cmp	r2, r3
 800b272:	db02      	blt.n	800b27a <_printf_float+0x22a>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	07d8      	lsls	r0, r3, #31
 800b278:	d510      	bpl.n	800b29c <_printf_float+0x24c>
 800b27a:	ee18 3a10 	vmov	r3, s16
 800b27e:	4652      	mov	r2, sl
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f af41 	beq.w	800b10e <_printf_float+0xbe>
 800b28c:	f04f 0800 	mov.w	r8, #0
 800b290:	f104 091a 	add.w	r9, r4, #26
 800b294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b296:	3b01      	subs	r3, #1
 800b298:	4543      	cmp	r3, r8
 800b29a:	dc09      	bgt.n	800b2b0 <_printf_float+0x260>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	079b      	lsls	r3, r3, #30
 800b2a0:	f100 8107 	bmi.w	800b4b2 <_printf_float+0x462>
 800b2a4:	68e0      	ldr	r0, [r4, #12]
 800b2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	bfb8      	it	lt
 800b2ac:	4618      	movlt	r0, r3
 800b2ae:	e730      	b.n	800b112 <_printf_float+0xc2>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	464a      	mov	r2, r9
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	47b8      	blx	r7
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f43f af27 	beq.w	800b10e <_printf_float+0xbe>
 800b2c0:	f108 0801 	add.w	r8, r8, #1
 800b2c4:	e7e6      	b.n	800b294 <_printf_float+0x244>
 800b2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dc39      	bgt.n	800b340 <_printf_float+0x2f0>
 800b2cc:	4a1b      	ldr	r2, [pc, #108]	; (800b33c <_printf_float+0x2ec>)
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f43f af19 	beq.w	800b10e <_printf_float+0xbe>
 800b2dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	d102      	bne.n	800b2ea <_printf_float+0x29a>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d5d8      	bpl.n	800b29c <_printf_float+0x24c>
 800b2ea:	ee18 3a10 	vmov	r3, s16
 800b2ee:	4652      	mov	r2, sl
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	f43f af09 	beq.w	800b10e <_printf_float+0xbe>
 800b2fc:	f04f 0900 	mov.w	r9, #0
 800b300:	f104 0a1a 	add.w	sl, r4, #26
 800b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b306:	425b      	negs	r3, r3
 800b308:	454b      	cmp	r3, r9
 800b30a:	dc01      	bgt.n	800b310 <_printf_float+0x2c0>
 800b30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b30e:	e792      	b.n	800b236 <_printf_float+0x1e6>
 800b310:	2301      	movs	r3, #1
 800b312:	4652      	mov	r2, sl
 800b314:	4631      	mov	r1, r6
 800b316:	4628      	mov	r0, r5
 800b318:	47b8      	blx	r7
 800b31a:	3001      	adds	r0, #1
 800b31c:	f43f aef7 	beq.w	800b10e <_printf_float+0xbe>
 800b320:	f109 0901 	add.w	r9, r9, #1
 800b324:	e7ee      	b.n	800b304 <_printf_float+0x2b4>
 800b326:	bf00      	nop
 800b328:	7fefffff 	.word	0x7fefffff
 800b32c:	0800de78 	.word	0x0800de78
 800b330:	0800de7c 	.word	0x0800de7c
 800b334:	0800de80 	.word	0x0800de80
 800b338:	0800de84 	.word	0x0800de84
 800b33c:	0800de88 	.word	0x0800de88
 800b340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b344:	429a      	cmp	r2, r3
 800b346:	bfa8      	it	ge
 800b348:	461a      	movge	r2, r3
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	4691      	mov	r9, r2
 800b34e:	dc37      	bgt.n	800b3c0 <_printf_float+0x370>
 800b350:	f04f 0b00 	mov.w	fp, #0
 800b354:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b358:	f104 021a 	add.w	r2, r4, #26
 800b35c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	eba3 0309 	sub.w	r3, r3, r9
 800b364:	455b      	cmp	r3, fp
 800b366:	dc33      	bgt.n	800b3d0 <_printf_float+0x380>
 800b368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b36c:	429a      	cmp	r2, r3
 800b36e:	db3b      	blt.n	800b3e8 <_printf_float+0x398>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	07da      	lsls	r2, r3, #31
 800b374:	d438      	bmi.n	800b3e8 <_printf_float+0x398>
 800b376:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b37a:	eba2 0903 	sub.w	r9, r2, r3
 800b37e:	9b05      	ldr	r3, [sp, #20]
 800b380:	1ad2      	subs	r2, r2, r3
 800b382:	4591      	cmp	r9, r2
 800b384:	bfa8      	it	ge
 800b386:	4691      	movge	r9, r2
 800b388:	f1b9 0f00 	cmp.w	r9, #0
 800b38c:	dc35      	bgt.n	800b3fa <_printf_float+0x3aa>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b396:	f104 0a1a 	add.w	sl, r4, #26
 800b39a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b39e:	1a9b      	subs	r3, r3, r2
 800b3a0:	eba3 0309 	sub.w	r3, r3, r9
 800b3a4:	4543      	cmp	r3, r8
 800b3a6:	f77f af79 	ble.w	800b29c <_printf_float+0x24c>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	4652      	mov	r2, sl
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	47b8      	blx	r7
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	f43f aeaa 	beq.w	800b10e <_printf_float+0xbe>
 800b3ba:	f108 0801 	add.w	r8, r8, #1
 800b3be:	e7ec      	b.n	800b39a <_printf_float+0x34a>
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4642      	mov	r2, r8
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d1c0      	bne.n	800b350 <_printf_float+0x300>
 800b3ce:	e69e      	b.n	800b10e <_printf_float+0xbe>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	9205      	str	r2, [sp, #20]
 800b3d8:	47b8      	blx	r7
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f43f ae97 	beq.w	800b10e <_printf_float+0xbe>
 800b3e0:	9a05      	ldr	r2, [sp, #20]
 800b3e2:	f10b 0b01 	add.w	fp, fp, #1
 800b3e6:	e7b9      	b.n	800b35c <_printf_float+0x30c>
 800b3e8:	ee18 3a10 	vmov	r3, s16
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b8      	blx	r7
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d1be      	bne.n	800b376 <_printf_float+0x326>
 800b3f8:	e689      	b.n	800b10e <_printf_float+0xbe>
 800b3fa:	9a05      	ldr	r2, [sp, #20]
 800b3fc:	464b      	mov	r3, r9
 800b3fe:	4442      	add	r2, r8
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	d1c1      	bne.n	800b38e <_printf_float+0x33e>
 800b40a:	e680      	b.n	800b10e <_printf_float+0xbe>
 800b40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b40e:	2a01      	cmp	r2, #1
 800b410:	dc01      	bgt.n	800b416 <_printf_float+0x3c6>
 800b412:	07db      	lsls	r3, r3, #31
 800b414:	d53a      	bpl.n	800b48c <_printf_float+0x43c>
 800b416:	2301      	movs	r3, #1
 800b418:	4642      	mov	r2, r8
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	f43f ae74 	beq.w	800b10e <_printf_float+0xbe>
 800b426:	ee18 3a10 	vmov	r3, s16
 800b42a:	4652      	mov	r2, sl
 800b42c:	4631      	mov	r1, r6
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	f43f ae6b 	beq.w	800b10e <_printf_float+0xbe>
 800b438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b43c:	2200      	movs	r2, #0
 800b43e:	2300      	movs	r3, #0
 800b440:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b444:	f7f5 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b448:	b9d8      	cbnz	r0, 800b482 <_printf_float+0x432>
 800b44a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b44e:	f108 0201 	add.w	r2, r8, #1
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	d10e      	bne.n	800b47a <_printf_float+0x42a>
 800b45c:	e657      	b.n	800b10e <_printf_float+0xbe>
 800b45e:	2301      	movs	r3, #1
 800b460:	4652      	mov	r2, sl
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f ae50 	beq.w	800b10e <_printf_float+0xbe>
 800b46e:	f108 0801 	add.w	r8, r8, #1
 800b472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b474:	3b01      	subs	r3, #1
 800b476:	4543      	cmp	r3, r8
 800b478:	dcf1      	bgt.n	800b45e <_printf_float+0x40e>
 800b47a:	464b      	mov	r3, r9
 800b47c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b480:	e6da      	b.n	800b238 <_printf_float+0x1e8>
 800b482:	f04f 0800 	mov.w	r8, #0
 800b486:	f104 0a1a 	add.w	sl, r4, #26
 800b48a:	e7f2      	b.n	800b472 <_printf_float+0x422>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4642      	mov	r2, r8
 800b490:	e7df      	b.n	800b452 <_printf_float+0x402>
 800b492:	2301      	movs	r3, #1
 800b494:	464a      	mov	r2, r9
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f ae36 	beq.w	800b10e <_printf_float+0xbe>
 800b4a2:	f108 0801 	add.w	r8, r8, #1
 800b4a6:	68e3      	ldr	r3, [r4, #12]
 800b4a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4aa:	1a5b      	subs	r3, r3, r1
 800b4ac:	4543      	cmp	r3, r8
 800b4ae:	dcf0      	bgt.n	800b492 <_printf_float+0x442>
 800b4b0:	e6f8      	b.n	800b2a4 <_printf_float+0x254>
 800b4b2:	f04f 0800 	mov.w	r8, #0
 800b4b6:	f104 0919 	add.w	r9, r4, #25
 800b4ba:	e7f4      	b.n	800b4a6 <_printf_float+0x456>

0800b4bc <_printf_common>:
 800b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	4699      	mov	r9, r3
 800b4c4:	688a      	ldr	r2, [r1, #8]
 800b4c6:	690b      	ldr	r3, [r1, #16]
 800b4c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	bfb8      	it	lt
 800b4d0:	4613      	movlt	r3, r2
 800b4d2:	6033      	str	r3, [r6, #0]
 800b4d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4d8:	4607      	mov	r7, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	b10a      	cbz	r2, 800b4e2 <_printf_common+0x26>
 800b4de:	3301      	adds	r3, #1
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	0699      	lsls	r1, r3, #26
 800b4e6:	bf42      	ittt	mi
 800b4e8:	6833      	ldrmi	r3, [r6, #0]
 800b4ea:	3302      	addmi	r3, #2
 800b4ec:	6033      	strmi	r3, [r6, #0]
 800b4ee:	6825      	ldr	r5, [r4, #0]
 800b4f0:	f015 0506 	ands.w	r5, r5, #6
 800b4f4:	d106      	bne.n	800b504 <_printf_common+0x48>
 800b4f6:	f104 0a19 	add.w	sl, r4, #25
 800b4fa:	68e3      	ldr	r3, [r4, #12]
 800b4fc:	6832      	ldr	r2, [r6, #0]
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	42ab      	cmp	r3, r5
 800b502:	dc26      	bgt.n	800b552 <_printf_common+0x96>
 800b504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b508:	1e13      	subs	r3, r2, #0
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	2301      	movne	r3, #1
 800b510:	0692      	lsls	r2, r2, #26
 800b512:	d42b      	bmi.n	800b56c <_printf_common+0xb0>
 800b514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b518:	4649      	mov	r1, r9
 800b51a:	4638      	mov	r0, r7
 800b51c:	47c0      	blx	r8
 800b51e:	3001      	adds	r0, #1
 800b520:	d01e      	beq.n	800b560 <_printf_common+0xa4>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	6922      	ldr	r2, [r4, #16]
 800b526:	f003 0306 	and.w	r3, r3, #6
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	bf02      	ittt	eq
 800b52e:	68e5      	ldreq	r5, [r4, #12]
 800b530:	6833      	ldreq	r3, [r6, #0]
 800b532:	1aed      	subeq	r5, r5, r3
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	bf0c      	ite	eq
 800b538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b53c:	2500      	movne	r5, #0
 800b53e:	4293      	cmp	r3, r2
 800b540:	bfc4      	itt	gt
 800b542:	1a9b      	subgt	r3, r3, r2
 800b544:	18ed      	addgt	r5, r5, r3
 800b546:	2600      	movs	r6, #0
 800b548:	341a      	adds	r4, #26
 800b54a:	42b5      	cmp	r5, r6
 800b54c:	d11a      	bne.n	800b584 <_printf_common+0xc8>
 800b54e:	2000      	movs	r0, #0
 800b550:	e008      	b.n	800b564 <_printf_common+0xa8>
 800b552:	2301      	movs	r3, #1
 800b554:	4652      	mov	r2, sl
 800b556:	4649      	mov	r1, r9
 800b558:	4638      	mov	r0, r7
 800b55a:	47c0      	blx	r8
 800b55c:	3001      	adds	r0, #1
 800b55e:	d103      	bne.n	800b568 <_printf_common+0xac>
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b568:	3501      	adds	r5, #1
 800b56a:	e7c6      	b.n	800b4fa <_printf_common+0x3e>
 800b56c:	18e1      	adds	r1, r4, r3
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	2030      	movs	r0, #48	; 0x30
 800b572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b576:	4422      	add	r2, r4
 800b578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b57c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b580:	3302      	adds	r3, #2
 800b582:	e7c7      	b.n	800b514 <_printf_common+0x58>
 800b584:	2301      	movs	r3, #1
 800b586:	4622      	mov	r2, r4
 800b588:	4649      	mov	r1, r9
 800b58a:	4638      	mov	r0, r7
 800b58c:	47c0      	blx	r8
 800b58e:	3001      	adds	r0, #1
 800b590:	d0e6      	beq.n	800b560 <_printf_common+0xa4>
 800b592:	3601      	adds	r6, #1
 800b594:	e7d9      	b.n	800b54a <_printf_common+0x8e>
	...

0800b598 <_printf_i>:
 800b598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	7e0f      	ldrb	r7, [r1, #24]
 800b59e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5a0:	2f78      	cmp	r7, #120	; 0x78
 800b5a2:	4691      	mov	r9, r2
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	469a      	mov	sl, r3
 800b5aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5ae:	d807      	bhi.n	800b5c0 <_printf_i+0x28>
 800b5b0:	2f62      	cmp	r7, #98	; 0x62
 800b5b2:	d80a      	bhi.n	800b5ca <_printf_i+0x32>
 800b5b4:	2f00      	cmp	r7, #0
 800b5b6:	f000 80d4 	beq.w	800b762 <_printf_i+0x1ca>
 800b5ba:	2f58      	cmp	r7, #88	; 0x58
 800b5bc:	f000 80c0 	beq.w	800b740 <_printf_i+0x1a8>
 800b5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5c8:	e03a      	b.n	800b640 <_printf_i+0xa8>
 800b5ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5ce:	2b15      	cmp	r3, #21
 800b5d0:	d8f6      	bhi.n	800b5c0 <_printf_i+0x28>
 800b5d2:	a101      	add	r1, pc, #4	; (adr r1, 800b5d8 <_printf_i+0x40>)
 800b5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5d8:	0800b631 	.word	0x0800b631
 800b5dc:	0800b645 	.word	0x0800b645
 800b5e0:	0800b5c1 	.word	0x0800b5c1
 800b5e4:	0800b5c1 	.word	0x0800b5c1
 800b5e8:	0800b5c1 	.word	0x0800b5c1
 800b5ec:	0800b5c1 	.word	0x0800b5c1
 800b5f0:	0800b645 	.word	0x0800b645
 800b5f4:	0800b5c1 	.word	0x0800b5c1
 800b5f8:	0800b5c1 	.word	0x0800b5c1
 800b5fc:	0800b5c1 	.word	0x0800b5c1
 800b600:	0800b5c1 	.word	0x0800b5c1
 800b604:	0800b749 	.word	0x0800b749
 800b608:	0800b671 	.word	0x0800b671
 800b60c:	0800b703 	.word	0x0800b703
 800b610:	0800b5c1 	.word	0x0800b5c1
 800b614:	0800b5c1 	.word	0x0800b5c1
 800b618:	0800b76b 	.word	0x0800b76b
 800b61c:	0800b5c1 	.word	0x0800b5c1
 800b620:	0800b671 	.word	0x0800b671
 800b624:	0800b5c1 	.word	0x0800b5c1
 800b628:	0800b5c1 	.word	0x0800b5c1
 800b62c:	0800b70b 	.word	0x0800b70b
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	1d1a      	adds	r2, r3, #4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	602a      	str	r2, [r5, #0]
 800b638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b63c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b640:	2301      	movs	r3, #1
 800b642:	e09f      	b.n	800b784 <_printf_i+0x1ec>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	0607      	lsls	r7, r0, #24
 800b64a:	f103 0104 	add.w	r1, r3, #4
 800b64e:	6029      	str	r1, [r5, #0]
 800b650:	d501      	bpl.n	800b656 <_printf_i+0xbe>
 800b652:	681e      	ldr	r6, [r3, #0]
 800b654:	e003      	b.n	800b65e <_printf_i+0xc6>
 800b656:	0646      	lsls	r6, r0, #25
 800b658:	d5fb      	bpl.n	800b652 <_printf_i+0xba>
 800b65a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b65e:	2e00      	cmp	r6, #0
 800b660:	da03      	bge.n	800b66a <_printf_i+0xd2>
 800b662:	232d      	movs	r3, #45	; 0x2d
 800b664:	4276      	negs	r6, r6
 800b666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b66a:	485a      	ldr	r0, [pc, #360]	; (800b7d4 <_printf_i+0x23c>)
 800b66c:	230a      	movs	r3, #10
 800b66e:	e012      	b.n	800b696 <_printf_i+0xfe>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	6820      	ldr	r0, [r4, #0]
 800b674:	1d19      	adds	r1, r3, #4
 800b676:	6029      	str	r1, [r5, #0]
 800b678:	0605      	lsls	r5, r0, #24
 800b67a:	d501      	bpl.n	800b680 <_printf_i+0xe8>
 800b67c:	681e      	ldr	r6, [r3, #0]
 800b67e:	e002      	b.n	800b686 <_printf_i+0xee>
 800b680:	0641      	lsls	r1, r0, #25
 800b682:	d5fb      	bpl.n	800b67c <_printf_i+0xe4>
 800b684:	881e      	ldrh	r6, [r3, #0]
 800b686:	4853      	ldr	r0, [pc, #332]	; (800b7d4 <_printf_i+0x23c>)
 800b688:	2f6f      	cmp	r7, #111	; 0x6f
 800b68a:	bf0c      	ite	eq
 800b68c:	2308      	moveq	r3, #8
 800b68e:	230a      	movne	r3, #10
 800b690:	2100      	movs	r1, #0
 800b692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b696:	6865      	ldr	r5, [r4, #4]
 800b698:	60a5      	str	r5, [r4, #8]
 800b69a:	2d00      	cmp	r5, #0
 800b69c:	bfa2      	ittt	ge
 800b69e:	6821      	ldrge	r1, [r4, #0]
 800b6a0:	f021 0104 	bicge.w	r1, r1, #4
 800b6a4:	6021      	strge	r1, [r4, #0]
 800b6a6:	b90e      	cbnz	r6, 800b6ac <_printf_i+0x114>
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	d04b      	beq.n	800b744 <_printf_i+0x1ac>
 800b6ac:	4615      	mov	r5, r2
 800b6ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b6b6:	5dc7      	ldrb	r7, [r0, r7]
 800b6b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6bc:	4637      	mov	r7, r6
 800b6be:	42bb      	cmp	r3, r7
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	d9f4      	bls.n	800b6ae <_printf_i+0x116>
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	d10b      	bne.n	800b6e0 <_printf_i+0x148>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	07de      	lsls	r6, r3, #31
 800b6cc:	d508      	bpl.n	800b6e0 <_printf_i+0x148>
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	6861      	ldr	r1, [r4, #4]
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	bfde      	ittt	le
 800b6d6:	2330      	movle	r3, #48	; 0x30
 800b6d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6e0:	1b52      	subs	r2, r2, r5
 800b6e2:	6122      	str	r2, [r4, #16]
 800b6e4:	f8cd a000 	str.w	sl, [sp]
 800b6e8:	464b      	mov	r3, r9
 800b6ea:	aa03      	add	r2, sp, #12
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	f7ff fee4 	bl	800b4bc <_printf_common>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d14a      	bne.n	800b78e <_printf_i+0x1f6>
 800b6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fc:	b004      	add	sp, #16
 800b6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	f043 0320 	orr.w	r3, r3, #32
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	4833      	ldr	r0, [pc, #204]	; (800b7d8 <_printf_i+0x240>)
 800b70c:	2778      	movs	r7, #120	; 0x78
 800b70e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	6829      	ldr	r1, [r5, #0]
 800b716:	061f      	lsls	r7, r3, #24
 800b718:	f851 6b04 	ldr.w	r6, [r1], #4
 800b71c:	d402      	bmi.n	800b724 <_printf_i+0x18c>
 800b71e:	065f      	lsls	r7, r3, #25
 800b720:	bf48      	it	mi
 800b722:	b2b6      	uxthmi	r6, r6
 800b724:	07df      	lsls	r7, r3, #31
 800b726:	bf48      	it	mi
 800b728:	f043 0320 	orrmi.w	r3, r3, #32
 800b72c:	6029      	str	r1, [r5, #0]
 800b72e:	bf48      	it	mi
 800b730:	6023      	strmi	r3, [r4, #0]
 800b732:	b91e      	cbnz	r6, 800b73c <_printf_i+0x1a4>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	f023 0320 	bic.w	r3, r3, #32
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	2310      	movs	r3, #16
 800b73e:	e7a7      	b.n	800b690 <_printf_i+0xf8>
 800b740:	4824      	ldr	r0, [pc, #144]	; (800b7d4 <_printf_i+0x23c>)
 800b742:	e7e4      	b.n	800b70e <_printf_i+0x176>
 800b744:	4615      	mov	r5, r2
 800b746:	e7bd      	b.n	800b6c4 <_printf_i+0x12c>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	6826      	ldr	r6, [r4, #0]
 800b74c:	6961      	ldr	r1, [r4, #20]
 800b74e:	1d18      	adds	r0, r3, #4
 800b750:	6028      	str	r0, [r5, #0]
 800b752:	0635      	lsls	r5, r6, #24
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	d501      	bpl.n	800b75c <_printf_i+0x1c4>
 800b758:	6019      	str	r1, [r3, #0]
 800b75a:	e002      	b.n	800b762 <_printf_i+0x1ca>
 800b75c:	0670      	lsls	r0, r6, #25
 800b75e:	d5fb      	bpl.n	800b758 <_printf_i+0x1c0>
 800b760:	8019      	strh	r1, [r3, #0]
 800b762:	2300      	movs	r3, #0
 800b764:	6123      	str	r3, [r4, #16]
 800b766:	4615      	mov	r5, r2
 800b768:	e7bc      	b.n	800b6e4 <_printf_i+0x14c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	1d1a      	adds	r2, r3, #4
 800b76e:	602a      	str	r2, [r5, #0]
 800b770:	681d      	ldr	r5, [r3, #0]
 800b772:	6862      	ldr	r2, [r4, #4]
 800b774:	2100      	movs	r1, #0
 800b776:	4628      	mov	r0, r5
 800b778:	f7f4 fd2a 	bl	80001d0 <memchr>
 800b77c:	b108      	cbz	r0, 800b782 <_printf_i+0x1ea>
 800b77e:	1b40      	subs	r0, r0, r5
 800b780:	6060      	str	r0, [r4, #4]
 800b782:	6863      	ldr	r3, [r4, #4]
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	2300      	movs	r3, #0
 800b788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b78c:	e7aa      	b.n	800b6e4 <_printf_i+0x14c>
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	462a      	mov	r2, r5
 800b792:	4649      	mov	r1, r9
 800b794:	4640      	mov	r0, r8
 800b796:	47d0      	blx	sl
 800b798:	3001      	adds	r0, #1
 800b79a:	d0ad      	beq.n	800b6f8 <_printf_i+0x160>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	079b      	lsls	r3, r3, #30
 800b7a0:	d413      	bmi.n	800b7ca <_printf_i+0x232>
 800b7a2:	68e0      	ldr	r0, [r4, #12]
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	4298      	cmp	r0, r3
 800b7a8:	bfb8      	it	lt
 800b7aa:	4618      	movlt	r0, r3
 800b7ac:	e7a6      	b.n	800b6fc <_printf_i+0x164>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	47d0      	blx	sl
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d09d      	beq.n	800b6f8 <_printf_i+0x160>
 800b7bc:	3501      	adds	r5, #1
 800b7be:	68e3      	ldr	r3, [r4, #12]
 800b7c0:	9903      	ldr	r1, [sp, #12]
 800b7c2:	1a5b      	subs	r3, r3, r1
 800b7c4:	42ab      	cmp	r3, r5
 800b7c6:	dcf2      	bgt.n	800b7ae <_printf_i+0x216>
 800b7c8:	e7eb      	b.n	800b7a2 <_printf_i+0x20a>
 800b7ca:	2500      	movs	r5, #0
 800b7cc:	f104 0619 	add.w	r6, r4, #25
 800b7d0:	e7f5      	b.n	800b7be <_printf_i+0x226>
 800b7d2:	bf00      	nop
 800b7d4:	0800de8a 	.word	0x0800de8a
 800b7d8:	0800de9b 	.word	0x0800de9b

0800b7dc <std>:
 800b7dc:	2300      	movs	r3, #0
 800b7de:	b510      	push	{r4, lr}
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ea:	6083      	str	r3, [r0, #8]
 800b7ec:	8181      	strh	r1, [r0, #12]
 800b7ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b7f0:	81c2      	strh	r2, [r0, #14]
 800b7f2:	6183      	str	r3, [r0, #24]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	2208      	movs	r2, #8
 800b7f8:	305c      	adds	r0, #92	; 0x5c
 800b7fa:	f000 f914 	bl	800ba26 <memset>
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <std+0x58>)
 800b800:	6263      	str	r3, [r4, #36]	; 0x24
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <std+0x5c>)
 800b804:	62a3      	str	r3, [r4, #40]	; 0x28
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <std+0x60>)
 800b808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b80a:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <std+0x64>)
 800b80c:	6323      	str	r3, [r4, #48]	; 0x30
 800b80e:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <std+0x68>)
 800b810:	6224      	str	r4, [r4, #32]
 800b812:	429c      	cmp	r4, r3
 800b814:	d006      	beq.n	800b824 <std+0x48>
 800b816:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b81a:	4294      	cmp	r4, r2
 800b81c:	d002      	beq.n	800b824 <std+0x48>
 800b81e:	33d0      	adds	r3, #208	; 0xd0
 800b820:	429c      	cmp	r4, r3
 800b822:	d105      	bne.n	800b830 <std+0x54>
 800b824:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b82c:	f000 b9ce 	b.w	800bbcc <__retarget_lock_init_recursive>
 800b830:	bd10      	pop	{r4, pc}
 800b832:	bf00      	nop
 800b834:	0800b9a1 	.word	0x0800b9a1
 800b838:	0800b9c3 	.word	0x0800b9c3
 800b83c:	0800b9fb 	.word	0x0800b9fb
 800b840:	0800ba1f 	.word	0x0800ba1f
 800b844:	20005fd8 	.word	0x20005fd8

0800b848 <stdio_exit_handler>:
 800b848:	4a02      	ldr	r2, [pc, #8]	; (800b854 <stdio_exit_handler+0xc>)
 800b84a:	4903      	ldr	r1, [pc, #12]	; (800b858 <stdio_exit_handler+0x10>)
 800b84c:	4803      	ldr	r0, [pc, #12]	; (800b85c <stdio_exit_handler+0x14>)
 800b84e:	f000 b869 	b.w	800b924 <_fwalk_sglue>
 800b852:	bf00      	nop
 800b854:	20000100 	.word	0x20000100
 800b858:	0800d599 	.word	0x0800d599
 800b85c:	2000010c 	.word	0x2000010c

0800b860 <cleanup_stdio>:
 800b860:	6841      	ldr	r1, [r0, #4]
 800b862:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <cleanup_stdio+0x34>)
 800b864:	4299      	cmp	r1, r3
 800b866:	b510      	push	{r4, lr}
 800b868:	4604      	mov	r4, r0
 800b86a:	d001      	beq.n	800b870 <cleanup_stdio+0x10>
 800b86c:	f001 fe94 	bl	800d598 <_fflush_r>
 800b870:	68a1      	ldr	r1, [r4, #8]
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <cleanup_stdio+0x38>)
 800b874:	4299      	cmp	r1, r3
 800b876:	d002      	beq.n	800b87e <cleanup_stdio+0x1e>
 800b878:	4620      	mov	r0, r4
 800b87a:	f001 fe8d 	bl	800d598 <_fflush_r>
 800b87e:	68e1      	ldr	r1, [r4, #12]
 800b880:	4b06      	ldr	r3, [pc, #24]	; (800b89c <cleanup_stdio+0x3c>)
 800b882:	4299      	cmp	r1, r3
 800b884:	d004      	beq.n	800b890 <cleanup_stdio+0x30>
 800b886:	4620      	mov	r0, r4
 800b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88c:	f001 be84 	b.w	800d598 <_fflush_r>
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop
 800b894:	20005fd8 	.word	0x20005fd8
 800b898:	20006040 	.word	0x20006040
 800b89c:	200060a8 	.word	0x200060a8

0800b8a0 <global_stdio_init.part.0>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <global_stdio_init.part.0+0x30>)
 800b8a4:	4c0b      	ldr	r4, [pc, #44]	; (800b8d4 <global_stdio_init.part.0+0x34>)
 800b8a6:	4a0c      	ldr	r2, [pc, #48]	; (800b8d8 <global_stdio_init.part.0+0x38>)
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2104      	movs	r1, #4
 800b8b0:	f7ff ff94 	bl	800b7dc <std>
 800b8b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	2109      	movs	r1, #9
 800b8bc:	f7ff ff8e 	bl	800b7dc <std>
 800b8c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ca:	2112      	movs	r1, #18
 800b8cc:	f7ff bf86 	b.w	800b7dc <std>
 800b8d0:	20006110 	.word	0x20006110
 800b8d4:	20005fd8 	.word	0x20005fd8
 800b8d8:	0800b849 	.word	0x0800b849

0800b8dc <__sfp_lock_acquire>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	; (800b8e4 <__sfp_lock_acquire+0x8>)
 800b8de:	f000 b976 	b.w	800bbce <__retarget_lock_acquire_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20006119 	.word	0x20006119

0800b8e8 <__sfp_lock_release>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	; (800b8f0 <__sfp_lock_release+0x8>)
 800b8ea:	f000 b971 	b.w	800bbd0 <__retarget_lock_release_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	20006119 	.word	0x20006119

0800b8f4 <__sinit>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	f7ff fff0 	bl	800b8dc <__sfp_lock_acquire>
 800b8fc:	6a23      	ldr	r3, [r4, #32]
 800b8fe:	b11b      	cbz	r3, 800b908 <__sinit+0x14>
 800b900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b904:	f7ff bff0 	b.w	800b8e8 <__sfp_lock_release>
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <__sinit+0x28>)
 800b90a:	6223      	str	r3, [r4, #32]
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <__sinit+0x2c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1f5      	bne.n	800b900 <__sinit+0xc>
 800b914:	f7ff ffc4 	bl	800b8a0 <global_stdio_init.part.0>
 800b918:	e7f2      	b.n	800b900 <__sinit+0xc>
 800b91a:	bf00      	nop
 800b91c:	0800b861 	.word	0x0800b861
 800b920:	20006110 	.word	0x20006110

0800b924 <_fwalk_sglue>:
 800b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b928:	4607      	mov	r7, r0
 800b92a:	4688      	mov	r8, r1
 800b92c:	4614      	mov	r4, r2
 800b92e:	2600      	movs	r6, #0
 800b930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b934:	f1b9 0901 	subs.w	r9, r9, #1
 800b938:	d505      	bpl.n	800b946 <_fwalk_sglue+0x22>
 800b93a:	6824      	ldr	r4, [r4, #0]
 800b93c:	2c00      	cmp	r4, #0
 800b93e:	d1f7      	bne.n	800b930 <_fwalk_sglue+0xc>
 800b940:	4630      	mov	r0, r6
 800b942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d907      	bls.n	800b95c <_fwalk_sglue+0x38>
 800b94c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b950:	3301      	adds	r3, #1
 800b952:	d003      	beq.n	800b95c <_fwalk_sglue+0x38>
 800b954:	4629      	mov	r1, r5
 800b956:	4638      	mov	r0, r7
 800b958:	47c0      	blx	r8
 800b95a:	4306      	orrs	r6, r0
 800b95c:	3568      	adds	r5, #104	; 0x68
 800b95e:	e7e9      	b.n	800b934 <_fwalk_sglue+0x10>

0800b960 <siprintf>:
 800b960:	b40e      	push	{r1, r2, r3}
 800b962:	b500      	push	{lr}
 800b964:	b09c      	sub	sp, #112	; 0x70
 800b966:	ab1d      	add	r3, sp, #116	; 0x74
 800b968:	9002      	str	r0, [sp, #8]
 800b96a:	9006      	str	r0, [sp, #24]
 800b96c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b970:	4809      	ldr	r0, [pc, #36]	; (800b998 <siprintf+0x38>)
 800b972:	9107      	str	r1, [sp, #28]
 800b974:	9104      	str	r1, [sp, #16]
 800b976:	4909      	ldr	r1, [pc, #36]	; (800b99c <siprintf+0x3c>)
 800b978:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97c:	9105      	str	r1, [sp, #20]
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	a902      	add	r1, sp, #8
 800b984:	f001 fc84 	bl	800d290 <_svfiprintf_r>
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2200      	movs	r2, #0
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	b01c      	add	sp, #112	; 0x70
 800b990:	f85d eb04 	ldr.w	lr, [sp], #4
 800b994:	b003      	add	sp, #12
 800b996:	4770      	bx	lr
 800b998:	20000158 	.word	0x20000158
 800b99c:	ffff0208 	.word	0xffff0208

0800b9a0 <__sread>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a8:	f000 f8c2 	bl	800bb30 <_read_r>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	bfab      	itete	ge
 800b9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9b4:	181b      	addge	r3, r3, r0
 800b9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ba:	bfac      	ite	ge
 800b9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9be:	81a3      	strhlt	r3, [r4, #12]
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <__swrite>:
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	461f      	mov	r7, r3
 800b9c8:	898b      	ldrh	r3, [r1, #12]
 800b9ca:	05db      	lsls	r3, r3, #23
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	d505      	bpl.n	800b9e0 <__swrite+0x1e>
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	2302      	movs	r3, #2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f000 f896 	bl	800bb0c <_lseek_r>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	f000 b8ad 	b.w	800bb54 <_write_r>

0800b9fa <__sseek>:
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba02:	f000 f883 	bl	800bb0c <_lseek_r>
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	bf15      	itete	ne
 800ba0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba16:	81a3      	strheq	r3, [r4, #12]
 800ba18:	bf18      	it	ne
 800ba1a:	81a3      	strhne	r3, [r4, #12]
 800ba1c:	bd10      	pop	{r4, pc}

0800ba1e <__sclose>:
 800ba1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba22:	f000 b80d 	b.w	800ba40 <_close_r>

0800ba26 <memset>:
 800ba26:	4402      	add	r2, r0
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d100      	bne.n	800ba30 <memset+0xa>
 800ba2e:	4770      	bx	lr
 800ba30:	f803 1b01 	strb.w	r1, [r3], #1
 800ba34:	e7f9      	b.n	800ba2a <memset+0x4>
	...

0800ba38 <_localeconv_r>:
 800ba38:	4800      	ldr	r0, [pc, #0]	; (800ba3c <_localeconv_r+0x4>)
 800ba3a:	4770      	bx	lr
 800ba3c:	2000024c 	.word	0x2000024c

0800ba40 <_close_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_close_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f5 fed7 	bl	80017fe <_close>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_close_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_close_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20006114 	.word	0x20006114

0800ba60 <_reclaim_reent>:
 800ba60:	4b29      	ldr	r3, [pc, #164]	; (800bb08 <_reclaim_reent+0xa8>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4283      	cmp	r3, r0
 800ba66:	b570      	push	{r4, r5, r6, lr}
 800ba68:	4604      	mov	r4, r0
 800ba6a:	d04b      	beq.n	800bb04 <_reclaim_reent+0xa4>
 800ba6c:	69c3      	ldr	r3, [r0, #28]
 800ba6e:	b143      	cbz	r3, 800ba82 <_reclaim_reent+0x22>
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d144      	bne.n	800bb00 <_reclaim_reent+0xa0>
 800ba76:	69e3      	ldr	r3, [r4, #28]
 800ba78:	6819      	ldr	r1, [r3, #0]
 800ba7a:	b111      	cbz	r1, 800ba82 <_reclaim_reent+0x22>
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 ff31 	bl	800c8e4 <_free_r>
 800ba82:	6961      	ldr	r1, [r4, #20]
 800ba84:	b111      	cbz	r1, 800ba8c <_reclaim_reent+0x2c>
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 ff2c 	bl	800c8e4 <_free_r>
 800ba8c:	69e1      	ldr	r1, [r4, #28]
 800ba8e:	b111      	cbz	r1, 800ba96 <_reclaim_reent+0x36>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 ff27 	bl	800c8e4 <_free_r>
 800ba96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ba98:	b111      	cbz	r1, 800baa0 <_reclaim_reent+0x40>
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 ff22 	bl	800c8e4 <_free_r>
 800baa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baa2:	b111      	cbz	r1, 800baaa <_reclaim_reent+0x4a>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 ff1d 	bl	800c8e4 <_free_r>
 800baaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800baac:	b111      	cbz	r1, 800bab4 <_reclaim_reent+0x54>
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 ff18 	bl	800c8e4 <_free_r>
 800bab4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bab6:	b111      	cbz	r1, 800babe <_reclaim_reent+0x5e>
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 ff13 	bl	800c8e4 <_free_r>
 800babe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bac0:	b111      	cbz	r1, 800bac8 <_reclaim_reent+0x68>
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 ff0e 	bl	800c8e4 <_free_r>
 800bac8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800baca:	b111      	cbz	r1, 800bad2 <_reclaim_reent+0x72>
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 ff09 	bl	800c8e4 <_free_r>
 800bad2:	6a23      	ldr	r3, [r4, #32]
 800bad4:	b1b3      	cbz	r3, 800bb04 <_reclaim_reent+0xa4>
 800bad6:	4620      	mov	r0, r4
 800bad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800badc:	4718      	bx	r3
 800bade:	5949      	ldr	r1, [r1, r5]
 800bae0:	b941      	cbnz	r1, 800baf4 <_reclaim_reent+0x94>
 800bae2:	3504      	adds	r5, #4
 800bae4:	69e3      	ldr	r3, [r4, #28]
 800bae6:	2d80      	cmp	r5, #128	; 0x80
 800bae8:	68d9      	ldr	r1, [r3, #12]
 800baea:	d1f8      	bne.n	800bade <_reclaim_reent+0x7e>
 800baec:	4620      	mov	r0, r4
 800baee:	f000 fef9 	bl	800c8e4 <_free_r>
 800baf2:	e7c0      	b.n	800ba76 <_reclaim_reent+0x16>
 800baf4:	680e      	ldr	r6, [r1, #0]
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fef4 	bl	800c8e4 <_free_r>
 800bafc:	4631      	mov	r1, r6
 800bafe:	e7ef      	b.n	800bae0 <_reclaim_reent+0x80>
 800bb00:	2500      	movs	r5, #0
 800bb02:	e7ef      	b.n	800bae4 <_reclaim_reent+0x84>
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	bf00      	nop
 800bb08:	20000158 	.word	0x20000158

0800bb0c <_lseek_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d07      	ldr	r5, [pc, #28]	; (800bb2c <_lseek_r+0x20>)
 800bb10:	4604      	mov	r4, r0
 800bb12:	4608      	mov	r0, r1
 800bb14:	4611      	mov	r1, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	602a      	str	r2, [r5, #0]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f7f5 fe96 	bl	800184c <_lseek>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_lseek_r+0x1e>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_lseek_r+0x1e>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	20006114 	.word	0x20006114

0800bb30 <_read_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	; (800bb50 <_read_r+0x20>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f7f5 fe24 	bl	800178c <_read>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_read_r+0x1e>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_read_r+0x1e>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20006114 	.word	0x20006114

0800bb54 <_write_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_write_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f5 fe2f 	bl	80017c6 <_write>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_write_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_write_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20006114 	.word	0x20006114

0800bb78 <__errno>:
 800bb78:	4b01      	ldr	r3, [pc, #4]	; (800bb80 <__errno+0x8>)
 800bb7a:	6818      	ldr	r0, [r3, #0]
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20000158 	.word	0x20000158

0800bb84 <__libc_init_array>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	4d0d      	ldr	r5, [pc, #52]	; (800bbbc <__libc_init_array+0x38>)
 800bb88:	4c0d      	ldr	r4, [pc, #52]	; (800bbc0 <__libc_init_array+0x3c>)
 800bb8a:	1b64      	subs	r4, r4, r5
 800bb8c:	10a4      	asrs	r4, r4, #2
 800bb8e:	2600      	movs	r6, #0
 800bb90:	42a6      	cmp	r6, r4
 800bb92:	d109      	bne.n	800bba8 <__libc_init_array+0x24>
 800bb94:	4d0b      	ldr	r5, [pc, #44]	; (800bbc4 <__libc_init_array+0x40>)
 800bb96:	4c0c      	ldr	r4, [pc, #48]	; (800bbc8 <__libc_init_array+0x44>)
 800bb98:	f002 f894 	bl	800dcc4 <_init>
 800bb9c:	1b64      	subs	r4, r4, r5
 800bb9e:	10a4      	asrs	r4, r4, #2
 800bba0:	2600      	movs	r6, #0
 800bba2:	42a6      	cmp	r6, r4
 800bba4:	d105      	bne.n	800bbb2 <__libc_init_array+0x2e>
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbac:	4798      	blx	r3
 800bbae:	3601      	adds	r6, #1
 800bbb0:	e7ee      	b.n	800bb90 <__libc_init_array+0xc>
 800bbb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb6:	4798      	blx	r3
 800bbb8:	3601      	adds	r6, #1
 800bbba:	e7f2      	b.n	800bba2 <__libc_init_array+0x1e>
 800bbbc:	0800e1f4 	.word	0x0800e1f4
 800bbc0:	0800e1f4 	.word	0x0800e1f4
 800bbc4:	0800e1f4 	.word	0x0800e1f4
 800bbc8:	0800e1f8 	.word	0x0800e1f8

0800bbcc <__retarget_lock_init_recursive>:
 800bbcc:	4770      	bx	lr

0800bbce <__retarget_lock_acquire_recursive>:
 800bbce:	4770      	bx	lr

0800bbd0 <__retarget_lock_release_recursive>:
 800bbd0:	4770      	bx	lr

0800bbd2 <memcpy>:
 800bbd2:	440a      	add	r2, r1
 800bbd4:	4291      	cmp	r1, r2
 800bbd6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbda:	d100      	bne.n	800bbde <memcpy+0xc>
 800bbdc:	4770      	bx	lr
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbe8:	4291      	cmp	r1, r2
 800bbea:	d1f9      	bne.n	800bbe0 <memcpy+0xe>
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <quorem>:
 800bbee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf2:	6903      	ldr	r3, [r0, #16]
 800bbf4:	690c      	ldr	r4, [r1, #16]
 800bbf6:	42a3      	cmp	r3, r4
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	db7e      	blt.n	800bcfa <quorem+0x10c>
 800bbfc:	3c01      	subs	r4, #1
 800bbfe:	f101 0814 	add.w	r8, r1, #20
 800bc02:	f100 0514 	add.w	r5, r0, #20
 800bc06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc14:	3301      	adds	r3, #1
 800bc16:	429a      	cmp	r2, r3
 800bc18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc20:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc24:	d331      	bcc.n	800bc8a <quorem+0x9c>
 800bc26:	f04f 0e00 	mov.w	lr, #0
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	46ac      	mov	ip, r5
 800bc2e:	46f2      	mov	sl, lr
 800bc30:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc34:	b293      	uxth	r3, r2
 800bc36:	fb06 e303 	mla	r3, r6, r3, lr
 800bc3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc3e:	0c1a      	lsrs	r2, r3, #16
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	ebaa 0303 	sub.w	r3, sl, r3
 800bc46:	f8dc a000 	ldr.w	sl, [ip]
 800bc4a:	fa13 f38a 	uxtah	r3, r3, sl
 800bc4e:	fb06 220e 	mla	r2, r6, lr, r2
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc64:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc68:	4581      	cmp	r9, r0
 800bc6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc6e:	f84c 3b04 	str.w	r3, [ip], #4
 800bc72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc76:	d2db      	bcs.n	800bc30 <quorem+0x42>
 800bc78:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc7c:	b92b      	cbnz	r3, 800bc8a <quorem+0x9c>
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	3b04      	subs	r3, #4
 800bc82:	429d      	cmp	r5, r3
 800bc84:	461a      	mov	r2, r3
 800bc86:	d32c      	bcc.n	800bce2 <quorem+0xf4>
 800bc88:	613c      	str	r4, [r7, #16]
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	f001 f9a6 	bl	800cfdc <__mcmp>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	db22      	blt.n	800bcda <quorem+0xec>
 800bc94:	3601      	adds	r6, #1
 800bc96:	4629      	mov	r1, r5
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc9e:	f8d1 c000 	ldr.w	ip, [r1]
 800bca2:	b293      	uxth	r3, r2
 800bca4:	1ac3      	subs	r3, r0, r3
 800bca6:	0c12      	lsrs	r2, r2, #16
 800bca8:	fa13 f38c 	uxtah	r3, r3, ip
 800bcac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bcb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcba:	45c1      	cmp	r9, r8
 800bcbc:	f841 3b04 	str.w	r3, [r1], #4
 800bcc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcc4:	d2e9      	bcs.n	800bc9a <quorem+0xac>
 800bcc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcce:	b922      	cbnz	r2, 800bcda <quorem+0xec>
 800bcd0:	3b04      	subs	r3, #4
 800bcd2:	429d      	cmp	r5, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	d30a      	bcc.n	800bcee <quorem+0x100>
 800bcd8:	613c      	str	r4, [r7, #16]
 800bcda:	4630      	mov	r0, r6
 800bcdc:	b003      	add	sp, #12
 800bcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	2a00      	cmp	r2, #0
 800bce8:	d1ce      	bne.n	800bc88 <quorem+0x9a>
 800bcea:	3c01      	subs	r4, #1
 800bcec:	e7c9      	b.n	800bc82 <quorem+0x94>
 800bcee:	6812      	ldr	r2, [r2, #0]
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	2a00      	cmp	r2, #0
 800bcf4:	d1f0      	bne.n	800bcd8 <quorem+0xea>
 800bcf6:	3c01      	subs	r4, #1
 800bcf8:	e7eb      	b.n	800bcd2 <quorem+0xe4>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e7ee      	b.n	800bcdc <quorem+0xee>
	...

0800bd00 <_dtoa_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	ed2d 8b04 	vpush	{d8-d9}
 800bd08:	69c5      	ldr	r5, [r0, #28]
 800bd0a:	b093      	sub	sp, #76	; 0x4c
 800bd0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd10:	ec57 6b10 	vmov	r6, r7, d0
 800bd14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd18:	9107      	str	r1, [sp, #28]
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd1e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd20:	b975      	cbnz	r5, 800bd40 <_dtoa_r+0x40>
 800bd22:	2010      	movs	r0, #16
 800bd24:	f000 fe2a 	bl	800c97c <malloc>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	61e0      	str	r0, [r4, #28]
 800bd2c:	b920      	cbnz	r0, 800bd38 <_dtoa_r+0x38>
 800bd2e:	4bae      	ldr	r3, [pc, #696]	; (800bfe8 <_dtoa_r+0x2e8>)
 800bd30:	21ef      	movs	r1, #239	; 0xef
 800bd32:	48ae      	ldr	r0, [pc, #696]	; (800bfec <_dtoa_r+0x2ec>)
 800bd34:	f001 fc82 	bl	800d63c <__assert_func>
 800bd38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd3c:	6005      	str	r5, [r0, #0]
 800bd3e:	60c5      	str	r5, [r0, #12]
 800bd40:	69e3      	ldr	r3, [r4, #28]
 800bd42:	6819      	ldr	r1, [r3, #0]
 800bd44:	b151      	cbz	r1, 800bd5c <_dtoa_r+0x5c>
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	604a      	str	r2, [r1, #4]
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4093      	lsls	r3, r2
 800bd4e:	608b      	str	r3, [r1, #8]
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 ff07 	bl	800cb64 <_Bfree>
 800bd56:	69e3      	ldr	r3, [r4, #28]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	1e3b      	subs	r3, r7, #0
 800bd5e:	bfbb      	ittet	lt
 800bd60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd64:	9303      	strlt	r3, [sp, #12]
 800bd66:	2300      	movge	r3, #0
 800bd68:	2201      	movlt	r2, #1
 800bd6a:	bfac      	ite	ge
 800bd6c:	f8c8 3000 	strge.w	r3, [r8]
 800bd70:	f8c8 2000 	strlt.w	r2, [r8]
 800bd74:	4b9e      	ldr	r3, [pc, #632]	; (800bff0 <_dtoa_r+0x2f0>)
 800bd76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd7a:	ea33 0308 	bics.w	r3, r3, r8
 800bd7e:	d11b      	bne.n	800bdb8 <_dtoa_r+0xb8>
 800bd80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd82:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd8c:	4333      	orrs	r3, r6
 800bd8e:	f000 8593 	beq.w	800c8b8 <_dtoa_r+0xbb8>
 800bd92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd94:	b963      	cbnz	r3, 800bdb0 <_dtoa_r+0xb0>
 800bd96:	4b97      	ldr	r3, [pc, #604]	; (800bff4 <_dtoa_r+0x2f4>)
 800bd98:	e027      	b.n	800bdea <_dtoa_r+0xea>
 800bd9a:	4b97      	ldr	r3, [pc, #604]	; (800bff8 <_dtoa_r+0x2f8>)
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	9800      	ldr	r0, [sp, #0]
 800bda6:	b013      	add	sp, #76	; 0x4c
 800bda8:	ecbd 8b04 	vpop	{d8-d9}
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	4b90      	ldr	r3, [pc, #576]	; (800bff4 <_dtoa_r+0x2f4>)
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	3303      	adds	r3, #3
 800bdb6:	e7f3      	b.n	800bda0 <_dtoa_r+0xa0>
 800bdb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	ec51 0b17 	vmov	r0, r1, d7
 800bdc2:	eeb0 8a47 	vmov.f32	s16, s14
 800bdc6:	eef0 8a67 	vmov.f32	s17, s15
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f7f4 fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	b160      	cbz	r0, 800bdee <_dtoa_r+0xee>
 800bdd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 8568 	beq.w	800c8b2 <_dtoa_r+0xbb2>
 800bde2:	4b86      	ldr	r3, [pc, #536]	; (800bffc <_dtoa_r+0x2fc>)
 800bde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	e7da      	b.n	800bda4 <_dtoa_r+0xa4>
 800bdee:	aa10      	add	r2, sp, #64	; 0x40
 800bdf0:	a911      	add	r1, sp, #68	; 0x44
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	eeb0 0a48 	vmov.f32	s0, s16
 800bdf8:	eef0 0a68 	vmov.f32	s1, s17
 800bdfc:	f001 f994 	bl	800d128 <__d2b>
 800be00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be04:	4682      	mov	sl, r0
 800be06:	2d00      	cmp	r5, #0
 800be08:	d07f      	beq.n	800bf0a <_dtoa_r+0x20a>
 800be0a:	ee18 3a90 	vmov	r3, s17
 800be0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be16:	ec51 0b18 	vmov	r0, r1, d8
 800be1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800be26:	4619      	mov	r1, r3
 800be28:	2200      	movs	r2, #0
 800be2a:	4b75      	ldr	r3, [pc, #468]	; (800c000 <_dtoa_r+0x300>)
 800be2c:	f7f4 fa2c 	bl	8000288 <__aeabi_dsub>
 800be30:	a367      	add	r3, pc, #412	; (adr r3, 800bfd0 <_dtoa_r+0x2d0>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	a367      	add	r3, pc, #412	; (adr r3, 800bfd8 <_dtoa_r+0x2d8>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f7f4 fa24 	bl	800028c <__adddf3>
 800be44:	4606      	mov	r6, r0
 800be46:	4628      	mov	r0, r5
 800be48:	460f      	mov	r7, r1
 800be4a:	f7f4 fb6b 	bl	8000524 <__aeabi_i2d>
 800be4e:	a364      	add	r3, pc, #400	; (adr r3, 800bfe0 <_dtoa_r+0x2e0>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f7f4 fbd0 	bl	80005f8 <__aeabi_dmul>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fa14 	bl	800028c <__adddf3>
 800be64:	4606      	mov	r6, r0
 800be66:	460f      	mov	r7, r1
 800be68:	f7f4 fe76 	bl	8000b58 <__aeabi_d2iz>
 800be6c:	2200      	movs	r2, #0
 800be6e:	4683      	mov	fp, r0
 800be70:	2300      	movs	r3, #0
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 fe31 	bl	8000adc <__aeabi_dcmplt>
 800be7a:	b148      	cbz	r0, 800be90 <_dtoa_r+0x190>
 800be7c:	4658      	mov	r0, fp
 800be7e:	f7f4 fb51 	bl	8000524 <__aeabi_i2d>
 800be82:	4632      	mov	r2, r6
 800be84:	463b      	mov	r3, r7
 800be86:	f7f4 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800be8a:	b908      	cbnz	r0, 800be90 <_dtoa_r+0x190>
 800be8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be90:	f1bb 0f16 	cmp.w	fp, #22
 800be94:	d857      	bhi.n	800bf46 <_dtoa_r+0x246>
 800be96:	4b5b      	ldr	r3, [pc, #364]	; (800c004 <_dtoa_r+0x304>)
 800be98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	ec51 0b18 	vmov	r0, r1, d8
 800bea4:	f7f4 fe1a 	bl	8000adc <__aeabi_dcmplt>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d04e      	beq.n	800bf4a <_dtoa_r+0x24a>
 800beac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beb0:	2300      	movs	r3, #0
 800beb2:	930c      	str	r3, [sp, #48]	; 0x30
 800beb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beb6:	1b5b      	subs	r3, r3, r5
 800beb8:	1e5a      	subs	r2, r3, #1
 800beba:	bf45      	ittet	mi
 800bebc:	f1c3 0301 	rsbmi	r3, r3, #1
 800bec0:	9305      	strmi	r3, [sp, #20]
 800bec2:	2300      	movpl	r3, #0
 800bec4:	2300      	movmi	r3, #0
 800bec6:	9206      	str	r2, [sp, #24]
 800bec8:	bf54      	ite	pl
 800beca:	9305      	strpl	r3, [sp, #20]
 800becc:	9306      	strmi	r3, [sp, #24]
 800bece:	f1bb 0f00 	cmp.w	fp, #0
 800bed2:	db3c      	blt.n	800bf4e <_dtoa_r+0x24e>
 800bed4:	9b06      	ldr	r3, [sp, #24]
 800bed6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800beda:	445b      	add	r3, fp
 800bedc:	9306      	str	r3, [sp, #24]
 800bede:	2300      	movs	r3, #0
 800bee0:	9308      	str	r3, [sp, #32]
 800bee2:	9b07      	ldr	r3, [sp, #28]
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	d868      	bhi.n	800bfba <_dtoa_r+0x2ba>
 800bee8:	2b05      	cmp	r3, #5
 800beea:	bfc4      	itt	gt
 800beec:	3b04      	subgt	r3, #4
 800beee:	9307      	strgt	r3, [sp, #28]
 800bef0:	9b07      	ldr	r3, [sp, #28]
 800bef2:	f1a3 0302 	sub.w	r3, r3, #2
 800bef6:	bfcc      	ite	gt
 800bef8:	2500      	movgt	r5, #0
 800befa:	2501      	movle	r5, #1
 800befc:	2b03      	cmp	r3, #3
 800befe:	f200 8085 	bhi.w	800c00c <_dtoa_r+0x30c>
 800bf02:	e8df f003 	tbb	[pc, r3]
 800bf06:	3b2e      	.short	0x3b2e
 800bf08:	5839      	.short	0x5839
 800bf0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf0e:	441d      	add	r5, r3
 800bf10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf14:	2b20      	cmp	r3, #32
 800bf16:	bfc1      	itttt	gt
 800bf18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bf24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bf28:	bfd6      	itet	le
 800bf2a:	f1c3 0320 	rsble	r3, r3, #32
 800bf2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf32:	fa06 f003 	lslle.w	r0, r6, r3
 800bf36:	f7f4 fae5 	bl	8000504 <__aeabi_ui2d>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bf40:	3d01      	subs	r5, #1
 800bf42:	920e      	str	r2, [sp, #56]	; 0x38
 800bf44:	e76f      	b.n	800be26 <_dtoa_r+0x126>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e7b3      	b.n	800beb2 <_dtoa_r+0x1b2>
 800bf4a:	900c      	str	r0, [sp, #48]	; 0x30
 800bf4c:	e7b2      	b.n	800beb4 <_dtoa_r+0x1b4>
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	eba3 030b 	sub.w	r3, r3, fp
 800bf54:	9305      	str	r3, [sp, #20]
 800bf56:	f1cb 0300 	rsb	r3, fp, #0
 800bf5a:	9308      	str	r3, [sp, #32]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf60:	e7bf      	b.n	800bee2 <_dtoa_r+0x1e2>
 800bf62:	2300      	movs	r3, #0
 800bf64:	9309      	str	r3, [sp, #36]	; 0x24
 800bf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dc52      	bgt.n	800c012 <_dtoa_r+0x312>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	9304      	str	r3, [sp, #16]
 800bf72:	461a      	mov	r2, r3
 800bf74:	920a      	str	r2, [sp, #40]	; 0x28
 800bf76:	e00b      	b.n	800bf90 <_dtoa_r+0x290>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e7f3      	b.n	800bf64 <_dtoa_r+0x264>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf82:	445b      	add	r3, fp
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	3301      	adds	r3, #1
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	bfb8      	it	lt
 800bf8e:	2301      	movlt	r3, #1
 800bf90:	69e0      	ldr	r0, [r4, #28]
 800bf92:	2100      	movs	r1, #0
 800bf94:	2204      	movs	r2, #4
 800bf96:	f102 0614 	add.w	r6, r2, #20
 800bf9a:	429e      	cmp	r6, r3
 800bf9c:	d93d      	bls.n	800c01a <_dtoa_r+0x31a>
 800bf9e:	6041      	str	r1, [r0, #4]
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f000 fd9f 	bl	800cae4 <_Balloc>
 800bfa6:	9000      	str	r0, [sp, #0]
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d139      	bne.n	800c020 <_dtoa_r+0x320>
 800bfac:	4b16      	ldr	r3, [pc, #88]	; (800c008 <_dtoa_r+0x308>)
 800bfae:	4602      	mov	r2, r0
 800bfb0:	f240 11af 	movw	r1, #431	; 0x1af
 800bfb4:	e6bd      	b.n	800bd32 <_dtoa_r+0x32>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e7e1      	b.n	800bf7e <_dtoa_r+0x27e>
 800bfba:	2501      	movs	r5, #1
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9307      	str	r3, [sp, #28]
 800bfc0:	9509      	str	r5, [sp, #36]	; 0x24
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2312      	movs	r3, #18
 800bfce:	e7d1      	b.n	800bf74 <_dtoa_r+0x274>
 800bfd0:	636f4361 	.word	0x636f4361
 800bfd4:	3fd287a7 	.word	0x3fd287a7
 800bfd8:	8b60c8b3 	.word	0x8b60c8b3
 800bfdc:	3fc68a28 	.word	0x3fc68a28
 800bfe0:	509f79fb 	.word	0x509f79fb
 800bfe4:	3fd34413 	.word	0x3fd34413
 800bfe8:	0800deb9 	.word	0x0800deb9
 800bfec:	0800ded0 	.word	0x0800ded0
 800bff0:	7ff00000 	.word	0x7ff00000
 800bff4:	0800deb5 	.word	0x0800deb5
 800bff8:	0800deac 	.word	0x0800deac
 800bffc:	0800de89 	.word	0x0800de89
 800c000:	3ff80000 	.word	0x3ff80000
 800c004:	0800dfc0 	.word	0x0800dfc0
 800c008:	0800df28 	.word	0x0800df28
 800c00c:	2301      	movs	r3, #1
 800c00e:	9309      	str	r3, [sp, #36]	; 0x24
 800c010:	e7d7      	b.n	800bfc2 <_dtoa_r+0x2c2>
 800c012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	9304      	str	r3, [sp, #16]
 800c018:	e7ba      	b.n	800bf90 <_dtoa_r+0x290>
 800c01a:	3101      	adds	r1, #1
 800c01c:	0052      	lsls	r2, r2, #1
 800c01e:	e7ba      	b.n	800bf96 <_dtoa_r+0x296>
 800c020:	69e3      	ldr	r3, [r4, #28]
 800c022:	9a00      	ldr	r2, [sp, #0]
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	2b0e      	cmp	r3, #14
 800c02a:	f200 80a8 	bhi.w	800c17e <_dtoa_r+0x47e>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	f000 80a5 	beq.w	800c17e <_dtoa_r+0x47e>
 800c034:	f1bb 0f00 	cmp.w	fp, #0
 800c038:	dd38      	ble.n	800c0ac <_dtoa_r+0x3ac>
 800c03a:	4bc0      	ldr	r3, [pc, #768]	; (800c33c <_dtoa_r+0x63c>)
 800c03c:	f00b 020f 	and.w	r2, fp, #15
 800c040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c044:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c048:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c04c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c050:	d019      	beq.n	800c086 <_dtoa_r+0x386>
 800c052:	4bbb      	ldr	r3, [pc, #748]	; (800c340 <_dtoa_r+0x640>)
 800c054:	ec51 0b18 	vmov	r0, r1, d8
 800c058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c05c:	f7f4 fbf6 	bl	800084c <__aeabi_ddiv>
 800c060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c064:	f008 080f 	and.w	r8, r8, #15
 800c068:	2503      	movs	r5, #3
 800c06a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c340 <_dtoa_r+0x640>
 800c06e:	f1b8 0f00 	cmp.w	r8, #0
 800c072:	d10a      	bne.n	800c08a <_dtoa_r+0x38a>
 800c074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	f7f4 fbe6 	bl	800084c <__aeabi_ddiv>
 800c080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c084:	e02b      	b.n	800c0de <_dtoa_r+0x3de>
 800c086:	2502      	movs	r5, #2
 800c088:	e7ef      	b.n	800c06a <_dtoa_r+0x36a>
 800c08a:	f018 0f01 	tst.w	r8, #1
 800c08e:	d008      	beq.n	800c0a2 <_dtoa_r+0x3a2>
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c098:	f7f4 faae 	bl	80005f8 <__aeabi_dmul>
 800c09c:	3501      	adds	r5, #1
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0a6:	f109 0908 	add.w	r9, r9, #8
 800c0aa:	e7e0      	b.n	800c06e <_dtoa_r+0x36e>
 800c0ac:	f000 809f 	beq.w	800c1ee <_dtoa_r+0x4ee>
 800c0b0:	f1cb 0600 	rsb	r6, fp, #0
 800c0b4:	4ba1      	ldr	r3, [pc, #644]	; (800c33c <_dtoa_r+0x63c>)
 800c0b6:	4fa2      	ldr	r7, [pc, #648]	; (800c340 <_dtoa_r+0x640>)
 800c0b8:	f006 020f 	and.w	r2, r6, #15
 800c0bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	ec51 0b18 	vmov	r0, r1, d8
 800c0c8:	f7f4 fa96 	bl	80005f8 <__aeabi_dmul>
 800c0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d0:	1136      	asrs	r6, r6, #4
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2502      	movs	r5, #2
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d17e      	bne.n	800c1d8 <_dtoa_r+0x4d8>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1d0      	bne.n	800c080 <_dtoa_r+0x380>
 800c0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 8084 	beq.w	800c1f2 <_dtoa_r+0x4f2>
 800c0ea:	4b96      	ldr	r3, [pc, #600]	; (800c344 <_dtoa_r+0x644>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	f7f4 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d07b      	beq.n	800c1f2 <_dtoa_r+0x4f2>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d078      	beq.n	800c1f2 <_dtoa_r+0x4f2>
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd39      	ble.n	800c17a <_dtoa_r+0x47a>
 800c106:	4b90      	ldr	r3, [pc, #576]	; (800c348 <_dtoa_r+0x648>)
 800c108:	2200      	movs	r2, #0
 800c10a:	4640      	mov	r0, r8
 800c10c:	4649      	mov	r1, r9
 800c10e:	f7f4 fa73 	bl	80005f8 <__aeabi_dmul>
 800c112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c116:	9e01      	ldr	r6, [sp, #4]
 800c118:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c11c:	3501      	adds	r5, #1
 800c11e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c122:	4628      	mov	r0, r5
 800c124:	f7f4 f9fe 	bl	8000524 <__aeabi_i2d>
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	f7f4 fa64 	bl	80005f8 <__aeabi_dmul>
 800c130:	4b86      	ldr	r3, [pc, #536]	; (800c34c <_dtoa_r+0x64c>)
 800c132:	2200      	movs	r2, #0
 800c134:	f7f4 f8aa 	bl	800028c <__adddf3>
 800c138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c140:	9303      	str	r3, [sp, #12]
 800c142:	2e00      	cmp	r6, #0
 800c144:	d158      	bne.n	800c1f8 <_dtoa_r+0x4f8>
 800c146:	4b82      	ldr	r3, [pc, #520]	; (800c350 <_dtoa_r+0x650>)
 800c148:	2200      	movs	r2, #0
 800c14a:	4640      	mov	r0, r8
 800c14c:	4649      	mov	r1, r9
 800c14e:	f7f4 f89b 	bl	8000288 <__aeabi_dsub>
 800c152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c156:	4680      	mov	r8, r0
 800c158:	4689      	mov	r9, r1
 800c15a:	f7f4 fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800c15e:	2800      	cmp	r0, #0
 800c160:	f040 8296 	bne.w	800c690 <_dtoa_r+0x990>
 800c164:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c168:	4640      	mov	r0, r8
 800c16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c16e:	4649      	mov	r1, r9
 800c170:	f7f4 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800c174:	2800      	cmp	r0, #0
 800c176:	f040 8289 	bne.w	800c68c <_dtoa_r+0x98c>
 800c17a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c17e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c180:	2b00      	cmp	r3, #0
 800c182:	f2c0 814e 	blt.w	800c422 <_dtoa_r+0x722>
 800c186:	f1bb 0f0e 	cmp.w	fp, #14
 800c18a:	f300 814a 	bgt.w	800c422 <_dtoa_r+0x722>
 800c18e:	4b6b      	ldr	r3, [pc, #428]	; (800c33c <_dtoa_r+0x63c>)
 800c190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c194:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f280 80dc 	bge.w	800c358 <_dtoa_r+0x658>
 800c1a0:	9b04      	ldr	r3, [sp, #16]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f300 80d8 	bgt.w	800c358 <_dtoa_r+0x658>
 800c1a8:	f040 826f 	bne.w	800c68a <_dtoa_r+0x98a>
 800c1ac:	4b68      	ldr	r3, [pc, #416]	; (800c350 <_dtoa_r+0x650>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1bc:	f7f4 fca2 	bl	8000b04 <__aeabi_dcmpge>
 800c1c0:	9e04      	ldr	r6, [sp, #16]
 800c1c2:	4637      	mov	r7, r6
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f040 8245 	bne.w	800c654 <_dtoa_r+0x954>
 800c1ca:	9d00      	ldr	r5, [sp, #0]
 800c1cc:	2331      	movs	r3, #49	; 0x31
 800c1ce:	f805 3b01 	strb.w	r3, [r5], #1
 800c1d2:	f10b 0b01 	add.w	fp, fp, #1
 800c1d6:	e241      	b.n	800c65c <_dtoa_r+0x95c>
 800c1d8:	07f2      	lsls	r2, r6, #31
 800c1da:	d505      	bpl.n	800c1e8 <_dtoa_r+0x4e8>
 800c1dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1e0:	f7f4 fa0a 	bl	80005f8 <__aeabi_dmul>
 800c1e4:	3501      	adds	r5, #1
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	1076      	asrs	r6, r6, #1
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	e773      	b.n	800c0d6 <_dtoa_r+0x3d6>
 800c1ee:	2502      	movs	r5, #2
 800c1f0:	e775      	b.n	800c0de <_dtoa_r+0x3de>
 800c1f2:	9e04      	ldr	r6, [sp, #16]
 800c1f4:	465f      	mov	r7, fp
 800c1f6:	e792      	b.n	800c11e <_dtoa_r+0x41e>
 800c1f8:	9900      	ldr	r1, [sp, #0]
 800c1fa:	4b50      	ldr	r3, [pc, #320]	; (800c33c <_dtoa_r+0x63c>)
 800c1fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c200:	4431      	add	r1, r6
 800c202:	9102      	str	r1, [sp, #8]
 800c204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c206:	eeb0 9a47 	vmov.f32	s18, s14
 800c20a:	eef0 9a67 	vmov.f32	s19, s15
 800c20e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c216:	2900      	cmp	r1, #0
 800c218:	d044      	beq.n	800c2a4 <_dtoa_r+0x5a4>
 800c21a:	494e      	ldr	r1, [pc, #312]	; (800c354 <_dtoa_r+0x654>)
 800c21c:	2000      	movs	r0, #0
 800c21e:	f7f4 fb15 	bl	800084c <__aeabi_ddiv>
 800c222:	ec53 2b19 	vmov	r2, r3, d9
 800c226:	f7f4 f82f 	bl	8000288 <__aeabi_dsub>
 800c22a:	9d00      	ldr	r5, [sp, #0]
 800c22c:	ec41 0b19 	vmov	d9, r0, r1
 800c230:	4649      	mov	r1, r9
 800c232:	4640      	mov	r0, r8
 800c234:	f7f4 fc90 	bl	8000b58 <__aeabi_d2iz>
 800c238:	4606      	mov	r6, r0
 800c23a:	f7f4 f973 	bl	8000524 <__aeabi_i2d>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f81f 	bl	8000288 <__aeabi_dsub>
 800c24a:	3630      	adds	r6, #48	; 0x30
 800c24c:	f805 6b01 	strb.w	r6, [r5], #1
 800c250:	ec53 2b19 	vmov	r2, r3, d9
 800c254:	4680      	mov	r8, r0
 800c256:	4689      	mov	r9, r1
 800c258:	f7f4 fc40 	bl	8000adc <__aeabi_dcmplt>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d164      	bne.n	800c32a <_dtoa_r+0x62a>
 800c260:	4642      	mov	r2, r8
 800c262:	464b      	mov	r3, r9
 800c264:	4937      	ldr	r1, [pc, #220]	; (800c344 <_dtoa_r+0x644>)
 800c266:	2000      	movs	r0, #0
 800c268:	f7f4 f80e 	bl	8000288 <__aeabi_dsub>
 800c26c:	ec53 2b19 	vmov	r2, r3, d9
 800c270:	f7f4 fc34 	bl	8000adc <__aeabi_dcmplt>
 800c274:	2800      	cmp	r0, #0
 800c276:	f040 80b6 	bne.w	800c3e6 <_dtoa_r+0x6e6>
 800c27a:	9b02      	ldr	r3, [sp, #8]
 800c27c:	429d      	cmp	r5, r3
 800c27e:	f43f af7c 	beq.w	800c17a <_dtoa_r+0x47a>
 800c282:	4b31      	ldr	r3, [pc, #196]	; (800c348 <_dtoa_r+0x648>)
 800c284:	ec51 0b19 	vmov	r0, r1, d9
 800c288:	2200      	movs	r2, #0
 800c28a:	f7f4 f9b5 	bl	80005f8 <__aeabi_dmul>
 800c28e:	4b2e      	ldr	r3, [pc, #184]	; (800c348 <_dtoa_r+0x648>)
 800c290:	ec41 0b19 	vmov	d9, r0, r1
 800c294:	2200      	movs	r2, #0
 800c296:	4640      	mov	r0, r8
 800c298:	4649      	mov	r1, r9
 800c29a:	f7f4 f9ad 	bl	80005f8 <__aeabi_dmul>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4689      	mov	r9, r1
 800c2a2:	e7c5      	b.n	800c230 <_dtoa_r+0x530>
 800c2a4:	ec51 0b17 	vmov	r0, r1, d7
 800c2a8:	f7f4 f9a6 	bl	80005f8 <__aeabi_dmul>
 800c2ac:	9b02      	ldr	r3, [sp, #8]
 800c2ae:	9d00      	ldr	r5, [sp, #0]
 800c2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b2:	ec41 0b19 	vmov	d9, r0, r1
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	f7f4 fc4d 	bl	8000b58 <__aeabi_d2iz>
 800c2be:	4606      	mov	r6, r0
 800c2c0:	f7f4 f930 	bl	8000524 <__aeabi_i2d>
 800c2c4:	3630      	adds	r6, #48	; 0x30
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	f7f3 ffdb 	bl	8000288 <__aeabi_dsub>
 800c2d2:	f805 6b01 	strb.w	r6, [r5], #1
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	429d      	cmp	r5, r3
 800c2da:	4680      	mov	r8, r0
 800c2dc:	4689      	mov	r9, r1
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	d124      	bne.n	800c32e <_dtoa_r+0x62e>
 800c2e4:	4b1b      	ldr	r3, [pc, #108]	; (800c354 <_dtoa_r+0x654>)
 800c2e6:	ec51 0b19 	vmov	r0, r1, d9
 800c2ea:	f7f3 ffcf 	bl	800028c <__adddf3>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d173      	bne.n	800c3e6 <_dtoa_r+0x6e6>
 800c2fe:	ec53 2b19 	vmov	r2, r3, d9
 800c302:	4914      	ldr	r1, [pc, #80]	; (800c354 <_dtoa_r+0x654>)
 800c304:	2000      	movs	r0, #0
 800c306:	f7f3 ffbf 	bl	8000288 <__aeabi_dsub>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	4640      	mov	r0, r8
 800c310:	4649      	mov	r1, r9
 800c312:	f7f4 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800c316:	2800      	cmp	r0, #0
 800c318:	f43f af2f 	beq.w	800c17a <_dtoa_r+0x47a>
 800c31c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c31e:	1e6b      	subs	r3, r5, #1
 800c320:	930f      	str	r3, [sp, #60]	; 0x3c
 800c322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c326:	2b30      	cmp	r3, #48	; 0x30
 800c328:	d0f8      	beq.n	800c31c <_dtoa_r+0x61c>
 800c32a:	46bb      	mov	fp, r7
 800c32c:	e04a      	b.n	800c3c4 <_dtoa_r+0x6c4>
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <_dtoa_r+0x648>)
 800c330:	f7f4 f962 	bl	80005f8 <__aeabi_dmul>
 800c334:	4680      	mov	r8, r0
 800c336:	4689      	mov	r9, r1
 800c338:	e7bd      	b.n	800c2b6 <_dtoa_r+0x5b6>
 800c33a:	bf00      	nop
 800c33c:	0800dfc0 	.word	0x0800dfc0
 800c340:	0800df98 	.word	0x0800df98
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	40240000 	.word	0x40240000
 800c34c:	401c0000 	.word	0x401c0000
 800c350:	40140000 	.word	0x40140000
 800c354:	3fe00000 	.word	0x3fe00000
 800c358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c35c:	9d00      	ldr	r5, [sp, #0]
 800c35e:	4642      	mov	r2, r8
 800c360:	464b      	mov	r3, r9
 800c362:	4630      	mov	r0, r6
 800c364:	4639      	mov	r1, r7
 800c366:	f7f4 fa71 	bl	800084c <__aeabi_ddiv>
 800c36a:	f7f4 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800c36e:	9001      	str	r0, [sp, #4]
 800c370:	f7f4 f8d8 	bl	8000524 <__aeabi_i2d>
 800c374:	4642      	mov	r2, r8
 800c376:	464b      	mov	r3, r9
 800c378:	f7f4 f93e 	bl	80005f8 <__aeabi_dmul>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f3 ff80 	bl	8000288 <__aeabi_dsub>
 800c388:	9e01      	ldr	r6, [sp, #4]
 800c38a:	9f04      	ldr	r7, [sp, #16]
 800c38c:	3630      	adds	r6, #48	; 0x30
 800c38e:	f805 6b01 	strb.w	r6, [r5], #1
 800c392:	9e00      	ldr	r6, [sp, #0]
 800c394:	1bae      	subs	r6, r5, r6
 800c396:	42b7      	cmp	r7, r6
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	d134      	bne.n	800c408 <_dtoa_r+0x708>
 800c39e:	f7f3 ff75 	bl	800028c <__adddf3>
 800c3a2:	4642      	mov	r2, r8
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	f7f4 fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 800c3ae:	b9c8      	cbnz	r0, 800c3e4 <_dtoa_r+0x6e4>
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	464b      	mov	r3, r9
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	f7f4 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3bc:	b110      	cbz	r0, 800c3c4 <_dtoa_r+0x6c4>
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	07db      	lsls	r3, r3, #31
 800c3c2:	d40f      	bmi.n	800c3e4 <_dtoa_r+0x6e4>
 800c3c4:	4651      	mov	r1, sl
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 fbcc 	bl	800cb64 <_Bfree>
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3d0:	702b      	strb	r3, [r5, #0]
 800c3d2:	f10b 0301 	add.w	r3, fp, #1
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f43f ace2 	beq.w	800bda4 <_dtoa_r+0xa4>
 800c3e0:	601d      	str	r5, [r3, #0]
 800c3e2:	e4df      	b.n	800bda4 <_dtoa_r+0xa4>
 800c3e4:	465f      	mov	r7, fp
 800c3e6:	462b      	mov	r3, r5
 800c3e8:	461d      	mov	r5, r3
 800c3ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3ee:	2a39      	cmp	r2, #57	; 0x39
 800c3f0:	d106      	bne.n	800c400 <_dtoa_r+0x700>
 800c3f2:	9a00      	ldr	r2, [sp, #0]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d1f7      	bne.n	800c3e8 <_dtoa_r+0x6e8>
 800c3f8:	9900      	ldr	r1, [sp, #0]
 800c3fa:	2230      	movs	r2, #48	; 0x30
 800c3fc:	3701      	adds	r7, #1
 800c3fe:	700a      	strb	r2, [r1, #0]
 800c400:	781a      	ldrb	r2, [r3, #0]
 800c402:	3201      	adds	r2, #1
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e790      	b.n	800c32a <_dtoa_r+0x62a>
 800c408:	4ba3      	ldr	r3, [pc, #652]	; (800c698 <_dtoa_r+0x998>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7f4 f8f4 	bl	80005f8 <__aeabi_dmul>
 800c410:	2200      	movs	r2, #0
 800c412:	2300      	movs	r3, #0
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	f7f4 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d09e      	beq.n	800c35e <_dtoa_r+0x65e>
 800c420:	e7d0      	b.n	800c3c4 <_dtoa_r+0x6c4>
 800c422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c424:	2a00      	cmp	r2, #0
 800c426:	f000 80ca 	beq.w	800c5be <_dtoa_r+0x8be>
 800c42a:	9a07      	ldr	r2, [sp, #28]
 800c42c:	2a01      	cmp	r2, #1
 800c42e:	f300 80ad 	bgt.w	800c58c <_dtoa_r+0x88c>
 800c432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c434:	2a00      	cmp	r2, #0
 800c436:	f000 80a5 	beq.w	800c584 <_dtoa_r+0x884>
 800c43a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c43e:	9e08      	ldr	r6, [sp, #32]
 800c440:	9d05      	ldr	r5, [sp, #20]
 800c442:	9a05      	ldr	r2, [sp, #20]
 800c444:	441a      	add	r2, r3
 800c446:	9205      	str	r2, [sp, #20]
 800c448:	9a06      	ldr	r2, [sp, #24]
 800c44a:	2101      	movs	r1, #1
 800c44c:	441a      	add	r2, r3
 800c44e:	4620      	mov	r0, r4
 800c450:	9206      	str	r2, [sp, #24]
 800c452:	f000 fc3d 	bl	800ccd0 <__i2b>
 800c456:	4607      	mov	r7, r0
 800c458:	b165      	cbz	r5, 800c474 <_dtoa_r+0x774>
 800c45a:	9b06      	ldr	r3, [sp, #24]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd09      	ble.n	800c474 <_dtoa_r+0x774>
 800c460:	42ab      	cmp	r3, r5
 800c462:	9a05      	ldr	r2, [sp, #20]
 800c464:	bfa8      	it	ge
 800c466:	462b      	movge	r3, r5
 800c468:	1ad2      	subs	r2, r2, r3
 800c46a:	9205      	str	r2, [sp, #20]
 800c46c:	9a06      	ldr	r2, [sp, #24]
 800c46e:	1aed      	subs	r5, r5, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	9306      	str	r3, [sp, #24]
 800c474:	9b08      	ldr	r3, [sp, #32]
 800c476:	b1f3      	cbz	r3, 800c4b6 <_dtoa_r+0x7b6>
 800c478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 80a3 	beq.w	800c5c6 <_dtoa_r+0x8c6>
 800c480:	2e00      	cmp	r6, #0
 800c482:	dd10      	ble.n	800c4a6 <_dtoa_r+0x7a6>
 800c484:	4639      	mov	r1, r7
 800c486:	4632      	mov	r2, r6
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fce1 	bl	800ce50 <__pow5mult>
 800c48e:	4652      	mov	r2, sl
 800c490:	4601      	mov	r1, r0
 800c492:	4607      	mov	r7, r0
 800c494:	4620      	mov	r0, r4
 800c496:	f000 fc31 	bl	800ccfc <__multiply>
 800c49a:	4651      	mov	r1, sl
 800c49c:	4680      	mov	r8, r0
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f000 fb60 	bl	800cb64 <_Bfree>
 800c4a4:	46c2      	mov	sl, r8
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	1b9a      	subs	r2, r3, r6
 800c4aa:	d004      	beq.n	800c4b6 <_dtoa_r+0x7b6>
 800c4ac:	4651      	mov	r1, sl
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 fcce 	bl	800ce50 <__pow5mult>
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fc09 	bl	800ccd0 <__i2b>
 800c4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	f340 8081 	ble.w	800c5ca <_dtoa_r+0x8ca>
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fcbf 	bl	800ce50 <__pow5mult>
 800c4d2:	9b07      	ldr	r3, [sp, #28]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	dd7a      	ble.n	800c5d0 <_dtoa_r+0x8d0>
 800c4da:	f04f 0800 	mov.w	r8, #0
 800c4de:	6933      	ldr	r3, [r6, #16]
 800c4e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4e4:	6918      	ldr	r0, [r3, #16]
 800c4e6:	f000 fba5 	bl	800cc34 <__hi0bits>
 800c4ea:	f1c0 0020 	rsb	r0, r0, #32
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	4418      	add	r0, r3
 800c4f2:	f010 001f 	ands.w	r0, r0, #31
 800c4f6:	f000 8094 	beq.w	800c622 <_dtoa_r+0x922>
 800c4fa:	f1c0 0320 	rsb	r3, r0, #32
 800c4fe:	2b04      	cmp	r3, #4
 800c500:	f340 8085 	ble.w	800c60e <_dtoa_r+0x90e>
 800c504:	9b05      	ldr	r3, [sp, #20]
 800c506:	f1c0 001c 	rsb	r0, r0, #28
 800c50a:	4403      	add	r3, r0
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	9b06      	ldr	r3, [sp, #24]
 800c510:	4403      	add	r3, r0
 800c512:	4405      	add	r5, r0
 800c514:	9306      	str	r3, [sp, #24]
 800c516:	9b05      	ldr	r3, [sp, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dd05      	ble.n	800c528 <_dtoa_r+0x828>
 800c51c:	4651      	mov	r1, sl
 800c51e:	461a      	mov	r2, r3
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fcef 	bl	800cf04 <__lshift>
 800c526:	4682      	mov	sl, r0
 800c528:	9b06      	ldr	r3, [sp, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	dd05      	ble.n	800c53a <_dtoa_r+0x83a>
 800c52e:	4631      	mov	r1, r6
 800c530:	461a      	mov	r2, r3
 800c532:	4620      	mov	r0, r4
 800c534:	f000 fce6 	bl	800cf04 <__lshift>
 800c538:	4606      	mov	r6, r0
 800c53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d072      	beq.n	800c626 <_dtoa_r+0x926>
 800c540:	4631      	mov	r1, r6
 800c542:	4650      	mov	r0, sl
 800c544:	f000 fd4a 	bl	800cfdc <__mcmp>
 800c548:	2800      	cmp	r0, #0
 800c54a:	da6c      	bge.n	800c626 <_dtoa_r+0x926>
 800c54c:	2300      	movs	r3, #0
 800c54e:	4651      	mov	r1, sl
 800c550:	220a      	movs	r2, #10
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fb28 	bl	800cba8 <__multadd>
 800c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c55e:	4682      	mov	sl, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 81b0 	beq.w	800c8c6 <_dtoa_r+0xbc6>
 800c566:	2300      	movs	r3, #0
 800c568:	4639      	mov	r1, r7
 800c56a:	220a      	movs	r2, #10
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 fb1b 	bl	800cba8 <__multadd>
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	4607      	mov	r7, r0
 800c578:	f300 8096 	bgt.w	800c6a8 <_dtoa_r+0x9a8>
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	2b02      	cmp	r3, #2
 800c580:	dc59      	bgt.n	800c636 <_dtoa_r+0x936>
 800c582:	e091      	b.n	800c6a8 <_dtoa_r+0x9a8>
 800c584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c58a:	e758      	b.n	800c43e <_dtoa_r+0x73e>
 800c58c:	9b04      	ldr	r3, [sp, #16]
 800c58e:	1e5e      	subs	r6, r3, #1
 800c590:	9b08      	ldr	r3, [sp, #32]
 800c592:	42b3      	cmp	r3, r6
 800c594:	bfbf      	itttt	lt
 800c596:	9b08      	ldrlt	r3, [sp, #32]
 800c598:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c59a:	9608      	strlt	r6, [sp, #32]
 800c59c:	1af3      	sublt	r3, r6, r3
 800c59e:	bfb4      	ite	lt
 800c5a0:	18d2      	addlt	r2, r2, r3
 800c5a2:	1b9e      	subge	r6, r3, r6
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	bfbc      	itt	lt
 800c5a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c5aa:	2600      	movlt	r6, #0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	bfb7      	itett	lt
 800c5b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c5b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c5b8:	1a9d      	sublt	r5, r3, r2
 800c5ba:	2300      	movlt	r3, #0
 800c5bc:	e741      	b.n	800c442 <_dtoa_r+0x742>
 800c5be:	9e08      	ldr	r6, [sp, #32]
 800c5c0:	9d05      	ldr	r5, [sp, #20]
 800c5c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5c4:	e748      	b.n	800c458 <_dtoa_r+0x758>
 800c5c6:	9a08      	ldr	r2, [sp, #32]
 800c5c8:	e770      	b.n	800c4ac <_dtoa_r+0x7ac>
 800c5ca:	9b07      	ldr	r3, [sp, #28]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	dc19      	bgt.n	800c604 <_dtoa_r+0x904>
 800c5d0:	9b02      	ldr	r3, [sp, #8]
 800c5d2:	b9bb      	cbnz	r3, 800c604 <_dtoa_r+0x904>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5da:	b99b      	cbnz	r3, 800c604 <_dtoa_r+0x904>
 800c5dc:	9b03      	ldr	r3, [sp, #12]
 800c5de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5e2:	0d1b      	lsrs	r3, r3, #20
 800c5e4:	051b      	lsls	r3, r3, #20
 800c5e6:	b183      	cbz	r3, 800c60a <_dtoa_r+0x90a>
 800c5e8:	9b05      	ldr	r3, [sp, #20]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	9b06      	ldr	r3, [sp, #24]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	9306      	str	r3, [sp, #24]
 800c5f4:	f04f 0801 	mov.w	r8, #1
 800c5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f47f af6f 	bne.w	800c4de <_dtoa_r+0x7de>
 800c600:	2001      	movs	r0, #1
 800c602:	e774      	b.n	800c4ee <_dtoa_r+0x7ee>
 800c604:	f04f 0800 	mov.w	r8, #0
 800c608:	e7f6      	b.n	800c5f8 <_dtoa_r+0x8f8>
 800c60a:	4698      	mov	r8, r3
 800c60c:	e7f4      	b.n	800c5f8 <_dtoa_r+0x8f8>
 800c60e:	d082      	beq.n	800c516 <_dtoa_r+0x816>
 800c610:	9a05      	ldr	r2, [sp, #20]
 800c612:	331c      	adds	r3, #28
 800c614:	441a      	add	r2, r3
 800c616:	9205      	str	r2, [sp, #20]
 800c618:	9a06      	ldr	r2, [sp, #24]
 800c61a:	441a      	add	r2, r3
 800c61c:	441d      	add	r5, r3
 800c61e:	9206      	str	r2, [sp, #24]
 800c620:	e779      	b.n	800c516 <_dtoa_r+0x816>
 800c622:	4603      	mov	r3, r0
 800c624:	e7f4      	b.n	800c610 <_dtoa_r+0x910>
 800c626:	9b04      	ldr	r3, [sp, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	dc37      	bgt.n	800c69c <_dtoa_r+0x99c>
 800c62c:	9b07      	ldr	r3, [sp, #28]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	dd34      	ble.n	800c69c <_dtoa_r+0x99c>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	b963      	cbnz	r3, 800c654 <_dtoa_r+0x954>
 800c63a:	4631      	mov	r1, r6
 800c63c:	2205      	movs	r2, #5
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 fab2 	bl	800cba8 <__multadd>
 800c644:	4601      	mov	r1, r0
 800c646:	4606      	mov	r6, r0
 800c648:	4650      	mov	r0, sl
 800c64a:	f000 fcc7 	bl	800cfdc <__mcmp>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f73f adbb 	bgt.w	800c1ca <_dtoa_r+0x4ca>
 800c654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c656:	9d00      	ldr	r5, [sp, #0]
 800c658:	ea6f 0b03 	mvn.w	fp, r3
 800c65c:	f04f 0800 	mov.w	r8, #0
 800c660:	4631      	mov	r1, r6
 800c662:	4620      	mov	r0, r4
 800c664:	f000 fa7e 	bl	800cb64 <_Bfree>
 800c668:	2f00      	cmp	r7, #0
 800c66a:	f43f aeab 	beq.w	800c3c4 <_dtoa_r+0x6c4>
 800c66e:	f1b8 0f00 	cmp.w	r8, #0
 800c672:	d005      	beq.n	800c680 <_dtoa_r+0x980>
 800c674:	45b8      	cmp	r8, r7
 800c676:	d003      	beq.n	800c680 <_dtoa_r+0x980>
 800c678:	4641      	mov	r1, r8
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fa72 	bl	800cb64 <_Bfree>
 800c680:	4639      	mov	r1, r7
 800c682:	4620      	mov	r0, r4
 800c684:	f000 fa6e 	bl	800cb64 <_Bfree>
 800c688:	e69c      	b.n	800c3c4 <_dtoa_r+0x6c4>
 800c68a:	2600      	movs	r6, #0
 800c68c:	4637      	mov	r7, r6
 800c68e:	e7e1      	b.n	800c654 <_dtoa_r+0x954>
 800c690:	46bb      	mov	fp, r7
 800c692:	4637      	mov	r7, r6
 800c694:	e599      	b.n	800c1ca <_dtoa_r+0x4ca>
 800c696:	bf00      	nop
 800c698:	40240000 	.word	0x40240000
 800c69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 80c8 	beq.w	800c834 <_dtoa_r+0xb34>
 800c6a4:	9b04      	ldr	r3, [sp, #16]
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	2d00      	cmp	r5, #0
 800c6aa:	dd05      	ble.n	800c6b8 <_dtoa_r+0x9b8>
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 fc27 	bl	800cf04 <__lshift>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	f1b8 0f00 	cmp.w	r8, #0
 800c6bc:	d05b      	beq.n	800c776 <_dtoa_r+0xa76>
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 fa0f 	bl	800cae4 <_Balloc>
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	b928      	cbnz	r0, 800c6d6 <_dtoa_r+0x9d6>
 800c6ca:	4b83      	ldr	r3, [pc, #524]	; (800c8d8 <_dtoa_r+0xbd8>)
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c6d2:	f7ff bb2e 	b.w	800bd32 <_dtoa_r+0x32>
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	3202      	adds	r2, #2
 800c6da:	0092      	lsls	r2, r2, #2
 800c6dc:	f107 010c 	add.w	r1, r7, #12
 800c6e0:	300c      	adds	r0, #12
 800c6e2:	f7ff fa76 	bl	800bbd2 <memcpy>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 fc0a 	bl	800cf04 <__lshift>
 800c6f0:	9b00      	ldr	r3, [sp, #0]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	9308      	str	r3, [sp, #32]
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	46b8      	mov	r8, r7
 800c706:	9306      	str	r3, [sp, #24]
 800c708:	4607      	mov	r7, r0
 800c70a:	9b04      	ldr	r3, [sp, #16]
 800c70c:	4631      	mov	r1, r6
 800c70e:	3b01      	subs	r3, #1
 800c710:	4650      	mov	r0, sl
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f7ff fa6b 	bl	800bbee <quorem>
 800c718:	4641      	mov	r1, r8
 800c71a:	9002      	str	r0, [sp, #8]
 800c71c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c720:	4650      	mov	r0, sl
 800c722:	f000 fc5b 	bl	800cfdc <__mcmp>
 800c726:	463a      	mov	r2, r7
 800c728:	9005      	str	r0, [sp, #20]
 800c72a:	4631      	mov	r1, r6
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 fc71 	bl	800d014 <__mdiff>
 800c732:	68c2      	ldr	r2, [r0, #12]
 800c734:	4605      	mov	r5, r0
 800c736:	bb02      	cbnz	r2, 800c77a <_dtoa_r+0xa7a>
 800c738:	4601      	mov	r1, r0
 800c73a:	4650      	mov	r0, sl
 800c73c:	f000 fc4e 	bl	800cfdc <__mcmp>
 800c740:	4602      	mov	r2, r0
 800c742:	4629      	mov	r1, r5
 800c744:	4620      	mov	r0, r4
 800c746:	9209      	str	r2, [sp, #36]	; 0x24
 800c748:	f000 fa0c 	bl	800cb64 <_Bfree>
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c750:	9d04      	ldr	r5, [sp, #16]
 800c752:	ea43 0102 	orr.w	r1, r3, r2
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	4319      	orrs	r1, r3
 800c75a:	d110      	bne.n	800c77e <_dtoa_r+0xa7e>
 800c75c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c760:	d029      	beq.n	800c7b6 <_dtoa_r+0xab6>
 800c762:	9b05      	ldr	r3, [sp, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	dd02      	ble.n	800c76e <_dtoa_r+0xa6e>
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	f883 9000 	strb.w	r9, [r3]
 800c774:	e774      	b.n	800c660 <_dtoa_r+0x960>
 800c776:	4638      	mov	r0, r7
 800c778:	e7ba      	b.n	800c6f0 <_dtoa_r+0x9f0>
 800c77a:	2201      	movs	r2, #1
 800c77c:	e7e1      	b.n	800c742 <_dtoa_r+0xa42>
 800c77e:	9b05      	ldr	r3, [sp, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	db04      	blt.n	800c78e <_dtoa_r+0xa8e>
 800c784:	9907      	ldr	r1, [sp, #28]
 800c786:	430b      	orrs	r3, r1
 800c788:	9906      	ldr	r1, [sp, #24]
 800c78a:	430b      	orrs	r3, r1
 800c78c:	d120      	bne.n	800c7d0 <_dtoa_r+0xad0>
 800c78e:	2a00      	cmp	r2, #0
 800c790:	dded      	ble.n	800c76e <_dtoa_r+0xa6e>
 800c792:	4651      	mov	r1, sl
 800c794:	2201      	movs	r2, #1
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fbb4 	bl	800cf04 <__lshift>
 800c79c:	4631      	mov	r1, r6
 800c79e:	4682      	mov	sl, r0
 800c7a0:	f000 fc1c 	bl	800cfdc <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	dc03      	bgt.n	800c7b0 <_dtoa_r+0xab0>
 800c7a8:	d1e1      	bne.n	800c76e <_dtoa_r+0xa6e>
 800c7aa:	f019 0f01 	tst.w	r9, #1
 800c7ae:	d0de      	beq.n	800c76e <_dtoa_r+0xa6e>
 800c7b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7b4:	d1d8      	bne.n	800c768 <_dtoa_r+0xa68>
 800c7b6:	9a01      	ldr	r2, [sp, #4]
 800c7b8:	2339      	movs	r3, #57	; 0x39
 800c7ba:	7013      	strb	r3, [r2, #0]
 800c7bc:	462b      	mov	r3, r5
 800c7be:	461d      	mov	r5, r3
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7c6:	2a39      	cmp	r2, #57	; 0x39
 800c7c8:	d06c      	beq.n	800c8a4 <_dtoa_r+0xba4>
 800c7ca:	3201      	adds	r2, #1
 800c7cc:	701a      	strb	r2, [r3, #0]
 800c7ce:	e747      	b.n	800c660 <_dtoa_r+0x960>
 800c7d0:	2a00      	cmp	r2, #0
 800c7d2:	dd07      	ble.n	800c7e4 <_dtoa_r+0xae4>
 800c7d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7d8:	d0ed      	beq.n	800c7b6 <_dtoa_r+0xab6>
 800c7da:	9a01      	ldr	r2, [sp, #4]
 800c7dc:	f109 0301 	add.w	r3, r9, #1
 800c7e0:	7013      	strb	r3, [r2, #0]
 800c7e2:	e73d      	b.n	800c660 <_dtoa_r+0x960>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	9a08      	ldr	r2, [sp, #32]
 800c7e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d043      	beq.n	800c878 <_dtoa_r+0xb78>
 800c7f0:	4651      	mov	r1, sl
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	220a      	movs	r2, #10
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f000 f9d6 	bl	800cba8 <__multadd>
 800c7fc:	45b8      	cmp	r8, r7
 800c7fe:	4682      	mov	sl, r0
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	f04f 020a 	mov.w	r2, #10
 800c808:	4641      	mov	r1, r8
 800c80a:	4620      	mov	r0, r4
 800c80c:	d107      	bne.n	800c81e <_dtoa_r+0xb1e>
 800c80e:	f000 f9cb 	bl	800cba8 <__multadd>
 800c812:	4680      	mov	r8, r0
 800c814:	4607      	mov	r7, r0
 800c816:	9b04      	ldr	r3, [sp, #16]
 800c818:	3301      	adds	r3, #1
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	e775      	b.n	800c70a <_dtoa_r+0xa0a>
 800c81e:	f000 f9c3 	bl	800cba8 <__multadd>
 800c822:	4639      	mov	r1, r7
 800c824:	4680      	mov	r8, r0
 800c826:	2300      	movs	r3, #0
 800c828:	220a      	movs	r2, #10
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 f9bc 	bl	800cba8 <__multadd>
 800c830:	4607      	mov	r7, r0
 800c832:	e7f0      	b.n	800c816 <_dtoa_r+0xb16>
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	9d00      	ldr	r5, [sp, #0]
 800c83a:	4631      	mov	r1, r6
 800c83c:	4650      	mov	r0, sl
 800c83e:	f7ff f9d6 	bl	800bbee <quorem>
 800c842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	f805 9b01 	strb.w	r9, [r5], #1
 800c84c:	1aea      	subs	r2, r5, r3
 800c84e:	9b01      	ldr	r3, [sp, #4]
 800c850:	4293      	cmp	r3, r2
 800c852:	dd07      	ble.n	800c864 <_dtoa_r+0xb64>
 800c854:	4651      	mov	r1, sl
 800c856:	2300      	movs	r3, #0
 800c858:	220a      	movs	r2, #10
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f9a4 	bl	800cba8 <__multadd>
 800c860:	4682      	mov	sl, r0
 800c862:	e7ea      	b.n	800c83a <_dtoa_r+0xb3a>
 800c864:	9b01      	ldr	r3, [sp, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	bfc8      	it	gt
 800c86a:	461d      	movgt	r5, r3
 800c86c:	9b00      	ldr	r3, [sp, #0]
 800c86e:	bfd8      	it	le
 800c870:	2501      	movle	r5, #1
 800c872:	441d      	add	r5, r3
 800c874:	f04f 0800 	mov.w	r8, #0
 800c878:	4651      	mov	r1, sl
 800c87a:	2201      	movs	r2, #1
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fb41 	bl	800cf04 <__lshift>
 800c882:	4631      	mov	r1, r6
 800c884:	4682      	mov	sl, r0
 800c886:	f000 fba9 	bl	800cfdc <__mcmp>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	dc96      	bgt.n	800c7bc <_dtoa_r+0xabc>
 800c88e:	d102      	bne.n	800c896 <_dtoa_r+0xb96>
 800c890:	f019 0f01 	tst.w	r9, #1
 800c894:	d192      	bne.n	800c7bc <_dtoa_r+0xabc>
 800c896:	462b      	mov	r3, r5
 800c898:	461d      	mov	r5, r3
 800c89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c89e:	2a30      	cmp	r2, #48	; 0x30
 800c8a0:	d0fa      	beq.n	800c898 <_dtoa_r+0xb98>
 800c8a2:	e6dd      	b.n	800c660 <_dtoa_r+0x960>
 800c8a4:	9a00      	ldr	r2, [sp, #0]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d189      	bne.n	800c7be <_dtoa_r+0xabe>
 800c8aa:	f10b 0b01 	add.w	fp, fp, #1
 800c8ae:	2331      	movs	r3, #49	; 0x31
 800c8b0:	e796      	b.n	800c7e0 <_dtoa_r+0xae0>
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <_dtoa_r+0xbdc>)
 800c8b4:	f7ff ba99 	b.w	800bdea <_dtoa_r+0xea>
 800c8b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f47f aa6d 	bne.w	800bd9a <_dtoa_r+0x9a>
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <_dtoa_r+0xbe0>)
 800c8c2:	f7ff ba92 	b.w	800bdea <_dtoa_r+0xea>
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	dcb5      	bgt.n	800c838 <_dtoa_r+0xb38>
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	f73f aeb1 	bgt.w	800c636 <_dtoa_r+0x936>
 800c8d4:	e7b0      	b.n	800c838 <_dtoa_r+0xb38>
 800c8d6:	bf00      	nop
 800c8d8:	0800df28 	.word	0x0800df28
 800c8dc:	0800de88 	.word	0x0800de88
 800c8e0:	0800deac 	.word	0x0800deac

0800c8e4 <_free_r>:
 800c8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d044      	beq.n	800c974 <_free_r+0x90>
 800c8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ee:	9001      	str	r0, [sp, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c8f6:	bfb8      	it	lt
 800c8f8:	18e4      	addlt	r4, r4, r3
 800c8fa:	f000 f8e7 	bl	800cacc <__malloc_lock>
 800c8fe:	4a1e      	ldr	r2, [pc, #120]	; (800c978 <_free_r+0x94>)
 800c900:	9801      	ldr	r0, [sp, #4]
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	b933      	cbnz	r3, 800c914 <_free_r+0x30>
 800c906:	6063      	str	r3, [r4, #4]
 800c908:	6014      	str	r4, [r2, #0]
 800c90a:	b003      	add	sp, #12
 800c90c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c910:	f000 b8e2 	b.w	800cad8 <__malloc_unlock>
 800c914:	42a3      	cmp	r3, r4
 800c916:	d908      	bls.n	800c92a <_free_r+0x46>
 800c918:	6825      	ldr	r5, [r4, #0]
 800c91a:	1961      	adds	r1, r4, r5
 800c91c:	428b      	cmp	r3, r1
 800c91e:	bf01      	itttt	eq
 800c920:	6819      	ldreq	r1, [r3, #0]
 800c922:	685b      	ldreq	r3, [r3, #4]
 800c924:	1949      	addeq	r1, r1, r5
 800c926:	6021      	streq	r1, [r4, #0]
 800c928:	e7ed      	b.n	800c906 <_free_r+0x22>
 800c92a:	461a      	mov	r2, r3
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	b10b      	cbz	r3, 800c934 <_free_r+0x50>
 800c930:	42a3      	cmp	r3, r4
 800c932:	d9fa      	bls.n	800c92a <_free_r+0x46>
 800c934:	6811      	ldr	r1, [r2, #0]
 800c936:	1855      	adds	r5, r2, r1
 800c938:	42a5      	cmp	r5, r4
 800c93a:	d10b      	bne.n	800c954 <_free_r+0x70>
 800c93c:	6824      	ldr	r4, [r4, #0]
 800c93e:	4421      	add	r1, r4
 800c940:	1854      	adds	r4, r2, r1
 800c942:	42a3      	cmp	r3, r4
 800c944:	6011      	str	r1, [r2, #0]
 800c946:	d1e0      	bne.n	800c90a <_free_r+0x26>
 800c948:	681c      	ldr	r4, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	6053      	str	r3, [r2, #4]
 800c94e:	440c      	add	r4, r1
 800c950:	6014      	str	r4, [r2, #0]
 800c952:	e7da      	b.n	800c90a <_free_r+0x26>
 800c954:	d902      	bls.n	800c95c <_free_r+0x78>
 800c956:	230c      	movs	r3, #12
 800c958:	6003      	str	r3, [r0, #0]
 800c95a:	e7d6      	b.n	800c90a <_free_r+0x26>
 800c95c:	6825      	ldr	r5, [r4, #0]
 800c95e:	1961      	adds	r1, r4, r5
 800c960:	428b      	cmp	r3, r1
 800c962:	bf04      	itt	eq
 800c964:	6819      	ldreq	r1, [r3, #0]
 800c966:	685b      	ldreq	r3, [r3, #4]
 800c968:	6063      	str	r3, [r4, #4]
 800c96a:	bf04      	itt	eq
 800c96c:	1949      	addeq	r1, r1, r5
 800c96e:	6021      	streq	r1, [r4, #0]
 800c970:	6054      	str	r4, [r2, #4]
 800c972:	e7ca      	b.n	800c90a <_free_r+0x26>
 800c974:	b003      	add	sp, #12
 800c976:	bd30      	pop	{r4, r5, pc}
 800c978:	2000611c 	.word	0x2000611c

0800c97c <malloc>:
 800c97c:	4b02      	ldr	r3, [pc, #8]	; (800c988 <malloc+0xc>)
 800c97e:	4601      	mov	r1, r0
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	f000 b823 	b.w	800c9cc <_malloc_r>
 800c986:	bf00      	nop
 800c988:	20000158 	.word	0x20000158

0800c98c <sbrk_aligned>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	4e0e      	ldr	r6, [pc, #56]	; (800c9c8 <sbrk_aligned+0x3c>)
 800c990:	460c      	mov	r4, r1
 800c992:	6831      	ldr	r1, [r6, #0]
 800c994:	4605      	mov	r5, r0
 800c996:	b911      	cbnz	r1, 800c99e <sbrk_aligned+0x12>
 800c998:	f000 fe40 	bl	800d61c <_sbrk_r>
 800c99c:	6030      	str	r0, [r6, #0]
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f000 fe3b 	bl	800d61c <_sbrk_r>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d00a      	beq.n	800c9c0 <sbrk_aligned+0x34>
 800c9aa:	1cc4      	adds	r4, r0, #3
 800c9ac:	f024 0403 	bic.w	r4, r4, #3
 800c9b0:	42a0      	cmp	r0, r4
 800c9b2:	d007      	beq.n	800c9c4 <sbrk_aligned+0x38>
 800c9b4:	1a21      	subs	r1, r4, r0
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f000 fe30 	bl	800d61c <_sbrk_r>
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d101      	bne.n	800c9c4 <sbrk_aligned+0x38>
 800c9c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	20006120 	.word	0x20006120

0800c9cc <_malloc_r>:
 800c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d0:	1ccd      	adds	r5, r1, #3
 800c9d2:	f025 0503 	bic.w	r5, r5, #3
 800c9d6:	3508      	adds	r5, #8
 800c9d8:	2d0c      	cmp	r5, #12
 800c9da:	bf38      	it	cc
 800c9dc:	250c      	movcc	r5, #12
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	4607      	mov	r7, r0
 800c9e2:	db01      	blt.n	800c9e8 <_malloc_r+0x1c>
 800c9e4:	42a9      	cmp	r1, r5
 800c9e6:	d905      	bls.n	800c9f4 <_malloc_r+0x28>
 800c9e8:	230c      	movs	r3, #12
 800c9ea:	603b      	str	r3, [r7, #0]
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cac8 <_malloc_r+0xfc>
 800c9f8:	f000 f868 	bl	800cacc <__malloc_lock>
 800c9fc:	f8d8 3000 	ldr.w	r3, [r8]
 800ca00:	461c      	mov	r4, r3
 800ca02:	bb5c      	cbnz	r4, 800ca5c <_malloc_r+0x90>
 800ca04:	4629      	mov	r1, r5
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7ff ffc0 	bl	800c98c <sbrk_aligned>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	4604      	mov	r4, r0
 800ca10:	d155      	bne.n	800cabe <_malloc_r+0xf2>
 800ca12:	f8d8 4000 	ldr.w	r4, [r8]
 800ca16:	4626      	mov	r6, r4
 800ca18:	2e00      	cmp	r6, #0
 800ca1a:	d145      	bne.n	800caa8 <_malloc_r+0xdc>
 800ca1c:	2c00      	cmp	r4, #0
 800ca1e:	d048      	beq.n	800cab2 <_malloc_r+0xe6>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	4631      	mov	r1, r6
 800ca24:	4638      	mov	r0, r7
 800ca26:	eb04 0903 	add.w	r9, r4, r3
 800ca2a:	f000 fdf7 	bl	800d61c <_sbrk_r>
 800ca2e:	4581      	cmp	r9, r0
 800ca30:	d13f      	bne.n	800cab2 <_malloc_r+0xe6>
 800ca32:	6821      	ldr	r1, [r4, #0]
 800ca34:	1a6d      	subs	r5, r5, r1
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ffa7 	bl	800c98c <sbrk_aligned>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d037      	beq.n	800cab2 <_malloc_r+0xe6>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	442b      	add	r3, r5
 800ca46:	6023      	str	r3, [r4, #0]
 800ca48:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d038      	beq.n	800cac2 <_malloc_r+0xf6>
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	42a2      	cmp	r2, r4
 800ca54:	d12b      	bne.n	800caae <_malloc_r+0xe2>
 800ca56:	2200      	movs	r2, #0
 800ca58:	605a      	str	r2, [r3, #4]
 800ca5a:	e00f      	b.n	800ca7c <_malloc_r+0xb0>
 800ca5c:	6822      	ldr	r2, [r4, #0]
 800ca5e:	1b52      	subs	r2, r2, r5
 800ca60:	d41f      	bmi.n	800caa2 <_malloc_r+0xd6>
 800ca62:	2a0b      	cmp	r2, #11
 800ca64:	d917      	bls.n	800ca96 <_malloc_r+0xca>
 800ca66:	1961      	adds	r1, r4, r5
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	6025      	str	r5, [r4, #0]
 800ca6c:	bf18      	it	ne
 800ca6e:	6059      	strne	r1, [r3, #4]
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	bf08      	it	eq
 800ca74:	f8c8 1000 	streq.w	r1, [r8]
 800ca78:	5162      	str	r2, [r4, r5]
 800ca7a:	604b      	str	r3, [r1, #4]
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f104 060b 	add.w	r6, r4, #11
 800ca82:	f000 f829 	bl	800cad8 <__malloc_unlock>
 800ca86:	f026 0607 	bic.w	r6, r6, #7
 800ca8a:	1d23      	adds	r3, r4, #4
 800ca8c:	1af2      	subs	r2, r6, r3
 800ca8e:	d0ae      	beq.n	800c9ee <_malloc_r+0x22>
 800ca90:	1b9b      	subs	r3, r3, r6
 800ca92:	50a3      	str	r3, [r4, r2]
 800ca94:	e7ab      	b.n	800c9ee <_malloc_r+0x22>
 800ca96:	42a3      	cmp	r3, r4
 800ca98:	6862      	ldr	r2, [r4, #4]
 800ca9a:	d1dd      	bne.n	800ca58 <_malloc_r+0x8c>
 800ca9c:	f8c8 2000 	str.w	r2, [r8]
 800caa0:	e7ec      	b.n	800ca7c <_malloc_r+0xb0>
 800caa2:	4623      	mov	r3, r4
 800caa4:	6864      	ldr	r4, [r4, #4]
 800caa6:	e7ac      	b.n	800ca02 <_malloc_r+0x36>
 800caa8:	4634      	mov	r4, r6
 800caaa:	6876      	ldr	r6, [r6, #4]
 800caac:	e7b4      	b.n	800ca18 <_malloc_r+0x4c>
 800caae:	4613      	mov	r3, r2
 800cab0:	e7cc      	b.n	800ca4c <_malloc_r+0x80>
 800cab2:	230c      	movs	r3, #12
 800cab4:	603b      	str	r3, [r7, #0]
 800cab6:	4638      	mov	r0, r7
 800cab8:	f000 f80e 	bl	800cad8 <__malloc_unlock>
 800cabc:	e797      	b.n	800c9ee <_malloc_r+0x22>
 800cabe:	6025      	str	r5, [r4, #0]
 800cac0:	e7dc      	b.n	800ca7c <_malloc_r+0xb0>
 800cac2:	605b      	str	r3, [r3, #4]
 800cac4:	deff      	udf	#255	; 0xff
 800cac6:	bf00      	nop
 800cac8:	2000611c 	.word	0x2000611c

0800cacc <__malloc_lock>:
 800cacc:	4801      	ldr	r0, [pc, #4]	; (800cad4 <__malloc_lock+0x8>)
 800cace:	f7ff b87e 	b.w	800bbce <__retarget_lock_acquire_recursive>
 800cad2:	bf00      	nop
 800cad4:	20006118 	.word	0x20006118

0800cad8 <__malloc_unlock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_unlock+0x8>)
 800cada:	f7ff b879 	b.w	800bbd0 <__retarget_lock_release_recursive>
 800cade:	bf00      	nop
 800cae0:	20006118 	.word	0x20006118

0800cae4 <_Balloc>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	69c6      	ldr	r6, [r0, #28]
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	b976      	cbnz	r6, 800cb0c <_Balloc+0x28>
 800caee:	2010      	movs	r0, #16
 800caf0:	f7ff ff44 	bl	800c97c <malloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	61e0      	str	r0, [r4, #28]
 800caf8:	b920      	cbnz	r0, 800cb04 <_Balloc+0x20>
 800cafa:	4b18      	ldr	r3, [pc, #96]	; (800cb5c <_Balloc+0x78>)
 800cafc:	4818      	ldr	r0, [pc, #96]	; (800cb60 <_Balloc+0x7c>)
 800cafe:	216b      	movs	r1, #107	; 0x6b
 800cb00:	f000 fd9c 	bl	800d63c <__assert_func>
 800cb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb08:	6006      	str	r6, [r0, #0]
 800cb0a:	60c6      	str	r6, [r0, #12]
 800cb0c:	69e6      	ldr	r6, [r4, #28]
 800cb0e:	68f3      	ldr	r3, [r6, #12]
 800cb10:	b183      	cbz	r3, 800cb34 <_Balloc+0x50>
 800cb12:	69e3      	ldr	r3, [r4, #28]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb1a:	b9b8      	cbnz	r0, 800cb4c <_Balloc+0x68>
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb22:	1d72      	adds	r2, r6, #5
 800cb24:	0092      	lsls	r2, r2, #2
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fda6 	bl	800d678 <_calloc_r>
 800cb2c:	b160      	cbz	r0, 800cb48 <_Balloc+0x64>
 800cb2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb32:	e00e      	b.n	800cb52 <_Balloc+0x6e>
 800cb34:	2221      	movs	r2, #33	; 0x21
 800cb36:	2104      	movs	r1, #4
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fd9d 	bl	800d678 <_calloc_r>
 800cb3e:	69e3      	ldr	r3, [r4, #28]
 800cb40:	60f0      	str	r0, [r6, #12]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e4      	bne.n	800cb12 <_Balloc+0x2e>
 800cb48:	2000      	movs	r0, #0
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	6802      	ldr	r2, [r0, #0]
 800cb4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb52:	2300      	movs	r3, #0
 800cb54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb58:	e7f7      	b.n	800cb4a <_Balloc+0x66>
 800cb5a:	bf00      	nop
 800cb5c:	0800deb9 	.word	0x0800deb9
 800cb60:	0800df39 	.word	0x0800df39

0800cb64 <_Bfree>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	69c6      	ldr	r6, [r0, #28]
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b976      	cbnz	r6, 800cb8c <_Bfree+0x28>
 800cb6e:	2010      	movs	r0, #16
 800cb70:	f7ff ff04 	bl	800c97c <malloc>
 800cb74:	4602      	mov	r2, r0
 800cb76:	61e8      	str	r0, [r5, #28]
 800cb78:	b920      	cbnz	r0, 800cb84 <_Bfree+0x20>
 800cb7a:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <_Bfree+0x3c>)
 800cb7c:	4809      	ldr	r0, [pc, #36]	; (800cba4 <_Bfree+0x40>)
 800cb7e:	218f      	movs	r1, #143	; 0x8f
 800cb80:	f000 fd5c 	bl	800d63c <__assert_func>
 800cb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb88:	6006      	str	r6, [r0, #0]
 800cb8a:	60c6      	str	r6, [r0, #12]
 800cb8c:	b13c      	cbz	r4, 800cb9e <_Bfree+0x3a>
 800cb8e:	69eb      	ldr	r3, [r5, #28]
 800cb90:	6862      	ldr	r2, [r4, #4]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb98:	6021      	str	r1, [r4, #0]
 800cb9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	0800deb9 	.word	0x0800deb9
 800cba4:	0800df39 	.word	0x0800df39

0800cba8 <__multadd>:
 800cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbac:	690d      	ldr	r5, [r1, #16]
 800cbae:	4607      	mov	r7, r0
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	461e      	mov	r6, r3
 800cbb4:	f101 0c14 	add.w	ip, r1, #20
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f8dc 3000 	ldr.w	r3, [ip]
 800cbbe:	b299      	uxth	r1, r3
 800cbc0:	fb02 6101 	mla	r1, r2, r1, r6
 800cbc4:	0c1e      	lsrs	r6, r3, #16
 800cbc6:	0c0b      	lsrs	r3, r1, #16
 800cbc8:	fb02 3306 	mla	r3, r2, r6, r3
 800cbcc:	b289      	uxth	r1, r1
 800cbce:	3001      	adds	r0, #1
 800cbd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbd4:	4285      	cmp	r5, r0
 800cbd6:	f84c 1b04 	str.w	r1, [ip], #4
 800cbda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbde:	dcec      	bgt.n	800cbba <__multadd+0x12>
 800cbe0:	b30e      	cbz	r6, 800cc26 <__multadd+0x7e>
 800cbe2:	68a3      	ldr	r3, [r4, #8]
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	dc19      	bgt.n	800cc1c <__multadd+0x74>
 800cbe8:	6861      	ldr	r1, [r4, #4]
 800cbea:	4638      	mov	r0, r7
 800cbec:	3101      	adds	r1, #1
 800cbee:	f7ff ff79 	bl	800cae4 <_Balloc>
 800cbf2:	4680      	mov	r8, r0
 800cbf4:	b928      	cbnz	r0, 800cc02 <__multadd+0x5a>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	4b0c      	ldr	r3, [pc, #48]	; (800cc2c <__multadd+0x84>)
 800cbfa:	480d      	ldr	r0, [pc, #52]	; (800cc30 <__multadd+0x88>)
 800cbfc:	21ba      	movs	r1, #186	; 0xba
 800cbfe:	f000 fd1d 	bl	800d63c <__assert_func>
 800cc02:	6922      	ldr	r2, [r4, #16]
 800cc04:	3202      	adds	r2, #2
 800cc06:	f104 010c 	add.w	r1, r4, #12
 800cc0a:	0092      	lsls	r2, r2, #2
 800cc0c:	300c      	adds	r0, #12
 800cc0e:	f7fe ffe0 	bl	800bbd2 <memcpy>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7ff ffa5 	bl	800cb64 <_Bfree>
 800cc1a:	4644      	mov	r4, r8
 800cc1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc20:	3501      	adds	r5, #1
 800cc22:	615e      	str	r6, [r3, #20]
 800cc24:	6125      	str	r5, [r4, #16]
 800cc26:	4620      	mov	r0, r4
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	0800df28 	.word	0x0800df28
 800cc30:	0800df39 	.word	0x0800df39

0800cc34 <__hi0bits>:
 800cc34:	0c03      	lsrs	r3, r0, #16
 800cc36:	041b      	lsls	r3, r3, #16
 800cc38:	b9d3      	cbnz	r3, 800cc70 <__hi0bits+0x3c>
 800cc3a:	0400      	lsls	r0, r0, #16
 800cc3c:	2310      	movs	r3, #16
 800cc3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc42:	bf04      	itt	eq
 800cc44:	0200      	lsleq	r0, r0, #8
 800cc46:	3308      	addeq	r3, #8
 800cc48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc4c:	bf04      	itt	eq
 800cc4e:	0100      	lsleq	r0, r0, #4
 800cc50:	3304      	addeq	r3, #4
 800cc52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc56:	bf04      	itt	eq
 800cc58:	0080      	lsleq	r0, r0, #2
 800cc5a:	3302      	addeq	r3, #2
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	db05      	blt.n	800cc6c <__hi0bits+0x38>
 800cc60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc64:	f103 0301 	add.w	r3, r3, #1
 800cc68:	bf08      	it	eq
 800cc6a:	2320      	moveq	r3, #32
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	4770      	bx	lr
 800cc70:	2300      	movs	r3, #0
 800cc72:	e7e4      	b.n	800cc3e <__hi0bits+0xa>

0800cc74 <__lo0bits>:
 800cc74:	6803      	ldr	r3, [r0, #0]
 800cc76:	f013 0207 	ands.w	r2, r3, #7
 800cc7a:	d00c      	beq.n	800cc96 <__lo0bits+0x22>
 800cc7c:	07d9      	lsls	r1, r3, #31
 800cc7e:	d422      	bmi.n	800ccc6 <__lo0bits+0x52>
 800cc80:	079a      	lsls	r2, r3, #30
 800cc82:	bf49      	itett	mi
 800cc84:	085b      	lsrmi	r3, r3, #1
 800cc86:	089b      	lsrpl	r3, r3, #2
 800cc88:	6003      	strmi	r3, [r0, #0]
 800cc8a:	2201      	movmi	r2, #1
 800cc8c:	bf5c      	itt	pl
 800cc8e:	6003      	strpl	r3, [r0, #0]
 800cc90:	2202      	movpl	r2, #2
 800cc92:	4610      	mov	r0, r2
 800cc94:	4770      	bx	lr
 800cc96:	b299      	uxth	r1, r3
 800cc98:	b909      	cbnz	r1, 800cc9e <__lo0bits+0x2a>
 800cc9a:	0c1b      	lsrs	r3, r3, #16
 800cc9c:	2210      	movs	r2, #16
 800cc9e:	b2d9      	uxtb	r1, r3
 800cca0:	b909      	cbnz	r1, 800cca6 <__lo0bits+0x32>
 800cca2:	3208      	adds	r2, #8
 800cca4:	0a1b      	lsrs	r3, r3, #8
 800cca6:	0719      	lsls	r1, r3, #28
 800cca8:	bf04      	itt	eq
 800ccaa:	091b      	lsreq	r3, r3, #4
 800ccac:	3204      	addeq	r2, #4
 800ccae:	0799      	lsls	r1, r3, #30
 800ccb0:	bf04      	itt	eq
 800ccb2:	089b      	lsreq	r3, r3, #2
 800ccb4:	3202      	addeq	r2, #2
 800ccb6:	07d9      	lsls	r1, r3, #31
 800ccb8:	d403      	bmi.n	800ccc2 <__lo0bits+0x4e>
 800ccba:	085b      	lsrs	r3, r3, #1
 800ccbc:	f102 0201 	add.w	r2, r2, #1
 800ccc0:	d003      	beq.n	800ccca <__lo0bits+0x56>
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	e7e5      	b.n	800cc92 <__lo0bits+0x1e>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	e7e3      	b.n	800cc92 <__lo0bits+0x1e>
 800ccca:	2220      	movs	r2, #32
 800cccc:	e7e1      	b.n	800cc92 <__lo0bits+0x1e>
	...

0800ccd0 <__i2b>:
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	f7ff ff05 	bl	800cae4 <_Balloc>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	b928      	cbnz	r0, 800ccea <__i2b+0x1a>
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <__i2b+0x24>)
 800cce0:	4805      	ldr	r0, [pc, #20]	; (800ccf8 <__i2b+0x28>)
 800cce2:	f240 1145 	movw	r1, #325	; 0x145
 800cce6:	f000 fca9 	bl	800d63c <__assert_func>
 800ccea:	2301      	movs	r3, #1
 800ccec:	6144      	str	r4, [r0, #20]
 800ccee:	6103      	str	r3, [r0, #16]
 800ccf0:	bd10      	pop	{r4, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800df28 	.word	0x0800df28
 800ccf8:	0800df39 	.word	0x0800df39

0800ccfc <__multiply>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	4691      	mov	r9, r2
 800cd02:	690a      	ldr	r2, [r1, #16]
 800cd04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	bfb8      	it	lt
 800cd0c:	460b      	movlt	r3, r1
 800cd0e:	460c      	mov	r4, r1
 800cd10:	bfbc      	itt	lt
 800cd12:	464c      	movlt	r4, r9
 800cd14:	4699      	movlt	r9, r3
 800cd16:	6927      	ldr	r7, [r4, #16]
 800cd18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd1c:	68a3      	ldr	r3, [r4, #8]
 800cd1e:	6861      	ldr	r1, [r4, #4]
 800cd20:	eb07 060a 	add.w	r6, r7, sl
 800cd24:	42b3      	cmp	r3, r6
 800cd26:	b085      	sub	sp, #20
 800cd28:	bfb8      	it	lt
 800cd2a:	3101      	addlt	r1, #1
 800cd2c:	f7ff feda 	bl	800cae4 <_Balloc>
 800cd30:	b930      	cbnz	r0, 800cd40 <__multiply+0x44>
 800cd32:	4602      	mov	r2, r0
 800cd34:	4b44      	ldr	r3, [pc, #272]	; (800ce48 <__multiply+0x14c>)
 800cd36:	4845      	ldr	r0, [pc, #276]	; (800ce4c <__multiply+0x150>)
 800cd38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cd3c:	f000 fc7e 	bl	800d63c <__assert_func>
 800cd40:	f100 0514 	add.w	r5, r0, #20
 800cd44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd48:	462b      	mov	r3, r5
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	4543      	cmp	r3, r8
 800cd4e:	d321      	bcc.n	800cd94 <__multiply+0x98>
 800cd50:	f104 0314 	add.w	r3, r4, #20
 800cd54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd58:	f109 0314 	add.w	r3, r9, #20
 800cd5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd60:	9202      	str	r2, [sp, #8]
 800cd62:	1b3a      	subs	r2, r7, r4
 800cd64:	3a15      	subs	r2, #21
 800cd66:	f022 0203 	bic.w	r2, r2, #3
 800cd6a:	3204      	adds	r2, #4
 800cd6c:	f104 0115 	add.w	r1, r4, #21
 800cd70:	428f      	cmp	r7, r1
 800cd72:	bf38      	it	cc
 800cd74:	2204      	movcc	r2, #4
 800cd76:	9201      	str	r2, [sp, #4]
 800cd78:	9a02      	ldr	r2, [sp, #8]
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d80c      	bhi.n	800cd9a <__multiply+0x9e>
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	dd03      	ble.n	800cd8c <__multiply+0x90>
 800cd84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d05b      	beq.n	800ce44 <__multiply+0x148>
 800cd8c:	6106      	str	r6, [r0, #16]
 800cd8e:	b005      	add	sp, #20
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	f843 2b04 	str.w	r2, [r3], #4
 800cd98:	e7d8      	b.n	800cd4c <__multiply+0x50>
 800cd9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd9e:	f1ba 0f00 	cmp.w	sl, #0
 800cda2:	d024      	beq.n	800cdee <__multiply+0xf2>
 800cda4:	f104 0e14 	add.w	lr, r4, #20
 800cda8:	46a9      	mov	r9, r5
 800cdaa:	f04f 0c00 	mov.w	ip, #0
 800cdae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdb2:	f8d9 1000 	ldr.w	r1, [r9]
 800cdb6:	fa1f fb82 	uxth.w	fp, r2
 800cdba:	b289      	uxth	r1, r1
 800cdbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdc4:	f8d9 2000 	ldr.w	r2, [r9]
 800cdc8:	4461      	add	r1, ip
 800cdca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdce:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdd6:	b289      	uxth	r1, r1
 800cdd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cddc:	4577      	cmp	r7, lr
 800cdde:	f849 1b04 	str.w	r1, [r9], #4
 800cde2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cde6:	d8e2      	bhi.n	800cdae <__multiply+0xb2>
 800cde8:	9a01      	ldr	r2, [sp, #4]
 800cdea:	f845 c002 	str.w	ip, [r5, r2]
 800cdee:	9a03      	ldr	r2, [sp, #12]
 800cdf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	f1b9 0f00 	cmp.w	r9, #0
 800cdfa:	d021      	beq.n	800ce40 <__multiply+0x144>
 800cdfc:	6829      	ldr	r1, [r5, #0]
 800cdfe:	f104 0c14 	add.w	ip, r4, #20
 800ce02:	46ae      	mov	lr, r5
 800ce04:	f04f 0a00 	mov.w	sl, #0
 800ce08:	f8bc b000 	ldrh.w	fp, [ip]
 800ce0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce10:	fb09 220b 	mla	r2, r9, fp, r2
 800ce14:	4452      	add	r2, sl
 800ce16:	b289      	uxth	r1, r1
 800ce18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce1c:	f84e 1b04 	str.w	r1, [lr], #4
 800ce20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce28:	f8be 1000 	ldrh.w	r1, [lr]
 800ce2c:	fb09 110a 	mla	r1, r9, sl, r1
 800ce30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce34:	4567      	cmp	r7, ip
 800ce36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce3a:	d8e5      	bhi.n	800ce08 <__multiply+0x10c>
 800ce3c:	9a01      	ldr	r2, [sp, #4]
 800ce3e:	50a9      	str	r1, [r5, r2]
 800ce40:	3504      	adds	r5, #4
 800ce42:	e799      	b.n	800cd78 <__multiply+0x7c>
 800ce44:	3e01      	subs	r6, #1
 800ce46:	e79b      	b.n	800cd80 <__multiply+0x84>
 800ce48:	0800df28 	.word	0x0800df28
 800ce4c:	0800df39 	.word	0x0800df39

0800ce50 <__pow5mult>:
 800ce50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce54:	4615      	mov	r5, r2
 800ce56:	f012 0203 	ands.w	r2, r2, #3
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	d007      	beq.n	800ce70 <__pow5mult+0x20>
 800ce60:	4c25      	ldr	r4, [pc, #148]	; (800cef8 <__pow5mult+0xa8>)
 800ce62:	3a01      	subs	r2, #1
 800ce64:	2300      	movs	r3, #0
 800ce66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce6a:	f7ff fe9d 	bl	800cba8 <__multadd>
 800ce6e:	4607      	mov	r7, r0
 800ce70:	10ad      	asrs	r5, r5, #2
 800ce72:	d03d      	beq.n	800cef0 <__pow5mult+0xa0>
 800ce74:	69f4      	ldr	r4, [r6, #28]
 800ce76:	b97c      	cbnz	r4, 800ce98 <__pow5mult+0x48>
 800ce78:	2010      	movs	r0, #16
 800ce7a:	f7ff fd7f 	bl	800c97c <malloc>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	61f0      	str	r0, [r6, #28]
 800ce82:	b928      	cbnz	r0, 800ce90 <__pow5mult+0x40>
 800ce84:	4b1d      	ldr	r3, [pc, #116]	; (800cefc <__pow5mult+0xac>)
 800ce86:	481e      	ldr	r0, [pc, #120]	; (800cf00 <__pow5mult+0xb0>)
 800ce88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce8c:	f000 fbd6 	bl	800d63c <__assert_func>
 800ce90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce94:	6004      	str	r4, [r0, #0]
 800ce96:	60c4      	str	r4, [r0, #12]
 800ce98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cea0:	b94c      	cbnz	r4, 800ceb6 <__pow5mult+0x66>
 800cea2:	f240 2171 	movw	r1, #625	; 0x271
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff ff12 	bl	800ccd0 <__i2b>
 800ceac:	2300      	movs	r3, #0
 800ceae:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	6003      	str	r3, [r0, #0]
 800ceb6:	f04f 0900 	mov.w	r9, #0
 800ceba:	07eb      	lsls	r3, r5, #31
 800cebc:	d50a      	bpl.n	800ced4 <__pow5mult+0x84>
 800cebe:	4639      	mov	r1, r7
 800cec0:	4622      	mov	r2, r4
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7ff ff1a 	bl	800ccfc <__multiply>
 800cec8:	4639      	mov	r1, r7
 800ceca:	4680      	mov	r8, r0
 800cecc:	4630      	mov	r0, r6
 800cece:	f7ff fe49 	bl	800cb64 <_Bfree>
 800ced2:	4647      	mov	r7, r8
 800ced4:	106d      	asrs	r5, r5, #1
 800ced6:	d00b      	beq.n	800cef0 <__pow5mult+0xa0>
 800ced8:	6820      	ldr	r0, [r4, #0]
 800ceda:	b938      	cbnz	r0, 800ceec <__pow5mult+0x9c>
 800cedc:	4622      	mov	r2, r4
 800cede:	4621      	mov	r1, r4
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7ff ff0b 	bl	800ccfc <__multiply>
 800cee6:	6020      	str	r0, [r4, #0]
 800cee8:	f8c0 9000 	str.w	r9, [r0]
 800ceec:	4604      	mov	r4, r0
 800ceee:	e7e4      	b.n	800ceba <__pow5mult+0x6a>
 800cef0:	4638      	mov	r0, r7
 800cef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef6:	bf00      	nop
 800cef8:	0800e088 	.word	0x0800e088
 800cefc:	0800deb9 	.word	0x0800deb9
 800cf00:	0800df39 	.word	0x0800df39

0800cf04 <__lshift>:
 800cf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf08:	460c      	mov	r4, r1
 800cf0a:	6849      	ldr	r1, [r1, #4]
 800cf0c:	6923      	ldr	r3, [r4, #16]
 800cf0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf12:	68a3      	ldr	r3, [r4, #8]
 800cf14:	4607      	mov	r7, r0
 800cf16:	4691      	mov	r9, r2
 800cf18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf1c:	f108 0601 	add.w	r6, r8, #1
 800cf20:	42b3      	cmp	r3, r6
 800cf22:	db0b      	blt.n	800cf3c <__lshift+0x38>
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff fddd 	bl	800cae4 <_Balloc>
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	b948      	cbnz	r0, 800cf42 <__lshift+0x3e>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	4b28      	ldr	r3, [pc, #160]	; (800cfd4 <__lshift+0xd0>)
 800cf32:	4829      	ldr	r0, [pc, #164]	; (800cfd8 <__lshift+0xd4>)
 800cf34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cf38:	f000 fb80 	bl	800d63c <__assert_func>
 800cf3c:	3101      	adds	r1, #1
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	e7ee      	b.n	800cf20 <__lshift+0x1c>
 800cf42:	2300      	movs	r3, #0
 800cf44:	f100 0114 	add.w	r1, r0, #20
 800cf48:	f100 0210 	add.w	r2, r0, #16
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	4553      	cmp	r3, sl
 800cf50:	db33      	blt.n	800cfba <__lshift+0xb6>
 800cf52:	6920      	ldr	r0, [r4, #16]
 800cf54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf58:	f104 0314 	add.w	r3, r4, #20
 800cf5c:	f019 091f 	ands.w	r9, r9, #31
 800cf60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf68:	d02b      	beq.n	800cfc2 <__lshift+0xbe>
 800cf6a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf6e:	468a      	mov	sl, r1
 800cf70:	2200      	movs	r2, #0
 800cf72:	6818      	ldr	r0, [r3, #0]
 800cf74:	fa00 f009 	lsl.w	r0, r0, r9
 800cf78:	4310      	orrs	r0, r2
 800cf7a:	f84a 0b04 	str.w	r0, [sl], #4
 800cf7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf82:	459c      	cmp	ip, r3
 800cf84:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf88:	d8f3      	bhi.n	800cf72 <__lshift+0x6e>
 800cf8a:	ebac 0304 	sub.w	r3, ip, r4
 800cf8e:	3b15      	subs	r3, #21
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	3304      	adds	r3, #4
 800cf96:	f104 0015 	add.w	r0, r4, #21
 800cf9a:	4584      	cmp	ip, r0
 800cf9c:	bf38      	it	cc
 800cf9e:	2304      	movcc	r3, #4
 800cfa0:	50ca      	str	r2, [r1, r3]
 800cfa2:	b10a      	cbz	r2, 800cfa8 <__lshift+0xa4>
 800cfa4:	f108 0602 	add.w	r6, r8, #2
 800cfa8:	3e01      	subs	r6, #1
 800cfaa:	4638      	mov	r0, r7
 800cfac:	612e      	str	r6, [r5, #16]
 800cfae:	4621      	mov	r1, r4
 800cfb0:	f7ff fdd8 	bl	800cb64 <_Bfree>
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfba:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	e7c5      	b.n	800cf4e <__lshift+0x4a>
 800cfc2:	3904      	subs	r1, #4
 800cfc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfcc:	459c      	cmp	ip, r3
 800cfce:	d8f9      	bhi.n	800cfc4 <__lshift+0xc0>
 800cfd0:	e7ea      	b.n	800cfa8 <__lshift+0xa4>
 800cfd2:	bf00      	nop
 800cfd4:	0800df28 	.word	0x0800df28
 800cfd8:	0800df39 	.word	0x0800df39

0800cfdc <__mcmp>:
 800cfdc:	b530      	push	{r4, r5, lr}
 800cfde:	6902      	ldr	r2, [r0, #16]
 800cfe0:	690c      	ldr	r4, [r1, #16]
 800cfe2:	1b12      	subs	r2, r2, r4
 800cfe4:	d10e      	bne.n	800d004 <__mcmp+0x28>
 800cfe6:	f100 0314 	add.w	r3, r0, #20
 800cfea:	3114      	adds	r1, #20
 800cfec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cffc:	42a5      	cmp	r5, r4
 800cffe:	d003      	beq.n	800d008 <__mcmp+0x2c>
 800d000:	d305      	bcc.n	800d00e <__mcmp+0x32>
 800d002:	2201      	movs	r2, #1
 800d004:	4610      	mov	r0, r2
 800d006:	bd30      	pop	{r4, r5, pc}
 800d008:	4283      	cmp	r3, r0
 800d00a:	d3f3      	bcc.n	800cff4 <__mcmp+0x18>
 800d00c:	e7fa      	b.n	800d004 <__mcmp+0x28>
 800d00e:	f04f 32ff 	mov.w	r2, #4294967295
 800d012:	e7f7      	b.n	800d004 <__mcmp+0x28>

0800d014 <__mdiff>:
 800d014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	460c      	mov	r4, r1
 800d01a:	4606      	mov	r6, r0
 800d01c:	4611      	mov	r1, r2
 800d01e:	4620      	mov	r0, r4
 800d020:	4690      	mov	r8, r2
 800d022:	f7ff ffdb 	bl	800cfdc <__mcmp>
 800d026:	1e05      	subs	r5, r0, #0
 800d028:	d110      	bne.n	800d04c <__mdiff+0x38>
 800d02a:	4629      	mov	r1, r5
 800d02c:	4630      	mov	r0, r6
 800d02e:	f7ff fd59 	bl	800cae4 <_Balloc>
 800d032:	b930      	cbnz	r0, 800d042 <__mdiff+0x2e>
 800d034:	4b3a      	ldr	r3, [pc, #232]	; (800d120 <__mdiff+0x10c>)
 800d036:	4602      	mov	r2, r0
 800d038:	f240 2137 	movw	r1, #567	; 0x237
 800d03c:	4839      	ldr	r0, [pc, #228]	; (800d124 <__mdiff+0x110>)
 800d03e:	f000 fafd 	bl	800d63c <__assert_func>
 800d042:	2301      	movs	r3, #1
 800d044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	bfa4      	itt	ge
 800d04e:	4643      	movge	r3, r8
 800d050:	46a0      	movge	r8, r4
 800d052:	4630      	mov	r0, r6
 800d054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d058:	bfa6      	itte	ge
 800d05a:	461c      	movge	r4, r3
 800d05c:	2500      	movge	r5, #0
 800d05e:	2501      	movlt	r5, #1
 800d060:	f7ff fd40 	bl	800cae4 <_Balloc>
 800d064:	b920      	cbnz	r0, 800d070 <__mdiff+0x5c>
 800d066:	4b2e      	ldr	r3, [pc, #184]	; (800d120 <__mdiff+0x10c>)
 800d068:	4602      	mov	r2, r0
 800d06a:	f240 2145 	movw	r1, #581	; 0x245
 800d06e:	e7e5      	b.n	800d03c <__mdiff+0x28>
 800d070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d074:	6926      	ldr	r6, [r4, #16]
 800d076:	60c5      	str	r5, [r0, #12]
 800d078:	f104 0914 	add.w	r9, r4, #20
 800d07c:	f108 0514 	add.w	r5, r8, #20
 800d080:	f100 0e14 	add.w	lr, r0, #20
 800d084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d08c:	f108 0210 	add.w	r2, r8, #16
 800d090:	46f2      	mov	sl, lr
 800d092:	2100      	movs	r1, #0
 800d094:	f859 3b04 	ldr.w	r3, [r9], #4
 800d098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d09c:	fa11 f88b 	uxtah	r8, r1, fp
 800d0a0:	b299      	uxth	r1, r3
 800d0a2:	0c1b      	lsrs	r3, r3, #16
 800d0a4:	eba8 0801 	sub.w	r8, r8, r1
 800d0a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0b0:	fa1f f888 	uxth.w	r8, r8
 800d0b4:	1419      	asrs	r1, r3, #16
 800d0b6:	454e      	cmp	r6, r9
 800d0b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d0c0:	d8e8      	bhi.n	800d094 <__mdiff+0x80>
 800d0c2:	1b33      	subs	r3, r6, r4
 800d0c4:	3b15      	subs	r3, #21
 800d0c6:	f023 0303 	bic.w	r3, r3, #3
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	3415      	adds	r4, #21
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	bf38      	it	cc
 800d0d2:	2304      	movcc	r3, #4
 800d0d4:	441d      	add	r5, r3
 800d0d6:	4473      	add	r3, lr
 800d0d8:	469e      	mov	lr, r3
 800d0da:	462e      	mov	r6, r5
 800d0dc:	4566      	cmp	r6, ip
 800d0de:	d30e      	bcc.n	800d0fe <__mdiff+0xea>
 800d0e0:	f10c 0203 	add.w	r2, ip, #3
 800d0e4:	1b52      	subs	r2, r2, r5
 800d0e6:	f022 0203 	bic.w	r2, r2, #3
 800d0ea:	3d03      	subs	r5, #3
 800d0ec:	45ac      	cmp	ip, r5
 800d0ee:	bf38      	it	cc
 800d0f0:	2200      	movcc	r2, #0
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d0f8:	b17a      	cbz	r2, 800d11a <__mdiff+0x106>
 800d0fa:	6107      	str	r7, [r0, #16]
 800d0fc:	e7a4      	b.n	800d048 <__mdiff+0x34>
 800d0fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800d102:	fa11 f288 	uxtah	r2, r1, r8
 800d106:	1414      	asrs	r4, r2, #16
 800d108:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d10c:	b292      	uxth	r2, r2
 800d10e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d112:	f84e 2b04 	str.w	r2, [lr], #4
 800d116:	1421      	asrs	r1, r4, #16
 800d118:	e7e0      	b.n	800d0dc <__mdiff+0xc8>
 800d11a:	3f01      	subs	r7, #1
 800d11c:	e7ea      	b.n	800d0f4 <__mdiff+0xe0>
 800d11e:	bf00      	nop
 800d120:	0800df28 	.word	0x0800df28
 800d124:	0800df39 	.word	0x0800df39

0800d128 <__d2b>:
 800d128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d12c:	460f      	mov	r7, r1
 800d12e:	2101      	movs	r1, #1
 800d130:	ec59 8b10 	vmov	r8, r9, d0
 800d134:	4616      	mov	r6, r2
 800d136:	f7ff fcd5 	bl	800cae4 <_Balloc>
 800d13a:	4604      	mov	r4, r0
 800d13c:	b930      	cbnz	r0, 800d14c <__d2b+0x24>
 800d13e:	4602      	mov	r2, r0
 800d140:	4b24      	ldr	r3, [pc, #144]	; (800d1d4 <__d2b+0xac>)
 800d142:	4825      	ldr	r0, [pc, #148]	; (800d1d8 <__d2b+0xb0>)
 800d144:	f240 310f 	movw	r1, #783	; 0x30f
 800d148:	f000 fa78 	bl	800d63c <__assert_func>
 800d14c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d154:	bb2d      	cbnz	r5, 800d1a2 <__d2b+0x7a>
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	f1b8 0300 	subs.w	r3, r8, #0
 800d15c:	d026      	beq.n	800d1ac <__d2b+0x84>
 800d15e:	4668      	mov	r0, sp
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	f7ff fd87 	bl	800cc74 <__lo0bits>
 800d166:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d16a:	b1e8      	cbz	r0, 800d1a8 <__d2b+0x80>
 800d16c:	f1c0 0320 	rsb	r3, r0, #32
 800d170:	fa02 f303 	lsl.w	r3, r2, r3
 800d174:	430b      	orrs	r3, r1
 800d176:	40c2      	lsrs	r2, r0
 800d178:	6163      	str	r3, [r4, #20]
 800d17a:	9201      	str	r2, [sp, #4]
 800d17c:	9b01      	ldr	r3, [sp, #4]
 800d17e:	61a3      	str	r3, [r4, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	bf14      	ite	ne
 800d184:	2202      	movne	r2, #2
 800d186:	2201      	moveq	r2, #1
 800d188:	6122      	str	r2, [r4, #16]
 800d18a:	b1bd      	cbz	r5, 800d1bc <__d2b+0x94>
 800d18c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d190:	4405      	add	r5, r0
 800d192:	603d      	str	r5, [r7, #0]
 800d194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d198:	6030      	str	r0, [r6, #0]
 800d19a:	4620      	mov	r0, r4
 800d19c:	b003      	add	sp, #12
 800d19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a6:	e7d6      	b.n	800d156 <__d2b+0x2e>
 800d1a8:	6161      	str	r1, [r4, #20]
 800d1aa:	e7e7      	b.n	800d17c <__d2b+0x54>
 800d1ac:	a801      	add	r0, sp, #4
 800d1ae:	f7ff fd61 	bl	800cc74 <__lo0bits>
 800d1b2:	9b01      	ldr	r3, [sp, #4]
 800d1b4:	6163      	str	r3, [r4, #20]
 800d1b6:	3020      	adds	r0, #32
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	e7e5      	b.n	800d188 <__d2b+0x60>
 800d1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1c4:	6038      	str	r0, [r7, #0]
 800d1c6:	6918      	ldr	r0, [r3, #16]
 800d1c8:	f7ff fd34 	bl	800cc34 <__hi0bits>
 800d1cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1d0:	e7e2      	b.n	800d198 <__d2b+0x70>
 800d1d2:	bf00      	nop
 800d1d4:	0800df28 	.word	0x0800df28
 800d1d8:	0800df39 	.word	0x0800df39

0800d1dc <__ssputs_r>:
 800d1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	688e      	ldr	r6, [r1, #8]
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	42be      	cmp	r6, r7
 800d1e6:	680b      	ldr	r3, [r1, #0]
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4690      	mov	r8, r2
 800d1ee:	d82c      	bhi.n	800d24a <__ssputs_r+0x6e>
 800d1f0:	898a      	ldrh	r2, [r1, #12]
 800d1f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1f6:	d026      	beq.n	800d246 <__ssputs_r+0x6a>
 800d1f8:	6965      	ldr	r5, [r4, #20]
 800d1fa:	6909      	ldr	r1, [r1, #16]
 800d1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d200:	eba3 0901 	sub.w	r9, r3, r1
 800d204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d208:	1c7b      	adds	r3, r7, #1
 800d20a:	444b      	add	r3, r9
 800d20c:	106d      	asrs	r5, r5, #1
 800d20e:	429d      	cmp	r5, r3
 800d210:	bf38      	it	cc
 800d212:	461d      	movcc	r5, r3
 800d214:	0553      	lsls	r3, r2, #21
 800d216:	d527      	bpl.n	800d268 <__ssputs_r+0x8c>
 800d218:	4629      	mov	r1, r5
 800d21a:	f7ff fbd7 	bl	800c9cc <_malloc_r>
 800d21e:	4606      	mov	r6, r0
 800d220:	b360      	cbz	r0, 800d27c <__ssputs_r+0xa0>
 800d222:	6921      	ldr	r1, [r4, #16]
 800d224:	464a      	mov	r2, r9
 800d226:	f7fe fcd4 	bl	800bbd2 <memcpy>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	6126      	str	r6, [r4, #16]
 800d238:	6165      	str	r5, [r4, #20]
 800d23a:	444e      	add	r6, r9
 800d23c:	eba5 0509 	sub.w	r5, r5, r9
 800d240:	6026      	str	r6, [r4, #0]
 800d242:	60a5      	str	r5, [r4, #8]
 800d244:	463e      	mov	r6, r7
 800d246:	42be      	cmp	r6, r7
 800d248:	d900      	bls.n	800d24c <__ssputs_r+0x70>
 800d24a:	463e      	mov	r6, r7
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	4632      	mov	r2, r6
 800d250:	4641      	mov	r1, r8
 800d252:	f000 f9c9 	bl	800d5e8 <memmove>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	1b9b      	subs	r3, r3, r6
 800d25a:	60a3      	str	r3, [r4, #8]
 800d25c:	6823      	ldr	r3, [r4, #0]
 800d25e:	4433      	add	r3, r6
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	2000      	movs	r0, #0
 800d264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d268:	462a      	mov	r2, r5
 800d26a:	f000 fa2d 	bl	800d6c8 <_realloc_r>
 800d26e:	4606      	mov	r6, r0
 800d270:	2800      	cmp	r0, #0
 800d272:	d1e0      	bne.n	800d236 <__ssputs_r+0x5a>
 800d274:	6921      	ldr	r1, [r4, #16]
 800d276:	4650      	mov	r0, sl
 800d278:	f7ff fb34 	bl	800c8e4 <_free_r>
 800d27c:	230c      	movs	r3, #12
 800d27e:	f8ca 3000 	str.w	r3, [sl]
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d288:	81a3      	strh	r3, [r4, #12]
 800d28a:	f04f 30ff 	mov.w	r0, #4294967295
 800d28e:	e7e9      	b.n	800d264 <__ssputs_r+0x88>

0800d290 <_svfiprintf_r>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	4698      	mov	r8, r3
 800d296:	898b      	ldrh	r3, [r1, #12]
 800d298:	061b      	lsls	r3, r3, #24
 800d29a:	b09d      	sub	sp, #116	; 0x74
 800d29c:	4607      	mov	r7, r0
 800d29e:	460d      	mov	r5, r1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	d50e      	bpl.n	800d2c2 <_svfiprintf_r+0x32>
 800d2a4:	690b      	ldr	r3, [r1, #16]
 800d2a6:	b963      	cbnz	r3, 800d2c2 <_svfiprintf_r+0x32>
 800d2a8:	2140      	movs	r1, #64	; 0x40
 800d2aa:	f7ff fb8f 	bl	800c9cc <_malloc_r>
 800d2ae:	6028      	str	r0, [r5, #0]
 800d2b0:	6128      	str	r0, [r5, #16]
 800d2b2:	b920      	cbnz	r0, 800d2be <_svfiprintf_r+0x2e>
 800d2b4:	230c      	movs	r3, #12
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2bc:	e0d0      	b.n	800d460 <_svfiprintf_r+0x1d0>
 800d2be:	2340      	movs	r3, #64	; 0x40
 800d2c0:	616b      	str	r3, [r5, #20]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c6:	2320      	movs	r3, #32
 800d2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d0:	2330      	movs	r3, #48	; 0x30
 800d2d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d478 <_svfiprintf_r+0x1e8>
 800d2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2da:	f04f 0901 	mov.w	r9, #1
 800d2de:	4623      	mov	r3, r4
 800d2e0:	469a      	mov	sl, r3
 800d2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e6:	b10a      	cbz	r2, 800d2ec <_svfiprintf_r+0x5c>
 800d2e8:	2a25      	cmp	r2, #37	; 0x25
 800d2ea:	d1f9      	bne.n	800d2e0 <_svfiprintf_r+0x50>
 800d2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d2f0:	d00b      	beq.n	800d30a <_svfiprintf_r+0x7a>
 800d2f2:	465b      	mov	r3, fp
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff ff6f 	bl	800d1dc <__ssputs_r>
 800d2fe:	3001      	adds	r0, #1
 800d300:	f000 80a9 	beq.w	800d456 <_svfiprintf_r+0x1c6>
 800d304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d306:	445a      	add	r2, fp
 800d308:	9209      	str	r2, [sp, #36]	; 0x24
 800d30a:	f89a 3000 	ldrb.w	r3, [sl]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80a1 	beq.w	800d456 <_svfiprintf_r+0x1c6>
 800d314:	2300      	movs	r3, #0
 800d316:	f04f 32ff 	mov.w	r2, #4294967295
 800d31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31e:	f10a 0a01 	add.w	sl, sl, #1
 800d322:	9304      	str	r3, [sp, #16]
 800d324:	9307      	str	r3, [sp, #28]
 800d326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d32a:	931a      	str	r3, [sp, #104]	; 0x68
 800d32c:	4654      	mov	r4, sl
 800d32e:	2205      	movs	r2, #5
 800d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d334:	4850      	ldr	r0, [pc, #320]	; (800d478 <_svfiprintf_r+0x1e8>)
 800d336:	f7f2 ff4b 	bl	80001d0 <memchr>
 800d33a:	9a04      	ldr	r2, [sp, #16]
 800d33c:	b9d8      	cbnz	r0, 800d376 <_svfiprintf_r+0xe6>
 800d33e:	06d0      	lsls	r0, r2, #27
 800d340:	bf44      	itt	mi
 800d342:	2320      	movmi	r3, #32
 800d344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d348:	0711      	lsls	r1, r2, #28
 800d34a:	bf44      	itt	mi
 800d34c:	232b      	movmi	r3, #43	; 0x2b
 800d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d352:	f89a 3000 	ldrb.w	r3, [sl]
 800d356:	2b2a      	cmp	r3, #42	; 0x2a
 800d358:	d015      	beq.n	800d386 <_svfiprintf_r+0xf6>
 800d35a:	9a07      	ldr	r2, [sp, #28]
 800d35c:	4654      	mov	r4, sl
 800d35e:	2000      	movs	r0, #0
 800d360:	f04f 0c0a 	mov.w	ip, #10
 800d364:	4621      	mov	r1, r4
 800d366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36a:	3b30      	subs	r3, #48	; 0x30
 800d36c:	2b09      	cmp	r3, #9
 800d36e:	d94d      	bls.n	800d40c <_svfiprintf_r+0x17c>
 800d370:	b1b0      	cbz	r0, 800d3a0 <_svfiprintf_r+0x110>
 800d372:	9207      	str	r2, [sp, #28]
 800d374:	e014      	b.n	800d3a0 <_svfiprintf_r+0x110>
 800d376:	eba0 0308 	sub.w	r3, r0, r8
 800d37a:	fa09 f303 	lsl.w	r3, r9, r3
 800d37e:	4313      	orrs	r3, r2
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	46a2      	mov	sl, r4
 800d384:	e7d2      	b.n	800d32c <_svfiprintf_r+0x9c>
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	1d19      	adds	r1, r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	9103      	str	r1, [sp, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfbb      	ittet	lt
 800d392:	425b      	neglt	r3, r3
 800d394:	f042 0202 	orrlt.w	r2, r2, #2
 800d398:	9307      	strge	r3, [sp, #28]
 800d39a:	9307      	strlt	r3, [sp, #28]
 800d39c:	bfb8      	it	lt
 800d39e:	9204      	strlt	r2, [sp, #16]
 800d3a0:	7823      	ldrb	r3, [r4, #0]
 800d3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a4:	d10c      	bne.n	800d3c0 <_svfiprintf_r+0x130>
 800d3a6:	7863      	ldrb	r3, [r4, #1]
 800d3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3aa:	d134      	bne.n	800d416 <_svfiprintf_r+0x186>
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	1d1a      	adds	r2, r3, #4
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	9203      	str	r2, [sp, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	bfb8      	it	lt
 800d3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3bc:	3402      	adds	r4, #2
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d488 <_svfiprintf_r+0x1f8>
 800d3c4:	7821      	ldrb	r1, [r4, #0]
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	4650      	mov	r0, sl
 800d3ca:	f7f2 ff01 	bl	80001d0 <memchr>
 800d3ce:	b138      	cbz	r0, 800d3e0 <_svfiprintf_r+0x150>
 800d3d0:	9b04      	ldr	r3, [sp, #16]
 800d3d2:	eba0 000a 	sub.w	r0, r0, sl
 800d3d6:	2240      	movs	r2, #64	; 0x40
 800d3d8:	4082      	lsls	r2, r0
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	3401      	adds	r4, #1
 800d3de:	9304      	str	r3, [sp, #16]
 800d3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e4:	4825      	ldr	r0, [pc, #148]	; (800d47c <_svfiprintf_r+0x1ec>)
 800d3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ea:	2206      	movs	r2, #6
 800d3ec:	f7f2 fef0 	bl	80001d0 <memchr>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d038      	beq.n	800d466 <_svfiprintf_r+0x1d6>
 800d3f4:	4b22      	ldr	r3, [pc, #136]	; (800d480 <_svfiprintf_r+0x1f0>)
 800d3f6:	bb1b      	cbnz	r3, 800d440 <_svfiprintf_r+0x1b0>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	3307      	adds	r3, #7
 800d3fc:	f023 0307 	bic.w	r3, r3, #7
 800d400:	3308      	adds	r3, #8
 800d402:	9303      	str	r3, [sp, #12]
 800d404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d406:	4433      	add	r3, r6
 800d408:	9309      	str	r3, [sp, #36]	; 0x24
 800d40a:	e768      	b.n	800d2de <_svfiprintf_r+0x4e>
 800d40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d410:	460c      	mov	r4, r1
 800d412:	2001      	movs	r0, #1
 800d414:	e7a6      	b.n	800d364 <_svfiprintf_r+0xd4>
 800d416:	2300      	movs	r3, #0
 800d418:	3401      	adds	r4, #1
 800d41a:	9305      	str	r3, [sp, #20]
 800d41c:	4619      	mov	r1, r3
 800d41e:	f04f 0c0a 	mov.w	ip, #10
 800d422:	4620      	mov	r0, r4
 800d424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d428:	3a30      	subs	r2, #48	; 0x30
 800d42a:	2a09      	cmp	r2, #9
 800d42c:	d903      	bls.n	800d436 <_svfiprintf_r+0x1a6>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d0c6      	beq.n	800d3c0 <_svfiprintf_r+0x130>
 800d432:	9105      	str	r1, [sp, #20]
 800d434:	e7c4      	b.n	800d3c0 <_svfiprintf_r+0x130>
 800d436:	fb0c 2101 	mla	r1, ip, r1, r2
 800d43a:	4604      	mov	r4, r0
 800d43c:	2301      	movs	r3, #1
 800d43e:	e7f0      	b.n	800d422 <_svfiprintf_r+0x192>
 800d440:	ab03      	add	r3, sp, #12
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	462a      	mov	r2, r5
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <_svfiprintf_r+0x1f4>)
 800d448:	a904      	add	r1, sp, #16
 800d44a:	4638      	mov	r0, r7
 800d44c:	f7fd fe00 	bl	800b050 <_printf_float>
 800d450:	1c42      	adds	r2, r0, #1
 800d452:	4606      	mov	r6, r0
 800d454:	d1d6      	bne.n	800d404 <_svfiprintf_r+0x174>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	065b      	lsls	r3, r3, #25
 800d45a:	f53f af2d 	bmi.w	800d2b8 <_svfiprintf_r+0x28>
 800d45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d460:	b01d      	add	sp, #116	; 0x74
 800d462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d466:	ab03      	add	r3, sp, #12
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	462a      	mov	r2, r5
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <_svfiprintf_r+0x1f4>)
 800d46e:	a904      	add	r1, sp, #16
 800d470:	4638      	mov	r0, r7
 800d472:	f7fe f891 	bl	800b598 <_printf_i>
 800d476:	e7eb      	b.n	800d450 <_svfiprintf_r+0x1c0>
 800d478:	0800e094 	.word	0x0800e094
 800d47c:	0800e09e 	.word	0x0800e09e
 800d480:	0800b051 	.word	0x0800b051
 800d484:	0800d1dd 	.word	0x0800d1dd
 800d488:	0800e09a 	.word	0x0800e09a

0800d48c <__sflush_r>:
 800d48c:	898a      	ldrh	r2, [r1, #12]
 800d48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d492:	4605      	mov	r5, r0
 800d494:	0710      	lsls	r0, r2, #28
 800d496:	460c      	mov	r4, r1
 800d498:	d458      	bmi.n	800d54c <__sflush_r+0xc0>
 800d49a:	684b      	ldr	r3, [r1, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	dc05      	bgt.n	800d4ac <__sflush_r+0x20>
 800d4a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dc02      	bgt.n	800d4ac <__sflush_r+0x20>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ae:	2e00      	cmp	r6, #0
 800d4b0:	d0f9      	beq.n	800d4a6 <__sflush_r+0x1a>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4b8:	682f      	ldr	r7, [r5, #0]
 800d4ba:	6a21      	ldr	r1, [r4, #32]
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	d032      	beq.n	800d526 <__sflush_r+0x9a>
 800d4c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	075a      	lsls	r2, r3, #29
 800d4c6:	d505      	bpl.n	800d4d4 <__sflush_r+0x48>
 800d4c8:	6863      	ldr	r3, [r4, #4]
 800d4ca:	1ac0      	subs	r0, r0, r3
 800d4cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4ce:	b10b      	cbz	r3, 800d4d4 <__sflush_r+0x48>
 800d4d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4d2:	1ac0      	subs	r0, r0, r3
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4da:	6a21      	ldr	r1, [r4, #32]
 800d4dc:	4628      	mov	r0, r5
 800d4de:	47b0      	blx	r6
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	d106      	bne.n	800d4f4 <__sflush_r+0x68>
 800d4e6:	6829      	ldr	r1, [r5, #0]
 800d4e8:	291d      	cmp	r1, #29
 800d4ea:	d82b      	bhi.n	800d544 <__sflush_r+0xb8>
 800d4ec:	4a29      	ldr	r2, [pc, #164]	; (800d594 <__sflush_r+0x108>)
 800d4ee:	410a      	asrs	r2, r1
 800d4f0:	07d6      	lsls	r6, r2, #31
 800d4f2:	d427      	bmi.n	800d544 <__sflush_r+0xb8>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	6062      	str	r2, [r4, #4]
 800d4f8:	04d9      	lsls	r1, r3, #19
 800d4fa:	6922      	ldr	r2, [r4, #16]
 800d4fc:	6022      	str	r2, [r4, #0]
 800d4fe:	d504      	bpl.n	800d50a <__sflush_r+0x7e>
 800d500:	1c42      	adds	r2, r0, #1
 800d502:	d101      	bne.n	800d508 <__sflush_r+0x7c>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	b903      	cbnz	r3, 800d50a <__sflush_r+0x7e>
 800d508:	6560      	str	r0, [r4, #84]	; 0x54
 800d50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d50c:	602f      	str	r7, [r5, #0]
 800d50e:	2900      	cmp	r1, #0
 800d510:	d0c9      	beq.n	800d4a6 <__sflush_r+0x1a>
 800d512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d516:	4299      	cmp	r1, r3
 800d518:	d002      	beq.n	800d520 <__sflush_r+0x94>
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7ff f9e2 	bl	800c8e4 <_free_r>
 800d520:	2000      	movs	r0, #0
 800d522:	6360      	str	r0, [r4, #52]	; 0x34
 800d524:	e7c0      	b.n	800d4a8 <__sflush_r+0x1c>
 800d526:	2301      	movs	r3, #1
 800d528:	4628      	mov	r0, r5
 800d52a:	47b0      	blx	r6
 800d52c:	1c41      	adds	r1, r0, #1
 800d52e:	d1c8      	bne.n	800d4c2 <__sflush_r+0x36>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0c5      	beq.n	800d4c2 <__sflush_r+0x36>
 800d536:	2b1d      	cmp	r3, #29
 800d538:	d001      	beq.n	800d53e <__sflush_r+0xb2>
 800d53a:	2b16      	cmp	r3, #22
 800d53c:	d101      	bne.n	800d542 <__sflush_r+0xb6>
 800d53e:	602f      	str	r7, [r5, #0]
 800d540:	e7b1      	b.n	800d4a6 <__sflush_r+0x1a>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d548:	81a3      	strh	r3, [r4, #12]
 800d54a:	e7ad      	b.n	800d4a8 <__sflush_r+0x1c>
 800d54c:	690f      	ldr	r7, [r1, #16]
 800d54e:	2f00      	cmp	r7, #0
 800d550:	d0a9      	beq.n	800d4a6 <__sflush_r+0x1a>
 800d552:	0793      	lsls	r3, r2, #30
 800d554:	680e      	ldr	r6, [r1, #0]
 800d556:	bf08      	it	eq
 800d558:	694b      	ldreq	r3, [r1, #20]
 800d55a:	600f      	str	r7, [r1, #0]
 800d55c:	bf18      	it	ne
 800d55e:	2300      	movne	r3, #0
 800d560:	eba6 0807 	sub.w	r8, r6, r7
 800d564:	608b      	str	r3, [r1, #8]
 800d566:	f1b8 0f00 	cmp.w	r8, #0
 800d56a:	dd9c      	ble.n	800d4a6 <__sflush_r+0x1a>
 800d56c:	6a21      	ldr	r1, [r4, #32]
 800d56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d570:	4643      	mov	r3, r8
 800d572:	463a      	mov	r2, r7
 800d574:	4628      	mov	r0, r5
 800d576:	47b0      	blx	r6
 800d578:	2800      	cmp	r0, #0
 800d57a:	dc06      	bgt.n	800d58a <__sflush_r+0xfe>
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d582:	81a3      	strh	r3, [r4, #12]
 800d584:	f04f 30ff 	mov.w	r0, #4294967295
 800d588:	e78e      	b.n	800d4a8 <__sflush_r+0x1c>
 800d58a:	4407      	add	r7, r0
 800d58c:	eba8 0800 	sub.w	r8, r8, r0
 800d590:	e7e9      	b.n	800d566 <__sflush_r+0xda>
 800d592:	bf00      	nop
 800d594:	dfbffffe 	.word	0xdfbffffe

0800d598 <_fflush_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	690b      	ldr	r3, [r1, #16]
 800d59c:	4605      	mov	r5, r0
 800d59e:	460c      	mov	r4, r1
 800d5a0:	b913      	cbnz	r3, 800d5a8 <_fflush_r+0x10>
 800d5a2:	2500      	movs	r5, #0
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	b118      	cbz	r0, 800d5b2 <_fflush_r+0x1a>
 800d5aa:	6a03      	ldr	r3, [r0, #32]
 800d5ac:	b90b      	cbnz	r3, 800d5b2 <_fflush_r+0x1a>
 800d5ae:	f7fe f9a1 	bl	800b8f4 <__sinit>
 800d5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0f3      	beq.n	800d5a2 <_fflush_r+0xa>
 800d5ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5bc:	07d0      	lsls	r0, r2, #31
 800d5be:	d404      	bmi.n	800d5ca <_fflush_r+0x32>
 800d5c0:	0599      	lsls	r1, r3, #22
 800d5c2:	d402      	bmi.n	800d5ca <_fflush_r+0x32>
 800d5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5c6:	f7fe fb02 	bl	800bbce <__retarget_lock_acquire_recursive>
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f7ff ff5d 	bl	800d48c <__sflush_r>
 800d5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5d4:	07da      	lsls	r2, r3, #31
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	d4e4      	bmi.n	800d5a4 <_fflush_r+0xc>
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	059b      	lsls	r3, r3, #22
 800d5de:	d4e1      	bmi.n	800d5a4 <_fflush_r+0xc>
 800d5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5e2:	f7fe faf5 	bl	800bbd0 <__retarget_lock_release_recursive>
 800d5e6:	e7dd      	b.n	800d5a4 <_fflush_r+0xc>

0800d5e8 <memmove>:
 800d5e8:	4288      	cmp	r0, r1
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	eb01 0402 	add.w	r4, r1, r2
 800d5f0:	d902      	bls.n	800d5f8 <memmove+0x10>
 800d5f2:	4284      	cmp	r4, r0
 800d5f4:	4623      	mov	r3, r4
 800d5f6:	d807      	bhi.n	800d608 <memmove+0x20>
 800d5f8:	1e43      	subs	r3, r0, #1
 800d5fa:	42a1      	cmp	r1, r4
 800d5fc:	d008      	beq.n	800d610 <memmove+0x28>
 800d5fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d602:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d606:	e7f8      	b.n	800d5fa <memmove+0x12>
 800d608:	4402      	add	r2, r0
 800d60a:	4601      	mov	r1, r0
 800d60c:	428a      	cmp	r2, r1
 800d60e:	d100      	bne.n	800d612 <memmove+0x2a>
 800d610:	bd10      	pop	{r4, pc}
 800d612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d61a:	e7f7      	b.n	800d60c <memmove+0x24>

0800d61c <_sbrk_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d06      	ldr	r5, [pc, #24]	; (800d638 <_sbrk_r+0x1c>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	f7f4 f91e 	bl	8001868 <_sbrk>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_sbrk_r+0x1a>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_sbrk_r+0x1a>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	20006114 	.word	0x20006114

0800d63c <__assert_func>:
 800d63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d63e:	4614      	mov	r4, r2
 800d640:	461a      	mov	r2, r3
 800d642:	4b09      	ldr	r3, [pc, #36]	; (800d668 <__assert_func+0x2c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4605      	mov	r5, r0
 800d648:	68d8      	ldr	r0, [r3, #12]
 800d64a:	b14c      	cbz	r4, 800d660 <__assert_func+0x24>
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <__assert_func+0x30>)
 800d64e:	9100      	str	r1, [sp, #0]
 800d650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d654:	4906      	ldr	r1, [pc, #24]	; (800d670 <__assert_func+0x34>)
 800d656:	462b      	mov	r3, r5
 800d658:	f000 f872 	bl	800d740 <fiprintf>
 800d65c:	f000 f882 	bl	800d764 <abort>
 800d660:	4b04      	ldr	r3, [pc, #16]	; (800d674 <__assert_func+0x38>)
 800d662:	461c      	mov	r4, r3
 800d664:	e7f3      	b.n	800d64e <__assert_func+0x12>
 800d666:	bf00      	nop
 800d668:	20000158 	.word	0x20000158
 800d66c:	0800e0af 	.word	0x0800e0af
 800d670:	0800e0bc 	.word	0x0800e0bc
 800d674:	0800e0ea 	.word	0x0800e0ea

0800d678 <_calloc_r>:
 800d678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d67a:	fba1 2402 	umull	r2, r4, r1, r2
 800d67e:	b94c      	cbnz	r4, 800d694 <_calloc_r+0x1c>
 800d680:	4611      	mov	r1, r2
 800d682:	9201      	str	r2, [sp, #4]
 800d684:	f7ff f9a2 	bl	800c9cc <_malloc_r>
 800d688:	9a01      	ldr	r2, [sp, #4]
 800d68a:	4605      	mov	r5, r0
 800d68c:	b930      	cbnz	r0, 800d69c <_calloc_r+0x24>
 800d68e:	4628      	mov	r0, r5
 800d690:	b003      	add	sp, #12
 800d692:	bd30      	pop	{r4, r5, pc}
 800d694:	220c      	movs	r2, #12
 800d696:	6002      	str	r2, [r0, #0]
 800d698:	2500      	movs	r5, #0
 800d69a:	e7f8      	b.n	800d68e <_calloc_r+0x16>
 800d69c:	4621      	mov	r1, r4
 800d69e:	f7fe f9c2 	bl	800ba26 <memset>
 800d6a2:	e7f4      	b.n	800d68e <_calloc_r+0x16>

0800d6a4 <__ascii_mbtowc>:
 800d6a4:	b082      	sub	sp, #8
 800d6a6:	b901      	cbnz	r1, 800d6aa <__ascii_mbtowc+0x6>
 800d6a8:	a901      	add	r1, sp, #4
 800d6aa:	b142      	cbz	r2, 800d6be <__ascii_mbtowc+0x1a>
 800d6ac:	b14b      	cbz	r3, 800d6c2 <__ascii_mbtowc+0x1e>
 800d6ae:	7813      	ldrb	r3, [r2, #0]
 800d6b0:	600b      	str	r3, [r1, #0]
 800d6b2:	7812      	ldrb	r2, [r2, #0]
 800d6b4:	1e10      	subs	r0, r2, #0
 800d6b6:	bf18      	it	ne
 800d6b8:	2001      	movne	r0, #1
 800d6ba:	b002      	add	sp, #8
 800d6bc:	4770      	bx	lr
 800d6be:	4610      	mov	r0, r2
 800d6c0:	e7fb      	b.n	800d6ba <__ascii_mbtowc+0x16>
 800d6c2:	f06f 0001 	mvn.w	r0, #1
 800d6c6:	e7f8      	b.n	800d6ba <__ascii_mbtowc+0x16>

0800d6c8 <_realloc_r>:
 800d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	4680      	mov	r8, r0
 800d6ce:	4614      	mov	r4, r2
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	b921      	cbnz	r1, 800d6de <_realloc_r+0x16>
 800d6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	4611      	mov	r1, r2
 800d6da:	f7ff b977 	b.w	800c9cc <_malloc_r>
 800d6de:	b92a      	cbnz	r2, 800d6ec <_realloc_r+0x24>
 800d6e0:	f7ff f900 	bl	800c8e4 <_free_r>
 800d6e4:	4625      	mov	r5, r4
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ec:	f000 f841 	bl	800d772 <_malloc_usable_size_r>
 800d6f0:	4284      	cmp	r4, r0
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	d802      	bhi.n	800d6fc <_realloc_r+0x34>
 800d6f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6fa:	d812      	bhi.n	800d722 <_realloc_r+0x5a>
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	4640      	mov	r0, r8
 800d700:	f7ff f964 	bl	800c9cc <_malloc_r>
 800d704:	4605      	mov	r5, r0
 800d706:	2800      	cmp	r0, #0
 800d708:	d0ed      	beq.n	800d6e6 <_realloc_r+0x1e>
 800d70a:	42bc      	cmp	r4, r7
 800d70c:	4622      	mov	r2, r4
 800d70e:	4631      	mov	r1, r6
 800d710:	bf28      	it	cs
 800d712:	463a      	movcs	r2, r7
 800d714:	f7fe fa5d 	bl	800bbd2 <memcpy>
 800d718:	4631      	mov	r1, r6
 800d71a:	4640      	mov	r0, r8
 800d71c:	f7ff f8e2 	bl	800c8e4 <_free_r>
 800d720:	e7e1      	b.n	800d6e6 <_realloc_r+0x1e>
 800d722:	4635      	mov	r5, r6
 800d724:	e7df      	b.n	800d6e6 <_realloc_r+0x1e>

0800d726 <__ascii_wctomb>:
 800d726:	b149      	cbz	r1, 800d73c <__ascii_wctomb+0x16>
 800d728:	2aff      	cmp	r2, #255	; 0xff
 800d72a:	bf85      	ittet	hi
 800d72c:	238a      	movhi	r3, #138	; 0x8a
 800d72e:	6003      	strhi	r3, [r0, #0]
 800d730:	700a      	strbls	r2, [r1, #0]
 800d732:	f04f 30ff 	movhi.w	r0, #4294967295
 800d736:	bf98      	it	ls
 800d738:	2001      	movls	r0, #1
 800d73a:	4770      	bx	lr
 800d73c:	4608      	mov	r0, r1
 800d73e:	4770      	bx	lr

0800d740 <fiprintf>:
 800d740:	b40e      	push	{r1, r2, r3}
 800d742:	b503      	push	{r0, r1, lr}
 800d744:	4601      	mov	r1, r0
 800d746:	ab03      	add	r3, sp, #12
 800d748:	4805      	ldr	r0, [pc, #20]	; (800d760 <fiprintf+0x20>)
 800d74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74e:	6800      	ldr	r0, [r0, #0]
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	f000 f83f 	bl	800d7d4 <_vfiprintf_r>
 800d756:	b002      	add	sp, #8
 800d758:	f85d eb04 	ldr.w	lr, [sp], #4
 800d75c:	b003      	add	sp, #12
 800d75e:	4770      	bx	lr
 800d760:	20000158 	.word	0x20000158

0800d764 <abort>:
 800d764:	b508      	push	{r3, lr}
 800d766:	2006      	movs	r0, #6
 800d768:	f000 fa0c 	bl	800db84 <raise>
 800d76c:	2001      	movs	r0, #1
 800d76e:	f7f4 f803 	bl	8001778 <_exit>

0800d772 <_malloc_usable_size_r>:
 800d772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d776:	1f18      	subs	r0, r3, #4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	bfbc      	itt	lt
 800d77c:	580b      	ldrlt	r3, [r1, r0]
 800d77e:	18c0      	addlt	r0, r0, r3
 800d780:	4770      	bx	lr

0800d782 <__sfputc_r>:
 800d782:	6893      	ldr	r3, [r2, #8]
 800d784:	3b01      	subs	r3, #1
 800d786:	2b00      	cmp	r3, #0
 800d788:	b410      	push	{r4}
 800d78a:	6093      	str	r3, [r2, #8]
 800d78c:	da08      	bge.n	800d7a0 <__sfputc_r+0x1e>
 800d78e:	6994      	ldr	r4, [r2, #24]
 800d790:	42a3      	cmp	r3, r4
 800d792:	db01      	blt.n	800d798 <__sfputc_r+0x16>
 800d794:	290a      	cmp	r1, #10
 800d796:	d103      	bne.n	800d7a0 <__sfputc_r+0x1e>
 800d798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d79c:	f000 b934 	b.w	800da08 <__swbuf_r>
 800d7a0:	6813      	ldr	r3, [r2, #0]
 800d7a2:	1c58      	adds	r0, r3, #1
 800d7a4:	6010      	str	r0, [r2, #0]
 800d7a6:	7019      	strb	r1, [r3, #0]
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <__sfputs_r>:
 800d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	460f      	mov	r7, r1
 800d7b6:	4614      	mov	r4, r2
 800d7b8:	18d5      	adds	r5, r2, r3
 800d7ba:	42ac      	cmp	r4, r5
 800d7bc:	d101      	bne.n	800d7c2 <__sfputs_r+0x12>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e007      	b.n	800d7d2 <__sfputs_r+0x22>
 800d7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c6:	463a      	mov	r2, r7
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7ff ffda 	bl	800d782 <__sfputc_r>
 800d7ce:	1c43      	adds	r3, r0, #1
 800d7d0:	d1f3      	bne.n	800d7ba <__sfputs_r+0xa>
 800d7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7d4 <_vfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	460d      	mov	r5, r1
 800d7da:	b09d      	sub	sp, #116	; 0x74
 800d7dc:	4614      	mov	r4, r2
 800d7de:	4698      	mov	r8, r3
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b118      	cbz	r0, 800d7ec <_vfiprintf_r+0x18>
 800d7e4:	6a03      	ldr	r3, [r0, #32]
 800d7e6:	b90b      	cbnz	r3, 800d7ec <_vfiprintf_r+0x18>
 800d7e8:	f7fe f884 	bl	800b8f4 <__sinit>
 800d7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7ee:	07d9      	lsls	r1, r3, #31
 800d7f0:	d405      	bmi.n	800d7fe <_vfiprintf_r+0x2a>
 800d7f2:	89ab      	ldrh	r3, [r5, #12]
 800d7f4:	059a      	lsls	r2, r3, #22
 800d7f6:	d402      	bmi.n	800d7fe <_vfiprintf_r+0x2a>
 800d7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7fa:	f7fe f9e8 	bl	800bbce <__retarget_lock_acquire_recursive>
 800d7fe:	89ab      	ldrh	r3, [r5, #12]
 800d800:	071b      	lsls	r3, r3, #28
 800d802:	d501      	bpl.n	800d808 <_vfiprintf_r+0x34>
 800d804:	692b      	ldr	r3, [r5, #16]
 800d806:	b99b      	cbnz	r3, 800d830 <_vfiprintf_r+0x5c>
 800d808:	4629      	mov	r1, r5
 800d80a:	4630      	mov	r0, r6
 800d80c:	f000 f93a 	bl	800da84 <__swsetup_r>
 800d810:	b170      	cbz	r0, 800d830 <_vfiprintf_r+0x5c>
 800d812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d814:	07dc      	lsls	r4, r3, #31
 800d816:	d504      	bpl.n	800d822 <_vfiprintf_r+0x4e>
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	b01d      	add	sp, #116	; 0x74
 800d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	0598      	lsls	r0, r3, #22
 800d826:	d4f7      	bmi.n	800d818 <_vfiprintf_r+0x44>
 800d828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d82a:	f7fe f9d1 	bl	800bbd0 <__retarget_lock_release_recursive>
 800d82e:	e7f3      	b.n	800d818 <_vfiprintf_r+0x44>
 800d830:	2300      	movs	r3, #0
 800d832:	9309      	str	r3, [sp, #36]	; 0x24
 800d834:	2320      	movs	r3, #32
 800d836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d83e:	2330      	movs	r3, #48	; 0x30
 800d840:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d9f4 <_vfiprintf_r+0x220>
 800d844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d848:	f04f 0901 	mov.w	r9, #1
 800d84c:	4623      	mov	r3, r4
 800d84e:	469a      	mov	sl, r3
 800d850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d854:	b10a      	cbz	r2, 800d85a <_vfiprintf_r+0x86>
 800d856:	2a25      	cmp	r2, #37	; 0x25
 800d858:	d1f9      	bne.n	800d84e <_vfiprintf_r+0x7a>
 800d85a:	ebba 0b04 	subs.w	fp, sl, r4
 800d85e:	d00b      	beq.n	800d878 <_vfiprintf_r+0xa4>
 800d860:	465b      	mov	r3, fp
 800d862:	4622      	mov	r2, r4
 800d864:	4629      	mov	r1, r5
 800d866:	4630      	mov	r0, r6
 800d868:	f7ff ffa2 	bl	800d7b0 <__sfputs_r>
 800d86c:	3001      	adds	r0, #1
 800d86e:	f000 80a9 	beq.w	800d9c4 <_vfiprintf_r+0x1f0>
 800d872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d874:	445a      	add	r2, fp
 800d876:	9209      	str	r2, [sp, #36]	; 0x24
 800d878:	f89a 3000 	ldrb.w	r3, [sl]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 80a1 	beq.w	800d9c4 <_vfiprintf_r+0x1f0>
 800d882:	2300      	movs	r3, #0
 800d884:	f04f 32ff 	mov.w	r2, #4294967295
 800d888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d88c:	f10a 0a01 	add.w	sl, sl, #1
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	9307      	str	r3, [sp, #28]
 800d894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d898:	931a      	str	r3, [sp, #104]	; 0x68
 800d89a:	4654      	mov	r4, sl
 800d89c:	2205      	movs	r2, #5
 800d89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a2:	4854      	ldr	r0, [pc, #336]	; (800d9f4 <_vfiprintf_r+0x220>)
 800d8a4:	f7f2 fc94 	bl	80001d0 <memchr>
 800d8a8:	9a04      	ldr	r2, [sp, #16]
 800d8aa:	b9d8      	cbnz	r0, 800d8e4 <_vfiprintf_r+0x110>
 800d8ac:	06d1      	lsls	r1, r2, #27
 800d8ae:	bf44      	itt	mi
 800d8b0:	2320      	movmi	r3, #32
 800d8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b6:	0713      	lsls	r3, r2, #28
 800d8b8:	bf44      	itt	mi
 800d8ba:	232b      	movmi	r3, #43	; 0x2b
 800d8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8c6:	d015      	beq.n	800d8f4 <_vfiprintf_r+0x120>
 800d8c8:	9a07      	ldr	r2, [sp, #28]
 800d8ca:	4654      	mov	r4, sl
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	f04f 0c0a 	mov.w	ip, #10
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d8:	3b30      	subs	r3, #48	; 0x30
 800d8da:	2b09      	cmp	r3, #9
 800d8dc:	d94d      	bls.n	800d97a <_vfiprintf_r+0x1a6>
 800d8de:	b1b0      	cbz	r0, 800d90e <_vfiprintf_r+0x13a>
 800d8e0:	9207      	str	r2, [sp, #28]
 800d8e2:	e014      	b.n	800d90e <_vfiprintf_r+0x13a>
 800d8e4:	eba0 0308 	sub.w	r3, r0, r8
 800d8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	46a2      	mov	sl, r4
 800d8f2:	e7d2      	b.n	800d89a <_vfiprintf_r+0xc6>
 800d8f4:	9b03      	ldr	r3, [sp, #12]
 800d8f6:	1d19      	adds	r1, r3, #4
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	9103      	str	r1, [sp, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	bfbb      	ittet	lt
 800d900:	425b      	neglt	r3, r3
 800d902:	f042 0202 	orrlt.w	r2, r2, #2
 800d906:	9307      	strge	r3, [sp, #28]
 800d908:	9307      	strlt	r3, [sp, #28]
 800d90a:	bfb8      	it	lt
 800d90c:	9204      	strlt	r2, [sp, #16]
 800d90e:	7823      	ldrb	r3, [r4, #0]
 800d910:	2b2e      	cmp	r3, #46	; 0x2e
 800d912:	d10c      	bne.n	800d92e <_vfiprintf_r+0x15a>
 800d914:	7863      	ldrb	r3, [r4, #1]
 800d916:	2b2a      	cmp	r3, #42	; 0x2a
 800d918:	d134      	bne.n	800d984 <_vfiprintf_r+0x1b0>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	1d1a      	adds	r2, r3, #4
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	9203      	str	r2, [sp, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	bfb8      	it	lt
 800d926:	f04f 33ff 	movlt.w	r3, #4294967295
 800d92a:	3402      	adds	r4, #2
 800d92c:	9305      	str	r3, [sp, #20]
 800d92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da04 <_vfiprintf_r+0x230>
 800d932:	7821      	ldrb	r1, [r4, #0]
 800d934:	2203      	movs	r2, #3
 800d936:	4650      	mov	r0, sl
 800d938:	f7f2 fc4a 	bl	80001d0 <memchr>
 800d93c:	b138      	cbz	r0, 800d94e <_vfiprintf_r+0x17a>
 800d93e:	9b04      	ldr	r3, [sp, #16]
 800d940:	eba0 000a 	sub.w	r0, r0, sl
 800d944:	2240      	movs	r2, #64	; 0x40
 800d946:	4082      	lsls	r2, r0
 800d948:	4313      	orrs	r3, r2
 800d94a:	3401      	adds	r4, #1
 800d94c:	9304      	str	r3, [sp, #16]
 800d94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d952:	4829      	ldr	r0, [pc, #164]	; (800d9f8 <_vfiprintf_r+0x224>)
 800d954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d958:	2206      	movs	r2, #6
 800d95a:	f7f2 fc39 	bl	80001d0 <memchr>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d03f      	beq.n	800d9e2 <_vfiprintf_r+0x20e>
 800d962:	4b26      	ldr	r3, [pc, #152]	; (800d9fc <_vfiprintf_r+0x228>)
 800d964:	bb1b      	cbnz	r3, 800d9ae <_vfiprintf_r+0x1da>
 800d966:	9b03      	ldr	r3, [sp, #12]
 800d968:	3307      	adds	r3, #7
 800d96a:	f023 0307 	bic.w	r3, r3, #7
 800d96e:	3308      	adds	r3, #8
 800d970:	9303      	str	r3, [sp, #12]
 800d972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d974:	443b      	add	r3, r7
 800d976:	9309      	str	r3, [sp, #36]	; 0x24
 800d978:	e768      	b.n	800d84c <_vfiprintf_r+0x78>
 800d97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d97e:	460c      	mov	r4, r1
 800d980:	2001      	movs	r0, #1
 800d982:	e7a6      	b.n	800d8d2 <_vfiprintf_r+0xfe>
 800d984:	2300      	movs	r3, #0
 800d986:	3401      	adds	r4, #1
 800d988:	9305      	str	r3, [sp, #20]
 800d98a:	4619      	mov	r1, r3
 800d98c:	f04f 0c0a 	mov.w	ip, #10
 800d990:	4620      	mov	r0, r4
 800d992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d996:	3a30      	subs	r2, #48	; 0x30
 800d998:	2a09      	cmp	r2, #9
 800d99a:	d903      	bls.n	800d9a4 <_vfiprintf_r+0x1d0>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d0c6      	beq.n	800d92e <_vfiprintf_r+0x15a>
 800d9a0:	9105      	str	r1, [sp, #20]
 800d9a2:	e7c4      	b.n	800d92e <_vfiprintf_r+0x15a>
 800d9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e7f0      	b.n	800d990 <_vfiprintf_r+0x1bc>
 800d9ae:	ab03      	add	r3, sp, #12
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4b12      	ldr	r3, [pc, #72]	; (800da00 <_vfiprintf_r+0x22c>)
 800d9b6:	a904      	add	r1, sp, #16
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7fd fb49 	bl	800b050 <_printf_float>
 800d9be:	4607      	mov	r7, r0
 800d9c0:	1c78      	adds	r0, r7, #1
 800d9c2:	d1d6      	bne.n	800d972 <_vfiprintf_r+0x19e>
 800d9c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9c6:	07d9      	lsls	r1, r3, #31
 800d9c8:	d405      	bmi.n	800d9d6 <_vfiprintf_r+0x202>
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	059a      	lsls	r2, r3, #22
 800d9ce:	d402      	bmi.n	800d9d6 <_vfiprintf_r+0x202>
 800d9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9d2:	f7fe f8fd 	bl	800bbd0 <__retarget_lock_release_recursive>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	065b      	lsls	r3, r3, #25
 800d9da:	f53f af1d 	bmi.w	800d818 <_vfiprintf_r+0x44>
 800d9de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9e0:	e71c      	b.n	800d81c <_vfiprintf_r+0x48>
 800d9e2:	ab03      	add	r3, sp, #12
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4b05      	ldr	r3, [pc, #20]	; (800da00 <_vfiprintf_r+0x22c>)
 800d9ea:	a904      	add	r1, sp, #16
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	f7fd fdd3 	bl	800b598 <_printf_i>
 800d9f2:	e7e4      	b.n	800d9be <_vfiprintf_r+0x1ea>
 800d9f4:	0800e094 	.word	0x0800e094
 800d9f8:	0800e09e 	.word	0x0800e09e
 800d9fc:	0800b051 	.word	0x0800b051
 800da00:	0800d7b1 	.word	0x0800d7b1
 800da04:	0800e09a 	.word	0x0800e09a

0800da08 <__swbuf_r>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	460e      	mov	r6, r1
 800da0c:	4614      	mov	r4, r2
 800da0e:	4605      	mov	r5, r0
 800da10:	b118      	cbz	r0, 800da1a <__swbuf_r+0x12>
 800da12:	6a03      	ldr	r3, [r0, #32]
 800da14:	b90b      	cbnz	r3, 800da1a <__swbuf_r+0x12>
 800da16:	f7fd ff6d 	bl	800b8f4 <__sinit>
 800da1a:	69a3      	ldr	r3, [r4, #24]
 800da1c:	60a3      	str	r3, [r4, #8]
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	071a      	lsls	r2, r3, #28
 800da22:	d525      	bpl.n	800da70 <__swbuf_r+0x68>
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	b31b      	cbz	r3, 800da70 <__swbuf_r+0x68>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	6922      	ldr	r2, [r4, #16]
 800da2c:	1a98      	subs	r0, r3, r2
 800da2e:	6963      	ldr	r3, [r4, #20]
 800da30:	b2f6      	uxtb	r6, r6
 800da32:	4283      	cmp	r3, r0
 800da34:	4637      	mov	r7, r6
 800da36:	dc04      	bgt.n	800da42 <__swbuf_r+0x3a>
 800da38:	4621      	mov	r1, r4
 800da3a:	4628      	mov	r0, r5
 800da3c:	f7ff fdac 	bl	800d598 <_fflush_r>
 800da40:	b9e0      	cbnz	r0, 800da7c <__swbuf_r+0x74>
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	3b01      	subs	r3, #1
 800da46:	60a3      	str	r3, [r4, #8]
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	6022      	str	r2, [r4, #0]
 800da4e:	701e      	strb	r6, [r3, #0]
 800da50:	6962      	ldr	r2, [r4, #20]
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	429a      	cmp	r2, r3
 800da56:	d004      	beq.n	800da62 <__swbuf_r+0x5a>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	07db      	lsls	r3, r3, #31
 800da5c:	d506      	bpl.n	800da6c <__swbuf_r+0x64>
 800da5e:	2e0a      	cmp	r6, #10
 800da60:	d104      	bne.n	800da6c <__swbuf_r+0x64>
 800da62:	4621      	mov	r1, r4
 800da64:	4628      	mov	r0, r5
 800da66:	f7ff fd97 	bl	800d598 <_fflush_r>
 800da6a:	b938      	cbnz	r0, 800da7c <__swbuf_r+0x74>
 800da6c:	4638      	mov	r0, r7
 800da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f000 f806 	bl	800da84 <__swsetup_r>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d0d5      	beq.n	800da28 <__swbuf_r+0x20>
 800da7c:	f04f 37ff 	mov.w	r7, #4294967295
 800da80:	e7f4      	b.n	800da6c <__swbuf_r+0x64>
	...

0800da84 <__swsetup_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4b2a      	ldr	r3, [pc, #168]	; (800db30 <__swsetup_r+0xac>)
 800da88:	4605      	mov	r5, r0
 800da8a:	6818      	ldr	r0, [r3, #0]
 800da8c:	460c      	mov	r4, r1
 800da8e:	b118      	cbz	r0, 800da98 <__swsetup_r+0x14>
 800da90:	6a03      	ldr	r3, [r0, #32]
 800da92:	b90b      	cbnz	r3, 800da98 <__swsetup_r+0x14>
 800da94:	f7fd ff2e 	bl	800b8f4 <__sinit>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da9e:	0718      	lsls	r0, r3, #28
 800daa0:	d422      	bmi.n	800dae8 <__swsetup_r+0x64>
 800daa2:	06d9      	lsls	r1, r3, #27
 800daa4:	d407      	bmi.n	800dab6 <__swsetup_r+0x32>
 800daa6:	2309      	movs	r3, #9
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	f04f 30ff 	mov.w	r0, #4294967295
 800dab4:	e034      	b.n	800db20 <__swsetup_r+0x9c>
 800dab6:	0758      	lsls	r0, r3, #29
 800dab8:	d512      	bpl.n	800dae0 <__swsetup_r+0x5c>
 800daba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dabc:	b141      	cbz	r1, 800dad0 <__swsetup_r+0x4c>
 800dabe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dac2:	4299      	cmp	r1, r3
 800dac4:	d002      	beq.n	800dacc <__swsetup_r+0x48>
 800dac6:	4628      	mov	r0, r5
 800dac8:	f7fe ff0c 	bl	800c8e4 <_free_r>
 800dacc:	2300      	movs	r3, #0
 800dace:	6363      	str	r3, [r4, #52]	; 0x34
 800dad0:	89a3      	ldrh	r3, [r4, #12]
 800dad2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dad6:	81a3      	strh	r3, [r4, #12]
 800dad8:	2300      	movs	r3, #0
 800dada:	6063      	str	r3, [r4, #4]
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	6023      	str	r3, [r4, #0]
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	f043 0308 	orr.w	r3, r3, #8
 800dae6:	81a3      	strh	r3, [r4, #12]
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	b94b      	cbnz	r3, 800db00 <__swsetup_r+0x7c>
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daf6:	d003      	beq.n	800db00 <__swsetup_r+0x7c>
 800daf8:	4621      	mov	r1, r4
 800dafa:	4628      	mov	r0, r5
 800dafc:	f000 f884 	bl	800dc08 <__smakebuf_r>
 800db00:	89a0      	ldrh	r0, [r4, #12]
 800db02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db06:	f010 0301 	ands.w	r3, r0, #1
 800db0a:	d00a      	beq.n	800db22 <__swsetup_r+0x9e>
 800db0c:	2300      	movs	r3, #0
 800db0e:	60a3      	str	r3, [r4, #8]
 800db10:	6963      	ldr	r3, [r4, #20]
 800db12:	425b      	negs	r3, r3
 800db14:	61a3      	str	r3, [r4, #24]
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	b943      	cbnz	r3, 800db2c <__swsetup_r+0xa8>
 800db1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db1e:	d1c4      	bne.n	800daaa <__swsetup_r+0x26>
 800db20:	bd38      	pop	{r3, r4, r5, pc}
 800db22:	0781      	lsls	r1, r0, #30
 800db24:	bf58      	it	pl
 800db26:	6963      	ldrpl	r3, [r4, #20]
 800db28:	60a3      	str	r3, [r4, #8]
 800db2a:	e7f4      	b.n	800db16 <__swsetup_r+0x92>
 800db2c:	2000      	movs	r0, #0
 800db2e:	e7f7      	b.n	800db20 <__swsetup_r+0x9c>
 800db30:	20000158 	.word	0x20000158

0800db34 <_raise_r>:
 800db34:	291f      	cmp	r1, #31
 800db36:	b538      	push	{r3, r4, r5, lr}
 800db38:	4604      	mov	r4, r0
 800db3a:	460d      	mov	r5, r1
 800db3c:	d904      	bls.n	800db48 <_raise_r+0x14>
 800db3e:	2316      	movs	r3, #22
 800db40:	6003      	str	r3, [r0, #0]
 800db42:	f04f 30ff 	mov.w	r0, #4294967295
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800db4a:	b112      	cbz	r2, 800db52 <_raise_r+0x1e>
 800db4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db50:	b94b      	cbnz	r3, 800db66 <_raise_r+0x32>
 800db52:	4620      	mov	r0, r4
 800db54:	f000 f830 	bl	800dbb8 <_getpid_r>
 800db58:	462a      	mov	r2, r5
 800db5a:	4601      	mov	r1, r0
 800db5c:	4620      	mov	r0, r4
 800db5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db62:	f000 b817 	b.w	800db94 <_kill_r>
 800db66:	2b01      	cmp	r3, #1
 800db68:	d00a      	beq.n	800db80 <_raise_r+0x4c>
 800db6a:	1c59      	adds	r1, r3, #1
 800db6c:	d103      	bne.n	800db76 <_raise_r+0x42>
 800db6e:	2316      	movs	r3, #22
 800db70:	6003      	str	r3, [r0, #0]
 800db72:	2001      	movs	r0, #1
 800db74:	e7e7      	b.n	800db46 <_raise_r+0x12>
 800db76:	2400      	movs	r4, #0
 800db78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db7c:	4628      	mov	r0, r5
 800db7e:	4798      	blx	r3
 800db80:	2000      	movs	r0, #0
 800db82:	e7e0      	b.n	800db46 <_raise_r+0x12>

0800db84 <raise>:
 800db84:	4b02      	ldr	r3, [pc, #8]	; (800db90 <raise+0xc>)
 800db86:	4601      	mov	r1, r0
 800db88:	6818      	ldr	r0, [r3, #0]
 800db8a:	f7ff bfd3 	b.w	800db34 <_raise_r>
 800db8e:	bf00      	nop
 800db90:	20000158 	.word	0x20000158

0800db94 <_kill_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4d07      	ldr	r5, [pc, #28]	; (800dbb4 <_kill_r+0x20>)
 800db98:	2300      	movs	r3, #0
 800db9a:	4604      	mov	r4, r0
 800db9c:	4608      	mov	r0, r1
 800db9e:	4611      	mov	r1, r2
 800dba0:	602b      	str	r3, [r5, #0]
 800dba2:	f7f3 fdd9 	bl	8001758 <_kill>
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	d102      	bne.n	800dbb0 <_kill_r+0x1c>
 800dbaa:	682b      	ldr	r3, [r5, #0]
 800dbac:	b103      	cbz	r3, 800dbb0 <_kill_r+0x1c>
 800dbae:	6023      	str	r3, [r4, #0]
 800dbb0:	bd38      	pop	{r3, r4, r5, pc}
 800dbb2:	bf00      	nop
 800dbb4:	20006114 	.word	0x20006114

0800dbb8 <_getpid_r>:
 800dbb8:	f7f3 bdc6 	b.w	8001748 <_getpid>

0800dbbc <__swhatbuf_r>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	b096      	sub	sp, #88	; 0x58
 800dbc8:	4615      	mov	r5, r2
 800dbca:	461e      	mov	r6, r3
 800dbcc:	da0d      	bge.n	800dbea <__swhatbuf_r+0x2e>
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbd4:	f04f 0100 	mov.w	r1, #0
 800dbd8:	bf0c      	ite	eq
 800dbda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbde:	2340      	movne	r3, #64	; 0x40
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	6031      	str	r1, [r6, #0]
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	b016      	add	sp, #88	; 0x58
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
 800dbea:	466a      	mov	r2, sp
 800dbec:	f000 f848 	bl	800dc80 <_fstat_r>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	dbec      	blt.n	800dbce <__swhatbuf_r+0x12>
 800dbf4:	9901      	ldr	r1, [sp, #4]
 800dbf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dbfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dbfe:	4259      	negs	r1, r3
 800dc00:	4159      	adcs	r1, r3
 800dc02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc06:	e7eb      	b.n	800dbe0 <__swhatbuf_r+0x24>

0800dc08 <__smakebuf_r>:
 800dc08:	898b      	ldrh	r3, [r1, #12]
 800dc0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc0c:	079d      	lsls	r5, r3, #30
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460c      	mov	r4, r1
 800dc12:	d507      	bpl.n	800dc24 <__smakebuf_r+0x1c>
 800dc14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	6123      	str	r3, [r4, #16]
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	6163      	str	r3, [r4, #20]
 800dc20:	b002      	add	sp, #8
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	ab01      	add	r3, sp, #4
 800dc26:	466a      	mov	r2, sp
 800dc28:	f7ff ffc8 	bl	800dbbc <__swhatbuf_r>
 800dc2c:	9900      	ldr	r1, [sp, #0]
 800dc2e:	4605      	mov	r5, r0
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7fe fecb 	bl	800c9cc <_malloc_r>
 800dc36:	b948      	cbnz	r0, 800dc4c <__smakebuf_r+0x44>
 800dc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3c:	059a      	lsls	r2, r3, #22
 800dc3e:	d4ef      	bmi.n	800dc20 <__smakebuf_r+0x18>
 800dc40:	f023 0303 	bic.w	r3, r3, #3
 800dc44:	f043 0302 	orr.w	r3, r3, #2
 800dc48:	81a3      	strh	r3, [r4, #12]
 800dc4a:	e7e3      	b.n	800dc14 <__smakebuf_r+0xc>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	6020      	str	r0, [r4, #0]
 800dc50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc54:	81a3      	strh	r3, [r4, #12]
 800dc56:	9b00      	ldr	r3, [sp, #0]
 800dc58:	6163      	str	r3, [r4, #20]
 800dc5a:	9b01      	ldr	r3, [sp, #4]
 800dc5c:	6120      	str	r0, [r4, #16]
 800dc5e:	b15b      	cbz	r3, 800dc78 <__smakebuf_r+0x70>
 800dc60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc64:	4630      	mov	r0, r6
 800dc66:	f000 f81d 	bl	800dca4 <_isatty_r>
 800dc6a:	b128      	cbz	r0, 800dc78 <__smakebuf_r+0x70>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	f023 0303 	bic.w	r3, r3, #3
 800dc72:	f043 0301 	orr.w	r3, r3, #1
 800dc76:	81a3      	strh	r3, [r4, #12]
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	431d      	orrs	r5, r3
 800dc7c:	81a5      	strh	r5, [r4, #12]
 800dc7e:	e7cf      	b.n	800dc20 <__smakebuf_r+0x18>

0800dc80 <_fstat_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	; (800dca0 <_fstat_r+0x20>)
 800dc84:	2300      	movs	r3, #0
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	f7f3 fdc2 	bl	8001816 <_fstat>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	d102      	bne.n	800dc9c <_fstat_r+0x1c>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	b103      	cbz	r3, 800dc9c <_fstat_r+0x1c>
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	bd38      	pop	{r3, r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	20006114 	.word	0x20006114

0800dca4 <_isatty_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d06      	ldr	r5, [pc, #24]	; (800dcc0 <_isatty_r+0x1c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	f7f3 fdc1 	bl	8001836 <_isatty>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_isatty_r+0x1a>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_isatty_r+0x1a>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	20006114 	.word	0x20006114

0800dcc4 <_init>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr

0800dcd0 <_fini>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	bf00      	nop
 800dcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd6:	bc08      	pop	{r3}
 800dcd8:	469e      	mov	lr, r3
 800dcda:	4770      	bx	lr


IntroductionTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800b7d8  0800b7d8  0001b7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc4  0800bbc4  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbcc  0800bbcc  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbd0  0800bbd0  0001bbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800bbd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00001da8  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000206c  2000206c  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011475  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003163  00000000  00000000  000317ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee8  00000000  00000000  00034910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b37  00000000  00000000  000357f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002402e  00000000  00000000  0003632f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014b00  00000000  00000000  0005a35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8770  00000000  00000000  0006ee5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e0c  00000000  00000000  001375d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0013c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7c0 	.word	0x0800b7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800b7c0 	.word	0x0800b7c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f000 fb9b 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f813 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f000 f8a9 	bl	8001008 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb6:	f000 f879 	bl	8000fac <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000eba:	f007 f8e3 	bl	8008084 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int subtask = 2;  // Task can be 0, 1 or 2. Set this to switch between them.
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //task2(subtask);
	  task3(&hi2c1);
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <main+0x30>)
 8000ec4:	f000 fa90 	bl	80013e8 <task3>


	  HAL_Delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ecc:	f000 fbfc 	bl	80016c8 <HAL_Delay>
	  task3(&hi2c1);
 8000ed0:	e7f7      	b.n	8000ec2 <main+0x1e>
 8000ed2:	bf00      	nop
 8000ed4:	200002e0 	.word	0x200002e0

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f008 fb71 	bl	80095ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f4c:	23a8      	movs	r3, #168	; 0xa8
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 f903 	bl	8004168 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 f8bc 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2105      	movs	r1, #5
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fb64 	bl	8004658 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f96:	f000 f8a5 	bl	80010e4 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	; 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <MX_I2C1_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_I2C1_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fea:	f000 fe73 	bl	8001cd4 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 f876 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200002e0 	.word	0x200002e0
 8001000:	40005400 	.word	0x40005400
 8001004:	000186a0 	.word	0x000186a0

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_GPIO_Init+0xd0>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <MX_GPIO_Init+0xd4>)
 8001096:	f000 fde9 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_GPIO_Init+0xd8>)
 80010ae:	f000 fc41 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80010b2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0xd4>)
 80010cc:	f000 fc32 	bl	8001934 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40020000 	.word	0x40020000

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_MspInit+0x4c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x4c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_I2C_MspInit+0x84>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d12b      	bne.n	80011ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117e:	23c0      	movs	r3, #192	; 0xc0
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001182:	2312      	movs	r3, #18
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118e:	2304      	movs	r3, #4
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <HAL_I2C_MspInit+0x8c>)
 800119a:	f000 fbcb 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 80011a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_I2C_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 fa34 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <OTG_FS_IRQHandler+0x10>)
 800122a:	f001 fe91 	bl	8002f50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000181c 	.word	0x2000181c

08001238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_kill>:

int _kill(int pid, int sig)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001252:	f008 fa0f 	bl	8009674 <__errno>
 8001256:	4603      	mov	r3, r0
 8001258:	2216      	movs	r2, #22
 800125a:	601a      	str	r2, [r3, #0]
  return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_exit>:

void _exit (int status)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffe7 	bl	8001248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800127a:	e7fe      	b.n	800127a <_exit+0x12>

0800127c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e00a      	b.n	80012a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800128e:	f3af 8000 	nop.w
 8001292:	4601      	mov	r1, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	b2ca      	uxtb	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf0      	blt.n	800128e <_read+0x12>
  }

  return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e009      	b.n	80012dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf1      	blt.n	80012c8 <_write+0x12>
  }
  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_close>:

int _close(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_isatty>:

int _isatty(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f008 f974 	bl	8009674 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20020000 	.word	0x20020000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	20000334 	.word	0x20000334
 80013c0:	20002070 	.word	0x20002070

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <task3>:
#include "task3.h"


void task3(I2C_HandleTypeDef *hi2c1){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80013ee:	af02      	add	r7, sp, #8
 80013f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013f4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013f8:	6018      	str	r0, [r3, #0]

	// Variables
	const uint8_t tmp_address = (0b1001000)<<1;
 80013fa:	2390      	movs	r3, #144	; 0x90
 80013fc:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
	const uint8_t tmp_register = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402

	uint8_t buffer[1000]; // Reading 12 bits from temperature register
	buffer[0] = tmp_register; // Read from tmp register.
 8001406:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800140a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800140e:	f897 2402 	ldrb.w	r2, [r7, #1026]	; 0x402
 8001412:	701a      	strb	r2, [r3, #0]
	int temp_in_celcius = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404


	// Send read temperature command
	int ret = HAL_I2C_Master_Transmit(hi2c1, tmp_address, buffer, 1, HAL_MAX_DELAY);
 800141a:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 800141e:	b299      	uxth	r1, r3
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001428:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	6800      	ldr	r0, [r0, #0]
 8001436:	f000 fd91 	bl	8001f5c <HAL_I2C_Master_Transmit>
 800143a:	4603      	mov	r3, r0
 800143c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	if (ret != HAL_OK ){
 8001440:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 8095 	bne.w	8001574 <task3+0x18c>
		return;
	}

	// Receive raw temperature measurement
	ret = HAL_I2C_Master_Receive(hi2c1, tmp_address, buffer, 2, HAL_MAX_DELAY);
 800144a:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 800144e:	b299      	uxth	r1, r3
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001458:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2302      	movs	r3, #2
 8001464:	6800      	ldr	r0, [r0, #0]
 8001466:	f000 fe77 	bl	8002158 <HAL_I2C_Master_Receive>
 800146a:	4603      	mov	r3, r0
 800146c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	if (ret != HAL_OK ){
 8001470:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001474:	2b00      	cmp	r3, #0
 8001476:	d17f      	bne.n	8001578 <task3+0x190>
		return;
	}

	// Compute temperature in celcius.

	uint16_t temperature = (((uint16_t)buffer[0])<<4) | (((uint16_t)buffer[1])>>4); // Assume all bits are zero except the ones we occupy for tmp?
 8001478:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800147c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	b21a      	sxth	r2, r3
 8001486:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800148a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	b2db      	uxtb	r3, r3
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21b      	sxth	r3, r3
 800149a:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	if ((temperature & 0x1000) == 0x1000 ){
 800149e:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80014a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01b      	beq.n	80014e2 <task3+0xfa>
		// Temperature is negative
		// First compute the two's complement.
		uint16_t temp_twos_complement = (~temperature) + 1;
 80014aa:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80014ae:	425b      	negs	r3, r3
 80014b0:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8
		// Use conversion and set to negative
		temp_in_celcius = -((int)temp_twos_complement*0.0625);
 80014b4:	f8b7 33f8 	ldrh.w	r3, [r7, #1016]	; 0x3f8
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f833 	bl	8000524 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <task3+0x19c>)
 80014c4:	f7ff f898 	bl	80005f8 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff fb3f 	bl	8000b58 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80014e0:	e012      	b.n	8001508 <task3+0x120>
	} else{
		// Temperature is positive
		// Using simple conversion model to compute the temperature in celcius from raw temperature data.
		temp_in_celcius = (int)temperature*0.0625;
 80014e2:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f81c 	bl	8000524 <__aeabi_i2d>
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <task3+0x19c>)
 80014f2:	f7ff f881 	bl	80005f8 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb2b 	bl	8000b58 <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	}

	if (temp_in_celcius>27){
 8001508:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800150c:	2b1b      	cmp	r3, #27
 800150e:	dd05      	ble.n	800151c <task3+0x134>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001514:	481c      	ldr	r0, [pc, #112]	; (8001588 <task3+0x1a0>)
 8001516:	f000 fbc2 	bl	8001c9e <HAL_GPIO_TogglePin>
 800151a:	e012      	b.n	8001542 <task3+0x15a>
	}else if(temp_in_celcius<27){
 800151c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001520:	2b1a      	cmp	r3, #26
 8001522:	dc05      	bgt.n	8001530 <task3+0x148>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <task3+0x1a0>)
 800152a:	f000 fbb8 	bl	8001c9e <HAL_GPIO_TogglePin>
 800152e:	e008      	b.n	8001542 <task3+0x15a>
	}else if (temp_in_celcius==27){
 8001530:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001534:	2b1b      	cmp	r3, #27
 8001536:	d104      	bne.n	8001542 <task3+0x15a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <task3+0x1a0>)
 800153e:	f000 fbae 	bl	8001c9e <HAL_GPIO_TogglePin>
	}

	sprintf((char*) &buffer, "Temperature is %d \r\n", temp_in_celcius); // Store string in buffer
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 800154a:	4910      	ldr	r1, [pc, #64]	; (800158c <task3+0x1a4>)
 800154c:	4618      	mov	r0, r3
 800154e:	f007 ffdb 	bl	8009508 <siprintf>
	size_t length = strlen((char*) &buffer); // Extract size of string. Need \r\n to give proper length of string.
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fe8a 	bl	8000270 <strlen>
 800155c:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	CDC_Transmit_FS(buffer, length); // Transmit temperature data over USB.
 8001560:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001564:	b29a      	uxth	r2, r3
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fe47 	bl	8008200 <CDC_Transmit_FS>
 8001572:	e002      	b.n	800157a <task3+0x192>
		return;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <task3+0x192>
		return;
 8001578:	bf00      	nop
}
 800157a:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	3fb00000 	.word	0x3fb00000
 8001588:	40020c00 	.word	0x40020c00
 800158c:	0800b7d8 	.word	0x0800b7d8

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001594:	f7ff ff16 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f008 f85f 	bl	8009680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fc6f 	bl	8000ea4 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80015d4:	0800bbd4 	.word	0x0800bbd4
  ldr r2, =_sbss
 80015d8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80015dc:	2000206c 	.word	0x2000206c

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f94f 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fd6a 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f967 	bl	800191a <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f92f 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000338 	.word	0x20000338

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000338 	.word	0x20000338

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff29 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff3e 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff31 	bl	8001774 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa2 	bl	800186c <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e16b      	b.n	8001c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 815a 	bne.w	8001c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80b4 	beq.w	8001c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x216>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x212>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x20e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	; (8001c64 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20a>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00e      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae90 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fa20 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f002 fe86 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	; (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fb9e 	bl	80016b0 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 80e0 	bne.w	8002144 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4970      	ldr	r1, [pc, #448]	; (8002150 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fc64 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e0d3      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Master_Transmit+0x50>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0cc      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	; 0x21
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_I2C_Master_Transmit+0x1f8>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 face 	bl	80025bc <I2C_MasterRequestWrite>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e08d      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002040:	e066      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fd22 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b04      	cmp	r3, #4
 8002058:	d107      	bne.n	800206a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11b      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d017      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6a39      	ldr	r1, [r7, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fd19 	bl	8002b20 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01a      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d194      	bne.n	8002042 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	00100002 	.word	0x00100002
 8002154:	ffff0000 	.word	0xffff0000

08002158 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	461a      	mov	r2, r3
 8002164:	460b      	mov	r3, r1
 8002166:	817b      	strh	r3, [r7, #10]
 8002168:	4613      	mov	r3, r2
 800216a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff faa0 	bl	80016b0 <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 8217 	bne.w	80025ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2319      	movs	r3, #25
 8002186:	2201      	movs	r2, #1
 8002188:	497c      	ldr	r1, [pc, #496]	; (800237c <HAL_I2C_Master_Receive+0x224>)
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fb66 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	e20a      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2C_Master_Receive+0x50>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e203      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d007      	beq.n	80021ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2222      	movs	r2, #34	; 0x22
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2210      	movs	r2, #16
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	893a      	ldrh	r2, [r7, #8]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <HAL_I2C_Master_Receive+0x228>)
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa52 	bl	80026c0 <I2C_MasterRequestRead>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1c4      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d113      	bne.n	8002256 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e198      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b01      	cmp	r3, #1
 800225c:	d11b      	bne.n	8002296 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e178      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11b      	bne.n	80022d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	e158      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022fc:	e144      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	2b03      	cmp	r3, #3
 8002304:	f200 80f1 	bhi.w	80024ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	2b01      	cmp	r3, #1
 800230e:	d123      	bne.n	8002358 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fc4b 	bl	8002bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e145      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002356:	e117      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b02      	cmp	r3, #2
 800235e:	d14e      	bne.n	80023fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	2200      	movs	r2, #0
 8002368:	4906      	ldr	r1, [pc, #24]	; (8002384 <HAL_I2C_Master_Receive+0x22c>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa76 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e11a      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000
 8002384:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fc:	e0c4      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	2200      	movs	r2, #0
 8002406:	496c      	ldr	r1, [pc, #432]	; (80025b8 <HAL_I2C_Master_Receive+0x460>)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fa27 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0cb      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2200      	movs	r2, #0
 8002462:	4955      	ldr	r1, [pc, #340]	; (80025b8 <HAL_I2C_Master_Receive+0x460>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f9f9 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e09d      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e8:	e04e      	b.n	8002588 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fb5e 	bl	8002bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e058      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d124      	bne.n	8002588 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b03      	cmp	r3, #3
 8002544:	d107      	bne.n	8002556 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f aeb6 	bne.w	80022fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	00010004 	.word	0x00010004

080025bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d006      	beq.n	80025e6 <I2C_MasterRequestWrite+0x2a>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d003      	beq.n	80025e6 <I2C_MasterRequestWrite+0x2a>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e4:	d108      	bne.n	80025f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e00b      	b.n	8002610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b12      	cmp	r3, #18
 80025fe:	d107      	bne.n	8002610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f91d 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d103      	bne.n	8002640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e035      	b.n	80026b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264c:	d108      	bne.n	8002660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	e01b      	b.n	8002698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	11db      	asrs	r3, r3, #7
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 0306 	and.w	r3, r3, #6
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f063 030f 	orn	r3, r3, #15
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <I2C_MasterRequestWrite+0xfc>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f966 	bl	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e010      	b.n	80026b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <I2C_MasterRequestWrite+0x100>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f956 	bl	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	00010008 	.word	0x00010008
 80026bc:	00010002 	.word	0x00010002

080026c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d006      	beq.n	80026fa <I2C_MasterRequestRead+0x3a>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <I2C_MasterRequestRead+0x3a>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e00b      	b.n	8002724 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	2b11      	cmp	r3, #17
 8002712:	d107      	bne.n	8002724 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f893 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d103      	bne.n	8002754 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e079      	b.n	800284c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e05f      	b.n	8002834 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	11db      	asrs	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f063 030f 	orn	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4930      	ldr	r1, [pc, #192]	; (8002854 <I2C_MasterRequestRead+0x194>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f8dc 	bl	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e054      	b.n	800284c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4929      	ldr	r1, [pc, #164]	; (8002858 <I2C_MasterRequestRead+0x198>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8cc 	bl	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e044      	b.n	800284c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f831 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d103      	bne.n	8002818 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e017      	b.n	800284c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	11db      	asrs	r3, r3, #7
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0306 	and.w	r3, r3, #6
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f063 030e 	orn	r3, r3, #14
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4907      	ldr	r1, [pc, #28]	; (8002858 <I2C_MasterRequestRead+0x198>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f888 	bl	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	00010008 	.word	0x00010008
 8002858:	00010002 	.word	0x00010002

0800285c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286c:	e048      	b.n	8002900 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d044      	beq.n	8002900 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe ff1b 	bl	80016b0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d139      	bne.n	8002900 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10d      	bne.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	e00c      	b.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	43da      	mvns	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d116      	bne.n	8002900 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e023      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10d      	bne.n	8002926 <I2C_WaitOnFlagUntilTimeout+0xca>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	43da      	mvns	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4013      	ands	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	e00c      	b.n	8002940 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	43da      	mvns	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	429a      	cmp	r2, r3
 8002944:	d093      	beq.n	800286e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800295e:	e071      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d123      	bne.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e067      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d041      	beq.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c0:	f7fe fe76 	bl	80016b0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d302      	bcc.n	80029d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d136      	bne.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10c      	bne.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e00b      	b.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	43da      	mvns	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4013      	ands	r3, r2
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e021      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d10c      	bne.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	43da      	mvns	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf14      	ite	ne
 8002a60:	2301      	movne	r3, #1
 8002a62:	2300      	moveq	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e00b      	b.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f af6d 	bne.w	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9c:	e034      	b.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8e3 	bl	8002c6a <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e034      	b.n	8002b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d028      	beq.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fdfb 	bl	80016b0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d016      	beq.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d1c3      	bne.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2c:	e034      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f89b 	bl	8002c6a <I2C_IsAcknowledgeFailed>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e034      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d028      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe fdb3 	bl	80016b0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11d      	bne.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d016      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e007      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d1c3      	bne.n	8002b2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bbc:	e049      	b.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d119      	bne.n	8002c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e030      	b.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c00:	f7fe fd56 	bl	80016b0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d016      	beq.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e007      	b.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d1ae      	bne.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d11b      	bne.n	8002cba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e101      	b.n	8002ede <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f005 fbcb 	bl	8008490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d08:	d102      	bne.n	8002d10 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 ffc2 	bl	8004c9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7c1a      	ldrb	r2, [r3, #16]
 8002d22:	f88d 2000 	strb.w	r2, [sp]
 8002d26:	3304      	adds	r3, #4
 8002d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2a:	f001 fea1 	bl	8004a70 <USB_CoreInit>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0ce      	b.n	8002ede <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 ffba 	bl	8004cc0 <USB_SetCurrentMode>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0bf      	b.n	8002ede <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e04a      	b.n	8002dfa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3315      	adds	r3, #21
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3314      	adds	r3, #20
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	b298      	uxth	r0, r3
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	332e      	adds	r3, #46	; 0x2e
 8002da0:	4602      	mov	r2, r0
 8002da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3318      	adds	r3, #24
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	331c      	adds	r3, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3320      	adds	r3, #32
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	3301      	adds	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	791b      	ldrb	r3, [r3, #4]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d3af      	bcc.n	8002d64 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e044      	b.n	8002e94 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	3301      	adds	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	791b      	ldrb	r3, [r3, #4]
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d3b5      	bcc.n	8002e0a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7c1a      	ldrb	r2, [r3, #16]
 8002ea6:	f88d 2000 	strb.w	r2, [sp]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eae:	f001 ff53 	bl	8004d58 <USB_DevInit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00c      	b.n	8002ede <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 ff97 	bl	8005e0a <USB_DevDisconnect>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_Start+0x1c>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e022      	b.n	8002f48 <HAL_PCD_Start+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fea4 	bl	8004c7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 ff45 	bl	8005dc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b08d      	sub	sp, #52	; 0x34
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 f803 	bl	8005f72 <USB_GetMode>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 848c 	bne.w	800388c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 ff67 	bl	8005e4c <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8482 	beq.w	800388a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 ff54 	bl	8005e4c <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d107      	bne.n	8002fbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f002 0202 	and.w	r2, r2, #2
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 ff42 	bl	8005e4c <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d161      	bne.n	8003096 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0210 	bic.w	r2, r2, #16
 8002fe0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	0c5b      	lsrs	r3, r3, #17
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	2b02      	cmp	r3, #2
 800300c:	d124      	bne.n	8003058 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d035      	beq.n	8003086 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	6a38      	ldr	r0, [r7, #32]
 800302e:	f002 fd79 	bl	8005b24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800303e:	441a      	add	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003050:	441a      	add	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	615a      	str	r2, [r3, #20]
 8003056:	e016      	b.n	8003086 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	0c5b      	lsrs	r3, r3, #17
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	2b06      	cmp	r3, #6
 8003062:	d110      	bne.n	8003086 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800306a:	2208      	movs	r2, #8
 800306c:	4619      	mov	r1, r3
 800306e:	6a38      	ldr	r0, [r7, #32]
 8003070:	f002 fd58 	bl	8005b24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003080:	441a      	add	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0210 	orr.w	r2, r2, #16
 8003094:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fed6 	bl	8005e4c <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030aa:	f040 80a7 	bne.w	80031fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fedb 	bl	8005e72 <USB_ReadDevAllOutEpInterrupt>
 80030bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030be:	e099      	b.n	80031f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 808e 	beq.w	80031e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 feff 	bl	8005eda <USB_ReadDevOutEPInterrupt>
 80030dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00c      	beq.n	8003102 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	461a      	mov	r2, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fea1 	bl	8003e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	2308      	movs	r3, #8
 800311c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800311e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 ff77 	bl	8004014 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	2310      	movs	r3, #16
 8003140:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d030      	beq.n	80031ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d109      	bne.n	800316c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800316a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	78db      	ldrb	r3, [r3, #3]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f005 fa80 	bl	800869c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	461a      	mov	r2, r3
 80031aa:	2302      	movs	r3, #2
 80031ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	2320      	movs	r3, #32
 80031c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	3301      	adds	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f47f af62 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fe23 	bl	8005e4c <USB_ReadInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003210:	f040 80db 	bne.w	80033ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fe44 	bl	8005ea6 <USB_ReadDevAllInEpInterrupt>
 800321e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003224:	e0cd      	b.n	80033c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80c2 	beq.w	80033b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f002 fe6a 	bl	8005f16 <USB_ReadDevInEPInterrupt>
 8003242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d057      	beq.n	80032fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2201      	movs	r2, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	69f9      	ldr	r1, [r7, #28]
 800326a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326e:	4013      	ands	r3, r2
 8003270:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	2301      	movs	r3, #1
 8003282:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	799b      	ldrb	r3, [r3, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d132      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3320      	adds	r3, #32
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4403      	add	r3, r0
 80032ac:	331c      	adds	r3, #28
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4419      	add	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3320      	adds	r3, #32
 80032c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d113      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x3a2>
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3324      	adds	r3, #36	; 0x24
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d108      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032ea:	461a      	mov	r2, r3
 80032ec:	2101      	movs	r1, #1
 80032ee:	f002 fe71 	bl	8005fd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f005 f94a 	bl	8008592 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003314:	461a      	mov	r2, r3
 8003316:	2308      	movs	r3, #8
 8003318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	461a      	mov	r2, r3
 8003332:	2310      	movs	r3, #16
 8003334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334c:	461a      	mov	r2, r3
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800335c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335e:	6a38      	ldr	r0, [r7, #32]
 8003360:	f001 fe5e 	bl	8005020 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	3310      	adds	r3, #16
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	78db      	ldrb	r3, [r3, #3]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f005 f997 	bl	80086c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	461a      	mov	r2, r3
 80033a0:	2302      	movs	r3, #2
 80033a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fcbb 	bl	8003d2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f af2e 	bne.w	8003226 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fd3c 	bl	8005e4c <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033de:	d122      	bne.n	8003426 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d108      	bne.n	8003410 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003406:	2100      	movs	r1, #0
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fea1 	bl	8004150 <HAL_PCDEx_LPM_Callback>
 800340e:	e002      	b.n	8003416 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f005 f935 	bl	8008680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f002 fd0e 	bl	8005e4c <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d112      	bne.n	8003462 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d102      	bne.n	8003452 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f005 f8f1 	bl	8008634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003460:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f002 fcf0 	bl	8005e4c <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	f040 80b7 	bne.w	80035e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2110      	movs	r1, #16
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fdc3 	bl	8005020 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349e:	e046      	b.n	800352e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	461a      	mov	r2, r3
 80034ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	461a      	mov	r2, r3
 80034e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003506:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003526:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	3301      	adds	r3, #1
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	791b      	ldrb	r3, [r3, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	4293      	cmp	r3, r2
 8003538:	d3b2      	bcc.n	80034a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003548:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800354c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7bdb      	ldrb	r3, [r3, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003566:	f043 030b 	orr.w	r3, r3, #11
 800356a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357c:	f043 030b 	orr.w	r3, r3, #11
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	e015      	b.n	80035b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003596:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800359a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035aa:	f043 030b 	orr.w	r3, r3, #11
 80035ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f002 fcfe 	bl	8005fd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 fc2d 	bl	8005e4c <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fc:	d123      	bne.n	8003646 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f002 fcc3 	bl	8005f8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fd80 	bl	8005112 <USB_GetDevSpeed>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681c      	ldr	r4, [r3, #0]
 800361e:	f001 fa07 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8003622:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003628:	461a      	mov	r2, r3
 800362a:	4620      	mov	r0, r4
 800362c:	f001 fa84 	bl	8004b38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f004 ffd6 	bl	80085e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003644:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fbfe 	bl	8005e4c <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d10a      	bne.n	8003670 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 ffb3 	bl	80085c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f002 0208 	and.w	r2, r2, #8
 800366e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f002 fbe9 	bl	8005e4c <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d123      	bne.n	80036cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	e014      	b.n	80036c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb08 	bl	8003cca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d3e4      	bcc.n	8003696 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fbbb 	bl	8005e4c <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e0:	d13c      	bne.n	800375c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e02b      	b.n	8003740 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3318      	adds	r3, #24
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d115      	bne.n	800373a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800370e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	da12      	bge.n	800373a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3317      	adds	r3, #23
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fac8 	bl	8003cca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	3301      	adds	r3, #1
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	461a      	mov	r2, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	4293      	cmp	r3, r2
 800374a:	d3cd      	bcc.n	80036e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800375a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fb73 	bl	8005e4c <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003770:	d156      	bne.n	8003820 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003772:	2301      	movs	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e045      	b.n	8003804 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d12e      	bne.n	80037fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da2b      	bge.n	80037fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80037b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d121      	bne.n	80037fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fa:	6053      	str	r3, [r2, #4]
            break;
 80037fc:	e008      	b.n	8003810 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	791b      	ldrb	r3, [r3, #4]
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	4293      	cmp	r3, r2
 800380e:	d3b3      	bcc.n	8003778 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800381e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fb11 	bl	8005e4c <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d10a      	bne.n	800384c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f004 ff54 	bl	80086e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fafb 	bl	8005e4c <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d115      	bne.n	800388c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f004 ff44 	bl	8008700 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e000      	b.n	800388c <HAL_PCD_IRQHandler+0x93c>
      return;
 800388a:	bf00      	nop
    }
  }
}
 800388c:	3734      	adds	r7, #52	; 0x34
 800388e:	46bd      	mov	sp, r7
 8003890:	bd90      	pop	{r4, r7, pc}

08003892 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_PCD_SetAddress+0x1a>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e012      	b.n	80038d2 <HAL_PCD_SetAddress+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 fa5a 	bl	8005d7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	4608      	mov	r0, r1
 80038e4:	4611      	mov	r1, r2
 80038e6:	461a      	mov	r2, r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	460b      	mov	r3, r1
 80038ee:	803b      	strh	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da0f      	bge.n	8003920 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3310      	adds	r3, #16
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	705a      	strb	r2, [r3, #1]
 800391e:	e00f      	b.n	8003940 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800394c:	883a      	ldrh	r2, [r7, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	78ba      	ldrb	r2, [r7, #2]
 8003956:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800396a:	78bb      	ldrb	r3, [r7, #2]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d102      	bne.n	8003976 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_PCD_EP_Open+0xaa>
 8003980:	2302      	movs	r3, #2
 8003982:	e00e      	b.n	80039a2 <HAL_PCD_EP_Open+0xc8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fbe2 	bl	800515c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80039a0:	7afb      	ldrb	r3, [r7, #11]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da0f      	bge.n	80039de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	3310      	adds	r3, #16
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	3304      	adds	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	705a      	strb	r2, [r3, #1]
 80039dc:	e00f      	b.n	80039fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_PCD_EP_Close+0x6e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e00e      	b.n	8003a36 <HAL_PCD_EP_Close+0x8c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 fc20 	bl	800526c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	799b      	ldrb	r3, [r3, #6]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	799b      	ldrb	r3, [r3, #6]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	f001 fcbd 	bl	8005424 <USB_EPStartXfer>

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	460b      	mov	r3, r1
 8003af2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3310      	adds	r3, #16
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2201      	movs	r2, #1
 8003b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	799b      	ldrb	r3, [r3, #6]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	799b      	ldrb	r3, [r3, #6]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6979      	ldr	r1, [r7, #20]
 8003b4a:	f001 fc6b 	bl	8005424 <USB_EPStartXfer>

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	7912      	ldrb	r2, [r2, #4]
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e04f      	b.n	8003c16 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da0f      	bge.n	8003b9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	3304      	adds	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	705a      	strb	r2, [r3, #1]
 8003b9c:	e00d      	b.n	8003bba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_PCD_EP_SetStall+0x82>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e01d      	b.n	8003c16 <HAL_PCD_EP_SetStall+0xbe>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fff3 	bl	8005bd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7999      	ldrb	r1, [r3, #6]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c06:	461a      	mov	r2, r3
 8003c08:	f002 f9e4 	bl	8005fd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	7912      	ldrb	r2, [r2, #4]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e042      	b.n	8003cc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	da0f      	bge.n	8003c64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	f003 020f 	and.w	r2, r3, #15
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3310      	adds	r3, #16
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	4413      	add	r3, r2
 8003c58:	3304      	adds	r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	705a      	strb	r2, [r3, #1]
 8003c62:	e00f      	b.n	8003c84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 020f 	and.w	r2, r3, #15
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_PCD_EP_ClrStall+0x86>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e00e      	b.n	8003cc2 <HAL_PCD_EP_ClrStall+0xa4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 fffc 	bl	8005cb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0c      	bge.n	8003cf8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 020f 	and.w	r2, r3, #15
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	3310      	adds	r3, #16
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e00c      	b.n	8003d12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3304      	adds	r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fe1b 	bl	8005954 <USB_EPStopXfer>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d22:	7afb      	ldrb	r3, [r7, #11]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d901      	bls.n	8003d64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e06b      	b.n	8003e3c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d902      	bls.n	8003d80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3303      	adds	r3, #3
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d88:	e02a      	b.n	8003de0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d902      	bls.n	8003da6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3303      	adds	r3, #3
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f001 fe70 	bl	8005aa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	441a      	add	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d809      	bhi.n	8003e0a <PCD_WriteEmptyTxFifo+0xde>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d203      	bcs.n	8003e0a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1bf      	bne.n	8003d8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d811      	bhi.n	8003e3a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e36:	4013      	ands	r3, r2
 8003e38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	333c      	adds	r3, #60	; 0x3c
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	799b      	ldrb	r3, [r3, #6]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d17b      	bne.n	8003f72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4a61      	ldr	r2, [pc, #388]	; (800400c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	f240 80b9 	bls.w	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80b3 	beq.w	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eac:	6093      	str	r3, [r2, #8]
 8003eae:	e0a7      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2320      	movs	r3, #32
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	e098      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 8093 	bne.w	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a4b      	ldr	r2, [pc, #300]	; (800400c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d90f      	bls.n	8003f02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efe:	6093      	str	r3, [r2, #8]
 8003f00:	e07e      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	0159      	lsls	r1, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d114      	bne.n	8003f64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f002 f840 	bl	8005fd4 <USB_EP0_OutStart>
 8003f54:	e006      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f004 faf6 	bl	800855c <HAL_PCD_DataOutStageCallback>
 8003f70:	e046      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4a26      	ldr	r2, [pc, #152]	; (8004010 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d124      	bne.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	461a      	mov	r2, r3
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	e032      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f004 facd 	bl	800855c <HAL_PCD_DataOutStageCallback>
 8003fc2:	e01d      	b.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d114      	bne.n	8003ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f001 fff0 	bl	8005fd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f004 faae 	bl	800855c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	4f54300a 	.word	0x4f54300a
 8004010:	4f54310a 	.word	0x4f54310a

08004014 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	333c      	adds	r3, #60	; 0x3c
 800402c:	3304      	adds	r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90e      	bls.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f004 fa65 	bl	8008538 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d90c      	bls.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	799b      	ldrb	r3, [r3, #6]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	f001 ffa2 	bl	8005fd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	4f54300a 	.word	0x4f54300a

080040a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
 80040ac:	4613      	mov	r3, r2
 80040ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040be:	883b      	ldrh	r3, [r7, #0]
 80040c0:	0419      	lsls	r1, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
 80040cc:	e028      	b.n	8004120 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e00d      	b.n	80040fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	3b01      	subs	r3, #1
 8004104:	429a      	cmp	r2, r3
 8004106:	d3ec      	bcc.n	80040e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004108:	883b      	ldrh	r3, [r7, #0]
 800410a:	0418      	lsls	r0, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	3b01      	subs	r3, #1
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4302      	orrs	r2, r0
 8004118:	3340      	adds	r3, #64	; 0x40
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e267      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b82      	ldr	r3, [pc, #520]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b7e      	ldr	r3, [pc, #504]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e242      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a75      	ldr	r2, [pc, #468]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b70      	ldr	r3, [pc, #448]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6f      	ldr	r2, [pc, #444]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6c      	ldr	r2, [pc, #432]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b69      	ldr	r3, [pc, #420]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a68      	ldr	r2, [pc, #416]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fd fa46 	bl	80016b0 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd fa42 	bl	80016b0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e207      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fa32 	bl	80016b0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fa2e 	bl	80016b0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1f3      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1c7      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b34      	ldr	r3, [pc, #208]	; (80043ac <HAL_RCC_OscConfig+0x244>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd f9e7 	bl	80016b0 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fd f9e3 	bl	80016b0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1a8      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4925      	ldr	r1, [pc, #148]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_OscConfig+0x244>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd f9c6 	bl	80016b0 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd f9c2 	bl	80016b0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e187      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d036      	beq.n	80043c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_RCC_OscConfig+0x248>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd f9a6 	bl	80016b0 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fd f9a2 	bl	80016b0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e167      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_OscConfig+0x240>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e01b      	b.n	80043c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_OscConfig+0x248>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd f98f 	bl	80016b0 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e00e      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd f98b 	bl	80016b0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d907      	bls.n	80043b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e150      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	42470000 	.word	0x42470000
 80043b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ea      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8097 	beq.w	80044fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b81      	ldr	r3, [pc, #516]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a7c      	ldr	r2, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b7a      	ldr	r3, [pc, #488]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b77      	ldr	r3, [pc, #476]	; (80045dc <HAL_RCC_OscConfig+0x474>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b74      	ldr	r3, [pc, #464]	; (80045dc <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a73      	ldr	r2, [pc, #460]	; (80045dc <HAL_RCC_OscConfig+0x474>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7fd f94b 	bl	80016b0 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fd f947 	bl	80016b0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e10c      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <HAL_RCC_OscConfig+0x474>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x2ea>
 8004444:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	4a63      	ldr	r2, [pc, #396]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	; 0x70
 8004450:	e01c      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x30c>
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a5e      	ldr	r2, [pc, #376]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	4b5c      	ldr	r3, [pc, #368]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a5b      	ldr	r2, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004474:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a57      	ldr	r2, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
 8004480:	4b55      	ldr	r3, [pc, #340]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a54      	ldr	r2, [pc, #336]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0304 	bic.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd f90c 	bl	80016b0 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd f908 	bl	80016b0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0cb      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <HAL_RCC_OscConfig+0x334>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c0:	f7fd f8f6 	bl	80016b0 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fd f8f2 	bl	80016b0 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0b5      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	4b3e      	ldr	r3, [pc, #248]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ee      	bne.n	80044c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a1 	beq.w	8004648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d05c      	beq.n	80045cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d141      	bne.n	800459e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_RCC_OscConfig+0x478>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd f8c6 	bl	80016b0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd f8c2 	bl	80016b0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e087      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	491b      	ldr	r1, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd f89b 	bl	80016b0 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457e:	f7fd f897 	bl	80016b0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e05c      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x416>
 800459c:	e054      	b.n	8004648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_RCC_OscConfig+0x478>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd f884 	bl	80016b0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd f880 	bl	80016b0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e045      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x444>
 80045ca:	e03d      	b.n	8004648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e038      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4ec>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d028      	beq.n	8004644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d121      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d11a      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	4293      	cmp	r3, r2
 800461e:	d111      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d107      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b68      	ldr	r3, [pc, #416]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90c      	bls.n	8004694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b63      	ldr	r3, [pc, #396]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0b8      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d0:	4b50      	ldr	r3, [pc, #320]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	494d      	ldr	r1, [pc, #308]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d044      	beq.n	8004778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d119      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e07f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d003      	beq.n	8004716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e067      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004736:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004748:	f7fc ffb2 	bl	80016b0 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	e00a      	b.n	8004766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004750:	f7fc ffae 	bl	80016b0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e04f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 020c 	and.w	r2, r3, #12
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d1eb      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d20c      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e032      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4916      	ldr	r1, [pc, #88]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ca:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	490e      	ldr	r1, [pc, #56]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047de:	f000 f821 	bl	8004824 <HAL_RCC_GetSysClockFreq>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	490a      	ldr	r1, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	5ccb      	ldrb	r3, [r1, r3]
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc ff12 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023c00 	.word	0x40023c00
 8004814:	40023800 	.word	0x40023800
 8004818:	0800b838 	.word	0x0800b838
 800481c:	20000000 	.word	0x20000000
 8004820:	20000004 	.word	0x20000004

08004824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b094      	sub	sp, #80	; 0x50
 800482a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
 8004830:	2300      	movs	r3, #0
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	2300      	movs	r3, #0
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800483c:	4b79      	ldr	r3, [pc, #484]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d00d      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x40>
 8004848:	2b08      	cmp	r3, #8
 800484a:	f200 80e1 	bhi.w	8004a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x34>
 8004852:	2b04      	cmp	r3, #4
 8004854:	d003      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x3a>
 8004856:	e0db      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b73      	ldr	r3, [pc, #460]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x204>)
 800485a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800485c:	e0db      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485e:	4b73      	ldr	r3, [pc, #460]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004862:	e0d8      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004864:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486e:	4b6d      	ldr	r3, [pc, #436]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d063      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487a:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	2200      	movs	r2, #0
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
 8004884:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	2300      	movs	r3, #0
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
 8004892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	0159      	lsls	r1, r3, #5
 80048a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a8:	0150      	lsls	r0, r2, #5
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4621      	mov	r1, r4
 80048b0:	1a51      	subs	r1, r2, r1
 80048b2:	6139      	str	r1, [r7, #16]
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c8:	4659      	mov	r1, fp
 80048ca:	018b      	lsls	r3, r1, #6
 80048cc:	4651      	mov	r1, sl
 80048ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d2:	4651      	mov	r1, sl
 80048d4:	018a      	lsls	r2, r1, #6
 80048d6:	4651      	mov	r1, sl
 80048d8:	ebb2 0801 	subs.w	r8, r2, r1
 80048dc:	4659      	mov	r1, fp
 80048de:	eb63 0901 	sbc.w	r9, r3, r1
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f6:	4690      	mov	r8, r2
 80048f8:	4699      	mov	r9, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	eb18 0303 	adds.w	r3, r8, r3
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	462b      	mov	r3, r5
 8004904:	eb49 0303 	adc.w	r3, r9, r3
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004916:	4629      	mov	r1, r5
 8004918:	024b      	lsls	r3, r1, #9
 800491a:	4621      	mov	r1, r4
 800491c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004920:	4621      	mov	r1, r4
 8004922:	024a      	lsls	r2, r1, #9
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800492a:	2200      	movs	r2, #0
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
 800492e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004934:	f7fc f938 	bl	8000ba8 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4613      	mov	r3, r2
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	e058      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	4611      	mov	r1, r2
 800494e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
 8004958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	0159      	lsls	r1, r3, #5
 800496a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496e:	0150      	lsls	r0, r2, #5
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4641      	mov	r1, r8
 8004976:	ebb2 0a01 	subs.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800498c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004994:	ebb2 040a 	subs.w	r4, r2, sl
 8004998:	eb63 050b 	sbc.w	r5, r3, fp
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	00eb      	lsls	r3, r5, #3
 80049a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	4614      	mov	r4, r2
 80049ae:	461d      	mov	r5, r3
 80049b0:	4643      	mov	r3, r8
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb45 0303 	adc.w	r3, r5, r3
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ca:	4629      	mov	r1, r5
 80049cc:	028b      	lsls	r3, r1, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d4:	4621      	mov	r1, r4
 80049d6:	028a      	lsls	r2, r1, #10
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	61fa      	str	r2, [r7, #28]
 80049e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e8:	f7fc f8de 	bl	8000ba8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3750      	adds	r7, #80	; 0x50
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000000 	.word	0x20000000

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	0800b848 	.word	0x0800b848

08004a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a70:	b084      	sub	sp, #16
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	f107 001c 	add.w	r0, r7, #28
 8004a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d123      	bne.n	8004ad2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 fae2 	bl	8006090 <USB_CoreReset>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e01b      	b.n	8004b0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f001 fad6 	bl	8006090 <USB_CoreReset>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ae8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
 8004afc:	e005      	b.n	8004b0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b0a:	7fbb      	ldrb	r3, [r7, #30]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10b      	bne.n	8004b28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f043 0206 	orr.w	r2, r3, #6
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b34:	b004      	add	sp, #16
 8004b36:	4770      	bx	lr

08004b38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d165      	bne.n	8004c18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <USB_SetTurnaroundTime+0x11c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d906      	bls.n	8004b62 <USB_SetTurnaroundTime+0x2a>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <USB_SetTurnaroundTime+0x120>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d202      	bcs.n	8004b62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e062      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a3c      	ldr	r2, [pc, #240]	; (8004c58 <USB_SetTurnaroundTime+0x120>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d306      	bcc.n	8004b78 <USB_SetTurnaroundTime+0x40>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <USB_SetTurnaroundTime+0x124>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d202      	bcs.n	8004b78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b72:	230e      	movs	r3, #14
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e057      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <USB_SetTurnaroundTime+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d306      	bcc.n	8004b8e <USB_SetTurnaroundTime+0x56>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <USB_SetTurnaroundTime+0x128>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d202      	bcs.n	8004b8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b88:	230d      	movs	r3, #13
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e04c      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a33      	ldr	r2, [pc, #204]	; (8004c60 <USB_SetTurnaroundTime+0x128>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d306      	bcc.n	8004ba4 <USB_SetTurnaroundTime+0x6c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a32      	ldr	r2, [pc, #200]	; (8004c64 <USB_SetTurnaroundTime+0x12c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d802      	bhi.n	8004ba4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e041      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <USB_SetTurnaroundTime+0x12c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d906      	bls.n	8004bba <USB_SetTurnaroundTime+0x82>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a2e      	ldr	r2, [pc, #184]	; (8004c68 <USB_SetTurnaroundTime+0x130>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d802      	bhi.n	8004bba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bb4:	230b      	movs	r3, #11
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e036      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <USB_SetTurnaroundTime+0x130>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d906      	bls.n	8004bd0 <USB_SetTurnaroundTime+0x98>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <USB_SetTurnaroundTime+0x134>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bca:	230a      	movs	r3, #10
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e02b      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <USB_SetTurnaroundTime+0x134>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d906      	bls.n	8004be6 <USB_SetTurnaroundTime+0xae>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <USB_SetTurnaroundTime+0x138>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d202      	bcs.n	8004be6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004be0:	2309      	movs	r3, #9
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e020      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <USB_SetTurnaroundTime+0x138>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d306      	bcc.n	8004bfc <USB_SetTurnaroundTime+0xc4>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	; (8004c74 <USB_SetTurnaroundTime+0x13c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d802      	bhi.n	8004bfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e015      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <USB_SetTurnaroundTime+0x13c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d906      	bls.n	8004c12 <USB_SetTurnaroundTime+0xda>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <USB_SetTurnaroundTime+0x140>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d202      	bcs.n	8004c12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c0c:	2307      	movs	r3, #7
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e00a      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c12:	2306      	movs	r3, #6
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e007      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c1e:	2309      	movs	r3, #9
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e001      	b.n	8004c28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c24:	2309      	movs	r3, #9
 8004c26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	00d8acbf 	.word	0x00d8acbf
 8004c58:	00e4e1c0 	.word	0x00e4e1c0
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	01067380 	.word	0x01067380
 8004c64:	011a499f 	.word	0x011a499f
 8004c68:	01312cff 	.word	0x01312cff
 8004c6c:	014ca43f 	.word	0x014ca43f
 8004c70:	016e3600 	.word	0x016e3600
 8004c74:	01a6ab1f 	.word	0x01a6ab1f
 8004c78:	01e84800 	.word	0x01e84800

08004c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f043 0201 	orr.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d115      	bne.n	8004d0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cee:	200a      	movs	r0, #10
 8004cf0:	f7fc fcea 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	330a      	adds	r3, #10
 8004cf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 f939 	bl	8005f72 <USB_GetMode>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d01e      	beq.n	8004d44 <USB_SetCurrentMode+0x84>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2bc7      	cmp	r3, #199	; 0xc7
 8004d0a:	d9f0      	bls.n	8004cee <USB_SetCurrentMode+0x2e>
 8004d0c:	e01a      	b.n	8004d44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d115      	bne.n	8004d40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d20:	200a      	movs	r0, #10
 8004d22:	f7fc fcd1 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	330a      	adds	r3, #10
 8004d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 f920 	bl	8005f72 <USB_GetMode>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <USB_SetCurrentMode+0x84>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2bc7      	cmp	r3, #199	; 0xc7
 8004d3c:	d9f0      	bls.n	8004d20 <USB_SetCurrentMode+0x60>
 8004d3e:	e001      	b.n	8004d44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e005      	b.n	8004d50 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2bc8      	cmp	r3, #200	; 0xc8
 8004d48:	d101      	bne.n	8004d4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d58:	b084      	sub	sp, #16
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e009      	b.n	8004d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3340      	adds	r3, #64	; 0x40
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b0e      	cmp	r3, #14
 8004d90:	d9f2      	bls.n	8004d78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11c      	bne.n	8004dd4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8004dd2:	e00b      	b.n	8004dec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df2:	461a      	mov	r2, r3
 8004df4:	2300      	movs	r3, #0
 8004df6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10d      	bne.n	8004e1c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f968 	bl	80050e0 <USB_SetDevSpeed>
 8004e10:	e008      	b.n	8004e24 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e12:	2101      	movs	r1, #1
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f963 	bl	80050e0 <USB_SetDevSpeed>
 8004e1a:	e003      	b.n	8004e24 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e1c:	2103      	movs	r1, #3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f95e 	bl	80050e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e24:	2110      	movs	r1, #16
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8fa 	bl	8005020 <USB_FlushTxFifo>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f924 	bl	8005084 <USB_FlushRxFifo>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	e043      	b.n	8004ef8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e86:	d118      	bne.n	8004eba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e013      	b.n	8004ecc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e008      	b.n	8004ecc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	461a      	mov	r2, r3
 8004eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004efc:	461a      	mov	r2, r3
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d3b5      	bcc.n	8004e70 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e043      	b.n	8004f92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f20:	d118      	bne.n	8004f54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e013      	b.n	8004f66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e008      	b.n	8004f66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	461a      	mov	r2, r3
 8004f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f96:	461a      	mov	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d3b5      	bcc.n	8004f0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f043 0210 	orr.w	r2, r3, #16
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <USB_DevInit+0x2c4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fe0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f043 0208 	orr.w	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ff4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005018:	b004      	add	sp, #16
 800501a:	4770      	bx	lr
 800501c:	803c3800 	.word	0x803c3800

08005020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800503a:	d901      	bls.n	8005040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e01b      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	daf2      	bge.n	800502e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	019b      	lsls	r3, r3, #6
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005064:	d901      	bls.n	800506a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	d0f0      	beq.n	8005058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800509c:	d901      	bls.n	80050a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e018      	b.n	80050d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	daf2      	bge.n	8005090 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2210      	movs	r2, #16
 80050b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050c0:	d901      	bls.n	80050c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e006      	b.n	80050d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d0f0      	beq.n	80050b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0306 	and.w	r3, r3, #6
 800512a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
 8005136:	e00a      	b.n	800514e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d002      	beq.n	8005144 <USB_GetDevSpeed+0x32>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d102      	bne.n	800514a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005144:	2302      	movs	r3, #2
 8005146:	75fb      	strb	r3, [r7, #23]
 8005148:	e001      	b.n	800514e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800514a:	230f      	movs	r3, #15
 800514c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d13a      	bne.n	80051ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005196:	4313      	orrs	r3, r2
 8005198:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d155      	bne.n	800525c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	791b      	ldrb	r3, [r3, #4]
 80051ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	059b      	lsls	r3, r3, #22
 80051d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051d4:	4313      	orrs	r3, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e036      	b.n	800525c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	2101      	movs	r1, #1
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800520c:	4313      	orrs	r3, r2
 800520e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d11a      	bne.n	800525c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005242:	430b      	orrs	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d161      	bne.n	800534c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529e:	d11f      	bne.n	80052e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005300:	4013      	ands	r3, r2
 8005302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	b29b      	uxth	r3, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005324:	4013      	ands	r3, r2
 8005326:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0159      	lsls	r1, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	440b      	add	r3, r1
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	4619      	mov	r1, r3
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <USB_DeactivateEndpoint+0x1b0>)
 8005346:	4013      	ands	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
 800534a:	e060      	b.n	800540e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005362:	d11f      	bne.n	80053a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005382:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2101      	movs	r1, #1
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	43db      	mvns	r3, r3
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c4:	4013      	ands	r3, r2
 80053c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	43db      	mvns	r3, r3
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e8:	4013      	ands	r3, r2
 80053ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0159      	lsls	r1, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	440b      	add	r3, r1
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	4619      	mov	r1, r3
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <USB_DeactivateEndpoint+0x1b4>)
 800540a:	4013      	ands	r3, r2
 800540c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	ec337800 	.word	0xec337800
 8005420:	eff37800 	.word	0xeff37800

08005424 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 817a 	bne.w	800573a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d132      	bne.n	80054b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800546c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	0cdb      	lsrs	r3, r3, #19
 80054ae:	04db      	lsls	r3, r3, #19
 80054b0:	6113      	str	r3, [r2, #16]
 80054b2:	e092      	b.n	80055da <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	0cdb      	lsrs	r3, r3, #19
 80054d0:	04db      	lsls	r3, r3, #19
 80054d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11a      	bne.n	8005534 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d903      	bls.n	8005512 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005530:	6113      	str	r3, [r2, #16]
 8005532:	e01b      	b.n	800556c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	440b      	add	r3, r1
 800554c:	1e59      	subs	r1, r3, #1
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	fbb1 f3f3 	udiv	r3, r1, r3
 8005556:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005558:	4ba2      	ldr	r3, [pc, #648]	; (80057e4 <USB_EPStartXfer+0x3c0>)
 800555a:	400b      	ands	r3, r1
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	4401      	add	r1, r0
 8005564:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	0148      	lsls	r0, r1, #5
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	4401      	add	r1, r0
 800558a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	791b      	ldrb	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d11f      	bne.n	80055da <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d14b      	bne.n	8005678 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	461a      	mov	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	791b      	ldrb	r3, [r3, #4]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d128      	bne.n	8005656 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d110      	bne.n	8005636 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e00f      	b.n	8005656 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e165      	b.n	8005944 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005696:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	791b      	ldrb	r3, [r3, #4]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d015      	beq.n	80056cc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 814d 	beq.w	8005944 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	2101      	movs	r1, #1
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	69f9      	ldr	r1, [r7, #28]
 80056c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c6:	4313      	orrs	r3, r2
 80056c8:	634b      	str	r3, [r1, #52]	; 0x34
 80056ca:	e13b      	b.n	8005944 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e00f      	b.n	800571e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	68d9      	ldr	r1, [r3, #12]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b298      	uxth	r0, r3
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4603      	mov	r3, r0
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f9b8 	bl	8005aa8 <USB_WritePacket>
 8005738:	e104      	b.n	8005944 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005754:	0cdb      	lsrs	r3, r3, #19
 8005756:	04db      	lsls	r3, r3, #19
 8005758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800577c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d131      	bne.n	80057e8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b2:	69b9      	ldr	r1, [r7, #24]
 80057b4:	0148      	lsls	r0, r1, #5
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	4401      	add	r1, r0
 80057ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057be:	4313      	orrs	r3, r2
 80057c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e0:	6113      	str	r3, [r2, #16]
 80057e2:	e061      	b.n	80058a8 <USB_EPStartXfer+0x484>
 80057e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d123      	bne.n	8005838 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	0148      	lsls	r0, r1, #5
 800580a:	69f9      	ldr	r1, [r7, #28]
 800580c:	4401      	add	r1, r0
 800580e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005812:	4313      	orrs	r3, r2
 8005814:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005834:	6113      	str	r3, [r2, #16]
 8005836:	e037      	b.n	80058a8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4413      	add	r3, r2
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	8afa      	ldrh	r2, [r7, #22]
 8005854:	fb03 f202 	mul.w	r2, r3, r2
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	8afb      	ldrh	r3, [r7, #22]
 800586c:	04d9      	lsls	r1, r3, #19
 800586e:	4b38      	ldr	r3, [pc, #224]	; (8005950 <USB_EPStartXfer+0x52c>)
 8005870:	400b      	ands	r3, r1
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	0148      	lsls	r0, r1, #5
 8005876:	69f9      	ldr	r1, [r7, #28]
 8005878:	4401      	add	r1, r0
 800587a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800587e:	4313      	orrs	r3, r2
 8005880:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	0148      	lsls	r0, r1, #5
 800589c:	69f9      	ldr	r1, [r7, #28]
 800589e:	4401      	add	r1, r0
 80058a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058a4:	4313      	orrs	r3, r2
 80058a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d10d      	bne.n	80058ca <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68d9      	ldr	r1, [r3, #12]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	460a      	mov	r2, r1
 80058c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d128      	bne.n	8005924 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d110      	bne.n	8005904 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00f      	b.n	8005924 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	1ff80000 	.word	0x1ff80000

08005954 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d14a      	bne.n	8005a08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	f040 8086 	bne.w	8005a9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	7812      	ldrb	r2, [r2, #0]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f242 7210 	movw	r2, #10000	; 0x2710
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d902      	bls.n	80059ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ea:	e056      	b.n	8005a9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a04:	d0e7      	beq.n	80059d6 <USB_EPStopXfer+0x82>
 8005a06:	e048      	b.n	8005a9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a20:	d13b      	bne.n	8005a9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d902      	bls.n	8005a80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a7e:	e00c      	b.n	8005a9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a98:	d0e7      	beq.n	8005a6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	; 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	71fb      	strb	r3, [r7, #7]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d123      	bne.n	8005b16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ace:	88bb      	ldrh	r3, [r7, #4]
 8005ad0:	3303      	adds	r3, #3
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e018      	b.n	8005b0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	031a      	lsls	r2, r3, #12
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae8:	461a      	mov	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d3e2      	bcc.n	8005adc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3724      	adds	r7, #36	; 0x24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
 8005b4e:	e014      	b.n	8005b7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3301      	adds	r3, #1
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	3301      	adds	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	3301      	adds	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	3301      	adds	r3, #1
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3e6      	bcc.n	8005b50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b82:	8bfb      	ldrh	r3, [r7, #30]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01e      	beq.n	8005bc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b92:	461a      	mov	r2, r3
 8005b94:	f107 0310 	add.w	r3, r7, #16
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	701a      	strb	r2, [r3, #0]
      i++;
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bba:	8bfb      	ldrh	r3, [r7, #30]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1ea      	bne.n	8005b9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	372c      	adds	r7, #44	; 0x2c
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d12c      	bne.n	8005c4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db12      	blt.n	8005c28 <USB_EPSetStall+0x54>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e02b      	b.n	8005ca2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	db12      	blt.n	8005c82 <USB_EPSetStall+0xae>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00f      	beq.n	8005c82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ca0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d128      	bne.n	8005d1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	791b      	ldrb	r3, [r3, #4]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d003      	beq.n	8005cfc <USB_EPClearStall+0x4c>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d138      	bne.n	8005d6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e027      	b.n	8005d6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	791b      	ldrb	r3, [r3, #4]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d003      	beq.n	8005d4e <USB_EPClearStall+0x9e>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d10f      	bne.n	8005d6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005db0:	68f9      	ldr	r1, [r7, #12]
 8005db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df6:	f023 0302 	bic.w	r3, r3, #2
 8005dfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e24:	f023 0303 	bic.w	r3, r3, #3
 8005e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e38:	f043 0302 	orr.w	r3, r3, #2
 8005e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4013      	ands	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e64:	68fb      	ldr	r3, [r7, #12]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	0c1b      	lsrs	r3, r3, #16
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	b29b      	uxth	r3, r3
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f08:	68bb      	ldr	r3, [r7, #8]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4013      	ands	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f64:	68bb      	ldr	r3, [r7, #8]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	333c      	adds	r3, #60	; 0x3c
 8005fea:	3304      	adds	r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4a26      	ldr	r2, [pc, #152]	; (800608c <USB_EP0_OutStart+0xb8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d90a      	bls.n	800600e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006008:	d101      	bne.n	800600e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e037      	b.n	800607e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	461a      	mov	r2, r3
 8006016:	2300      	movs	r3, #0
 8006018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800602c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603c:	f043 0318 	orr.w	r3, r3, #24
 8006040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006050:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006054:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d10f      	bne.n	800607c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006076:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800607a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	4f54300a 	.word	0x4f54300a

08006090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80060a8:	d901      	bls.n	80060ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e01b      	b.n	80060e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	daf2      	bge.n	800609c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80060d2:	d901      	bls.n	80060d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d0f0      	beq.n	80060c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006100:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006104:	f002 fc94 	bl	8008a30 <USBD_static_malloc>
 8006108:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32b0      	adds	r2, #176	; 0xb0
 800611a:	2100      	movs	r1, #0
 800611c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006120:	2302      	movs	r3, #2
 8006122:	e0d4      	b.n	80062ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006124:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006128:	2100      	movs	r1, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f003 fa4f 	bl	80095ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	32b0      	adds	r2, #176	; 0xb0
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	32b0      	adds	r2, #176	; 0xb0
 800614a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	7c1b      	ldrb	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d138      	bne.n	80061ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800615c:	4b5e      	ldr	r3, [pc, #376]	; (80062d8 <USBD_CDC_Init+0x1e4>)
 800615e:	7819      	ldrb	r1, [r3, #0]
 8006160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006164:	2202      	movs	r2, #2
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f002 fb3f 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800616c:	4b5a      	ldr	r3, [pc, #360]	; (80062d8 <USBD_CDC_Init+0x1e4>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	2201      	movs	r2, #1
 8006184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006186:	4b55      	ldr	r3, [pc, #340]	; (80062dc <USBD_CDC_Init+0x1e8>)
 8006188:	7819      	ldrb	r1, [r3, #0]
 800618a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618e:	2202      	movs	r2, #2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 fb2a 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006196:	4b51      	ldr	r3, [pc, #324]	; (80062dc <USBD_CDC_Init+0x1e8>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ae:	2201      	movs	r2, #1
 80061b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061b2:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <USBD_CDC_Init+0x1ec>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	3326      	adds	r3, #38	; 0x26
 80061c8:	2210      	movs	r2, #16
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e035      	b.n	800623a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061ce:	4b42      	ldr	r3, [pc, #264]	; (80062d8 <USBD_CDC_Init+0x1e4>)
 80061d0:	7819      	ldrb	r1, [r3, #0]
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	2202      	movs	r2, #2
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f002 fb07 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061dc:	4b3e      	ldr	r3, [pc, #248]	; (80062d8 <USBD_CDC_Init+0x1e4>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3324      	adds	r3, #36	; 0x24
 80061f2:	2201      	movs	r2, #1
 80061f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061f6:	4b39      	ldr	r3, [pc, #228]	; (80062dc <USBD_CDC_Init+0x1e8>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	2340      	movs	r3, #64	; 0x40
 80061fc:	2202      	movs	r2, #2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 faf3 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <USBD_CDC_Init+0x1e8>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800621c:	2201      	movs	r2, #1
 800621e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006220:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <USBD_CDC_Init+0x1ec>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	3326      	adds	r3, #38	; 0x26
 8006236:	2210      	movs	r2, #16
 8006238:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800623a:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <USBD_CDC_Init+0x1ec>)
 800623c:	7819      	ldrb	r1, [r3, #0]
 800623e:	2308      	movs	r3, #8
 8006240:	2203      	movs	r2, #3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f002 fad1 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <USBD_CDC_Init+0x1ec>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	2201      	movs	r2, #1
 8006260:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	33b0      	adds	r3, #176	; 0xb0
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006298:	2302      	movs	r3, #2
 800629a:	e018      	b.n	80062ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7c1b      	ldrb	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <USBD_CDC_Init+0x1e8>)
 80062a6:	7819      	ldrb	r1, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 fb88 	bl	80089c8 <USBD_LL_PrepareReceive>
 80062b8:	e008      	b.n	80062cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <USBD_CDC_Init+0x1e8>)
 80062bc:	7819      	ldrb	r1, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f002 fb7e 	bl	80089c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000093 	.word	0x20000093
 80062dc:	20000094 	.word	0x20000094
 80062e0:	20000095 	.word	0x20000095

080062e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062f0:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <USBD_CDC_DeInit+0xf8>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f002 fa9d 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80062fc:	4b37      	ldr	r3, [pc, #220]	; (80063dc <USBD_CDC_DeInit+0xf8>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2200      	movs	r2, #0
 8006314:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006316:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <USBD_CDC_DeInit+0xfc>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fa8a 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006322:	4b2f      	ldr	r3, [pc, #188]	; (80063e0 <USBD_CDC_DeInit+0xfc>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	f003 020f 	and.w	r2, r3, #15
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800633a:	2200      	movs	r2, #0
 800633c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800633e:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <USBD_CDC_DeInit+0x100>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 fa76 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <USBD_CDC_DeInit+0x100>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	2200      	movs	r2, #0
 8006362:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <USBD_CDC_DeInit+0x100>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f003 020f 	and.w	r2, r3, #15
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	3326      	adds	r3, #38	; 0x26
 800637a:	2200      	movs	r2, #0
 800637c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32b0      	adds	r2, #176	; 0xb0
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01f      	beq.n	80063d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	33b0      	adds	r3, #176	; 0xb0
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	32b0      	adds	r2, #176	; 0xb0
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f002 fb4a 	bl	8008a4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32b0      	adds	r2, #176	; 0xb0
 80063c2:	2100      	movs	r1, #0
 80063c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000093 	.word	0x20000093
 80063e0:	20000094 	.word	0x20000094
 80063e4:	20000095 	.word	0x20000095

080063e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32b0      	adds	r2, #176	; 0xb0
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006414:	2303      	movs	r3, #3
 8006416:	e0bf      	b.n	8006598 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006420:	2b00      	cmp	r3, #0
 8006422:	d050      	beq.n	80064c6 <USBD_CDC_Setup+0xde>
 8006424:	2b20      	cmp	r3, #32
 8006426:	f040 80af 	bne.w	8006588 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	88db      	ldrh	r3, [r3, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d03a      	beq.n	80064a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b25b      	sxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	da1b      	bge.n	8006474 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	33b0      	adds	r3, #176	; 0xb0
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006452:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	88d2      	ldrh	r2, [r2, #6]
 8006458:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	2b07      	cmp	r3, #7
 8006460:	bf28      	it	cs
 8006462:	2307      	movcs	r3, #7
 8006464:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	89fa      	ldrh	r2, [r7, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fd89 	bl	8007f84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006472:	e090      	b.n	8006596 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785a      	ldrb	r2, [r3, #1]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	88db      	ldrh	r3, [r3, #6]
 8006482:	2b3f      	cmp	r3, #63	; 0x3f
 8006484:	d803      	bhi.n	800648e <USBD_CDC_Setup+0xa6>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88db      	ldrh	r3, [r3, #6]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	e000      	b.n	8006490 <USBD_CDC_Setup+0xa8>
 800648e:	2240      	movs	r2, #64	; 0x40
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006496:	6939      	ldr	r1, [r7, #16]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800649e:	461a      	mov	r2, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fd9b 	bl	8007fdc <USBD_CtlPrepareRx>
      break;
 80064a6:	e076      	b.n	8006596 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	33b0      	adds	r3, #176	; 0xb0
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	7850      	ldrb	r0, [r2, #1]
 80064be:	2200      	movs	r2, #0
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	4798      	blx	r3
      break;
 80064c4:	e067      	b.n	8006596 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b0b      	cmp	r3, #11
 80064cc:	d851      	bhi.n	8006572 <USBD_CDC_Setup+0x18a>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <USBD_CDC_Setup+0xec>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006505 	.word	0x08006505
 80064d8:	08006581 	.word	0x08006581
 80064dc:	08006573 	.word	0x08006573
 80064e0:	08006573 	.word	0x08006573
 80064e4:	08006573 	.word	0x08006573
 80064e8:	08006573 	.word	0x08006573
 80064ec:	08006573 	.word	0x08006573
 80064f0:	08006573 	.word	0x08006573
 80064f4:	08006573 	.word	0x08006573
 80064f8:	08006573 	.word	0x08006573
 80064fc:	0800652f 	.word	0x0800652f
 8006500:	08006559 	.word	0x08006559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b03      	cmp	r3, #3
 800650e:	d107      	bne.n	8006520 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006510:	f107 030a 	add.w	r3, r7, #10
 8006514:	2202      	movs	r2, #2
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fd33 	bl	8007f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800651e:	e032      	b.n	8006586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fcbd 	bl	8007ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	75fb      	strb	r3, [r7, #23]
          break;
 800652c:	e02b      	b.n	8006586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d107      	bne.n	800654a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800653a:	f107 030d 	add.w	r3, r7, #13
 800653e:	2201      	movs	r2, #1
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fd1e 	bl	8007f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006548:	e01d      	b.n	8006586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fca8 	bl	8007ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006552:	2303      	movs	r3, #3
 8006554:	75fb      	strb	r3, [r7, #23]
          break;
 8006556:	e016      	b.n	8006586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b03      	cmp	r3, #3
 8006562:	d00f      	beq.n	8006584 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fc9b 	bl	8007ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 800656c:	2303      	movs	r3, #3
 800656e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006570:	e008      	b.n	8006584 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fc94 	bl	8007ea2 <USBD_CtlError>
          ret = USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	75fb      	strb	r3, [r7, #23]
          break;
 800657e:	e002      	b.n	8006586 <USBD_CDC_Setup+0x19e>
          break;
 8006580:	bf00      	nop
 8006582:	e008      	b.n	8006596 <USBD_CDC_Setup+0x1ae>
          break;
 8006584:	bf00      	nop
      }
      break;
 8006586:	e006      	b.n	8006596 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fc89 	bl	8007ea2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006590:	2303      	movs	r3, #3
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	bf00      	nop
  }

  return (uint8_t)ret;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	32b0      	adds	r2, #176	; 0xb0
 80065be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e065      	b.n	8006696 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32b0      	adds	r2, #176	; 0xb0
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	3318      	adds	r3, #24
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02f      	beq.n	8006654 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 020f 	and.w	r2, r3, #15
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3318      	adds	r3, #24
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 010f 	and.w	r1, r3, #15
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	460b      	mov	r3, r1
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	440b      	add	r3, r1
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4403      	add	r3, r0
 800661c:	331c      	adds	r3, #28
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	fbb2 f1f3 	udiv	r1, r2, r3
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800662a:	2b00      	cmp	r3, #0
 800662c:	d112      	bne.n	8006654 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	3318      	adds	r3, #24
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006646:	78f9      	ldrb	r1, [r7, #3]
 8006648:	2300      	movs	r3, #0
 800664a:	2200      	movs	r2, #0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f002 f99a 	bl	8008986 <USBD_LL_Transmit>
 8006652:	e01f      	b.n	8006694 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	33b0      	adds	r3, #176	; 0xb0
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d010      	beq.n	8006694 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	33b0      	adds	r3, #176	; 0xb0
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	32b0      	adds	r2, #176	; 0xb0
 80066b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	32b0      	adds	r2, #176	; 0xb0
 80066c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e01a      	b.n	8006706 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f002 f998 	bl	8008a0a <USBD_LL_GetRxDataSize>
 80066da:	4602      	mov	r2, r0
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	33b0      	adds	r3, #176	; 0xb0
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006700:	4611      	mov	r1, r2
 8006702:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	32b0      	adds	r2, #176	; 0xb0
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	e025      	b.n	800677c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	33b0      	adds	r3, #176	; 0xb0
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <USBD_CDC_EP0_RxReady+0x6c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800674a:	2bff      	cmp	r3, #255	; 0xff
 800674c:	d015      	beq.n	800677a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	33b0      	adds	r3, #176	; 0xb0
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006766:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800676e:	b292      	uxth	r2, r2
 8006770:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800678c:	2182      	movs	r1, #130	; 0x82
 800678e:	4818      	ldr	r0, [pc, #96]	; (80067f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006790:	f000 fd4f 	bl	8007232 <USBD_GetEpDesc>
 8006794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006796:	2101      	movs	r1, #1
 8006798:	4815      	ldr	r0, [pc, #84]	; (80067f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800679a:	f000 fd4a 	bl	8007232 <USBD_GetEpDesc>
 800679e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067a0:	2181      	movs	r1, #129	; 0x81
 80067a2:	4813      	ldr	r0, [pc, #76]	; (80067f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067a4:	f000 fd45 	bl	8007232 <USBD_GetEpDesc>
 80067a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2210      	movs	r2, #16
 80067b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2200      	movs	r2, #0
 80067c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c4:	711a      	strb	r2, [r3, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d006      	beq.n	80067de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d8:	711a      	strb	r2, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2243      	movs	r2, #67	; 0x43
 80067e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067e4:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000050 	.word	0x20000050

080067f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067fc:	2182      	movs	r1, #130	; 0x82
 80067fe:	4818      	ldr	r0, [pc, #96]	; (8006860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006800:	f000 fd17 	bl	8007232 <USBD_GetEpDesc>
 8006804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006806:	2101      	movs	r1, #1
 8006808:	4815      	ldr	r0, [pc, #84]	; (8006860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800680a:	f000 fd12 	bl	8007232 <USBD_GetEpDesc>
 800680e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006810:	2181      	movs	r1, #129	; 0x81
 8006812:	4813      	ldr	r0, [pc, #76]	; (8006860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006814:	f000 fd0d 	bl	8007232 <USBD_GetEpDesc>
 8006818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2210      	movs	r2, #16
 8006824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d006      	beq.n	800683a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2200      	movs	r2, #0
 8006830:	711a      	strb	r2, [r3, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f042 0202 	orr.w	r2, r2, #2
 8006838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	711a      	strb	r2, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f042 0202 	orr.w	r2, r2, #2
 800684c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2243      	movs	r2, #67	; 0x43
 8006852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000050 	.word	0x20000050

08006864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800686c:	2182      	movs	r1, #130	; 0x82
 800686e:	4818      	ldr	r0, [pc, #96]	; (80068d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006870:	f000 fcdf 	bl	8007232 <USBD_GetEpDesc>
 8006874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006876:	2101      	movs	r1, #1
 8006878:	4815      	ldr	r0, [pc, #84]	; (80068d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800687a:	f000 fcda 	bl	8007232 <USBD_GetEpDesc>
 800687e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006880:	2181      	movs	r1, #129	; 0x81
 8006882:	4813      	ldr	r0, [pc, #76]	; (80068d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006884:	f000 fcd5 	bl	8007232 <USBD_GetEpDesc>
 8006888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2210      	movs	r2, #16
 8006894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d006      	beq.n	80068aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2200      	movs	r2, #0
 80068a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a4:	711a      	strb	r2, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b8:	711a      	strb	r2, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2243      	movs	r2, #67	; 0x43
 80068c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000050 	.word	0x20000050

080068d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	220a      	movs	r2, #10
 80068e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068e2:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	2000000c 	.word	0x2000000c

080068f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e009      	b.n	800691c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	33b0      	adds	r3, #176	; 0xb0
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	32b0      	adds	r2, #176	; 0xb0
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800694a:	2303      	movs	r3, #3
 800694c:	e008      	b.n	8006960 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	32b0      	adds	r2, #176	; 0xb0
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800698c:	2303      	movs	r3, #3
 800698e:	e004      	b.n	800699a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32b0      	adds	r2, #176	; 0xb0
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e025      	b.n	8006a1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11f      	bne.n	8006a18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2201      	movs	r2, #1
 80069dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <USBD_CDC_TransmitPacket+0x7c>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4403      	add	r3, r0
 80069fa:	3318      	adds	r3, #24
 80069fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <USBD_CDC_TransmitPacket+0x7c>)
 8006a00:	7819      	ldrb	r1, [r3, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 ffb9 	bl	8008986 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000093 	.word	0x20000093

08006a28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32b0      	adds	r2, #176	; 0xb0
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32b0      	adds	r2, #176	; 0xb0
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e018      	b.n	8006a88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7c1b      	ldrb	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <USBD_CDC_ReceivePacket+0x68>)
 8006a60:	7819      	ldrb	r1, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 ffab 	bl	80089c8 <USBD_LL_PrepareReceive>
 8006a72:	e008      	b.n	8006a86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <USBD_CDC_ReceivePacket+0x68>)
 8006a76:	7819      	ldrb	r1, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a7e:	2340      	movs	r3, #64	; 0x40
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 ffa1 	bl	80089c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000094 	.word	0x20000094

08006a94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e01f      	b.n	8006aec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f001 fe1b 	bl	800871c <USBD_LL_Init>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e025      	b.n	8006b58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	; 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00f      	beq.n	8006b48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32ae      	adds	r2, #174	; 0xae
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f107 020e 	add.w	r2, r7, #14
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	4602      	mov	r2, r0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fe23 	bl	80087b4 <USBD_LL_Start>
 8006b6e:	4603      	mov	r3, r0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4611      	mov	r1, r2
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f90e 	bl	8007e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d01a      	beq.n	8006c6c <USBD_LL_SetupStage+0x72>
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d822      	bhi.n	8006c80 <USBD_LL_SetupStage+0x86>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <USBD_LL_SetupStage+0x4a>
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d00a      	beq.n	8006c58 <USBD_LL_SetupStage+0x5e>
 8006c42:	e01d      	b.n	8006c80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fb65 	bl	800731c <USBD_StdDevReq>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
      break;
 8006c56:	e020      	b.n	8006c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fbcd 	bl	8007400 <USBD_StdItfReq>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6a:	e016      	b.n	8006c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fc2f 	bl	80074d8 <USBD_StdEPReq>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7e:	e00c      	b.n	8006c9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fdf0 	bl	8008874 <USBD_LL_StallEP>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	bf00      	nop
  }

  return ret;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	460b      	mov	r3, r1
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d16e      	bne.n	8006d9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	f040 8098 	bne.w	8006e00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d913      	bls.n	8006d04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	1ad2      	subs	r2, r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	bf28      	it	cs
 8006cf6:	4613      	movcs	r3, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f001 f98a 	bl	8008016 <USBD_CtlContinueRx>
 8006d02:	e07d      	b.n	8006e00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d014      	beq.n	8006d3c <USBD_LL_DataOutStage+0x98>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d81d      	bhi.n	8006d52 <USBD_LL_DataOutStage+0xae>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <USBD_LL_DataOutStage+0x7c>
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d003      	beq.n	8006d26 <USBD_LL_DataOutStage+0x82>
 8006d1e:	e018      	b.n	8006d52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	75bb      	strb	r3, [r7, #22]
            break;
 8006d24:	e018      	b.n	8006d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fa64 	bl	80071fe <USBD_CoreFindIF>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75bb      	strb	r3, [r7, #22]
            break;
 8006d3a:	e00d      	b.n	8006d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fa66 	bl	8007218 <USBD_CoreFindEP>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006d50:	e002      	b.n	8006d58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75bb      	strb	r3, [r7, #22]
            break;
 8006d56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d58:	7dbb      	ldrb	r3, [r7, #22]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d119      	bne.n	8006d92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d113      	bne.n	8006d92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d6a:	7dba      	ldrb	r2, [r7, #22]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	32ae      	adds	r2, #174	; 0xae
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d7a:	7dba      	ldrb	r2, [r7, #22]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d82:	7dba      	ldrb	r2, [r7, #22]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	32ae      	adds	r2, #174	; 0xae
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f001 f950 	bl	8008038 <USBD_CtlSendStatus>
 8006d98:	e032      	b.n	8006e00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa37 	bl	8007218 <USBD_CoreFindEP>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dae:	7dbb      	ldrb	r3, [r7, #22]
 8006db0:	2bff      	cmp	r3, #255	; 0xff
 8006db2:	d025      	beq.n	8006e00 <USBD_LL_DataOutStage+0x15c>
 8006db4:	7dbb      	ldrb	r3, [r7, #22]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d122      	bne.n	8006e00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d117      	bne.n	8006df6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006dc6:	7dba      	ldrb	r2, [r7, #22]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	32ae      	adds	r2, #174	; 0xae
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00f      	beq.n	8006df6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006dd6:	7dba      	ldrb	r2, [r7, #22]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	7afa      	ldrb	r2, [r7, #11]
 8006dec:	4611      	mov	r1, r2
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	e000      	b.n	8006e02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	460b      	mov	r3, r1
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d16f      	bne.n	8006efe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3314      	adds	r3, #20
 8006e22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d15a      	bne.n	8006ee4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d914      	bls.n	8006e64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 f8b2 	bl	8007fba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f001 fdb3 	bl	80089c8 <USBD_LL_PrepareReceive>
 8006e62:	e03f      	b.n	8006ee4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d11c      	bne.n	8006eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d316      	bcc.n	8006eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d20f      	bcs.n	8006eaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f001 f893 	bl	8007fba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f001 fd90 	bl	80089c8 <USBD_LL_PrepareReceive>
 8006ea8:	e01c      	b.n	8006ee4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d10f      	bne.n	8006ed6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f001 fccb 	bl	8008874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 f8bd 	bl	800805e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d03a      	beq.n	8006f64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fe42 	bl	8006b78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006efc:	e032      	b.n	8006f64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f985 	bl	8007218 <USBD_CoreFindEP>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2bff      	cmp	r3, #255	; 0xff
 8006f16:	d025      	beq.n	8006f64 <USBD_LL_DataInStage+0x15a>
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d122      	bne.n	8006f64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d11c      	bne.n	8006f64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f2a:	7dfa      	ldrb	r2, [r7, #23]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f3a:	7dfa      	ldrb	r2, [r7, #23]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f42:	7dfa      	ldrb	r2, [r7, #23]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	7afa      	ldrb	r2, [r7, #11]
 8006f50:	4611      	mov	r1, r2
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f5a:	7dbb      	ldrb	r3, [r7, #22]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f60:	7dbb      	ldrb	r3, [r7, #22]
 8006f62:	e000      	b.n	8006f66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d014      	beq.n	8006fd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6852      	ldr	r2, [r2, #4]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fc05 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fbf7 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2240      	movs	r2, #64	; 0x40
 8007006:	621a      	str	r2, [r3, #32]

  return ret;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b04      	cmp	r3, #4
 8007044:	d006      	beq.n	8007054 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2204      	movs	r2, #4
 8007058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b04      	cmp	r3, #4
 800707c:	d106      	bne.n	800708c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007084:	b2da      	uxtb	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d110      	bne.n	80070d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e01c      	b.n	8007136 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b03      	cmp	r3, #3
 8007106:	d115      	bne.n	8007134 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	; 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32ae      	adds	r2, #174	; 0xae
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	4611      	mov	r1, r2
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32ae      	adds	r2, #174	; 0xae
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e01c      	b.n	800719a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b03      	cmp	r3, #3
 800716a:	d115      	bne.n	8007198 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	32ae      	adds	r2, #174	; 0xae
 8007176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32ae      	adds	r2, #174	; 0xae
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	4611      	mov	r1, r2
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00e      	beq.n	80071f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6852      	ldr	r2, [r2, #4]
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	4611      	mov	r1, r2
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800720a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007224:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	429a      	cmp	r2, r3
 8007258:	d920      	bls.n	800729c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007262:	e013      	b.n	800728c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007264:	f107 030a 	add.w	r3, r7, #10
 8007268:	4619      	mov	r1, r3
 800726a:	6978      	ldr	r0, [r7, #20]
 800726c:	f000 f81b 	bl	80072a6 <USBD_GetNextDesc>
 8007270:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b05      	cmp	r3, #5
 8007278:	d108      	bne.n	800728c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	429a      	cmp	r2, r3
 8007286:	d008      	beq.n	800729a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	885b      	ldrh	r3, [r3, #2]
 8007290:	b29a      	uxth	r2, r3
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	429a      	cmp	r2, r3
 8007296:	d8e5      	bhi.n	8007264 <USBD_GetEpDesc+0x32>
 8007298:	e000      	b.n	800729c <USBD_GetEpDesc+0x6a>
          break;
 800729a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800729c:	693b      	ldr	r3, [r7, #16]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	881a      	ldrh	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	4413      	add	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4413      	add	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	3301      	adds	r3, #1
 80072f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072fe:	8a3b      	ldrh	r3, [r7, #16]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	b21a      	sxth	r2, r3
 8007304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007308:	4313      	orrs	r3, r2
 800730a:	b21b      	sxth	r3, r3
 800730c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800730e:	89fb      	ldrh	r3, [r7, #14]
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d005      	beq.n	8007342 <USBD_StdDevReq+0x26>
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d857      	bhi.n	80073ea <USBD_StdDevReq+0xce>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <USBD_StdDevReq+0x42>
 800733e:	2b20      	cmp	r3, #32
 8007340:	d153      	bne.n	80073ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	32ae      	adds	r2, #174	; 0xae
 800734c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	e04a      	b.n	80073f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b09      	cmp	r3, #9
 8007364:	d83b      	bhi.n	80073de <USBD_StdDevReq+0xc2>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_StdDevReq+0x50>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	080073c1 	.word	0x080073c1
 8007370:	080073d5 	.word	0x080073d5
 8007374:	080073df 	.word	0x080073df
 8007378:	080073cb 	.word	0x080073cb
 800737c:	080073df 	.word	0x080073df
 8007380:	0800739f 	.word	0x0800739f
 8007384:	08007395 	.word	0x08007395
 8007388:	080073df 	.word	0x080073df
 800738c:	080073b7 	.word	0x080073b7
 8007390:	080073a9 	.word	0x080073a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa3c 	bl	8007814 <USBD_GetDescriptor>
          break;
 800739c:	e024      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fba1 	bl	8007ae8 <USBD_SetAddress>
          break;
 80073a6:	e01f      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fbe0 	bl	8007b70 <USBD_SetConfig>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]
          break;
 80073b4:	e018      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc83 	bl	8007cc4 <USBD_GetConfig>
          break;
 80073be:	e013      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcb4 	bl	8007d30 <USBD_GetStatus>
          break;
 80073c8:	e00e      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fce3 	bl	8007d98 <USBD_SetFeature>
          break;
 80073d2:	e009      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fd07 	bl	8007dea <USBD_ClrFeature>
          break;
 80073dc:	e004      	b.n	80073e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fd5e 	bl	8007ea2 <USBD_CtlError>
          break;
 80073e6:	bf00      	nop
      }
      break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fd58 	bl	8007ea2 <USBD_CtlError>
      break;
 80073f2:	bf00      	nop
  }

  return ret;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d005      	beq.n	8007426 <USBD_StdItfReq+0x26>
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d852      	bhi.n	80074c4 <USBD_StdItfReq+0xc4>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <USBD_StdItfReq+0x26>
 8007422:	2b20      	cmp	r3, #32
 8007424:	d14e      	bne.n	80074c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	2b02      	cmp	r3, #2
 8007432:	d840      	bhi.n	80074b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	889b      	ldrh	r3, [r3, #4]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	d836      	bhi.n	80074ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	889b      	ldrh	r3, [r3, #4]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fed9 	bl	80071fe <USBD_CoreFindIF>
 800744c:	4603      	mov	r3, r0
 800744e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2bff      	cmp	r3, #255	; 0xff
 8007454:	d01d      	beq.n	8007492 <USBD_StdItfReq+0x92>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11a      	bne.n	8007492 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800745c:	7bba      	ldrb	r2, [r7, #14]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800746c:	7bba      	ldrb	r2, [r7, #14]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007474:	7bba      	ldrb	r2, [r7, #14]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32ae      	adds	r2, #174	; 0xae
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800748a:	e004      	b.n	8007496 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007490:	e001      	b.n	8007496 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007492:	2303      	movs	r3, #3
 8007494:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d110      	bne.n	80074c0 <USBD_StdItfReq+0xc0>
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10d      	bne.n	80074c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fdc7 	bl	8008038 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074aa:	e009      	b.n	80074c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fcf7 	bl	8007ea2 <USBD_CtlError>
          break;
 80074b4:	e004      	b.n	80074c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fcf2 	bl	8007ea2 <USBD_CtlError>
          break;
 80074be:	e000      	b.n	80074c2 <USBD_StdItfReq+0xc2>
          break;
 80074c0:	bf00      	nop
      }
      break;
 80074c2:	e004      	b.n	80074ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fceb 	bl	8007ea2 <USBD_CtlError>
      break;
 80074cc:	bf00      	nop
  }

  return ret;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	889b      	ldrh	r3, [r3, #4]
 80074ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f4:	2b40      	cmp	r3, #64	; 0x40
 80074f6:	d007      	beq.n	8007508 <USBD_StdEPReq+0x30>
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	f200 817f 	bhi.w	80077fc <USBD_StdEPReq+0x324>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02a      	beq.n	8007558 <USBD_StdEPReq+0x80>
 8007502:	2b20      	cmp	r3, #32
 8007504:	f040 817a 	bne.w	80077fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fe83 	bl	8007218 <USBD_CoreFindEP>
 8007512:	4603      	mov	r3, r0
 8007514:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007516:	7b7b      	ldrb	r3, [r7, #13]
 8007518:	2bff      	cmp	r3, #255	; 0xff
 800751a:	f000 8174 	beq.w	8007806 <USBD_StdEPReq+0x32e>
 800751e:	7b7b      	ldrb	r3, [r7, #13]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 8170 	bne.w	8007806 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007526:	7b7a      	ldrb	r2, [r7, #13]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800752e:	7b7a      	ldrb	r2, [r7, #13]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	32ae      	adds	r2, #174	; 0xae
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8163 	beq.w	8007806 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007540:	7b7a      	ldrb	r2, [r7, #13]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	32ae      	adds	r2, #174	; 0xae
 8007546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007556:	e156      	b.n	8007806 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d008      	beq.n	8007572 <USBD_StdEPReq+0x9a>
 8007560:	2b03      	cmp	r3, #3
 8007562:	f300 8145 	bgt.w	80077f0 <USBD_StdEPReq+0x318>
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 809b 	beq.w	80076a2 <USBD_StdEPReq+0x1ca>
 800756c:	2b01      	cmp	r3, #1
 800756e:	d03c      	beq.n	80075ea <USBD_StdEPReq+0x112>
 8007570:	e13e      	b.n	80077f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d002      	beq.n	8007584 <USBD_StdEPReq+0xac>
 800757e:	2b03      	cmp	r3, #3
 8007580:	d016      	beq.n	80075b0 <USBD_StdEPReq+0xd8>
 8007582:	e02c      	b.n	80075de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00d      	beq.n	80075a6 <USBD_StdEPReq+0xce>
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d00a      	beq.n	80075a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f96d 	bl	8008874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f969 	bl	8008874 <USBD_LL_StallEP>
 80075a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075a4:	e020      	b.n	80075e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fc7a 	bl	8007ea2 <USBD_CtlError>
              break;
 80075ae:	e01b      	b.n	80075e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	885b      	ldrh	r3, [r3, #2]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10e      	bne.n	80075d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <USBD_StdEPReq+0xfe>
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b80      	cmp	r3, #128	; 0x80
 80075c2:	d008      	beq.n	80075d6 <USBD_StdEPReq+0xfe>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	88db      	ldrh	r3, [r3, #6]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f94f 	bl	8008874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fd2e 	bl	8008038 <USBD_CtlSendStatus>

              break;
 80075dc:	e004      	b.n	80075e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc5e 	bl	8007ea2 <USBD_CtlError>
              break;
 80075e6:	bf00      	nop
          }
          break;
 80075e8:	e107      	b.n	80077fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d002      	beq.n	80075fc <USBD_StdEPReq+0x124>
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d016      	beq.n	8007628 <USBD_StdEPReq+0x150>
 80075fa:	e04b      	b.n	8007694 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00d      	beq.n	800761e <USBD_StdEPReq+0x146>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d00a      	beq.n	800761e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f931 	bl	8008874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007612:	2180      	movs	r1, #128	; 0x80
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f92d 	bl	8008874 <USBD_LL_StallEP>
 800761a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800761c:	e040      	b.n	80076a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc3e 	bl	8007ea2 <USBD_CtlError>
              break;
 8007626:	e03b      	b.n	80076a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	885b      	ldrh	r3, [r3, #2]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d136      	bne.n	800769e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f937 	bl	80088b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fcf7 	bl	8008038 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fde2 	bl	8007218 <USBD_CoreFindEP>
 8007654:	4603      	mov	r3, r0
 8007656:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007658:	7b7b      	ldrb	r3, [r7, #13]
 800765a:	2bff      	cmp	r3, #255	; 0xff
 800765c:	d01f      	beq.n	800769e <USBD_StdEPReq+0x1c6>
 800765e:	7b7b      	ldrb	r3, [r7, #13]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11c      	bne.n	800769e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007664:	7b7a      	ldrb	r2, [r7, #13]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800766c:	7b7a      	ldrb	r2, [r7, #13]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	; 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d010      	beq.n	800769e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800767c:	7b7a      	ldrb	r2, [r7, #13]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32ae      	adds	r2, #174	; 0xae
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007692:	e004      	b.n	800769e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fc03 	bl	8007ea2 <USBD_CtlError>
              break;
 800769c:	e000      	b.n	80076a0 <USBD_StdEPReq+0x1c8>
              break;
 800769e:	bf00      	nop
          }
          break;
 80076a0:	e0ab      	b.n	80077fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d002      	beq.n	80076b4 <USBD_StdEPReq+0x1dc>
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d032      	beq.n	8007718 <USBD_StdEPReq+0x240>
 80076b2:	e097      	b.n	80077e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d007      	beq.n	80076ca <USBD_StdEPReq+0x1f2>
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b80      	cmp	r3, #128	; 0x80
 80076be:	d004      	beq.n	80076ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fbed 	bl	8007ea2 <USBD_CtlError>
                break;
 80076c8:	e091      	b.n	80077ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da0b      	bge.n	80076ea <USBD_StdEPReq+0x212>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	3310      	adds	r3, #16
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	4413      	add	r3, r2
 80076e6:	3304      	adds	r3, #4
 80076e8:	e00b      	b.n	8007702 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4413      	add	r3, r2
 8007700:	3304      	adds	r3, #4
 8007702:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2202      	movs	r2, #2
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc37 	bl	8007f84 <USBD_CtlSendData>
              break;
 8007716:	e06a      	b.n	80077ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da11      	bge.n	8007744 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	f003 020f 	and.w	r2, r3, #15
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	3324      	adds	r3, #36	; 0x24
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d117      	bne.n	800776a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fbb0 	bl	8007ea2 <USBD_CtlError>
                  break;
 8007742:	e054      	b.n	80077ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	f003 020f 	and.w	r2, r3, #15
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb9d 	bl	8007ea2 <USBD_CtlError>
                  break;
 8007768:	e041      	b.n	80077ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800776a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800776e:	2b00      	cmp	r3, #0
 8007770:	da0b      	bge.n	800778a <USBD_StdEPReq+0x2b2>
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	3310      	adds	r3, #16
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4413      	add	r3, r2
 8007786:	3304      	adds	r3, #4
 8007788:	e00b      	b.n	80077a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	4413      	add	r3, r2
 80077a0:	3304      	adds	r3, #4
 80077a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <USBD_StdEPReq+0x2d8>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d103      	bne.n	80077b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e00e      	b.n	80077d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f897 	bl	80088f0 <USBD_LL_IsStallEP>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2202      	movs	r2, #2
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fbd1 	bl	8007f84 <USBD_CtlSendData>
              break;
 80077e2:	e004      	b.n	80077ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb5b 	bl	8007ea2 <USBD_CtlError>
              break;
 80077ec:	bf00      	nop
          }
          break;
 80077ee:	e004      	b.n	80077fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fb55 	bl	8007ea2 <USBD_CtlError>
          break;
 80077f8:	bf00      	nop
      }
      break;
 80077fa:	e005      	b.n	8007808 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fb4f 	bl	8007ea2 <USBD_CtlError>
      break;
 8007804:	e000      	b.n	8007808 <USBD_StdEPReq+0x330>
      break;
 8007806:	bf00      	nop
  }

  return ret;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	885b      	ldrh	r3, [r3, #2]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	2b06      	cmp	r3, #6
 8007836:	f200 8128 	bhi.w	8007a8a <USBD_GetDescriptor+0x276>
 800783a:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <USBD_GetDescriptor+0x2c>)
 800783c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007875 	.word	0x08007875
 8007848:	080078b5 	.word	0x080078b5
 800784c:	08007a8b 	.word	0x08007a8b
 8007850:	08007a8b 	.word	0x08007a8b
 8007854:	08007a2b 	.word	0x08007a2b
 8007858:	08007a57 	.word	0x08007a57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	7c12      	ldrb	r2, [r2, #16]
 8007868:	f107 0108 	add.w	r1, r7, #8
 800786c:	4610      	mov	r0, r2
 800786e:	4798      	blx	r3
 8007870:	60f8      	str	r0, [r7, #12]
      break;
 8007872:	e112      	b.n	8007a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7c1b      	ldrb	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10d      	bne.n	8007898 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	f107 0208 	add.w	r2, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3301      	adds	r3, #1
 8007892:	2202      	movs	r2, #2
 8007894:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007896:	e100      	b.n	8007a9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	f107 0208 	add.w	r2, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3301      	adds	r3, #1
 80078ae:	2202      	movs	r2, #2
 80078b0:	701a      	strb	r2, [r3, #0]
      break;
 80078b2:	e0f2      	b.n	8007a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	885b      	ldrh	r3, [r3, #2]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	f200 80ac 	bhi.w	8007a18 <USBD_GetDescriptor+0x204>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBD_GetDescriptor+0xb4>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	08007915 	.word	0x08007915
 80078d0:	08007949 	.word	0x08007949
 80078d4:	0800797d 	.word	0x0800797d
 80078d8:	080079b1 	.word	0x080079b1
 80078dc:	080079e5 	.word	0x080079e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007902:	e091      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 facb 	bl	8007ea2 <USBD_CtlError>
            err++;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	3301      	adds	r3, #1
 8007910:	72fb      	strb	r3, [r7, #11]
          break;
 8007912:	e089      	b.n	8007a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007936:	e077      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fab1 	bl	8007ea2 <USBD_CtlError>
            err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
          break;
 8007946:	e06f      	b.n	8007a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800796a:	e05d      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa97 	bl	8007ea2 <USBD_CtlError>
            err++;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	3301      	adds	r3, #1
 8007978:	72fb      	strb	r3, [r7, #11]
          break;
 800797a:	e055      	b.n	8007a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799e:	e043      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa7d 	bl	8007ea2 <USBD_CtlError>
            err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
          break;
 80079ae:	e03b      	b.n	8007a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
 80079c8:	f107 0108 	add.w	r1, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d2:	e029      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa63 	bl	8007ea2 <USBD_CtlError>
            err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
          break;
 80079e2:	e021      	b.n	8007a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e00f      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa49 	bl	8007ea2 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e007      	b.n	8007a28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa41 	bl	8007ea2 <USBD_CtlError>
          err++;
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	3301      	adds	r3, #1
 8007a24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a26:	bf00      	nop
      }
      break;
 8007a28:	e037      	b.n	8007a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7c1b      	ldrb	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	f107 0208 	add.w	r2, r7, #8
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4798      	blx	r3
 8007a42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a44:	e029      	b.n	8007a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fa2a 	bl	8007ea2 <USBD_CtlError>
        err++;
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	3301      	adds	r3, #1
 8007a52:	72fb      	strb	r3, [r7, #11]
      break;
 8007a54:	e021      	b.n	8007a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c1b      	ldrb	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f107 0208 	add.w	r2, r7, #8
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4798      	blx	r3
 8007a6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	2207      	movs	r2, #7
 8007a76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a78:	e00f      	b.n	8007a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa10 	bl	8007ea2 <USBD_CtlError>
        err++;
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	3301      	adds	r3, #1
 8007a86:	72fb      	strb	r3, [r7, #11]
      break;
 8007a88:	e007      	b.n	8007a9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fa08 	bl	8007ea2 <USBD_CtlError>
      err++;
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	3301      	adds	r3, #1
 8007a96:	72fb      	strb	r3, [r7, #11]
      break;
 8007a98:	bf00      	nop
  }

  if (err != 0U)
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d11e      	bne.n	8007ade <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d016      	beq.n	8007ad6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007aa8:	893b      	ldrh	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00e      	beq.n	8007acc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88da      	ldrh	r2, [r3, #6]
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bf28      	it	cs
 8007ab8:	4613      	movcs	r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007abe:	893b      	ldrh	r3, [r7, #8]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fa5d 	bl	8007f84 <USBD_CtlSendData>
 8007aca:	e009      	b.n	8007ae0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9e7 	bl	8007ea2 <USBD_CtlError>
 8007ad4:	e004      	b.n	8007ae0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 faae 	bl	8008038 <USBD_CtlSendStatus>
 8007adc:	e000      	b.n	8007ae0 <USBD_GetDescriptor+0x2cc>
    return;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	889b      	ldrh	r3, [r3, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d131      	bne.n	8007b5e <USBD_SetAddress+0x76>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d12d      	bne.n	8007b5e <USBD_SetAddress+0x76>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	2b7f      	cmp	r3, #127	; 0x7f
 8007b08:	d829      	bhi.n	8007b5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d104      	bne.n	8007b2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9bc 	bl	8007ea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2a:	e01d      	b.n	8007b68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7bfa      	ldrb	r2, [r7, #15]
 8007b30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 ff05 	bl	8008948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa7a 	bl	8008038 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	e009      	b.n	8007b68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5c:	e004      	b.n	8007b68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f99e 	bl	8007ea2 <USBD_CtlError>
  }
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	885b      	ldrh	r3, [r3, #2]
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	4b4e      	ldr	r3, [pc, #312]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b88:	4b4d      	ldr	r3, [pc, #308]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d905      	bls.n	8007b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f985 	bl	8007ea2 <USBD_CtlError>
    return USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e08c      	b.n	8007cb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d002      	beq.n	8007bae <USBD_SetConfig+0x3e>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d029      	beq.n	8007c00 <USBD_SetConfig+0x90>
 8007bac:	e075      	b.n	8007c9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bae:	4b44      	ldr	r3, [pc, #272]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d020      	beq.n	8007bf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bc0:	4b3f      	ldr	r3, [pc, #252]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe ffe1 	bl	8006b8e <USBD_SetClassConfig>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f962 	bl	8007ea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007be6:	e065      	b.n	8007cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa25 	bl	8008038 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bf6:	e05d      	b.n	8007cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa1d 	bl	8008038 <USBD_CtlSendStatus>
      break;
 8007bfe:	e059      	b.n	8007cb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c00:	4b2f      	ldr	r3, [pc, #188]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d112      	bne.n	8007c2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c1a:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fe ffd0 	bl	8006bc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa06 	bl	8008038 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c2c:	e042      	b.n	8007cb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d02a      	beq.n	8007c92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fe ffbe 	bl	8006bc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fe ff97 	bl	8006b8e <USBD_SetClassConfig>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f918 	bl	8007ea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fe ffa3 	bl	8006bc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c88:	e014      	b.n	8007cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9d4 	bl	8008038 <USBD_CtlSendStatus>
      break;
 8007c90:	e010      	b.n	8007cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9d0 	bl	8008038 <USBD_CtlSendStatus>
      break;
 8007c98:	e00c      	b.n	8007cb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f900 	bl	8007ea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <USBD_SetConfig+0x150>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fe ff8c 	bl	8006bc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb2:	bf00      	nop
  }

  return ret;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000033c 	.word	0x2000033c

08007cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	88db      	ldrh	r3, [r3, #6]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d004      	beq.n	8007ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f8e2 	bl	8007ea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cde:	e023      	b.n	8007d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	dc02      	bgt.n	8007cf2 <USBD_GetConfig+0x2e>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dc03      	bgt.n	8007cf8 <USBD_GetConfig+0x34>
 8007cf0:	e015      	b.n	8007d1e <USBD_GetConfig+0x5a>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d00b      	beq.n	8007d0e <USBD_GetConfig+0x4a>
 8007cf6:	e012      	b.n	8007d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3308      	adds	r3, #8
 8007d02:	2201      	movs	r2, #1
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f93c 	bl	8007f84 <USBD_CtlSendData>
        break;
 8007d0c:	e00c      	b.n	8007d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3304      	adds	r3, #4
 8007d12:	2201      	movs	r2, #1
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f934 	bl	8007f84 <USBD_CtlSendData>
        break;
 8007d1c:	e004      	b.n	8007d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f8be 	bl	8007ea2 <USBD_CtlError>
        break;
 8007d26:	bf00      	nop
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d81e      	bhi.n	8007d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d004      	beq.n	8007d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8a5 	bl	8007ea2 <USBD_CtlError>
        break;
 8007d58:	e01a      	b.n	8007d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0202 	orr.w	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f900 	bl	8007f84 <USBD_CtlSendData>
      break;
 8007d84:	e004      	b.n	8007d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f88a 	bl	8007ea2 <USBD_CtlError>
      break;
 8007d8e:	bf00      	nop
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d107      	bne.n	8007dba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f940 	bl	8008038 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007db8:	e013      	b.n	8007de2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	885b      	ldrh	r3, [r3, #2]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d10b      	bne.n	8007dda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	889b      	ldrh	r3, [r3, #4]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f930 	bl	8008038 <USBD_CtlSendStatus>
}
 8007dd8:	e003      	b.n	8007de2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f860 	bl	8007ea2 <USBD_CtlError>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d80b      	bhi.n	8007e1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d10c      	bne.n	8007e24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f910 	bl	8008038 <USBD_CtlSendStatus>
      }
      break;
 8007e18:	e004      	b.n	8007e24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f840 	bl	8007ea2 <USBD_CtlError>
      break;
 8007e22:	e000      	b.n	8007e26 <USBD_ClrFeature+0x3c>
      break;
 8007e24:	bf00      	nop
  }
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff fa41 	bl	80072e0 <SWAPBYTE>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fa34 	bl	80072e0 <SWAPBYTE>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff fa27 	bl	80072e0 <SWAPBYTE>
 8007e92:	4603      	mov	r3, r0
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	80da      	strh	r2, [r3, #6]
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eac:	2180      	movs	r1, #128	; 0x80
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fce0 	bl	8008874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fcdc 	bl	8008874 <USBD_LL_StallEP>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d036      	beq.n	8007f48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ede:	6938      	ldr	r0, [r7, #16]
 8007ee0:	f000 f836 	bl	8007f50 <USBD_GetLen>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	3301      	adds	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4413      	add	r3, r2
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	3301      	adds	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f14:	e013      	b.n	8007f3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3301      	adds	r3, #1
 8007f26:	613b      	str	r3, [r7, #16]
    idx++;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e7      	bne.n	8007f16 <USBD_GetString+0x52>
 8007f46:	e000      	b.n	8007f4a <USBD_GetString+0x86>
    return;
 8007f48:	bf00      	nop
  }
}
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f60:	e005      	b.n	8007f6e <USBD_GetLen+0x1e>
  {
    len++;
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	3301      	adds	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f5      	bne.n	8007f62 <USBD_GetLen+0x12>
  }

  return len;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fceb 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fcda 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2203      	movs	r2, #3
 8007fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	2100      	movs	r1, #0
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fcde 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	2100      	movs	r1, #0
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fccd 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2204      	movs	r2, #4
 8008044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008048:	2300      	movs	r3, #0
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fc99 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2205      	movs	r2, #5
 800806a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800806e:	2300      	movs	r3, #0
 8008070:	2200      	movs	r2, #0
 8008072:	2100      	movs	r1, #0
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fca7 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008088:	2200      	movs	r2, #0
 800808a:	4912      	ldr	r1, [pc, #72]	; (80080d4 <MX_USB_DEVICE_Init+0x50>)
 800808c:	4812      	ldr	r0, [pc, #72]	; (80080d8 <MX_USB_DEVICE_Init+0x54>)
 800808e:	f7fe fd01 	bl	8006a94 <USBD_Init>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008098:	f7f9 f824 	bl	80010e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800809c:	490f      	ldr	r1, [pc, #60]	; (80080dc <MX_USB_DEVICE_Init+0x58>)
 800809e:	480e      	ldr	r0, [pc, #56]	; (80080d8 <MX_USB_DEVICE_Init+0x54>)
 80080a0:	f7fe fd28 	bl	8006af4 <USBD_RegisterClass>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080aa:	f7f9 f81b 	bl	80010e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080ae:	490c      	ldr	r1, [pc, #48]	; (80080e0 <MX_USB_DEVICE_Init+0x5c>)
 80080b0:	4809      	ldr	r0, [pc, #36]	; (80080d8 <MX_USB_DEVICE_Init+0x54>)
 80080b2:	f7fe fc1f 	bl	80068f4 <USBD_CDC_RegisterInterface>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080bc:	f7f9 f812 	bl	80010e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080c0:	4805      	ldr	r0, [pc, #20]	; (80080d8 <MX_USB_DEVICE_Init+0x54>)
 80080c2:	f7fe fd4d 	bl	8006b60 <USBD_Start>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080cc:	f7f9 f80a 	bl	80010e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080d0:	bf00      	nop
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	200000ac 	.word	0x200000ac
 80080d8:	20000340 	.word	0x20000340
 80080dc:	20000018 	.word	0x20000018
 80080e0:	20000098 	.word	0x20000098

080080e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080e8:	2200      	movs	r2, #0
 80080ea:	4905      	ldr	r1, [pc, #20]	; (8008100 <CDC_Init_FS+0x1c>)
 80080ec:	4805      	ldr	r0, [pc, #20]	; (8008104 <CDC_Init_FS+0x20>)
 80080ee:	f7fe fc1b 	bl	8006928 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080f2:	4905      	ldr	r1, [pc, #20]	; (8008108 <CDC_Init_FS+0x24>)
 80080f4:	4803      	ldr	r0, [pc, #12]	; (8008104 <CDC_Init_FS+0x20>)
 80080f6:	f7fe fc39 	bl	800696c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20000e1c 	.word	0x20000e1c
 8008104:	20000340 	.word	0x20000340
 8008108:	2000061c 	.word	0x2000061c

0800810c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008110:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008112:	4618      	mov	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
 8008128:	4613      	mov	r3, r2
 800812a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	2b23      	cmp	r3, #35	; 0x23
 8008130:	d84a      	bhi.n	80081c8 <CDC_Control_FS+0xac>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <CDC_Control_FS+0x1c>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	080081c9 	.word	0x080081c9
 800813c:	080081c9 	.word	0x080081c9
 8008140:	080081c9 	.word	0x080081c9
 8008144:	080081c9 	.word	0x080081c9
 8008148:	080081c9 	.word	0x080081c9
 800814c:	080081c9 	.word	0x080081c9
 8008150:	080081c9 	.word	0x080081c9
 8008154:	080081c9 	.word	0x080081c9
 8008158:	080081c9 	.word	0x080081c9
 800815c:	080081c9 	.word	0x080081c9
 8008160:	080081c9 	.word	0x080081c9
 8008164:	080081c9 	.word	0x080081c9
 8008168:	080081c9 	.word	0x080081c9
 800816c:	080081c9 	.word	0x080081c9
 8008170:	080081c9 	.word	0x080081c9
 8008174:	080081c9 	.word	0x080081c9
 8008178:	080081c9 	.word	0x080081c9
 800817c:	080081c9 	.word	0x080081c9
 8008180:	080081c9 	.word	0x080081c9
 8008184:	080081c9 	.word	0x080081c9
 8008188:	080081c9 	.word	0x080081c9
 800818c:	080081c9 	.word	0x080081c9
 8008190:	080081c9 	.word	0x080081c9
 8008194:	080081c9 	.word	0x080081c9
 8008198:	080081c9 	.word	0x080081c9
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	080081c9 	.word	0x080081c9
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081c9 	.word	0x080081c9
 80081b0:	080081c9 	.word	0x080081c9
 80081b4:	080081c9 	.word	0x080081c9
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081c9 	.word	0x080081c9
 80081c0:	080081c9 	.word	0x080081c9
 80081c4:	080081c9 	.word	0x080081c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081c8:	bf00      	nop
  }

  return (USBD_OK);
 80081ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4805      	ldr	r0, [pc, #20]	; (80081fc <CDC_Receive_FS+0x24>)
 80081e6:	f7fe fbc1 	bl	800696c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081ea:	4804      	ldr	r0, [pc, #16]	; (80081fc <CDC_Receive_FS+0x24>)
 80081ec:	f7fe fc1c 	bl	8006a28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000340 	.word	0x20000340

08008200 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <CDC_Transmit_FS+0x48>)
 8008212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008216:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008222:	2301      	movs	r3, #1
 8008224:	e00b      	b.n	800823e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	461a      	mov	r2, r3
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4806      	ldr	r0, [pc, #24]	; (8008248 <CDC_Transmit_FS+0x48>)
 800822e:	f7fe fb7b 	bl	8006928 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008232:	4805      	ldr	r0, [pc, #20]	; (8008248 <CDC_Transmit_FS+0x48>)
 8008234:	f7fe fbb8 	bl	80069a8 <USBD_CDC_TransmitPacket>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000340 	.word	0x20000340

0800824c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800825e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008262:	4618      	mov	r0, r3
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2212      	movs	r2, #18
 8008280:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008282:	4b03      	ldr	r3, [pc, #12]	; (8008290 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	200000c8 	.word	0x200000c8

08008294 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2204      	movs	r2, #4
 80082a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082a6:	4b03      	ldr	r3, [pc, #12]	; (80082b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	200000dc 	.word	0x200000dc

080082b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4907      	ldr	r1, [pc, #28]	; (80082ec <USBD_FS_ProductStrDescriptor+0x34>)
 80082ce:	4808      	ldr	r0, [pc, #32]	; (80082f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d0:	f7ff fdf8 	bl	8007ec4 <USBD_GetString>
 80082d4:	e004      	b.n	80082e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4904      	ldr	r1, [pc, #16]	; (80082ec <USBD_FS_ProductStrDescriptor+0x34>)
 80082da:	4805      	ldr	r0, [pc, #20]	; (80082f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80082dc:	f7ff fdf2 	bl	8007ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	2000161c 	.word	0x2000161c
 80082f0:	0800b7f0 	.word	0x0800b7f0

080082f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	4904      	ldr	r1, [pc, #16]	; (8008314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008304:	4804      	ldr	r0, [pc, #16]	; (8008318 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008306:	f7ff fddd 	bl	8007ec4 <USBD_GetString>
  return USBD_StrDesc;
 800830a:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	2000161c 	.word	0x2000161c
 8008318:	0800b808 	.word	0x0800b808

0800831c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	6039      	str	r1, [r7, #0]
 8008326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	221a      	movs	r2, #26
 800832c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800832e:	f000 f843 	bl	80083b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008332:	4b02      	ldr	r3, [pc, #8]	; (800833c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200000e0 	.word	0x200000e0

08008340 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d105      	bne.n	800835e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4907      	ldr	r1, [pc, #28]	; (8008374 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008356:	4808      	ldr	r0, [pc, #32]	; (8008378 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008358:	f7ff fdb4 	bl	8007ec4 <USBD_GetString>
 800835c:	e004      	b.n	8008368 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	4904      	ldr	r1, [pc, #16]	; (8008374 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008362:	4805      	ldr	r0, [pc, #20]	; (8008378 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008364:	f7ff fdae 	bl	8007ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008368:	4b02      	ldr	r3, [pc, #8]	; (8008374 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000161c 	.word	0x2000161c
 8008378:	0800b81c 	.word	0x0800b81c

0800837c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4907      	ldr	r1, [pc, #28]	; (80083b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008392:	4808      	ldr	r0, [pc, #32]	; (80083b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008394:	f7ff fd96 	bl	8007ec4 <USBD_GetString>
 8008398:	e004      	b.n	80083a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a0:	f7ff fd90 	bl	8007ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	2000161c 	.word	0x2000161c
 80083b4:	0800b828 	.word	0x0800b828

080083b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <Get_SerialNum+0x44>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <Get_SerialNum+0x48>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ca:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <Get_SerialNum+0x4c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083de:	2208      	movs	r2, #8
 80083e0:	4909      	ldr	r1, [pc, #36]	; (8008408 <Get_SerialNum+0x50>)
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f814 	bl	8008410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083e8:	2204      	movs	r2, #4
 80083ea:	4908      	ldr	r1, [pc, #32]	; (800840c <Get_SerialNum+0x54>)
 80083ec:	68b8      	ldr	r0, [r7, #8]
 80083ee:	f000 f80f 	bl	8008410 <IntToUnicode>
  }
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	1fff7a10 	.word	0x1fff7a10
 8008400:	1fff7a14 	.word	0x1fff7a14
 8008404:	1fff7a18 	.word	0x1fff7a18
 8008408:	200000e2 	.word	0x200000e2
 800840c:	200000f2 	.word	0x200000f2

08008410 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]
 8008426:	e027      	b.n	8008478 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	0f1b      	lsrs	r3, r3, #28
 800842c:	2b09      	cmp	r3, #9
 800842e:	d80b      	bhi.n	8008448 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	0f1b      	lsrs	r3, r3, #28
 8008434:	b2da      	uxtb	r2, r3
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4619      	mov	r1, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	440b      	add	r3, r1
 8008440:	3230      	adds	r2, #48	; 0x30
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e00a      	b.n	800845e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	0f1b      	lsrs	r3, r3, #28
 800844c:	b2da      	uxtb	r2, r3
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	4619      	mov	r1, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	440b      	add	r3, r1
 8008458:	3237      	adds	r2, #55	; 0x37
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	3301      	adds	r3, #1
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	4413      	add	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	3301      	adds	r3, #1
 8008476:	75fb      	strb	r3, [r7, #23]
 8008478:	7dfa      	ldrb	r2, [r7, #23]
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d3d3      	bcc.n	8008428 <IntToUnicode+0x18>
  }
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	; 0x28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008498:	f107 0314 	add.w	r3, r7, #20
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084b0:	d13a      	bne.n	8008528 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	4a1d      	ldr	r2, [pc, #116]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	6313      	str	r3, [r2, #48]	; 0x30
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d4:	2302      	movs	r3, #2
 80084d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084dc:	2303      	movs	r3, #3
 80084de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084e0:	230a      	movs	r3, #10
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	4619      	mov	r1, r3
 80084ea:	4812      	ldr	r0, [pc, #72]	; (8008534 <HAL_PCD_MspInit+0xa4>)
 80084ec:	f7f9 fa22 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 80084f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f4:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	6353      	str	r3, [r2, #52]	; 0x34
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 8008506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800850a:	6453      	str	r3, [r2, #68]	; 0x44
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <HAL_PCD_MspInit+0xa0>)
 800850e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	2043      	movs	r0, #67	; 0x43
 800851e:	f7f9 f9d2 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008522:	2043      	movs	r0, #67	; 0x43
 8008524:	f7f9 f9eb 	bl	80018fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008528:	bf00      	nop
 800852a:	3728      	adds	r7, #40	; 0x28
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40023800 	.word	0x40023800
 8008534:	40020000 	.word	0x40020000

08008538 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f7fe fb53 	bl	8006bfa <USBD_LL_SetupStage>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	4619      	mov	r1, r3
 8008586:	f7fe fb8d 	bl	8006ca4 <USBD_LL_DataOutStage>
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	3320      	adds	r3, #32
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe fc26 	bl	8006e0a <USBD_LL_DataInStage>
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fd60 	bl	800709a <USBD_LL_SOF>
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ea:	2301      	movs	r3, #1
 80085ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	79db      	ldrb	r3, [r3, #7]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
 80085fa:	e008      	b.n	800860e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	79db      	ldrb	r3, [r3, #7]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d102      	bne.n	800860a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
 8008608:	e001      	b.n	800860e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800860a:	f7f8 fd6b 	bl	80010e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fcfa 	bl	8007012 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fca2 	bl	8006f6e <USBD_LL_Reset>
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fcf5 	bl	8007032 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7adb      	ldrb	r3, [r3, #11]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <HAL_PCD_SuspendCallback+0x48>)
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	4a03      	ldr	r2, [pc, #12]	; (800867c <HAL_PCD_SuspendCallback+0x48>)
 800866e:	f043 0306 	orr.w	r3, r3, #6
 8008672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	e000ed00 	.word	0xe000ed00

08008680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fceb 	bl	800706a <USBD_LL_Resume>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fd43 	bl	800713e <USBD_LL_IsoOUTIncomplete>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fcff 	bl	80070da <USBD_LL_IsoINIncomplete>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fd55 	bl	80071a2 <USBD_LL_DevConnected>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fd52 	bl	80071b8 <USBD_LL_DevDisconnected>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d13c      	bne.n	80087a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800872c:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <USBD_LL_Init+0x94>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a1e      	ldr	r2, [pc, #120]	; (80087b0 <USBD_LL_Init+0x94>)
 8008738:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <USBD_LL_Init+0x94>)
 800873e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <USBD_LL_Init+0x94>)
 8008746:	2204      	movs	r2, #4
 8008748:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800874a:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <USBD_LL_Init+0x94>)
 800874c:	2202      	movs	r2, #2
 800874e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <USBD_LL_Init+0x94>)
 8008752:	2200      	movs	r2, #0
 8008754:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <USBD_LL_Init+0x94>)
 8008758:	2202      	movs	r2, #2
 800875a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <USBD_LL_Init+0x94>)
 800875e:	2200      	movs	r2, #0
 8008760:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <USBD_LL_Init+0x94>)
 8008764:	2200      	movs	r2, #0
 8008766:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008768:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <USBD_LL_Init+0x94>)
 800876a:	2200      	movs	r2, #0
 800876c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800876e:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <USBD_LL_Init+0x94>)
 8008770:	2200      	movs	r2, #0
 8008772:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008774:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <USBD_LL_Init+0x94>)
 8008776:	2200      	movs	r2, #0
 8008778:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800877a:	480d      	ldr	r0, [pc, #52]	; (80087b0 <USBD_LL_Init+0x94>)
 800877c:	f7fa faa4 	bl	8002cc8 <HAL_PCD_Init>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008786:	f7f8 fcad 	bl	80010e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800878a:	2180      	movs	r1, #128	; 0x80
 800878c:	4808      	ldr	r0, [pc, #32]	; (80087b0 <USBD_LL_Init+0x94>)
 800878e:	f7fb fcce 	bl	800412e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	2100      	movs	r1, #0
 8008796:	4806      	ldr	r0, [pc, #24]	; (80087b0 <USBD_LL_Init+0x94>)
 8008798:	f7fb fc82 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800879c:	2280      	movs	r2, #128	; 0x80
 800879e:	2101      	movs	r1, #1
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <USBD_LL_Init+0x94>)
 80087a2:	f7fb fc7d 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	2000181c 	.word	0x2000181c

080087b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fa fb8b 	bl	8002ee6 <HAL_PCD_Start>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f942 	bl	8008a60 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	461a      	mov	r2, r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	70fb      	strb	r3, [r7, #3]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70bb      	strb	r3, [r7, #2]
 8008800:	4613      	mov	r3, r2
 8008802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008812:	78bb      	ldrb	r3, [r7, #2]
 8008814:	883a      	ldrh	r2, [r7, #0]
 8008816:	78f9      	ldrb	r1, [r7, #3]
 8008818:	f7fb f85f 	bl	80038da <HAL_PCD_EP_Open>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f91c 	bl	8008a60 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fb f8a8 	bl	80039aa <HAL_PCD_EP_Close>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f8fd 	bl	8008a60 <USBD_Get_USB_Status>
 8008866:	4603      	mov	r3, r0
 8008868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886a:	7bbb      	ldrb	r3, [r7, #14]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fb f960 	bl	8003b58 <HAL_PCD_EP_SetStall>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f8de 	bl	8008a60 <USBD_Get_USB_Status>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fb f9a4 	bl	8003c1e <HAL_PCD_EP_ClrStall>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f8bf 	bl	8008a60 <USBD_Get_USB_Status>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	da0b      	bge.n	8008924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	3316      	adds	r3, #22
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	e00b      	b.n	800893c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	f203 2356 	addw	r3, r3, #598	; 0x256
 800893a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa ff93 	bl	8003892 <HAL_PCD_SetAddress>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f874 	bl	8008a60 <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	460b      	mov	r3, r1
 8008994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089a4:	7af9      	ldrb	r1, [r7, #11]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f7fb f89b 	bl	8003ae4 <HAL_PCD_EP_Transmit>
 80089ae:	4603      	mov	r3, r0
 80089b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f853 	bl	8008a60 <USBD_Get_USB_Status>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089be:	7dbb      	ldrb	r3, [r7, #22]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	460b      	mov	r3, r1
 80089d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089e6:	7af9      	ldrb	r1, [r7, #11]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f7fb f827 	bl	8003a3e <HAL_PCD_EP_Receive>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 f832 	bl	8008a60 <USBD_Get_USB_Status>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fb f847 	bl	8003ab4 <HAL_PCD_EP_GetRxCount>
 8008a26:	4603      	mov	r3, r0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a38:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <USBD_static_malloc+0x18>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20001d00 	.word	0x20001d00

08008a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]

}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d817      	bhi.n	8008aa4 <USBD_Get_USB_Status+0x44>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBD_Get_USB_Status+0x1c>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a93 	.word	0x08008a93
 8008a84:	08008a99 	.word	0x08008a99
 8008a88:	08008a9f 	.word	0x08008a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e00b      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	e008      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e005      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e002      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	bf00      	nop
  }
  return usb_status;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <__cvt>:
 8008ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	ec55 4b10 	vmov	r4, r5, d0
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	460e      	mov	r6, r1
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	bfbb      	ittet	lt
 8008aca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ace:	461d      	movlt	r5, r3
 8008ad0:	2300      	movge	r3, #0
 8008ad2:	232d      	movlt	r3, #45	; 0x2d
 8008ad4:	700b      	strb	r3, [r1, #0]
 8008ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ad8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008adc:	4691      	mov	r9, r2
 8008ade:	f023 0820 	bic.w	r8, r3, #32
 8008ae2:	bfbc      	itt	lt
 8008ae4:	4622      	movlt	r2, r4
 8008ae6:	4614      	movlt	r4, r2
 8008ae8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aec:	d005      	beq.n	8008afa <__cvt+0x42>
 8008aee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008af2:	d100      	bne.n	8008af6 <__cvt+0x3e>
 8008af4:	3601      	adds	r6, #1
 8008af6:	2102      	movs	r1, #2
 8008af8:	e000      	b.n	8008afc <__cvt+0x44>
 8008afa:	2103      	movs	r1, #3
 8008afc:	ab03      	add	r3, sp, #12
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	ab02      	add	r3, sp, #8
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	ec45 4b10 	vmov	d0, r4, r5
 8008b08:	4653      	mov	r3, sl
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	f000 fe68 	bl	80097e0 <_dtoa_r>
 8008b10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b14:	4607      	mov	r7, r0
 8008b16:	d102      	bne.n	8008b1e <__cvt+0x66>
 8008b18:	f019 0f01 	tst.w	r9, #1
 8008b1c:	d022      	beq.n	8008b64 <__cvt+0xac>
 8008b1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b22:	eb07 0906 	add.w	r9, r7, r6
 8008b26:	d110      	bne.n	8008b4a <__cvt+0x92>
 8008b28:	783b      	ldrb	r3, [r7, #0]
 8008b2a:	2b30      	cmp	r3, #48	; 0x30
 8008b2c:	d10a      	bne.n	8008b44 <__cvt+0x8c>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2300      	movs	r3, #0
 8008b32:	4620      	mov	r0, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	f7f7 ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b3a:	b918      	cbnz	r0, 8008b44 <__cvt+0x8c>
 8008b3c:	f1c6 0601 	rsb	r6, r6, #1
 8008b40:	f8ca 6000 	str.w	r6, [sl]
 8008b44:	f8da 3000 	ldr.w	r3, [sl]
 8008b48:	4499      	add	r9, r3
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b56:	b108      	cbz	r0, 8008b5c <__cvt+0xa4>
 8008b58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b5c:	2230      	movs	r2, #48	; 0x30
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	454b      	cmp	r3, r9
 8008b62:	d307      	bcc.n	8008b74 <__cvt+0xbc>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b68:	1bdb      	subs	r3, r3, r7
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	b004      	add	sp, #16
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	1c59      	adds	r1, r3, #1
 8008b76:	9103      	str	r1, [sp, #12]
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	e7f0      	b.n	8008b5e <__cvt+0xa6>

08008b7c <__exponent>:
 8008b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2900      	cmp	r1, #0
 8008b82:	bfb8      	it	lt
 8008b84:	4249      	neglt	r1, r1
 8008b86:	f803 2b02 	strb.w	r2, [r3], #2
 8008b8a:	bfb4      	ite	lt
 8008b8c:	222d      	movlt	r2, #45	; 0x2d
 8008b8e:	222b      	movge	r2, #43	; 0x2b
 8008b90:	2909      	cmp	r1, #9
 8008b92:	7042      	strb	r2, [r0, #1]
 8008b94:	dd2a      	ble.n	8008bec <__exponent+0x70>
 8008b96:	f10d 0207 	add.w	r2, sp, #7
 8008b9a:	4617      	mov	r7, r2
 8008b9c:	260a      	movs	r6, #10
 8008b9e:	4694      	mov	ip, r2
 8008ba0:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ba4:	fb06 1415 	mls	r4, r6, r5, r1
 8008ba8:	3430      	adds	r4, #48	; 0x30
 8008baa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008bae:	460c      	mov	r4, r1
 8008bb0:	2c63      	cmp	r4, #99	; 0x63
 8008bb2:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	dcf1      	bgt.n	8008b9e <__exponent+0x22>
 8008bba:	3130      	adds	r1, #48	; 0x30
 8008bbc:	f1ac 0402 	sub.w	r4, ip, #2
 8008bc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008bc4:	1c41      	adds	r1, r0, #1
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	42ba      	cmp	r2, r7
 8008bca:	d30a      	bcc.n	8008be2 <__exponent+0x66>
 8008bcc:	f10d 0209 	add.w	r2, sp, #9
 8008bd0:	eba2 020c 	sub.w	r2, r2, ip
 8008bd4:	42bc      	cmp	r4, r7
 8008bd6:	bf88      	it	hi
 8008bd8:	2200      	movhi	r2, #0
 8008bda:	4413      	add	r3, r2
 8008bdc:	1a18      	subs	r0, r3, r0
 8008bde:	b003      	add	sp, #12
 8008be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008be6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008bea:	e7ed      	b.n	8008bc8 <__exponent+0x4c>
 8008bec:	2330      	movs	r3, #48	; 0x30
 8008bee:	3130      	adds	r1, #48	; 0x30
 8008bf0:	7083      	strb	r3, [r0, #2]
 8008bf2:	70c1      	strb	r1, [r0, #3]
 8008bf4:	1d03      	adds	r3, r0, #4
 8008bf6:	e7f1      	b.n	8008bdc <__exponent+0x60>

08008bf8 <_printf_float>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	ed2d 8b02 	vpush	{d8}
 8008c00:	b08d      	sub	sp, #52	; 0x34
 8008c02:	460c      	mov	r4, r1
 8008c04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c08:	4616      	mov	r6, r2
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	f000 fce7 	bl	80095e0 <_localeconv_r>
 8008c12:	f8d0 a000 	ldr.w	sl, [r0]
 8008c16:	4650      	mov	r0, sl
 8008c18:	f7f7 fb2a 	bl	8000270 <strlen>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f8d8 3000 	ldr.w	r3, [r8]
 8008c28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c2c:	3307      	adds	r3, #7
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	f103 0208 	add.w	r2, r3, #8
 8008c36:	f8c8 2000 	str.w	r2, [r8]
 8008c3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c54:	4b9e      	ldr	r3, [pc, #632]	; (8008ed0 <_printf_float+0x2d8>)
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	f7f7 ff67 	bl	8000b2c <__aeabi_dcmpun>
 8008c5e:	bb88      	cbnz	r0, 8008cc4 <_printf_float+0xcc>
 8008c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c64:	4b9a      	ldr	r3, [pc, #616]	; (8008ed0 <_printf_float+0x2d8>)
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	f7f7 ff41 	bl	8000af0 <__aeabi_dcmple>
 8008c6e:	bb48      	cbnz	r0, 8008cc4 <_printf_float+0xcc>
 8008c70:	2200      	movs	r2, #0
 8008c72:	2300      	movs	r3, #0
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 ff30 	bl	8000adc <__aeabi_dcmplt>
 8008c7c:	b110      	cbz	r0, 8008c84 <_printf_float+0x8c>
 8008c7e:	232d      	movs	r3, #45	; 0x2d
 8008c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c84:	4a93      	ldr	r2, [pc, #588]	; (8008ed4 <_printf_float+0x2dc>)
 8008c86:	4b94      	ldr	r3, [pc, #592]	; (8008ed8 <_printf_float+0x2e0>)
 8008c88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c8c:	bf94      	ite	ls
 8008c8e:	4690      	movls	r8, r2
 8008c90:	4698      	movhi	r8, r3
 8008c92:	2303      	movs	r3, #3
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	9b05      	ldr	r3, [sp, #20]
 8008c98:	f023 0304 	bic.w	r3, r3, #4
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	9700      	str	r7, [sp, #0]
 8008ca4:	4633      	mov	r3, r6
 8008ca6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 f9da 	bl	8009064 <_printf_common>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f040 8090 	bne.w	8008dd6 <_printf_float+0x1de>
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	b00d      	add	sp, #52	; 0x34
 8008cbc:	ecbd 8b02 	vpop	{d8}
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4649      	mov	r1, r9
 8008ccc:	f7f7 ff2e 	bl	8000b2c <__aeabi_dcmpun>
 8008cd0:	b140      	cbz	r0, 8008ce4 <_printf_float+0xec>
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfbc      	itt	lt
 8008cd8:	232d      	movlt	r3, #45	; 0x2d
 8008cda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cde:	4a7f      	ldr	r2, [pc, #508]	; (8008edc <_printf_float+0x2e4>)
 8008ce0:	4b7f      	ldr	r3, [pc, #508]	; (8008ee0 <_printf_float+0x2e8>)
 8008ce2:	e7d1      	b.n	8008c88 <_printf_float+0x90>
 8008ce4:	6863      	ldr	r3, [r4, #4]
 8008ce6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cea:	9206      	str	r2, [sp, #24]
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	d13f      	bne.n	8008d70 <_printf_float+0x178>
 8008cf0:	2306      	movs	r3, #6
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	6861      	ldr	r1, [r4, #4]
 8008cf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	ab0a      	add	r3, sp, #40	; 0x28
 8008d02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d06:	ab09      	add	r3, sp, #36	; 0x24
 8008d08:	ec49 8b10 	vmov	d0, r8, r9
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d14:	4628      	mov	r0, r5
 8008d16:	f7ff fecf 	bl	8008ab8 <__cvt>
 8008d1a:	9b06      	ldr	r3, [sp, #24]
 8008d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d1e:	2b47      	cmp	r3, #71	; 0x47
 8008d20:	4680      	mov	r8, r0
 8008d22:	d108      	bne.n	8008d36 <_printf_float+0x13e>
 8008d24:	1cc8      	adds	r0, r1, #3
 8008d26:	db02      	blt.n	8008d2e <_printf_float+0x136>
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	dd41      	ble.n	8008db2 <_printf_float+0x1ba>
 8008d2e:	f1ab 0302 	sub.w	r3, fp, #2
 8008d32:	fa5f fb83 	uxtb.w	fp, r3
 8008d36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d3a:	d820      	bhi.n	8008d7e <_printf_float+0x186>
 8008d3c:	3901      	subs	r1, #1
 8008d3e:	465a      	mov	r2, fp
 8008d40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d44:	9109      	str	r1, [sp, #36]	; 0x24
 8008d46:	f7ff ff19 	bl	8008b7c <__exponent>
 8008d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d4c:	1813      	adds	r3, r2, r0
 8008d4e:	2a01      	cmp	r2, #1
 8008d50:	4681      	mov	r9, r0
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	dc02      	bgt.n	8008d5c <_printf_float+0x164>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	07d2      	lsls	r2, r2, #31
 8008d5a:	d501      	bpl.n	8008d60 <_printf_float+0x168>
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d09c      	beq.n	8008ca2 <_printf_float+0xaa>
 8008d68:	232d      	movs	r3, #45	; 0x2d
 8008d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d6e:	e798      	b.n	8008ca2 <_printf_float+0xaa>
 8008d70:	9a06      	ldr	r2, [sp, #24]
 8008d72:	2a47      	cmp	r2, #71	; 0x47
 8008d74:	d1be      	bne.n	8008cf4 <_printf_float+0xfc>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1bc      	bne.n	8008cf4 <_printf_float+0xfc>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e7b9      	b.n	8008cf2 <_printf_float+0xfa>
 8008d7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d82:	d118      	bne.n	8008db6 <_printf_float+0x1be>
 8008d84:	2900      	cmp	r1, #0
 8008d86:	6863      	ldr	r3, [r4, #4]
 8008d88:	dd0b      	ble.n	8008da2 <_printf_float+0x1aa>
 8008d8a:	6121      	str	r1, [r4, #16]
 8008d8c:	b913      	cbnz	r3, 8008d94 <_printf_float+0x19c>
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	07d0      	lsls	r0, r2, #31
 8008d92:	d502      	bpl.n	8008d9a <_printf_float+0x1a2>
 8008d94:	3301      	adds	r3, #1
 8008d96:	440b      	add	r3, r1
 8008d98:	6123      	str	r3, [r4, #16]
 8008d9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d9c:	f04f 0900 	mov.w	r9, #0
 8008da0:	e7de      	b.n	8008d60 <_printf_float+0x168>
 8008da2:	b913      	cbnz	r3, 8008daa <_printf_float+0x1b2>
 8008da4:	6822      	ldr	r2, [r4, #0]
 8008da6:	07d2      	lsls	r2, r2, #31
 8008da8:	d501      	bpl.n	8008dae <_printf_float+0x1b6>
 8008daa:	3302      	adds	r3, #2
 8008dac:	e7f4      	b.n	8008d98 <_printf_float+0x1a0>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e7f2      	b.n	8008d98 <_printf_float+0x1a0>
 8008db2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db8:	4299      	cmp	r1, r3
 8008dba:	db05      	blt.n	8008dc8 <_printf_float+0x1d0>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	6121      	str	r1, [r4, #16]
 8008dc0:	07d8      	lsls	r0, r3, #31
 8008dc2:	d5ea      	bpl.n	8008d9a <_printf_float+0x1a2>
 8008dc4:	1c4b      	adds	r3, r1, #1
 8008dc6:	e7e7      	b.n	8008d98 <_printf_float+0x1a0>
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	bfd4      	ite	le
 8008dcc:	f1c1 0202 	rsble	r2, r1, #2
 8008dd0:	2201      	movgt	r2, #1
 8008dd2:	4413      	add	r3, r2
 8008dd4:	e7e0      	b.n	8008d98 <_printf_float+0x1a0>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	055a      	lsls	r2, r3, #21
 8008dda:	d407      	bmi.n	8008dec <_printf_float+0x1f4>
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	4642      	mov	r2, r8
 8008de0:	4631      	mov	r1, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	d12c      	bne.n	8008e44 <_printf_float+0x24c>
 8008dea:	e764      	b.n	8008cb6 <_printf_float+0xbe>
 8008dec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008df0:	f240 80e0 	bls.w	8008fb4 <_printf_float+0x3bc>
 8008df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f7f7 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d034      	beq.n	8008e6e <_printf_float+0x276>
 8008e04:	4a37      	ldr	r2, [pc, #220]	; (8008ee4 <_printf_float+0x2ec>)
 8008e06:	2301      	movs	r3, #1
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af51 	beq.w	8008cb6 <_printf_float+0xbe>
 8008e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	db02      	blt.n	8008e22 <_printf_float+0x22a>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	07d8      	lsls	r0, r3, #31
 8008e20:	d510      	bpl.n	8008e44 <_printf_float+0x24c>
 8008e22:	ee18 3a10 	vmov	r3, s16
 8008e26:	4652      	mov	r2, sl
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b8      	blx	r7
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f43f af41 	beq.w	8008cb6 <_printf_float+0xbe>
 8008e34:	f04f 0800 	mov.w	r8, #0
 8008e38:	f104 091a 	add.w	r9, r4, #26
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4543      	cmp	r3, r8
 8008e42:	dc09      	bgt.n	8008e58 <_printf_float+0x260>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	f100 8107 	bmi.w	800905a <_printf_float+0x462>
 8008e4c:	68e0      	ldr	r0, [r4, #12]
 8008e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e50:	4298      	cmp	r0, r3
 8008e52:	bfb8      	it	lt
 8008e54:	4618      	movlt	r0, r3
 8008e56:	e730      	b.n	8008cba <_printf_float+0xc2>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	464a      	mov	r2, r9
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f af27 	beq.w	8008cb6 <_printf_float+0xbe>
 8008e68:	f108 0801 	add.w	r8, r8, #1
 8008e6c:	e7e6      	b.n	8008e3c <_printf_float+0x244>
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc39      	bgt.n	8008ee8 <_printf_float+0x2f0>
 8008e74:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <_printf_float+0x2ec>)
 8008e76:	2301      	movs	r3, #1
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af19 	beq.w	8008cb6 <_printf_float+0xbe>
 8008e84:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	d102      	bne.n	8008e92 <_printf_float+0x29a>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	07d9      	lsls	r1, r3, #31
 8008e90:	d5d8      	bpl.n	8008e44 <_printf_float+0x24c>
 8008e92:	ee18 3a10 	vmov	r3, s16
 8008e96:	4652      	mov	r2, sl
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af09 	beq.w	8008cb6 <_printf_float+0xbe>
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	f104 0a1a 	add.w	sl, r4, #26
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	425b      	negs	r3, r3
 8008eb0:	454b      	cmp	r3, r9
 8008eb2:	dc01      	bgt.n	8008eb8 <_printf_float+0x2c0>
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb6:	e792      	b.n	8008dde <_printf_float+0x1e6>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4652      	mov	r2, sl
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f aef7 	beq.w	8008cb6 <_printf_float+0xbe>
 8008ec8:	f109 0901 	add.w	r9, r9, #1
 8008ecc:	e7ee      	b.n	8008eac <_printf_float+0x2b4>
 8008ece:	bf00      	nop
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	0800b850 	.word	0x0800b850
 8008ed8:	0800b854 	.word	0x0800b854
 8008edc:	0800b858 	.word	0x0800b858
 8008ee0:	0800b85c 	.word	0x0800b85c
 8008ee4:	0800b860 	.word	0x0800b860
 8008ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bfa8      	it	ge
 8008ef0:	461a      	movge	r2, r3
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	4691      	mov	r9, r2
 8008ef6:	dc37      	bgt.n	8008f68 <_printf_float+0x370>
 8008ef8:	f04f 0b00 	mov.w	fp, #0
 8008efc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f00:	f104 021a 	add.w	r2, r4, #26
 8008f04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	eba3 0309 	sub.w	r3, r3, r9
 8008f0c:	455b      	cmp	r3, fp
 8008f0e:	dc33      	bgt.n	8008f78 <_printf_float+0x380>
 8008f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f14:	429a      	cmp	r2, r3
 8008f16:	db3b      	blt.n	8008f90 <_printf_float+0x398>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	07da      	lsls	r2, r3, #31
 8008f1c:	d438      	bmi.n	8008f90 <_printf_float+0x398>
 8008f1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f22:	eba2 0903 	sub.w	r9, r2, r3
 8008f26:	9b05      	ldr	r3, [sp, #20]
 8008f28:	1ad2      	subs	r2, r2, r3
 8008f2a:	4591      	cmp	r9, r2
 8008f2c:	bfa8      	it	ge
 8008f2e:	4691      	movge	r9, r2
 8008f30:	f1b9 0f00 	cmp.w	r9, #0
 8008f34:	dc35      	bgt.n	8008fa2 <_printf_float+0x3aa>
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f3e:	f104 0a1a 	add.w	sl, r4, #26
 8008f42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	eba3 0309 	sub.w	r3, r3, r9
 8008f4c:	4543      	cmp	r3, r8
 8008f4e:	f77f af79 	ble.w	8008e44 <_printf_float+0x24c>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4652      	mov	r2, sl
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f aeaa 	beq.w	8008cb6 <_printf_float+0xbe>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	e7ec      	b.n	8008f42 <_printf_float+0x34a>
 8008f68:	4613      	mov	r3, r2
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	d1c0      	bne.n	8008ef8 <_printf_float+0x300>
 8008f76:	e69e      	b.n	8008cb6 <_printf_float+0xbe>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	9205      	str	r2, [sp, #20]
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f ae97 	beq.w	8008cb6 <_printf_float+0xbe>
 8008f88:	9a05      	ldr	r2, [sp, #20]
 8008f8a:	f10b 0b01 	add.w	fp, fp, #1
 8008f8e:	e7b9      	b.n	8008f04 <_printf_float+0x30c>
 8008f90:	ee18 3a10 	vmov	r3, s16
 8008f94:	4652      	mov	r2, sl
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d1be      	bne.n	8008f1e <_printf_float+0x326>
 8008fa0:	e689      	b.n	8008cb6 <_printf_float+0xbe>
 8008fa2:	9a05      	ldr	r2, [sp, #20]
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	4442      	add	r2, r8
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	d1c1      	bne.n	8008f36 <_printf_float+0x33e>
 8008fb2:	e680      	b.n	8008cb6 <_printf_float+0xbe>
 8008fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb6:	2a01      	cmp	r2, #1
 8008fb8:	dc01      	bgt.n	8008fbe <_printf_float+0x3c6>
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d53a      	bpl.n	8009034 <_printf_float+0x43c>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae74 	beq.w	8008cb6 <_printf_float+0xbe>
 8008fce:	ee18 3a10 	vmov	r3, s16
 8008fd2:	4652      	mov	r2, sl
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f43f ae6b 	beq.w	8008cb6 <_printf_float+0xbe>
 8008fe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008fec:	f7f7 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff0:	b9d8      	cbnz	r0, 800902a <_printf_float+0x432>
 8008ff2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ff6:	f108 0201 	add.w	r2, r8, #1
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b8      	blx	r7
 8009000:	3001      	adds	r0, #1
 8009002:	d10e      	bne.n	8009022 <_printf_float+0x42a>
 8009004:	e657      	b.n	8008cb6 <_printf_float+0xbe>
 8009006:	2301      	movs	r3, #1
 8009008:	4652      	mov	r2, sl
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	f43f ae50 	beq.w	8008cb6 <_printf_float+0xbe>
 8009016:	f108 0801 	add.w	r8, r8, #1
 800901a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901c:	3b01      	subs	r3, #1
 800901e:	4543      	cmp	r3, r8
 8009020:	dcf1      	bgt.n	8009006 <_printf_float+0x40e>
 8009022:	464b      	mov	r3, r9
 8009024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009028:	e6da      	b.n	8008de0 <_printf_float+0x1e8>
 800902a:	f04f 0800 	mov.w	r8, #0
 800902e:	f104 0a1a 	add.w	sl, r4, #26
 8009032:	e7f2      	b.n	800901a <_printf_float+0x422>
 8009034:	2301      	movs	r3, #1
 8009036:	4642      	mov	r2, r8
 8009038:	e7df      	b.n	8008ffa <_printf_float+0x402>
 800903a:	2301      	movs	r3, #1
 800903c:	464a      	mov	r2, r9
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	f43f ae36 	beq.w	8008cb6 <_printf_float+0xbe>
 800904a:	f108 0801 	add.w	r8, r8, #1
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009052:	1a5b      	subs	r3, r3, r1
 8009054:	4543      	cmp	r3, r8
 8009056:	dcf0      	bgt.n	800903a <_printf_float+0x442>
 8009058:	e6f8      	b.n	8008e4c <_printf_float+0x254>
 800905a:	f04f 0800 	mov.w	r8, #0
 800905e:	f104 0919 	add.w	r9, r4, #25
 8009062:	e7f4      	b.n	800904e <_printf_float+0x456>

08009064 <_printf_common>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	4616      	mov	r6, r2
 800906a:	4699      	mov	r9, r3
 800906c:	688a      	ldr	r2, [r1, #8]
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009074:	4293      	cmp	r3, r2
 8009076:	bfb8      	it	lt
 8009078:	4613      	movlt	r3, r2
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009080:	4607      	mov	r7, r0
 8009082:	460c      	mov	r4, r1
 8009084:	b10a      	cbz	r2, 800908a <_printf_common+0x26>
 8009086:	3301      	adds	r3, #1
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	0699      	lsls	r1, r3, #26
 800908e:	bf42      	ittt	mi
 8009090:	6833      	ldrmi	r3, [r6, #0]
 8009092:	3302      	addmi	r3, #2
 8009094:	6033      	strmi	r3, [r6, #0]
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	f015 0506 	ands.w	r5, r5, #6
 800909c:	d106      	bne.n	80090ac <_printf_common+0x48>
 800909e:	f104 0a19 	add.w	sl, r4, #25
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	6832      	ldr	r2, [r6, #0]
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc26      	bgt.n	80090fa <_printf_common+0x96>
 80090ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b0:	1e13      	subs	r3, r2, #0
 80090b2:	6822      	ldr	r2, [r4, #0]
 80090b4:	bf18      	it	ne
 80090b6:	2301      	movne	r3, #1
 80090b8:	0692      	lsls	r2, r2, #26
 80090ba:	d42b      	bmi.n	8009114 <_printf_common+0xb0>
 80090bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c0:	4649      	mov	r1, r9
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c0      	blx	r8
 80090c6:	3001      	adds	r0, #1
 80090c8:	d01e      	beq.n	8009108 <_printf_common+0xa4>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	f003 0306 	and.w	r3, r3, #6
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	bf02      	ittt	eq
 80090d6:	68e5      	ldreq	r5, [r4, #12]
 80090d8:	6833      	ldreq	r3, [r6, #0]
 80090da:	1aed      	subeq	r5, r5, r3
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	bf0c      	ite	eq
 80090e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e4:	2500      	movne	r5, #0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	bfc4      	itt	gt
 80090ea:	1a9b      	subgt	r3, r3, r2
 80090ec:	18ed      	addgt	r5, r5, r3
 80090ee:	2600      	movs	r6, #0
 80090f0:	341a      	adds	r4, #26
 80090f2:	42b5      	cmp	r5, r6
 80090f4:	d11a      	bne.n	800912c <_printf_common+0xc8>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e008      	b.n	800910c <_printf_common+0xa8>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4652      	mov	r2, sl
 80090fe:	4649      	mov	r1, r9
 8009100:	4638      	mov	r0, r7
 8009102:	47c0      	blx	r8
 8009104:	3001      	adds	r0, #1
 8009106:	d103      	bne.n	8009110 <_printf_common+0xac>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009110:	3501      	adds	r5, #1
 8009112:	e7c6      	b.n	80090a2 <_printf_common+0x3e>
 8009114:	18e1      	adds	r1, r4, r3
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	2030      	movs	r0, #48	; 0x30
 800911a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800911e:	4422      	add	r2, r4
 8009120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009128:	3302      	adds	r3, #2
 800912a:	e7c7      	b.n	80090bc <_printf_common+0x58>
 800912c:	2301      	movs	r3, #1
 800912e:	4622      	mov	r2, r4
 8009130:	4649      	mov	r1, r9
 8009132:	4638      	mov	r0, r7
 8009134:	47c0      	blx	r8
 8009136:	3001      	adds	r0, #1
 8009138:	d0e6      	beq.n	8009108 <_printf_common+0xa4>
 800913a:	3601      	adds	r6, #1
 800913c:	e7d9      	b.n	80090f2 <_printf_common+0x8e>
	...

08009140 <_printf_i>:
 8009140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	7e0f      	ldrb	r7, [r1, #24]
 8009146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009148:	2f78      	cmp	r7, #120	; 0x78
 800914a:	4691      	mov	r9, r2
 800914c:	4680      	mov	r8, r0
 800914e:	460c      	mov	r4, r1
 8009150:	469a      	mov	sl, r3
 8009152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009156:	d807      	bhi.n	8009168 <_printf_i+0x28>
 8009158:	2f62      	cmp	r7, #98	; 0x62
 800915a:	d80a      	bhi.n	8009172 <_printf_i+0x32>
 800915c:	2f00      	cmp	r7, #0
 800915e:	f000 80d4 	beq.w	800930a <_printf_i+0x1ca>
 8009162:	2f58      	cmp	r7, #88	; 0x58
 8009164:	f000 80c0 	beq.w	80092e8 <_printf_i+0x1a8>
 8009168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009170:	e03a      	b.n	80091e8 <_printf_i+0xa8>
 8009172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009176:	2b15      	cmp	r3, #21
 8009178:	d8f6      	bhi.n	8009168 <_printf_i+0x28>
 800917a:	a101      	add	r1, pc, #4	; (adr r1, 8009180 <_printf_i+0x40>)
 800917c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009180:	080091d9 	.word	0x080091d9
 8009184:	080091ed 	.word	0x080091ed
 8009188:	08009169 	.word	0x08009169
 800918c:	08009169 	.word	0x08009169
 8009190:	08009169 	.word	0x08009169
 8009194:	08009169 	.word	0x08009169
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009169 	.word	0x08009169
 80091a0:	08009169 	.word	0x08009169
 80091a4:	08009169 	.word	0x08009169
 80091a8:	08009169 	.word	0x08009169
 80091ac:	080092f1 	.word	0x080092f1
 80091b0:	08009219 	.word	0x08009219
 80091b4:	080092ab 	.word	0x080092ab
 80091b8:	08009169 	.word	0x08009169
 80091bc:	08009169 	.word	0x08009169
 80091c0:	08009313 	.word	0x08009313
 80091c4:	08009169 	.word	0x08009169
 80091c8:	08009219 	.word	0x08009219
 80091cc:	08009169 	.word	0x08009169
 80091d0:	08009169 	.word	0x08009169
 80091d4:	080092b3 	.word	0x080092b3
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	1d1a      	adds	r2, r3, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	602a      	str	r2, [r5, #0]
 80091e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091e8:	2301      	movs	r3, #1
 80091ea:	e09f      	b.n	800932c <_printf_i+0x1ec>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	0607      	lsls	r7, r0, #24
 80091f2:	f103 0104 	add.w	r1, r3, #4
 80091f6:	6029      	str	r1, [r5, #0]
 80091f8:	d501      	bpl.n	80091fe <_printf_i+0xbe>
 80091fa:	681e      	ldr	r6, [r3, #0]
 80091fc:	e003      	b.n	8009206 <_printf_i+0xc6>
 80091fe:	0646      	lsls	r6, r0, #25
 8009200:	d5fb      	bpl.n	80091fa <_printf_i+0xba>
 8009202:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009206:	2e00      	cmp	r6, #0
 8009208:	da03      	bge.n	8009212 <_printf_i+0xd2>
 800920a:	232d      	movs	r3, #45	; 0x2d
 800920c:	4276      	negs	r6, r6
 800920e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009212:	485a      	ldr	r0, [pc, #360]	; (800937c <_printf_i+0x23c>)
 8009214:	230a      	movs	r3, #10
 8009216:	e012      	b.n	800923e <_printf_i+0xfe>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	6820      	ldr	r0, [r4, #0]
 800921c:	1d19      	adds	r1, r3, #4
 800921e:	6029      	str	r1, [r5, #0]
 8009220:	0605      	lsls	r5, r0, #24
 8009222:	d501      	bpl.n	8009228 <_printf_i+0xe8>
 8009224:	681e      	ldr	r6, [r3, #0]
 8009226:	e002      	b.n	800922e <_printf_i+0xee>
 8009228:	0641      	lsls	r1, r0, #25
 800922a:	d5fb      	bpl.n	8009224 <_printf_i+0xe4>
 800922c:	881e      	ldrh	r6, [r3, #0]
 800922e:	4853      	ldr	r0, [pc, #332]	; (800937c <_printf_i+0x23c>)
 8009230:	2f6f      	cmp	r7, #111	; 0x6f
 8009232:	bf0c      	ite	eq
 8009234:	2308      	moveq	r3, #8
 8009236:	230a      	movne	r3, #10
 8009238:	2100      	movs	r1, #0
 800923a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800923e:	6865      	ldr	r5, [r4, #4]
 8009240:	60a5      	str	r5, [r4, #8]
 8009242:	2d00      	cmp	r5, #0
 8009244:	bfa2      	ittt	ge
 8009246:	6821      	ldrge	r1, [r4, #0]
 8009248:	f021 0104 	bicge.w	r1, r1, #4
 800924c:	6021      	strge	r1, [r4, #0]
 800924e:	b90e      	cbnz	r6, 8009254 <_printf_i+0x114>
 8009250:	2d00      	cmp	r5, #0
 8009252:	d04b      	beq.n	80092ec <_printf_i+0x1ac>
 8009254:	4615      	mov	r5, r2
 8009256:	fbb6 f1f3 	udiv	r1, r6, r3
 800925a:	fb03 6711 	mls	r7, r3, r1, r6
 800925e:	5dc7      	ldrb	r7, [r0, r7]
 8009260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009264:	4637      	mov	r7, r6
 8009266:	42bb      	cmp	r3, r7
 8009268:	460e      	mov	r6, r1
 800926a:	d9f4      	bls.n	8009256 <_printf_i+0x116>
 800926c:	2b08      	cmp	r3, #8
 800926e:	d10b      	bne.n	8009288 <_printf_i+0x148>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	07de      	lsls	r6, r3, #31
 8009274:	d508      	bpl.n	8009288 <_printf_i+0x148>
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	6861      	ldr	r1, [r4, #4]
 800927a:	4299      	cmp	r1, r3
 800927c:	bfde      	ittt	le
 800927e:	2330      	movle	r3, #48	; 0x30
 8009280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009284:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009288:	1b52      	subs	r2, r2, r5
 800928a:	6122      	str	r2, [r4, #16]
 800928c:	f8cd a000 	str.w	sl, [sp]
 8009290:	464b      	mov	r3, r9
 8009292:	aa03      	add	r2, sp, #12
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f7ff fee4 	bl	8009064 <_printf_common>
 800929c:	3001      	adds	r0, #1
 800929e:	d14a      	bne.n	8009336 <_printf_i+0x1f6>
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	b004      	add	sp, #16
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	f043 0320 	orr.w	r3, r3, #32
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	4833      	ldr	r0, [pc, #204]	; (8009380 <_printf_i+0x240>)
 80092b4:	2778      	movs	r7, #120	; 0x78
 80092b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	6829      	ldr	r1, [r5, #0]
 80092be:	061f      	lsls	r7, r3, #24
 80092c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80092c4:	d402      	bmi.n	80092cc <_printf_i+0x18c>
 80092c6:	065f      	lsls	r7, r3, #25
 80092c8:	bf48      	it	mi
 80092ca:	b2b6      	uxthmi	r6, r6
 80092cc:	07df      	lsls	r7, r3, #31
 80092ce:	bf48      	it	mi
 80092d0:	f043 0320 	orrmi.w	r3, r3, #32
 80092d4:	6029      	str	r1, [r5, #0]
 80092d6:	bf48      	it	mi
 80092d8:	6023      	strmi	r3, [r4, #0]
 80092da:	b91e      	cbnz	r6, 80092e4 <_printf_i+0x1a4>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	f023 0320 	bic.w	r3, r3, #32
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	2310      	movs	r3, #16
 80092e6:	e7a7      	b.n	8009238 <_printf_i+0xf8>
 80092e8:	4824      	ldr	r0, [pc, #144]	; (800937c <_printf_i+0x23c>)
 80092ea:	e7e4      	b.n	80092b6 <_printf_i+0x176>
 80092ec:	4615      	mov	r5, r2
 80092ee:	e7bd      	b.n	800926c <_printf_i+0x12c>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	6826      	ldr	r6, [r4, #0]
 80092f4:	6961      	ldr	r1, [r4, #20]
 80092f6:	1d18      	adds	r0, r3, #4
 80092f8:	6028      	str	r0, [r5, #0]
 80092fa:	0635      	lsls	r5, r6, #24
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0x1c4>
 8009300:	6019      	str	r1, [r3, #0]
 8009302:	e002      	b.n	800930a <_printf_i+0x1ca>
 8009304:	0670      	lsls	r0, r6, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0x1c0>
 8009308:	8019      	strh	r1, [r3, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	4615      	mov	r5, r2
 8009310:	e7bc      	b.n	800928c <_printf_i+0x14c>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	602a      	str	r2, [r5, #0]
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	2100      	movs	r1, #0
 800931e:	4628      	mov	r0, r5
 8009320:	f7f6 ff56 	bl	80001d0 <memchr>
 8009324:	b108      	cbz	r0, 800932a <_printf_i+0x1ea>
 8009326:	1b40      	subs	r0, r0, r5
 8009328:	6060      	str	r0, [r4, #4]
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	2300      	movs	r3, #0
 8009330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009334:	e7aa      	b.n	800928c <_printf_i+0x14c>
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	462a      	mov	r2, r5
 800933a:	4649      	mov	r1, r9
 800933c:	4640      	mov	r0, r8
 800933e:	47d0      	blx	sl
 8009340:	3001      	adds	r0, #1
 8009342:	d0ad      	beq.n	80092a0 <_printf_i+0x160>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	079b      	lsls	r3, r3, #30
 8009348:	d413      	bmi.n	8009372 <_printf_i+0x232>
 800934a:	68e0      	ldr	r0, [r4, #12]
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	4298      	cmp	r0, r3
 8009350:	bfb8      	it	lt
 8009352:	4618      	movlt	r0, r3
 8009354:	e7a6      	b.n	80092a4 <_printf_i+0x164>
 8009356:	2301      	movs	r3, #1
 8009358:	4632      	mov	r2, r6
 800935a:	4649      	mov	r1, r9
 800935c:	4640      	mov	r0, r8
 800935e:	47d0      	blx	sl
 8009360:	3001      	adds	r0, #1
 8009362:	d09d      	beq.n	80092a0 <_printf_i+0x160>
 8009364:	3501      	adds	r5, #1
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	9903      	ldr	r1, [sp, #12]
 800936a:	1a5b      	subs	r3, r3, r1
 800936c:	42ab      	cmp	r3, r5
 800936e:	dcf2      	bgt.n	8009356 <_printf_i+0x216>
 8009370:	e7eb      	b.n	800934a <_printf_i+0x20a>
 8009372:	2500      	movs	r5, #0
 8009374:	f104 0619 	add.w	r6, r4, #25
 8009378:	e7f5      	b.n	8009366 <_printf_i+0x226>
 800937a:	bf00      	nop
 800937c:	0800b862 	.word	0x0800b862
 8009380:	0800b873 	.word	0x0800b873

08009384 <std>:
 8009384:	2300      	movs	r3, #0
 8009386:	b510      	push	{r4, lr}
 8009388:	4604      	mov	r4, r0
 800938a:	e9c0 3300 	strd	r3, r3, [r0]
 800938e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009392:	6083      	str	r3, [r0, #8]
 8009394:	8181      	strh	r1, [r0, #12]
 8009396:	6643      	str	r3, [r0, #100]	; 0x64
 8009398:	81c2      	strh	r2, [r0, #14]
 800939a:	6183      	str	r3, [r0, #24]
 800939c:	4619      	mov	r1, r3
 800939e:	2208      	movs	r2, #8
 80093a0:	305c      	adds	r0, #92	; 0x5c
 80093a2:	f000 f914 	bl	80095ce <memset>
 80093a6:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <std+0x58>)
 80093a8:	6263      	str	r3, [r4, #36]	; 0x24
 80093aa:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <std+0x5c>)
 80093ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <std+0x60>)
 80093b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093b2:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <std+0x64>)
 80093b4:	6323      	str	r3, [r4, #48]	; 0x30
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <std+0x68>)
 80093b8:	6224      	str	r4, [r4, #32]
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d006      	beq.n	80093cc <std+0x48>
 80093be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80093c2:	4294      	cmp	r4, r2
 80093c4:	d002      	beq.n	80093cc <std+0x48>
 80093c6:	33d0      	adds	r3, #208	; 0xd0
 80093c8:	429c      	cmp	r4, r3
 80093ca:	d105      	bne.n	80093d8 <std+0x54>
 80093cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d4:	f000 b978 	b.w	80096c8 <__retarget_lock_init_recursive>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	bf00      	nop
 80093dc:	08009549 	.word	0x08009549
 80093e0:	0800956b 	.word	0x0800956b
 80093e4:	080095a3 	.word	0x080095a3
 80093e8:	080095c7 	.word	0x080095c7
 80093ec:	20001f20 	.word	0x20001f20

080093f0 <stdio_exit_handler>:
 80093f0:	4a02      	ldr	r2, [pc, #8]	; (80093fc <stdio_exit_handler+0xc>)
 80093f2:	4903      	ldr	r1, [pc, #12]	; (8009400 <stdio_exit_handler+0x10>)
 80093f4:	4803      	ldr	r0, [pc, #12]	; (8009404 <stdio_exit_handler+0x14>)
 80093f6:	f000 b869 	b.w	80094cc <_fwalk_sglue>
 80093fa:	bf00      	nop
 80093fc:	200000fc 	.word	0x200000fc
 8009400:	0800b079 	.word	0x0800b079
 8009404:	20000108 	.word	0x20000108

08009408 <cleanup_stdio>:
 8009408:	6841      	ldr	r1, [r0, #4]
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <cleanup_stdio+0x34>)
 800940c:	4299      	cmp	r1, r3
 800940e:	b510      	push	{r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	d001      	beq.n	8009418 <cleanup_stdio+0x10>
 8009414:	f001 fe30 	bl	800b078 <_fflush_r>
 8009418:	68a1      	ldr	r1, [r4, #8]
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <cleanup_stdio+0x38>)
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <cleanup_stdio+0x1e>
 8009420:	4620      	mov	r0, r4
 8009422:	f001 fe29 	bl	800b078 <_fflush_r>
 8009426:	68e1      	ldr	r1, [r4, #12]
 8009428:	4b06      	ldr	r3, [pc, #24]	; (8009444 <cleanup_stdio+0x3c>)
 800942a:	4299      	cmp	r1, r3
 800942c:	d004      	beq.n	8009438 <cleanup_stdio+0x30>
 800942e:	4620      	mov	r0, r4
 8009430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009434:	f001 be20 	b.w	800b078 <_fflush_r>
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	20001f20 	.word	0x20001f20
 8009440:	20001f88 	.word	0x20001f88
 8009444:	20001ff0 	.word	0x20001ff0

08009448 <global_stdio_init.part.0>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <global_stdio_init.part.0+0x30>)
 800944c:	4c0b      	ldr	r4, [pc, #44]	; (800947c <global_stdio_init.part.0+0x34>)
 800944e:	4a0c      	ldr	r2, [pc, #48]	; (8009480 <global_stdio_init.part.0+0x38>)
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	4620      	mov	r0, r4
 8009454:	2200      	movs	r2, #0
 8009456:	2104      	movs	r1, #4
 8009458:	f7ff ff94 	bl	8009384 <std>
 800945c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009460:	2201      	movs	r2, #1
 8009462:	2109      	movs	r1, #9
 8009464:	f7ff ff8e 	bl	8009384 <std>
 8009468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800946c:	2202      	movs	r2, #2
 800946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009472:	2112      	movs	r1, #18
 8009474:	f7ff bf86 	b.w	8009384 <std>
 8009478:	20002058 	.word	0x20002058
 800947c:	20001f20 	.word	0x20001f20
 8009480:	080093f1 	.word	0x080093f1

08009484 <__sfp_lock_acquire>:
 8009484:	4801      	ldr	r0, [pc, #4]	; (800948c <__sfp_lock_acquire+0x8>)
 8009486:	f000 b920 	b.w	80096ca <__retarget_lock_acquire_recursive>
 800948a:	bf00      	nop
 800948c:	20002061 	.word	0x20002061

08009490 <__sfp_lock_release>:
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <__sfp_lock_release+0x8>)
 8009492:	f000 b91b 	b.w	80096cc <__retarget_lock_release_recursive>
 8009496:	bf00      	nop
 8009498:	20002061 	.word	0x20002061

0800949c <__sinit>:
 800949c:	b510      	push	{r4, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	f7ff fff0 	bl	8009484 <__sfp_lock_acquire>
 80094a4:	6a23      	ldr	r3, [r4, #32]
 80094a6:	b11b      	cbz	r3, 80094b0 <__sinit+0x14>
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ac:	f7ff bff0 	b.w	8009490 <__sfp_lock_release>
 80094b0:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <__sinit+0x28>)
 80094b2:	6223      	str	r3, [r4, #32]
 80094b4:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <__sinit+0x2c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f5      	bne.n	80094a8 <__sinit+0xc>
 80094bc:	f7ff ffc4 	bl	8009448 <global_stdio_init.part.0>
 80094c0:	e7f2      	b.n	80094a8 <__sinit+0xc>
 80094c2:	bf00      	nop
 80094c4:	08009409 	.word	0x08009409
 80094c8:	20002058 	.word	0x20002058

080094cc <_fwalk_sglue>:
 80094cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	4607      	mov	r7, r0
 80094d2:	4688      	mov	r8, r1
 80094d4:	4614      	mov	r4, r2
 80094d6:	2600      	movs	r6, #0
 80094d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094dc:	f1b9 0901 	subs.w	r9, r9, #1
 80094e0:	d505      	bpl.n	80094ee <_fwalk_sglue+0x22>
 80094e2:	6824      	ldr	r4, [r4, #0]
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	d1f7      	bne.n	80094d8 <_fwalk_sglue+0xc>
 80094e8:	4630      	mov	r0, r6
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d907      	bls.n	8009504 <_fwalk_sglue+0x38>
 80094f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094f8:	3301      	adds	r3, #1
 80094fa:	d003      	beq.n	8009504 <_fwalk_sglue+0x38>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	4306      	orrs	r6, r0
 8009504:	3568      	adds	r5, #104	; 0x68
 8009506:	e7e9      	b.n	80094dc <_fwalk_sglue+0x10>

08009508 <siprintf>:
 8009508:	b40e      	push	{r1, r2, r3}
 800950a:	b500      	push	{lr}
 800950c:	b09c      	sub	sp, #112	; 0x70
 800950e:	ab1d      	add	r3, sp, #116	; 0x74
 8009510:	9002      	str	r0, [sp, #8]
 8009512:	9006      	str	r0, [sp, #24]
 8009514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <siprintf+0x38>)
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	9104      	str	r1, [sp, #16]
 800951e:	4909      	ldr	r1, [pc, #36]	; (8009544 <siprintf+0x3c>)
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	6800      	ldr	r0, [r0, #0]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	a902      	add	r1, sp, #8
 800952c:	f001 fc20 	bl	800ad70 <_svfiprintf_r>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	b01c      	add	sp, #112	; 0x70
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	b003      	add	sp, #12
 800953e:	4770      	bx	lr
 8009540:	20000154 	.word	0x20000154
 8009544:	ffff0208 	.word	0xffff0208

08009548 <__sread>:
 8009548:	b510      	push	{r4, lr}
 800954a:	460c      	mov	r4, r1
 800954c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009550:	f000 f86c 	bl	800962c <_read_r>
 8009554:	2800      	cmp	r0, #0
 8009556:	bfab      	itete	ge
 8009558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800955a:	89a3      	ldrhlt	r3, [r4, #12]
 800955c:	181b      	addge	r3, r3, r0
 800955e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009562:	bfac      	ite	ge
 8009564:	6563      	strge	r3, [r4, #84]	; 0x54
 8009566:	81a3      	strhlt	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__swrite>:
 800956a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	461f      	mov	r7, r3
 8009570:	898b      	ldrh	r3, [r1, #12]
 8009572:	05db      	lsls	r3, r3, #23
 8009574:	4605      	mov	r5, r0
 8009576:	460c      	mov	r4, r1
 8009578:	4616      	mov	r6, r2
 800957a:	d505      	bpl.n	8009588 <__swrite+0x1e>
 800957c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009580:	2302      	movs	r3, #2
 8009582:	2200      	movs	r2, #0
 8009584:	f000 f840 	bl	8009608 <_lseek_r>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800958e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	4632      	mov	r2, r6
 8009596:	463b      	mov	r3, r7
 8009598:	4628      	mov	r0, r5
 800959a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800959e:	f000 b857 	b.w	8009650 <_write_r>

080095a2 <__sseek>:
 80095a2:	b510      	push	{r4, lr}
 80095a4:	460c      	mov	r4, r1
 80095a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095aa:	f000 f82d 	bl	8009608 <_lseek_r>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	bf15      	itete	ne
 80095b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80095b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095be:	81a3      	strheq	r3, [r4, #12]
 80095c0:	bf18      	it	ne
 80095c2:	81a3      	strhne	r3, [r4, #12]
 80095c4:	bd10      	pop	{r4, pc}

080095c6 <__sclose>:
 80095c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ca:	f000 b80d 	b.w	80095e8 <_close_r>

080095ce <memset>:
 80095ce:	4402      	add	r2, r0
 80095d0:	4603      	mov	r3, r0
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d100      	bne.n	80095d8 <memset+0xa>
 80095d6:	4770      	bx	lr
 80095d8:	f803 1b01 	strb.w	r1, [r3], #1
 80095dc:	e7f9      	b.n	80095d2 <memset+0x4>
	...

080095e0 <_localeconv_r>:
 80095e0:	4800      	ldr	r0, [pc, #0]	; (80095e4 <_localeconv_r+0x4>)
 80095e2:	4770      	bx	lr
 80095e4:	20000248 	.word	0x20000248

080095e8 <_close_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d06      	ldr	r5, [pc, #24]	; (8009604 <_close_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	f7f7 fe7b 	bl	80012ee <_close>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_close_r+0x1a>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_close_r+0x1a>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	2000205c 	.word	0x2000205c

08009608 <_lseek_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	; (8009628 <_lseek_r+0x20>)
 800960c:	4604      	mov	r4, r0
 800960e:	4608      	mov	r0, r1
 8009610:	4611      	mov	r1, r2
 8009612:	2200      	movs	r2, #0
 8009614:	602a      	str	r2, [r5, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f7f7 fe90 	bl	800133c <_lseek>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_lseek_r+0x1e>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_lseek_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	2000205c 	.word	0x2000205c

0800962c <_read_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	; (800964c <_read_r+0x20>)
 8009630:	4604      	mov	r4, r0
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	2200      	movs	r2, #0
 8009638:	602a      	str	r2, [r5, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f7f7 fe1e 	bl	800127c <_read>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_read_r+0x1e>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_read_r+0x1e>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	2000205c 	.word	0x2000205c

08009650 <_write_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	; (8009670 <_write_r+0x20>)
 8009654:	4604      	mov	r4, r0
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	2200      	movs	r2, #0
 800965c:	602a      	str	r2, [r5, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f7f7 fe29 	bl	80012b6 <_write>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_write_r+0x1e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_write_r+0x1e>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	2000205c 	.word	0x2000205c

08009674 <__errno>:
 8009674:	4b01      	ldr	r3, [pc, #4]	; (800967c <__errno+0x8>)
 8009676:	6818      	ldr	r0, [r3, #0]
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	20000154 	.word	0x20000154

08009680 <__libc_init_array>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	4d0d      	ldr	r5, [pc, #52]	; (80096b8 <__libc_init_array+0x38>)
 8009684:	4c0d      	ldr	r4, [pc, #52]	; (80096bc <__libc_init_array+0x3c>)
 8009686:	1b64      	subs	r4, r4, r5
 8009688:	10a4      	asrs	r4, r4, #2
 800968a:	2600      	movs	r6, #0
 800968c:	42a6      	cmp	r6, r4
 800968e:	d109      	bne.n	80096a4 <__libc_init_array+0x24>
 8009690:	4d0b      	ldr	r5, [pc, #44]	; (80096c0 <__libc_init_array+0x40>)
 8009692:	4c0c      	ldr	r4, [pc, #48]	; (80096c4 <__libc_init_array+0x44>)
 8009694:	f002 f894 	bl	800b7c0 <_init>
 8009698:	1b64      	subs	r4, r4, r5
 800969a:	10a4      	asrs	r4, r4, #2
 800969c:	2600      	movs	r6, #0
 800969e:	42a6      	cmp	r6, r4
 80096a0:	d105      	bne.n	80096ae <__libc_init_array+0x2e>
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a8:	4798      	blx	r3
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7ee      	b.n	800968c <__libc_init_array+0xc>
 80096ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b2:	4798      	blx	r3
 80096b4:	3601      	adds	r6, #1
 80096b6:	e7f2      	b.n	800969e <__libc_init_array+0x1e>
 80096b8:	0800bbcc 	.word	0x0800bbcc
 80096bc:	0800bbcc 	.word	0x0800bbcc
 80096c0:	0800bbcc 	.word	0x0800bbcc
 80096c4:	0800bbd0 	.word	0x0800bbd0

080096c8 <__retarget_lock_init_recursive>:
 80096c8:	4770      	bx	lr

080096ca <__retarget_lock_acquire_recursive>:
 80096ca:	4770      	bx	lr

080096cc <__retarget_lock_release_recursive>:
 80096cc:	4770      	bx	lr

080096ce <quorem>:
 80096ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d2:	6903      	ldr	r3, [r0, #16]
 80096d4:	690c      	ldr	r4, [r1, #16]
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	4607      	mov	r7, r0
 80096da:	db7e      	blt.n	80097da <quorem+0x10c>
 80096dc:	3c01      	subs	r4, #1
 80096de:	f101 0814 	add.w	r8, r1, #20
 80096e2:	f100 0514 	add.w	r5, r0, #20
 80096e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f4:	3301      	adds	r3, #1
 80096f6:	429a      	cmp	r2, r3
 80096f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009700:	fbb2 f6f3 	udiv	r6, r2, r3
 8009704:	d331      	bcc.n	800976a <quorem+0x9c>
 8009706:	f04f 0e00 	mov.w	lr, #0
 800970a:	4640      	mov	r0, r8
 800970c:	46ac      	mov	ip, r5
 800970e:	46f2      	mov	sl, lr
 8009710:	f850 2b04 	ldr.w	r2, [r0], #4
 8009714:	b293      	uxth	r3, r2
 8009716:	fb06 e303 	mla	r3, r6, r3, lr
 800971a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800971e:	0c1a      	lsrs	r2, r3, #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	ebaa 0303 	sub.w	r3, sl, r3
 8009726:	f8dc a000 	ldr.w	sl, [ip]
 800972a:	fa13 f38a 	uxtah	r3, r3, sl
 800972e:	fb06 220e 	mla	r2, r6, lr, r2
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	9b00      	ldr	r3, [sp, #0]
 8009736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800973a:	b292      	uxth	r2, r2
 800973c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009744:	f8bd 3000 	ldrh.w	r3, [sp]
 8009748:	4581      	cmp	r9, r0
 800974a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974e:	f84c 3b04 	str.w	r3, [ip], #4
 8009752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009756:	d2db      	bcs.n	8009710 <quorem+0x42>
 8009758:	f855 300b 	ldr.w	r3, [r5, fp]
 800975c:	b92b      	cbnz	r3, 800976a <quorem+0x9c>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	3b04      	subs	r3, #4
 8009762:	429d      	cmp	r5, r3
 8009764:	461a      	mov	r2, r3
 8009766:	d32c      	bcc.n	80097c2 <quorem+0xf4>
 8009768:	613c      	str	r4, [r7, #16]
 800976a:	4638      	mov	r0, r7
 800976c:	f001 f9a6 	bl	800aabc <__mcmp>
 8009770:	2800      	cmp	r0, #0
 8009772:	db22      	blt.n	80097ba <quorem+0xec>
 8009774:	3601      	adds	r6, #1
 8009776:	4629      	mov	r1, r5
 8009778:	2000      	movs	r0, #0
 800977a:	f858 2b04 	ldr.w	r2, [r8], #4
 800977e:	f8d1 c000 	ldr.w	ip, [r1]
 8009782:	b293      	uxth	r3, r2
 8009784:	1ac3      	subs	r3, r0, r3
 8009786:	0c12      	lsrs	r2, r2, #16
 8009788:	fa13 f38c 	uxtah	r3, r3, ip
 800978c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800979a:	45c1      	cmp	r9, r8
 800979c:	f841 3b04 	str.w	r3, [r1], #4
 80097a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097a4:	d2e9      	bcs.n	800977a <quorem+0xac>
 80097a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ae:	b922      	cbnz	r2, 80097ba <quorem+0xec>
 80097b0:	3b04      	subs	r3, #4
 80097b2:	429d      	cmp	r5, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	d30a      	bcc.n	80097ce <quorem+0x100>
 80097b8:	613c      	str	r4, [r7, #16]
 80097ba:	4630      	mov	r0, r6
 80097bc:	b003      	add	sp, #12
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	d1ce      	bne.n	8009768 <quorem+0x9a>
 80097ca:	3c01      	subs	r4, #1
 80097cc:	e7c9      	b.n	8009762 <quorem+0x94>
 80097ce:	6812      	ldr	r2, [r2, #0]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1f0      	bne.n	80097b8 <quorem+0xea>
 80097d6:	3c01      	subs	r4, #1
 80097d8:	e7eb      	b.n	80097b2 <quorem+0xe4>
 80097da:	2000      	movs	r0, #0
 80097dc:	e7ee      	b.n	80097bc <quorem+0xee>
	...

080097e0 <_dtoa_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b04 	vpush	{d8-d9}
 80097e8:	69c5      	ldr	r5, [r0, #28]
 80097ea:	b093      	sub	sp, #76	; 0x4c
 80097ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80097f0:	ec57 6b10 	vmov	r6, r7, d0
 80097f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097f8:	9107      	str	r1, [sp, #28]
 80097fa:	4604      	mov	r4, r0
 80097fc:	920a      	str	r2, [sp, #40]	; 0x28
 80097fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009800:	b975      	cbnz	r5, 8009820 <_dtoa_r+0x40>
 8009802:	2010      	movs	r0, #16
 8009804:	f000 fe2a 	bl	800a45c <malloc>
 8009808:	4602      	mov	r2, r0
 800980a:	61e0      	str	r0, [r4, #28]
 800980c:	b920      	cbnz	r0, 8009818 <_dtoa_r+0x38>
 800980e:	4bae      	ldr	r3, [pc, #696]	; (8009ac8 <_dtoa_r+0x2e8>)
 8009810:	21ef      	movs	r1, #239	; 0xef
 8009812:	48ae      	ldr	r0, [pc, #696]	; (8009acc <_dtoa_r+0x2ec>)
 8009814:	f001 fc90 	bl	800b138 <__assert_func>
 8009818:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981c:	6005      	str	r5, [r0, #0]
 800981e:	60c5      	str	r5, [r0, #12]
 8009820:	69e3      	ldr	r3, [r4, #28]
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	b151      	cbz	r1, 800983c <_dtoa_r+0x5c>
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	604a      	str	r2, [r1, #4]
 800982a:	2301      	movs	r3, #1
 800982c:	4093      	lsls	r3, r2
 800982e:	608b      	str	r3, [r1, #8]
 8009830:	4620      	mov	r0, r4
 8009832:	f000 ff07 	bl	800a644 <_Bfree>
 8009836:	69e3      	ldr	r3, [r4, #28]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	1e3b      	subs	r3, r7, #0
 800983e:	bfbb      	ittet	lt
 8009840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009844:	9303      	strlt	r3, [sp, #12]
 8009846:	2300      	movge	r3, #0
 8009848:	2201      	movlt	r2, #1
 800984a:	bfac      	ite	ge
 800984c:	f8c8 3000 	strge.w	r3, [r8]
 8009850:	f8c8 2000 	strlt.w	r2, [r8]
 8009854:	4b9e      	ldr	r3, [pc, #632]	; (8009ad0 <_dtoa_r+0x2f0>)
 8009856:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800985a:	ea33 0308 	bics.w	r3, r3, r8
 800985e:	d11b      	bne.n	8009898 <_dtoa_r+0xb8>
 8009860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009862:	f242 730f 	movw	r3, #9999	; 0x270f
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800986c:	4333      	orrs	r3, r6
 800986e:	f000 8593 	beq.w	800a398 <_dtoa_r+0xbb8>
 8009872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009874:	b963      	cbnz	r3, 8009890 <_dtoa_r+0xb0>
 8009876:	4b97      	ldr	r3, [pc, #604]	; (8009ad4 <_dtoa_r+0x2f4>)
 8009878:	e027      	b.n	80098ca <_dtoa_r+0xea>
 800987a:	4b97      	ldr	r3, [pc, #604]	; (8009ad8 <_dtoa_r+0x2f8>)
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	9800      	ldr	r0, [sp, #0]
 8009886:	b013      	add	sp, #76	; 0x4c
 8009888:	ecbd 8b04 	vpop	{d8-d9}
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	4b90      	ldr	r3, [pc, #576]	; (8009ad4 <_dtoa_r+0x2f4>)
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	3303      	adds	r3, #3
 8009896:	e7f3      	b.n	8009880 <_dtoa_r+0xa0>
 8009898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	ec51 0b17 	vmov	r0, r1, d7
 80098a2:	eeb0 8a47 	vmov.f32	s16, s14
 80098a6:	eef0 8a67 	vmov.f32	s17, s15
 80098aa:	2300      	movs	r3, #0
 80098ac:	f7f7 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b0:	4681      	mov	r9, r0
 80098b2:	b160      	cbz	r0, 80098ce <_dtoa_r+0xee>
 80098b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b6:	2301      	movs	r3, #1
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8568 	beq.w	800a392 <_dtoa_r+0xbb2>
 80098c2:	4b86      	ldr	r3, [pc, #536]	; (8009adc <_dtoa_r+0x2fc>)
 80098c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	e7da      	b.n	8009884 <_dtoa_r+0xa4>
 80098ce:	aa10      	add	r2, sp, #64	; 0x40
 80098d0:	a911      	add	r1, sp, #68	; 0x44
 80098d2:	4620      	mov	r0, r4
 80098d4:	eeb0 0a48 	vmov.f32	s0, s16
 80098d8:	eef0 0a68 	vmov.f32	s1, s17
 80098dc:	f001 f994 	bl	800ac08 <__d2b>
 80098e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098e4:	4682      	mov	sl, r0
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	d07f      	beq.n	80099ea <_dtoa_r+0x20a>
 80098ea:	ee18 3a90 	vmov	r3, s17
 80098ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80098f6:	ec51 0b18 	vmov	r0, r1, d8
 80098fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80098fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009902:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009906:	4619      	mov	r1, r3
 8009908:	2200      	movs	r2, #0
 800990a:	4b75      	ldr	r3, [pc, #468]	; (8009ae0 <_dtoa_r+0x300>)
 800990c:	f7f6 fcbc 	bl	8000288 <__aeabi_dsub>
 8009910:	a367      	add	r3, pc, #412	; (adr r3, 8009ab0 <_dtoa_r+0x2d0>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	a367      	add	r3, pc, #412	; (adr r3, 8009ab8 <_dtoa_r+0x2d8>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fcb4 	bl	800028c <__adddf3>
 8009924:	4606      	mov	r6, r0
 8009926:	4628      	mov	r0, r5
 8009928:	460f      	mov	r7, r1
 800992a:	f7f6 fdfb 	bl	8000524 <__aeabi_i2d>
 800992e:	a364      	add	r3, pc, #400	; (adr r3, 8009ac0 <_dtoa_r+0x2e0>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fe60 	bl	80005f8 <__aeabi_dmul>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f6 fca4 	bl	800028c <__adddf3>
 8009944:	4606      	mov	r6, r0
 8009946:	460f      	mov	r7, r1
 8009948:	f7f7 f906 	bl	8000b58 <__aeabi_d2iz>
 800994c:	2200      	movs	r2, #0
 800994e:	4683      	mov	fp, r0
 8009950:	2300      	movs	r3, #0
 8009952:	4630      	mov	r0, r6
 8009954:	4639      	mov	r1, r7
 8009956:	f7f7 f8c1 	bl	8000adc <__aeabi_dcmplt>
 800995a:	b148      	cbz	r0, 8009970 <_dtoa_r+0x190>
 800995c:	4658      	mov	r0, fp
 800995e:	f7f6 fde1 	bl	8000524 <__aeabi_i2d>
 8009962:	4632      	mov	r2, r6
 8009964:	463b      	mov	r3, r7
 8009966:	f7f7 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800996a:	b908      	cbnz	r0, 8009970 <_dtoa_r+0x190>
 800996c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009970:	f1bb 0f16 	cmp.w	fp, #22
 8009974:	d857      	bhi.n	8009a26 <_dtoa_r+0x246>
 8009976:	4b5b      	ldr	r3, [pc, #364]	; (8009ae4 <_dtoa_r+0x304>)
 8009978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	ec51 0b18 	vmov	r0, r1, d8
 8009984:	f7f7 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8009988:	2800      	cmp	r0, #0
 800998a:	d04e      	beq.n	8009a2a <_dtoa_r+0x24a>
 800998c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009990:	2300      	movs	r3, #0
 8009992:	930c      	str	r3, [sp, #48]	; 0x30
 8009994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009996:	1b5b      	subs	r3, r3, r5
 8009998:	1e5a      	subs	r2, r3, #1
 800999a:	bf45      	ittet	mi
 800999c:	f1c3 0301 	rsbmi	r3, r3, #1
 80099a0:	9305      	strmi	r3, [sp, #20]
 80099a2:	2300      	movpl	r3, #0
 80099a4:	2300      	movmi	r3, #0
 80099a6:	9206      	str	r2, [sp, #24]
 80099a8:	bf54      	ite	pl
 80099aa:	9305      	strpl	r3, [sp, #20]
 80099ac:	9306      	strmi	r3, [sp, #24]
 80099ae:	f1bb 0f00 	cmp.w	fp, #0
 80099b2:	db3c      	blt.n	8009a2e <_dtoa_r+0x24e>
 80099b4:	9b06      	ldr	r3, [sp, #24]
 80099b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80099ba:	445b      	add	r3, fp
 80099bc:	9306      	str	r3, [sp, #24]
 80099be:	2300      	movs	r3, #0
 80099c0:	9308      	str	r3, [sp, #32]
 80099c2:	9b07      	ldr	r3, [sp, #28]
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d868      	bhi.n	8009a9a <_dtoa_r+0x2ba>
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	bfc4      	itt	gt
 80099cc:	3b04      	subgt	r3, #4
 80099ce:	9307      	strgt	r3, [sp, #28]
 80099d0:	9b07      	ldr	r3, [sp, #28]
 80099d2:	f1a3 0302 	sub.w	r3, r3, #2
 80099d6:	bfcc      	ite	gt
 80099d8:	2500      	movgt	r5, #0
 80099da:	2501      	movle	r5, #1
 80099dc:	2b03      	cmp	r3, #3
 80099de:	f200 8085 	bhi.w	8009aec <_dtoa_r+0x30c>
 80099e2:	e8df f003 	tbb	[pc, r3]
 80099e6:	3b2e      	.short	0x3b2e
 80099e8:	5839      	.short	0x5839
 80099ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099ee:	441d      	add	r5, r3
 80099f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	bfc1      	itttt	gt
 80099f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a08:	bfd6      	itet	le
 8009a0a:	f1c3 0320 	rsble	r3, r3, #32
 8009a0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a12:	fa06 f003 	lslle.w	r0, r6, r3
 8009a16:	f7f6 fd75 	bl	8000504 <__aeabi_ui2d>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a20:	3d01      	subs	r5, #1
 8009a22:	920e      	str	r2, [sp, #56]	; 0x38
 8009a24:	e76f      	b.n	8009906 <_dtoa_r+0x126>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e7b3      	b.n	8009992 <_dtoa_r+0x1b2>
 8009a2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a2c:	e7b2      	b.n	8009994 <_dtoa_r+0x1b4>
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	eba3 030b 	sub.w	r3, r3, fp
 8009a34:	9305      	str	r3, [sp, #20]
 8009a36:	f1cb 0300 	rsb	r3, fp, #0
 8009a3a:	9308      	str	r3, [sp, #32]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a40:	e7bf      	b.n	80099c2 <_dtoa_r+0x1e2>
 8009a42:	2300      	movs	r3, #0
 8009a44:	9309      	str	r3, [sp, #36]	; 0x24
 8009a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dc52      	bgt.n	8009af2 <_dtoa_r+0x312>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	461a      	mov	r2, r3
 8009a54:	920a      	str	r2, [sp, #40]	; 0x28
 8009a56:	e00b      	b.n	8009a70 <_dtoa_r+0x290>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e7f3      	b.n	8009a44 <_dtoa_r+0x264>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a62:	445b      	add	r3, fp
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	bfb8      	it	lt
 8009a6e:	2301      	movlt	r3, #1
 8009a70:	69e0      	ldr	r0, [r4, #28]
 8009a72:	2100      	movs	r1, #0
 8009a74:	2204      	movs	r2, #4
 8009a76:	f102 0614 	add.w	r6, r2, #20
 8009a7a:	429e      	cmp	r6, r3
 8009a7c:	d93d      	bls.n	8009afa <_dtoa_r+0x31a>
 8009a7e:	6041      	str	r1, [r0, #4]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 fd9f 	bl	800a5c4 <_Balloc>
 8009a86:	9000      	str	r0, [sp, #0]
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d139      	bne.n	8009b00 <_dtoa_r+0x320>
 8009a8c:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <_dtoa_r+0x308>)
 8009a8e:	4602      	mov	r2, r0
 8009a90:	f240 11af 	movw	r1, #431	; 0x1af
 8009a94:	e6bd      	b.n	8009812 <_dtoa_r+0x32>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7e1      	b.n	8009a5e <_dtoa_r+0x27e>
 8009a9a:	2501      	movs	r5, #1
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	9509      	str	r5, [sp, #36]	; 0x24
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2312      	movs	r3, #18
 8009aae:	e7d1      	b.n	8009a54 <_dtoa_r+0x274>
 8009ab0:	636f4361 	.word	0x636f4361
 8009ab4:	3fd287a7 	.word	0x3fd287a7
 8009ab8:	8b60c8b3 	.word	0x8b60c8b3
 8009abc:	3fc68a28 	.word	0x3fc68a28
 8009ac0:	509f79fb 	.word	0x509f79fb
 8009ac4:	3fd34413 	.word	0x3fd34413
 8009ac8:	0800b891 	.word	0x0800b891
 8009acc:	0800b8a8 	.word	0x0800b8a8
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	0800b88d 	.word	0x0800b88d
 8009ad8:	0800b884 	.word	0x0800b884
 8009adc:	0800b861 	.word	0x0800b861
 8009ae0:	3ff80000 	.word	0x3ff80000
 8009ae4:	0800b998 	.word	0x0800b998
 8009ae8:	0800b900 	.word	0x0800b900
 8009aec:	2301      	movs	r3, #1
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	e7d7      	b.n	8009aa2 <_dtoa_r+0x2c2>
 8009af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	e7ba      	b.n	8009a70 <_dtoa_r+0x290>
 8009afa:	3101      	adds	r1, #1
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7ba      	b.n	8009a76 <_dtoa_r+0x296>
 8009b00:	69e3      	ldr	r3, [r4, #28]
 8009b02:	9a00      	ldr	r2, [sp, #0]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	2b0e      	cmp	r3, #14
 8009b0a:	f200 80a8 	bhi.w	8009c5e <_dtoa_r+0x47e>
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	f000 80a5 	beq.w	8009c5e <_dtoa_r+0x47e>
 8009b14:	f1bb 0f00 	cmp.w	fp, #0
 8009b18:	dd38      	ble.n	8009b8c <_dtoa_r+0x3ac>
 8009b1a:	4bc0      	ldr	r3, [pc, #768]	; (8009e1c <_dtoa_r+0x63c>)
 8009b1c:	f00b 020f 	and.w	r2, fp, #15
 8009b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b30:	d019      	beq.n	8009b66 <_dtoa_r+0x386>
 8009b32:	4bbb      	ldr	r3, [pc, #748]	; (8009e20 <_dtoa_r+0x640>)
 8009b34:	ec51 0b18 	vmov	r0, r1, d8
 8009b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b3c:	f7f6 fe86 	bl	800084c <__aeabi_ddiv>
 8009b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b44:	f008 080f 	and.w	r8, r8, #15
 8009b48:	2503      	movs	r5, #3
 8009b4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e20 <_dtoa_r+0x640>
 8009b4e:	f1b8 0f00 	cmp.w	r8, #0
 8009b52:	d10a      	bne.n	8009b6a <_dtoa_r+0x38a>
 8009b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b58:	4632      	mov	r2, r6
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	f7f6 fe76 	bl	800084c <__aeabi_ddiv>
 8009b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b64:	e02b      	b.n	8009bbe <_dtoa_r+0x3de>
 8009b66:	2502      	movs	r5, #2
 8009b68:	e7ef      	b.n	8009b4a <_dtoa_r+0x36a>
 8009b6a:	f018 0f01 	tst.w	r8, #1
 8009b6e:	d008      	beq.n	8009b82 <_dtoa_r+0x3a2>
 8009b70:	4630      	mov	r0, r6
 8009b72:	4639      	mov	r1, r7
 8009b74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b86:	f109 0908 	add.w	r9, r9, #8
 8009b8a:	e7e0      	b.n	8009b4e <_dtoa_r+0x36e>
 8009b8c:	f000 809f 	beq.w	8009cce <_dtoa_r+0x4ee>
 8009b90:	f1cb 0600 	rsb	r6, fp, #0
 8009b94:	4ba1      	ldr	r3, [pc, #644]	; (8009e1c <_dtoa_r+0x63c>)
 8009b96:	4fa2      	ldr	r7, [pc, #648]	; (8009e20 <_dtoa_r+0x640>)
 8009b98:	f006 020f 	and.w	r2, r6, #15
 8009b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	ec51 0b18 	vmov	r0, r1, d8
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bb0:	1136      	asrs	r6, r6, #4
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2502      	movs	r5, #2
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d17e      	bne.n	8009cb8 <_dtoa_r+0x4d8>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1d0      	bne.n	8009b60 <_dtoa_r+0x380>
 8009bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8084 	beq.w	8009cd2 <_dtoa_r+0x4f2>
 8009bca:	4b96      	ldr	r3, [pc, #600]	; (8009e24 <_dtoa_r+0x644>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	f7f6 ff83 	bl	8000adc <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d07b      	beq.n	8009cd2 <_dtoa_r+0x4f2>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d078      	beq.n	8009cd2 <_dtoa_r+0x4f2>
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dd39      	ble.n	8009c5a <_dtoa_r+0x47a>
 8009be6:	4b90      	ldr	r3, [pc, #576]	; (8009e28 <_dtoa_r+0x648>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	4640      	mov	r0, r8
 8009bec:	4649      	mov	r1, r9
 8009bee:	f7f6 fd03 	bl	80005f8 <__aeabi_dmul>
 8009bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf6:	9e01      	ldr	r6, [sp, #4]
 8009bf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c02:	4628      	mov	r0, r5
 8009c04:	f7f6 fc8e 	bl	8000524 <__aeabi_i2d>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	4b86      	ldr	r3, [pc, #536]	; (8009e2c <_dtoa_r+0x64c>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7f6 fb3a 	bl	800028c <__adddf3>
 8009c18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	2e00      	cmp	r6, #0
 8009c24:	d158      	bne.n	8009cd8 <_dtoa_r+0x4f8>
 8009c26:	4b82      	ldr	r3, [pc, #520]	; (8009e30 <_dtoa_r+0x650>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fb2b 	bl	8000288 <__aeabi_dsub>
 8009c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c36:	4680      	mov	r8, r0
 8009c38:	4689      	mov	r9, r1
 8009c3a:	f7f6 ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f040 8296 	bne.w	800a170 <_dtoa_r+0x990>
 8009c44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c48:	4640      	mov	r0, r8
 8009c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 ff44 	bl	8000adc <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f040 8289 	bne.w	800a16c <_dtoa_r+0x98c>
 8009c5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f2c0 814e 	blt.w	8009f02 <_dtoa_r+0x722>
 8009c66:	f1bb 0f0e 	cmp.w	fp, #14
 8009c6a:	f300 814a 	bgt.w	8009f02 <_dtoa_r+0x722>
 8009c6e:	4b6b      	ldr	r3, [pc, #428]	; (8009e1c <_dtoa_r+0x63c>)
 8009c70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f280 80dc 	bge.w	8009e38 <_dtoa_r+0x658>
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f300 80d8 	bgt.w	8009e38 <_dtoa_r+0x658>
 8009c88:	f040 826f 	bne.w	800a16a <_dtoa_r+0x98a>
 8009c8c:	4b68      	ldr	r3, [pc, #416]	; (8009e30 <_dtoa_r+0x650>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4640      	mov	r0, r8
 8009c92:	4649      	mov	r1, r9
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c9c:	f7f6 ff32 	bl	8000b04 <__aeabi_dcmpge>
 8009ca0:	9e04      	ldr	r6, [sp, #16]
 8009ca2:	4637      	mov	r7, r6
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f040 8245 	bne.w	800a134 <_dtoa_r+0x954>
 8009caa:	9d00      	ldr	r5, [sp, #0]
 8009cac:	2331      	movs	r3, #49	; 0x31
 8009cae:	f805 3b01 	strb.w	r3, [r5], #1
 8009cb2:	f10b 0b01 	add.w	fp, fp, #1
 8009cb6:	e241      	b.n	800a13c <_dtoa_r+0x95c>
 8009cb8:	07f2      	lsls	r2, r6, #31
 8009cba:	d505      	bpl.n	8009cc8 <_dtoa_r+0x4e8>
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	3501      	adds	r5, #1
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	1076      	asrs	r6, r6, #1
 8009cca:	3708      	adds	r7, #8
 8009ccc:	e773      	b.n	8009bb6 <_dtoa_r+0x3d6>
 8009cce:	2502      	movs	r5, #2
 8009cd0:	e775      	b.n	8009bbe <_dtoa_r+0x3de>
 8009cd2:	9e04      	ldr	r6, [sp, #16]
 8009cd4:	465f      	mov	r7, fp
 8009cd6:	e792      	b.n	8009bfe <_dtoa_r+0x41e>
 8009cd8:	9900      	ldr	r1, [sp, #0]
 8009cda:	4b50      	ldr	r3, [pc, #320]	; (8009e1c <_dtoa_r+0x63c>)
 8009cdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ce0:	4431      	add	r1, r6
 8009ce2:	9102      	str	r1, [sp, #8]
 8009ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce6:	eeb0 9a47 	vmov.f32	s18, s14
 8009cea:	eef0 9a67 	vmov.f32	s19, s15
 8009cee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	d044      	beq.n	8009d84 <_dtoa_r+0x5a4>
 8009cfa:	494e      	ldr	r1, [pc, #312]	; (8009e34 <_dtoa_r+0x654>)
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f6 fda5 	bl	800084c <__aeabi_ddiv>
 8009d02:	ec53 2b19 	vmov	r2, r3, d9
 8009d06:	f7f6 fabf 	bl	8000288 <__aeabi_dsub>
 8009d0a:	9d00      	ldr	r5, [sp, #0]
 8009d0c:	ec41 0b19 	vmov	d9, r0, r1
 8009d10:	4649      	mov	r1, r9
 8009d12:	4640      	mov	r0, r8
 8009d14:	f7f6 ff20 	bl	8000b58 <__aeabi_d2iz>
 8009d18:	4606      	mov	r6, r0
 8009d1a:	f7f6 fc03 	bl	8000524 <__aeabi_i2d>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	f7f6 faaf 	bl	8000288 <__aeabi_dsub>
 8009d2a:	3630      	adds	r6, #48	; 0x30
 8009d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d30:	ec53 2b19 	vmov	r2, r3, d9
 8009d34:	4680      	mov	r8, r0
 8009d36:	4689      	mov	r9, r1
 8009d38:	f7f6 fed0 	bl	8000adc <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d164      	bne.n	8009e0a <_dtoa_r+0x62a>
 8009d40:	4642      	mov	r2, r8
 8009d42:	464b      	mov	r3, r9
 8009d44:	4937      	ldr	r1, [pc, #220]	; (8009e24 <_dtoa_r+0x644>)
 8009d46:	2000      	movs	r0, #0
 8009d48:	f7f6 fa9e 	bl	8000288 <__aeabi_dsub>
 8009d4c:	ec53 2b19 	vmov	r2, r3, d9
 8009d50:	f7f6 fec4 	bl	8000adc <__aeabi_dcmplt>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f040 80b6 	bne.w	8009ec6 <_dtoa_r+0x6e6>
 8009d5a:	9b02      	ldr	r3, [sp, #8]
 8009d5c:	429d      	cmp	r5, r3
 8009d5e:	f43f af7c 	beq.w	8009c5a <_dtoa_r+0x47a>
 8009d62:	4b31      	ldr	r3, [pc, #196]	; (8009e28 <_dtoa_r+0x648>)
 8009d64:	ec51 0b19 	vmov	r0, r1, d9
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <_dtoa_r+0x648>)
 8009d70:	ec41 0b19 	vmov	d9, r0, r1
 8009d74:	2200      	movs	r2, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fc3d 	bl	80005f8 <__aeabi_dmul>
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4689      	mov	r9, r1
 8009d82:	e7c5      	b.n	8009d10 <_dtoa_r+0x530>
 8009d84:	ec51 0b17 	vmov	r0, r1, d7
 8009d88:	f7f6 fc36 	bl	80005f8 <__aeabi_dmul>
 8009d8c:	9b02      	ldr	r3, [sp, #8]
 8009d8e:	9d00      	ldr	r5, [sp, #0]
 8009d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d92:	ec41 0b19 	vmov	d9, r0, r1
 8009d96:	4649      	mov	r1, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	f7f6 fedd 	bl	8000b58 <__aeabi_d2iz>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	f7f6 fbc0 	bl	8000524 <__aeabi_i2d>
 8009da4:	3630      	adds	r6, #48	; 0x30
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	f7f6 fa6b 	bl	8000288 <__aeabi_dsub>
 8009db2:	f805 6b01 	strb.w	r6, [r5], #1
 8009db6:	9b02      	ldr	r3, [sp, #8]
 8009db8:	429d      	cmp	r5, r3
 8009dba:	4680      	mov	r8, r0
 8009dbc:	4689      	mov	r9, r1
 8009dbe:	f04f 0200 	mov.w	r2, #0
 8009dc2:	d124      	bne.n	8009e0e <_dtoa_r+0x62e>
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <_dtoa_r+0x654>)
 8009dc6:	ec51 0b19 	vmov	r0, r1, d9
 8009dca:	f7f6 fa5f 	bl	800028c <__adddf3>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fe9f 	bl	8000b18 <__aeabi_dcmpgt>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d173      	bne.n	8009ec6 <_dtoa_r+0x6e6>
 8009dde:	ec53 2b19 	vmov	r2, r3, d9
 8009de2:	4914      	ldr	r1, [pc, #80]	; (8009e34 <_dtoa_r+0x654>)
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7f6 fa4f 	bl	8000288 <__aeabi_dsub>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fe73 	bl	8000adc <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f af2f 	beq.w	8009c5a <_dtoa_r+0x47a>
 8009dfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dfe:	1e6b      	subs	r3, r5, #1
 8009e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e06:	2b30      	cmp	r3, #48	; 0x30
 8009e08:	d0f8      	beq.n	8009dfc <_dtoa_r+0x61c>
 8009e0a:	46bb      	mov	fp, r7
 8009e0c:	e04a      	b.n	8009ea4 <_dtoa_r+0x6c4>
 8009e0e:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <_dtoa_r+0x648>)
 8009e10:	f7f6 fbf2 	bl	80005f8 <__aeabi_dmul>
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	e7bd      	b.n	8009d96 <_dtoa_r+0x5b6>
 8009e1a:	bf00      	nop
 8009e1c:	0800b998 	.word	0x0800b998
 8009e20:	0800b970 	.word	0x0800b970
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	40240000 	.word	0x40240000
 8009e2c:	401c0000 	.word	0x401c0000
 8009e30:	40140000 	.word	0x40140000
 8009e34:	3fe00000 	.word	0x3fe00000
 8009e38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e3c:	9d00      	ldr	r5, [sp, #0]
 8009e3e:	4642      	mov	r2, r8
 8009e40:	464b      	mov	r3, r9
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fd01 	bl	800084c <__aeabi_ddiv>
 8009e4a:	f7f6 fe85 	bl	8000b58 <__aeabi_d2iz>
 8009e4e:	9001      	str	r0, [sp, #4]
 8009e50:	f7f6 fb68 	bl	8000524 <__aeabi_i2d>
 8009e54:	4642      	mov	r2, r8
 8009e56:	464b      	mov	r3, r9
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fa10 	bl	8000288 <__aeabi_dsub>
 8009e68:	9e01      	ldr	r6, [sp, #4]
 8009e6a:	9f04      	ldr	r7, [sp, #16]
 8009e6c:	3630      	adds	r6, #48	; 0x30
 8009e6e:	f805 6b01 	strb.w	r6, [r5], #1
 8009e72:	9e00      	ldr	r6, [sp, #0]
 8009e74:	1bae      	subs	r6, r5, r6
 8009e76:	42b7      	cmp	r7, r6
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	d134      	bne.n	8009ee8 <_dtoa_r+0x708>
 8009e7e:	f7f6 fa05 	bl	800028c <__adddf3>
 8009e82:	4642      	mov	r2, r8
 8009e84:	464b      	mov	r3, r9
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	f7f6 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8009e8e:	b9c8      	cbnz	r0, 8009ec4 <_dtoa_r+0x6e4>
 8009e90:	4642      	mov	r2, r8
 8009e92:	464b      	mov	r3, r9
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9c:	b110      	cbz	r0, 8009ea4 <_dtoa_r+0x6c4>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	07db      	lsls	r3, r3, #31
 8009ea2:	d40f      	bmi.n	8009ec4 <_dtoa_r+0x6e4>
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fbcc 	bl	800a644 <_Bfree>
 8009eac:	2300      	movs	r3, #0
 8009eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eb0:	702b      	strb	r3, [r5, #0]
 8009eb2:	f10b 0301 	add.w	r3, fp, #1
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f43f ace2 	beq.w	8009884 <_dtoa_r+0xa4>
 8009ec0:	601d      	str	r5, [r3, #0]
 8009ec2:	e4df      	b.n	8009884 <_dtoa_r+0xa4>
 8009ec4:	465f      	mov	r7, fp
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	461d      	mov	r5, r3
 8009eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ece:	2a39      	cmp	r2, #57	; 0x39
 8009ed0:	d106      	bne.n	8009ee0 <_dtoa_r+0x700>
 8009ed2:	9a00      	ldr	r2, [sp, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d1f7      	bne.n	8009ec8 <_dtoa_r+0x6e8>
 8009ed8:	9900      	ldr	r1, [sp, #0]
 8009eda:	2230      	movs	r2, #48	; 0x30
 8009edc:	3701      	adds	r7, #1
 8009ede:	700a      	strb	r2, [r1, #0]
 8009ee0:	781a      	ldrb	r2, [r3, #0]
 8009ee2:	3201      	adds	r2, #1
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e790      	b.n	8009e0a <_dtoa_r+0x62a>
 8009ee8:	4ba3      	ldr	r3, [pc, #652]	; (800a178 <_dtoa_r+0x998>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	f7f6 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d09e      	beq.n	8009e3e <_dtoa_r+0x65e>
 8009f00:	e7d0      	b.n	8009ea4 <_dtoa_r+0x6c4>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	f000 80ca 	beq.w	800a09e <_dtoa_r+0x8be>
 8009f0a:	9a07      	ldr	r2, [sp, #28]
 8009f0c:	2a01      	cmp	r2, #1
 8009f0e:	f300 80ad 	bgt.w	800a06c <_dtoa_r+0x88c>
 8009f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f14:	2a00      	cmp	r2, #0
 8009f16:	f000 80a5 	beq.w	800a064 <_dtoa_r+0x884>
 8009f1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f1e:	9e08      	ldr	r6, [sp, #32]
 8009f20:	9d05      	ldr	r5, [sp, #20]
 8009f22:	9a05      	ldr	r2, [sp, #20]
 8009f24:	441a      	add	r2, r3
 8009f26:	9205      	str	r2, [sp, #20]
 8009f28:	9a06      	ldr	r2, [sp, #24]
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	441a      	add	r2, r3
 8009f2e:	4620      	mov	r0, r4
 8009f30:	9206      	str	r2, [sp, #24]
 8009f32:	f000 fc3d 	bl	800a7b0 <__i2b>
 8009f36:	4607      	mov	r7, r0
 8009f38:	b165      	cbz	r5, 8009f54 <_dtoa_r+0x774>
 8009f3a:	9b06      	ldr	r3, [sp, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd09      	ble.n	8009f54 <_dtoa_r+0x774>
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	9a05      	ldr	r2, [sp, #20]
 8009f44:	bfa8      	it	ge
 8009f46:	462b      	movge	r3, r5
 8009f48:	1ad2      	subs	r2, r2, r3
 8009f4a:	9205      	str	r2, [sp, #20]
 8009f4c:	9a06      	ldr	r2, [sp, #24]
 8009f4e:	1aed      	subs	r5, r5, r3
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	9306      	str	r3, [sp, #24]
 8009f54:	9b08      	ldr	r3, [sp, #32]
 8009f56:	b1f3      	cbz	r3, 8009f96 <_dtoa_r+0x7b6>
 8009f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80a3 	beq.w	800a0a6 <_dtoa_r+0x8c6>
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	dd10      	ble.n	8009f86 <_dtoa_r+0x7a6>
 8009f64:	4639      	mov	r1, r7
 8009f66:	4632      	mov	r2, r6
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fce1 	bl	800a930 <__pow5mult>
 8009f6e:	4652      	mov	r2, sl
 8009f70:	4601      	mov	r1, r0
 8009f72:	4607      	mov	r7, r0
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fc31 	bl	800a7dc <__multiply>
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fb60 	bl	800a644 <_Bfree>
 8009f84:	46c2      	mov	sl, r8
 8009f86:	9b08      	ldr	r3, [sp, #32]
 8009f88:	1b9a      	subs	r2, r3, r6
 8009f8a:	d004      	beq.n	8009f96 <_dtoa_r+0x7b6>
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fcce 	bl	800a930 <__pow5mult>
 8009f94:	4682      	mov	sl, r0
 8009f96:	2101      	movs	r1, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fc09 	bl	800a7b0 <__i2b>
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	f340 8081 	ble.w	800a0aa <_dtoa_r+0x8ca>
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4601      	mov	r1, r0
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 fcbf 	bl	800a930 <__pow5mult>
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	dd7a      	ble.n	800a0b0 <_dtoa_r+0x8d0>
 8009fba:	f04f 0800 	mov.w	r8, #0
 8009fbe:	6933      	ldr	r3, [r6, #16]
 8009fc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fc4:	6918      	ldr	r0, [r3, #16]
 8009fc6:	f000 fba5 	bl	800a714 <__hi0bits>
 8009fca:	f1c0 0020 	rsb	r0, r0, #32
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	4418      	add	r0, r3
 8009fd2:	f010 001f 	ands.w	r0, r0, #31
 8009fd6:	f000 8094 	beq.w	800a102 <_dtoa_r+0x922>
 8009fda:	f1c0 0320 	rsb	r3, r0, #32
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	f340 8085 	ble.w	800a0ee <_dtoa_r+0x90e>
 8009fe4:	9b05      	ldr	r3, [sp, #20]
 8009fe6:	f1c0 001c 	rsb	r0, r0, #28
 8009fea:	4403      	add	r3, r0
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	4403      	add	r3, r0
 8009ff2:	4405      	add	r5, r0
 8009ff4:	9306      	str	r3, [sp, #24]
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd05      	ble.n	800a008 <_dtoa_r+0x828>
 8009ffc:	4651      	mov	r1, sl
 8009ffe:	461a      	mov	r2, r3
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fcef 	bl	800a9e4 <__lshift>
 800a006:	4682      	mov	sl, r0
 800a008:	9b06      	ldr	r3, [sp, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dd05      	ble.n	800a01a <_dtoa_r+0x83a>
 800a00e:	4631      	mov	r1, r6
 800a010:	461a      	mov	r2, r3
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fce6 	bl	800a9e4 <__lshift>
 800a018:	4606      	mov	r6, r0
 800a01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d072      	beq.n	800a106 <_dtoa_r+0x926>
 800a020:	4631      	mov	r1, r6
 800a022:	4650      	mov	r0, sl
 800a024:	f000 fd4a 	bl	800aabc <__mcmp>
 800a028:	2800      	cmp	r0, #0
 800a02a:	da6c      	bge.n	800a106 <_dtoa_r+0x926>
 800a02c:	2300      	movs	r3, #0
 800a02e:	4651      	mov	r1, sl
 800a030:	220a      	movs	r2, #10
 800a032:	4620      	mov	r0, r4
 800a034:	f000 fb28 	bl	800a688 <__multadd>
 800a038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a03e:	4682      	mov	sl, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 81b0 	beq.w	800a3a6 <_dtoa_r+0xbc6>
 800a046:	2300      	movs	r3, #0
 800a048:	4639      	mov	r1, r7
 800a04a:	220a      	movs	r2, #10
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fb1b 	bl	800a688 <__multadd>
 800a052:	9b01      	ldr	r3, [sp, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	4607      	mov	r7, r0
 800a058:	f300 8096 	bgt.w	800a188 <_dtoa_r+0x9a8>
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	dc59      	bgt.n	800a116 <_dtoa_r+0x936>
 800a062:	e091      	b.n	800a188 <_dtoa_r+0x9a8>
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a06a:	e758      	b.n	8009f1e <_dtoa_r+0x73e>
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	1e5e      	subs	r6, r3, #1
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	42b3      	cmp	r3, r6
 800a074:	bfbf      	itttt	lt
 800a076:	9b08      	ldrlt	r3, [sp, #32]
 800a078:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a07a:	9608      	strlt	r6, [sp, #32]
 800a07c:	1af3      	sublt	r3, r6, r3
 800a07e:	bfb4      	ite	lt
 800a080:	18d2      	addlt	r2, r2, r3
 800a082:	1b9e      	subge	r6, r3, r6
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	bfbc      	itt	lt
 800a088:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a08a:	2600      	movlt	r6, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfb7      	itett	lt
 800a090:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a094:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a098:	1a9d      	sublt	r5, r3, r2
 800a09a:	2300      	movlt	r3, #0
 800a09c:	e741      	b.n	8009f22 <_dtoa_r+0x742>
 800a09e:	9e08      	ldr	r6, [sp, #32]
 800a0a0:	9d05      	ldr	r5, [sp, #20]
 800a0a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0a4:	e748      	b.n	8009f38 <_dtoa_r+0x758>
 800a0a6:	9a08      	ldr	r2, [sp, #32]
 800a0a8:	e770      	b.n	8009f8c <_dtoa_r+0x7ac>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	dc19      	bgt.n	800a0e4 <_dtoa_r+0x904>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	b9bb      	cbnz	r3, 800a0e4 <_dtoa_r+0x904>
 800a0b4:	9b03      	ldr	r3, [sp, #12]
 800a0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ba:	b99b      	cbnz	r3, 800a0e4 <_dtoa_r+0x904>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0c2:	0d1b      	lsrs	r3, r3, #20
 800a0c4:	051b      	lsls	r3, r3, #20
 800a0c6:	b183      	cbz	r3, 800a0ea <_dtoa_r+0x90a>
 800a0c8:	9b05      	ldr	r3, [sp, #20]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	9b06      	ldr	r3, [sp, #24]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	9306      	str	r3, [sp, #24]
 800a0d4:	f04f 0801 	mov.w	r8, #1
 800a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f47f af6f 	bne.w	8009fbe <_dtoa_r+0x7de>
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	e774      	b.n	8009fce <_dtoa_r+0x7ee>
 800a0e4:	f04f 0800 	mov.w	r8, #0
 800a0e8:	e7f6      	b.n	800a0d8 <_dtoa_r+0x8f8>
 800a0ea:	4698      	mov	r8, r3
 800a0ec:	e7f4      	b.n	800a0d8 <_dtoa_r+0x8f8>
 800a0ee:	d082      	beq.n	8009ff6 <_dtoa_r+0x816>
 800a0f0:	9a05      	ldr	r2, [sp, #20]
 800a0f2:	331c      	adds	r3, #28
 800a0f4:	441a      	add	r2, r3
 800a0f6:	9205      	str	r2, [sp, #20]
 800a0f8:	9a06      	ldr	r2, [sp, #24]
 800a0fa:	441a      	add	r2, r3
 800a0fc:	441d      	add	r5, r3
 800a0fe:	9206      	str	r2, [sp, #24]
 800a100:	e779      	b.n	8009ff6 <_dtoa_r+0x816>
 800a102:	4603      	mov	r3, r0
 800a104:	e7f4      	b.n	800a0f0 <_dtoa_r+0x910>
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dc37      	bgt.n	800a17c <_dtoa_r+0x99c>
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	dd34      	ble.n	800a17c <_dtoa_r+0x99c>
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	b963      	cbnz	r3, 800a134 <_dtoa_r+0x954>
 800a11a:	4631      	mov	r1, r6
 800a11c:	2205      	movs	r2, #5
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 fab2 	bl	800a688 <__multadd>
 800a124:	4601      	mov	r1, r0
 800a126:	4606      	mov	r6, r0
 800a128:	4650      	mov	r0, sl
 800a12a:	f000 fcc7 	bl	800aabc <__mcmp>
 800a12e:	2800      	cmp	r0, #0
 800a130:	f73f adbb 	bgt.w	8009caa <_dtoa_r+0x4ca>
 800a134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a136:	9d00      	ldr	r5, [sp, #0]
 800a138:	ea6f 0b03 	mvn.w	fp, r3
 800a13c:	f04f 0800 	mov.w	r8, #0
 800a140:	4631      	mov	r1, r6
 800a142:	4620      	mov	r0, r4
 800a144:	f000 fa7e 	bl	800a644 <_Bfree>
 800a148:	2f00      	cmp	r7, #0
 800a14a:	f43f aeab 	beq.w	8009ea4 <_dtoa_r+0x6c4>
 800a14e:	f1b8 0f00 	cmp.w	r8, #0
 800a152:	d005      	beq.n	800a160 <_dtoa_r+0x980>
 800a154:	45b8      	cmp	r8, r7
 800a156:	d003      	beq.n	800a160 <_dtoa_r+0x980>
 800a158:	4641      	mov	r1, r8
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fa72 	bl	800a644 <_Bfree>
 800a160:	4639      	mov	r1, r7
 800a162:	4620      	mov	r0, r4
 800a164:	f000 fa6e 	bl	800a644 <_Bfree>
 800a168:	e69c      	b.n	8009ea4 <_dtoa_r+0x6c4>
 800a16a:	2600      	movs	r6, #0
 800a16c:	4637      	mov	r7, r6
 800a16e:	e7e1      	b.n	800a134 <_dtoa_r+0x954>
 800a170:	46bb      	mov	fp, r7
 800a172:	4637      	mov	r7, r6
 800a174:	e599      	b.n	8009caa <_dtoa_r+0x4ca>
 800a176:	bf00      	nop
 800a178:	40240000 	.word	0x40240000
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 80c8 	beq.w	800a314 <_dtoa_r+0xb34>
 800a184:	9b04      	ldr	r3, [sp, #16]
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	2d00      	cmp	r5, #0
 800a18a:	dd05      	ble.n	800a198 <_dtoa_r+0x9b8>
 800a18c:	4639      	mov	r1, r7
 800a18e:	462a      	mov	r2, r5
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fc27 	bl	800a9e4 <__lshift>
 800a196:	4607      	mov	r7, r0
 800a198:	f1b8 0f00 	cmp.w	r8, #0
 800a19c:	d05b      	beq.n	800a256 <_dtoa_r+0xa76>
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fa0f 	bl	800a5c4 <_Balloc>
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	b928      	cbnz	r0, 800a1b6 <_dtoa_r+0x9d6>
 800a1aa:	4b83      	ldr	r3, [pc, #524]	; (800a3b8 <_dtoa_r+0xbd8>)
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a1b2:	f7ff bb2e 	b.w	8009812 <_dtoa_r+0x32>
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	300c      	adds	r0, #12
 800a1c2:	f000 ffab 	bl	800b11c <memcpy>
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fc0a 	bl	800a9e4 <__lshift>
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1da:	4413      	add	r3, r2
 800a1dc:	9308      	str	r3, [sp, #32]
 800a1de:	9b02      	ldr	r3, [sp, #8]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	46b8      	mov	r8, r7
 800a1e6:	9306      	str	r3, [sp, #24]
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	4650      	mov	r0, sl
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	f7ff fa6b 	bl	80096ce <quorem>
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	9002      	str	r0, [sp, #8]
 800a1fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a200:	4650      	mov	r0, sl
 800a202:	f000 fc5b 	bl	800aabc <__mcmp>
 800a206:	463a      	mov	r2, r7
 800a208:	9005      	str	r0, [sp, #20]
 800a20a:	4631      	mov	r1, r6
 800a20c:	4620      	mov	r0, r4
 800a20e:	f000 fc71 	bl	800aaf4 <__mdiff>
 800a212:	68c2      	ldr	r2, [r0, #12]
 800a214:	4605      	mov	r5, r0
 800a216:	bb02      	cbnz	r2, 800a25a <_dtoa_r+0xa7a>
 800a218:	4601      	mov	r1, r0
 800a21a:	4650      	mov	r0, sl
 800a21c:	f000 fc4e 	bl	800aabc <__mcmp>
 800a220:	4602      	mov	r2, r0
 800a222:	4629      	mov	r1, r5
 800a224:	4620      	mov	r0, r4
 800a226:	9209      	str	r2, [sp, #36]	; 0x24
 800a228:	f000 fa0c 	bl	800a644 <_Bfree>
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a230:	9d04      	ldr	r5, [sp, #16]
 800a232:	ea43 0102 	orr.w	r1, r3, r2
 800a236:	9b06      	ldr	r3, [sp, #24]
 800a238:	4319      	orrs	r1, r3
 800a23a:	d110      	bne.n	800a25e <_dtoa_r+0xa7e>
 800a23c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a240:	d029      	beq.n	800a296 <_dtoa_r+0xab6>
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd02      	ble.n	800a24e <_dtoa_r+0xa6e>
 800a248:	9b02      	ldr	r3, [sp, #8]
 800a24a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	f883 9000 	strb.w	r9, [r3]
 800a254:	e774      	b.n	800a140 <_dtoa_r+0x960>
 800a256:	4638      	mov	r0, r7
 800a258:	e7ba      	b.n	800a1d0 <_dtoa_r+0x9f0>
 800a25a:	2201      	movs	r2, #1
 800a25c:	e7e1      	b.n	800a222 <_dtoa_r+0xa42>
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	db04      	blt.n	800a26e <_dtoa_r+0xa8e>
 800a264:	9907      	ldr	r1, [sp, #28]
 800a266:	430b      	orrs	r3, r1
 800a268:	9906      	ldr	r1, [sp, #24]
 800a26a:	430b      	orrs	r3, r1
 800a26c:	d120      	bne.n	800a2b0 <_dtoa_r+0xad0>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	dded      	ble.n	800a24e <_dtoa_r+0xa6e>
 800a272:	4651      	mov	r1, sl
 800a274:	2201      	movs	r2, #1
 800a276:	4620      	mov	r0, r4
 800a278:	f000 fbb4 	bl	800a9e4 <__lshift>
 800a27c:	4631      	mov	r1, r6
 800a27e:	4682      	mov	sl, r0
 800a280:	f000 fc1c 	bl	800aabc <__mcmp>
 800a284:	2800      	cmp	r0, #0
 800a286:	dc03      	bgt.n	800a290 <_dtoa_r+0xab0>
 800a288:	d1e1      	bne.n	800a24e <_dtoa_r+0xa6e>
 800a28a:	f019 0f01 	tst.w	r9, #1
 800a28e:	d0de      	beq.n	800a24e <_dtoa_r+0xa6e>
 800a290:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a294:	d1d8      	bne.n	800a248 <_dtoa_r+0xa68>
 800a296:	9a01      	ldr	r2, [sp, #4]
 800a298:	2339      	movs	r3, #57	; 0x39
 800a29a:	7013      	strb	r3, [r2, #0]
 800a29c:	462b      	mov	r3, r5
 800a29e:	461d      	mov	r5, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2a6:	2a39      	cmp	r2, #57	; 0x39
 800a2a8:	d06c      	beq.n	800a384 <_dtoa_r+0xba4>
 800a2aa:	3201      	adds	r2, #1
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	e747      	b.n	800a140 <_dtoa_r+0x960>
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	dd07      	ble.n	800a2c4 <_dtoa_r+0xae4>
 800a2b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2b8:	d0ed      	beq.n	800a296 <_dtoa_r+0xab6>
 800a2ba:	9a01      	ldr	r2, [sp, #4]
 800a2bc:	f109 0301 	add.w	r3, r9, #1
 800a2c0:	7013      	strb	r3, [r2, #0]
 800a2c2:	e73d      	b.n	800a140 <_dtoa_r+0x960>
 800a2c4:	9b04      	ldr	r3, [sp, #16]
 800a2c6:	9a08      	ldr	r2, [sp, #32]
 800a2c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d043      	beq.n	800a358 <_dtoa_r+0xb78>
 800a2d0:	4651      	mov	r1, sl
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f9d6 	bl	800a688 <__multadd>
 800a2dc:	45b8      	cmp	r8, r7
 800a2de:	4682      	mov	sl, r0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	f04f 020a 	mov.w	r2, #10
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	d107      	bne.n	800a2fe <_dtoa_r+0xb1e>
 800a2ee:	f000 f9cb 	bl	800a688 <__multadd>
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	e775      	b.n	800a1ea <_dtoa_r+0xa0a>
 800a2fe:	f000 f9c3 	bl	800a688 <__multadd>
 800a302:	4639      	mov	r1, r7
 800a304:	4680      	mov	r8, r0
 800a306:	2300      	movs	r3, #0
 800a308:	220a      	movs	r2, #10
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 f9bc 	bl	800a688 <__multadd>
 800a310:	4607      	mov	r7, r0
 800a312:	e7f0      	b.n	800a2f6 <_dtoa_r+0xb16>
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	9d00      	ldr	r5, [sp, #0]
 800a31a:	4631      	mov	r1, r6
 800a31c:	4650      	mov	r0, sl
 800a31e:	f7ff f9d6 	bl	80096ce <quorem>
 800a322:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	f805 9b01 	strb.w	r9, [r5], #1
 800a32c:	1aea      	subs	r2, r5, r3
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	4293      	cmp	r3, r2
 800a332:	dd07      	ble.n	800a344 <_dtoa_r+0xb64>
 800a334:	4651      	mov	r1, sl
 800a336:	2300      	movs	r3, #0
 800a338:	220a      	movs	r2, #10
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 f9a4 	bl	800a688 <__multadd>
 800a340:	4682      	mov	sl, r0
 800a342:	e7ea      	b.n	800a31a <_dtoa_r+0xb3a>
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfc8      	it	gt
 800a34a:	461d      	movgt	r5, r3
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	bfd8      	it	le
 800a350:	2501      	movle	r5, #1
 800a352:	441d      	add	r5, r3
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	4651      	mov	r1, sl
 800a35a:	2201      	movs	r2, #1
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fb41 	bl	800a9e4 <__lshift>
 800a362:	4631      	mov	r1, r6
 800a364:	4682      	mov	sl, r0
 800a366:	f000 fba9 	bl	800aabc <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	dc96      	bgt.n	800a29c <_dtoa_r+0xabc>
 800a36e:	d102      	bne.n	800a376 <_dtoa_r+0xb96>
 800a370:	f019 0f01 	tst.w	r9, #1
 800a374:	d192      	bne.n	800a29c <_dtoa_r+0xabc>
 800a376:	462b      	mov	r3, r5
 800a378:	461d      	mov	r5, r3
 800a37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37e:	2a30      	cmp	r2, #48	; 0x30
 800a380:	d0fa      	beq.n	800a378 <_dtoa_r+0xb98>
 800a382:	e6dd      	b.n	800a140 <_dtoa_r+0x960>
 800a384:	9a00      	ldr	r2, [sp, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d189      	bne.n	800a29e <_dtoa_r+0xabe>
 800a38a:	f10b 0b01 	add.w	fp, fp, #1
 800a38e:	2331      	movs	r3, #49	; 0x31
 800a390:	e796      	b.n	800a2c0 <_dtoa_r+0xae0>
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <_dtoa_r+0xbdc>)
 800a394:	f7ff ba99 	b.w	80098ca <_dtoa_r+0xea>
 800a398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f47f aa6d 	bne.w	800987a <_dtoa_r+0x9a>
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <_dtoa_r+0xbe0>)
 800a3a2:	f7ff ba92 	b.w	80098ca <_dtoa_r+0xea>
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dcb5      	bgt.n	800a318 <_dtoa_r+0xb38>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	f73f aeb1 	bgt.w	800a116 <_dtoa_r+0x936>
 800a3b4:	e7b0      	b.n	800a318 <_dtoa_r+0xb38>
 800a3b6:	bf00      	nop
 800a3b8:	0800b900 	.word	0x0800b900
 800a3bc:	0800b860 	.word	0x0800b860
 800a3c0:	0800b884 	.word	0x0800b884

0800a3c4 <_free_r>:
 800a3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d044      	beq.n	800a454 <_free_r+0x90>
 800a3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ce:	9001      	str	r0, [sp, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3d6:	bfb8      	it	lt
 800a3d8:	18e4      	addlt	r4, r4, r3
 800a3da:	f000 f8e7 	bl	800a5ac <__malloc_lock>
 800a3de:	4a1e      	ldr	r2, [pc, #120]	; (800a458 <_free_r+0x94>)
 800a3e0:	9801      	ldr	r0, [sp, #4]
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	b933      	cbnz	r3, 800a3f4 <_free_r+0x30>
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	6014      	str	r4, [r2, #0]
 800a3ea:	b003      	add	sp, #12
 800a3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3f0:	f000 b8e2 	b.w	800a5b8 <__malloc_unlock>
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d908      	bls.n	800a40a <_free_r+0x46>
 800a3f8:	6825      	ldr	r5, [r4, #0]
 800a3fa:	1961      	adds	r1, r4, r5
 800a3fc:	428b      	cmp	r3, r1
 800a3fe:	bf01      	itttt	eq
 800a400:	6819      	ldreq	r1, [r3, #0]
 800a402:	685b      	ldreq	r3, [r3, #4]
 800a404:	1949      	addeq	r1, r1, r5
 800a406:	6021      	streq	r1, [r4, #0]
 800a408:	e7ed      	b.n	800a3e6 <_free_r+0x22>
 800a40a:	461a      	mov	r2, r3
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b10b      	cbz	r3, 800a414 <_free_r+0x50>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d9fa      	bls.n	800a40a <_free_r+0x46>
 800a414:	6811      	ldr	r1, [r2, #0]
 800a416:	1855      	adds	r5, r2, r1
 800a418:	42a5      	cmp	r5, r4
 800a41a:	d10b      	bne.n	800a434 <_free_r+0x70>
 800a41c:	6824      	ldr	r4, [r4, #0]
 800a41e:	4421      	add	r1, r4
 800a420:	1854      	adds	r4, r2, r1
 800a422:	42a3      	cmp	r3, r4
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	d1e0      	bne.n	800a3ea <_free_r+0x26>
 800a428:	681c      	ldr	r4, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	6053      	str	r3, [r2, #4]
 800a42e:	440c      	add	r4, r1
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	e7da      	b.n	800a3ea <_free_r+0x26>
 800a434:	d902      	bls.n	800a43c <_free_r+0x78>
 800a436:	230c      	movs	r3, #12
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	e7d6      	b.n	800a3ea <_free_r+0x26>
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	428b      	cmp	r3, r1
 800a442:	bf04      	itt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	6063      	str	r3, [r4, #4]
 800a44a:	bf04      	itt	eq
 800a44c:	1949      	addeq	r1, r1, r5
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	6054      	str	r4, [r2, #4]
 800a452:	e7ca      	b.n	800a3ea <_free_r+0x26>
 800a454:	b003      	add	sp, #12
 800a456:	bd30      	pop	{r4, r5, pc}
 800a458:	20002064 	.word	0x20002064

0800a45c <malloc>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <malloc+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f000 b823 	b.w	800a4ac <_malloc_r>
 800a466:	bf00      	nop
 800a468:	20000154 	.word	0x20000154

0800a46c <sbrk_aligned>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4e0e      	ldr	r6, [pc, #56]	; (800a4a8 <sbrk_aligned+0x3c>)
 800a470:	460c      	mov	r4, r1
 800a472:	6831      	ldr	r1, [r6, #0]
 800a474:	4605      	mov	r5, r0
 800a476:	b911      	cbnz	r1, 800a47e <sbrk_aligned+0x12>
 800a478:	f000 fe40 	bl	800b0fc <_sbrk_r>
 800a47c:	6030      	str	r0, [r6, #0]
 800a47e:	4621      	mov	r1, r4
 800a480:	4628      	mov	r0, r5
 800a482:	f000 fe3b 	bl	800b0fc <_sbrk_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d00a      	beq.n	800a4a0 <sbrk_aligned+0x34>
 800a48a:	1cc4      	adds	r4, r0, #3
 800a48c:	f024 0403 	bic.w	r4, r4, #3
 800a490:	42a0      	cmp	r0, r4
 800a492:	d007      	beq.n	800a4a4 <sbrk_aligned+0x38>
 800a494:	1a21      	subs	r1, r4, r0
 800a496:	4628      	mov	r0, r5
 800a498:	f000 fe30 	bl	800b0fc <_sbrk_r>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d101      	bne.n	800a4a4 <sbrk_aligned+0x38>
 800a4a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	20002068 	.word	0x20002068

0800a4ac <_malloc_r>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	1ccd      	adds	r5, r1, #3
 800a4b2:	f025 0503 	bic.w	r5, r5, #3
 800a4b6:	3508      	adds	r5, #8
 800a4b8:	2d0c      	cmp	r5, #12
 800a4ba:	bf38      	it	cc
 800a4bc:	250c      	movcc	r5, #12
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	db01      	blt.n	800a4c8 <_malloc_r+0x1c>
 800a4c4:	42a9      	cmp	r1, r5
 800a4c6:	d905      	bls.n	800a4d4 <_malloc_r+0x28>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5a8 <_malloc_r+0xfc>
 800a4d8:	f000 f868 	bl	800a5ac <__malloc_lock>
 800a4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e0:	461c      	mov	r4, r3
 800a4e2:	bb5c      	cbnz	r4, 800a53c <_malloc_r+0x90>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff ffc0 	bl	800a46c <sbrk_aligned>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	d155      	bne.n	800a59e <_malloc_r+0xf2>
 800a4f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f6:	4626      	mov	r6, r4
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	d145      	bne.n	800a588 <_malloc_r+0xdc>
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	d048      	beq.n	800a592 <_malloc_r+0xe6>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	4631      	mov	r1, r6
 800a504:	4638      	mov	r0, r7
 800a506:	eb04 0903 	add.w	r9, r4, r3
 800a50a:	f000 fdf7 	bl	800b0fc <_sbrk_r>
 800a50e:	4581      	cmp	r9, r0
 800a510:	d13f      	bne.n	800a592 <_malloc_r+0xe6>
 800a512:	6821      	ldr	r1, [r4, #0]
 800a514:	1a6d      	subs	r5, r5, r1
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	f7ff ffa7 	bl	800a46c <sbrk_aligned>
 800a51e:	3001      	adds	r0, #1
 800a520:	d037      	beq.n	800a592 <_malloc_r+0xe6>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	442b      	add	r3, r5
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	f8d8 3000 	ldr.w	r3, [r8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d038      	beq.n	800a5a2 <_malloc_r+0xf6>
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	42a2      	cmp	r2, r4
 800a534:	d12b      	bne.n	800a58e <_malloc_r+0xe2>
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	e00f      	b.n	800a55c <_malloc_r+0xb0>
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	1b52      	subs	r2, r2, r5
 800a540:	d41f      	bmi.n	800a582 <_malloc_r+0xd6>
 800a542:	2a0b      	cmp	r2, #11
 800a544:	d917      	bls.n	800a576 <_malloc_r+0xca>
 800a546:	1961      	adds	r1, r4, r5
 800a548:	42a3      	cmp	r3, r4
 800a54a:	6025      	str	r5, [r4, #0]
 800a54c:	bf18      	it	ne
 800a54e:	6059      	strne	r1, [r3, #4]
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	bf08      	it	eq
 800a554:	f8c8 1000 	streq.w	r1, [r8]
 800a558:	5162      	str	r2, [r4, r5]
 800a55a:	604b      	str	r3, [r1, #4]
 800a55c:	4638      	mov	r0, r7
 800a55e:	f104 060b 	add.w	r6, r4, #11
 800a562:	f000 f829 	bl	800a5b8 <__malloc_unlock>
 800a566:	f026 0607 	bic.w	r6, r6, #7
 800a56a:	1d23      	adds	r3, r4, #4
 800a56c:	1af2      	subs	r2, r6, r3
 800a56e:	d0ae      	beq.n	800a4ce <_malloc_r+0x22>
 800a570:	1b9b      	subs	r3, r3, r6
 800a572:	50a3      	str	r3, [r4, r2]
 800a574:	e7ab      	b.n	800a4ce <_malloc_r+0x22>
 800a576:	42a3      	cmp	r3, r4
 800a578:	6862      	ldr	r2, [r4, #4]
 800a57a:	d1dd      	bne.n	800a538 <_malloc_r+0x8c>
 800a57c:	f8c8 2000 	str.w	r2, [r8]
 800a580:	e7ec      	b.n	800a55c <_malloc_r+0xb0>
 800a582:	4623      	mov	r3, r4
 800a584:	6864      	ldr	r4, [r4, #4]
 800a586:	e7ac      	b.n	800a4e2 <_malloc_r+0x36>
 800a588:	4634      	mov	r4, r6
 800a58a:	6876      	ldr	r6, [r6, #4]
 800a58c:	e7b4      	b.n	800a4f8 <_malloc_r+0x4c>
 800a58e:	4613      	mov	r3, r2
 800a590:	e7cc      	b.n	800a52c <_malloc_r+0x80>
 800a592:	230c      	movs	r3, #12
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	4638      	mov	r0, r7
 800a598:	f000 f80e 	bl	800a5b8 <__malloc_unlock>
 800a59c:	e797      	b.n	800a4ce <_malloc_r+0x22>
 800a59e:	6025      	str	r5, [r4, #0]
 800a5a0:	e7dc      	b.n	800a55c <_malloc_r+0xb0>
 800a5a2:	605b      	str	r3, [r3, #4]
 800a5a4:	deff      	udf	#255	; 0xff
 800a5a6:	bf00      	nop
 800a5a8:	20002064 	.word	0x20002064

0800a5ac <__malloc_lock>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__malloc_lock+0x8>)
 800a5ae:	f7ff b88c 	b.w	80096ca <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	20002060 	.word	0x20002060

0800a5b8 <__malloc_unlock>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__malloc_unlock+0x8>)
 800a5ba:	f7ff b887 	b.w	80096cc <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	20002060 	.word	0x20002060

0800a5c4 <_Balloc>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	69c6      	ldr	r6, [r0, #28]
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	b976      	cbnz	r6, 800a5ec <_Balloc+0x28>
 800a5ce:	2010      	movs	r0, #16
 800a5d0:	f7ff ff44 	bl	800a45c <malloc>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	61e0      	str	r0, [r4, #28]
 800a5d8:	b920      	cbnz	r0, 800a5e4 <_Balloc+0x20>
 800a5da:	4b18      	ldr	r3, [pc, #96]	; (800a63c <_Balloc+0x78>)
 800a5dc:	4818      	ldr	r0, [pc, #96]	; (800a640 <_Balloc+0x7c>)
 800a5de:	216b      	movs	r1, #107	; 0x6b
 800a5e0:	f000 fdaa 	bl	800b138 <__assert_func>
 800a5e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5e8:	6006      	str	r6, [r0, #0]
 800a5ea:	60c6      	str	r6, [r0, #12]
 800a5ec:	69e6      	ldr	r6, [r4, #28]
 800a5ee:	68f3      	ldr	r3, [r6, #12]
 800a5f0:	b183      	cbz	r3, 800a614 <_Balloc+0x50>
 800a5f2:	69e3      	ldr	r3, [r4, #28]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5fa:	b9b8      	cbnz	r0, 800a62c <_Balloc+0x68>
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a602:	1d72      	adds	r2, r6, #5
 800a604:	0092      	lsls	r2, r2, #2
 800a606:	4620      	mov	r0, r4
 800a608:	f000 fdb4 	bl	800b174 <_calloc_r>
 800a60c:	b160      	cbz	r0, 800a628 <_Balloc+0x64>
 800a60e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a612:	e00e      	b.n	800a632 <_Balloc+0x6e>
 800a614:	2221      	movs	r2, #33	; 0x21
 800a616:	2104      	movs	r1, #4
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fdab 	bl	800b174 <_calloc_r>
 800a61e:	69e3      	ldr	r3, [r4, #28]
 800a620:	60f0      	str	r0, [r6, #12]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e4      	bne.n	800a5f2 <_Balloc+0x2e>
 800a628:	2000      	movs	r0, #0
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	6802      	ldr	r2, [r0, #0]
 800a62e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a632:	2300      	movs	r3, #0
 800a634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a638:	e7f7      	b.n	800a62a <_Balloc+0x66>
 800a63a:	bf00      	nop
 800a63c:	0800b891 	.word	0x0800b891
 800a640:	0800b911 	.word	0x0800b911

0800a644 <_Bfree>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	69c6      	ldr	r6, [r0, #28]
 800a648:	4605      	mov	r5, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	b976      	cbnz	r6, 800a66c <_Bfree+0x28>
 800a64e:	2010      	movs	r0, #16
 800a650:	f7ff ff04 	bl	800a45c <malloc>
 800a654:	4602      	mov	r2, r0
 800a656:	61e8      	str	r0, [r5, #28]
 800a658:	b920      	cbnz	r0, 800a664 <_Bfree+0x20>
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <_Bfree+0x3c>)
 800a65c:	4809      	ldr	r0, [pc, #36]	; (800a684 <_Bfree+0x40>)
 800a65e:	218f      	movs	r1, #143	; 0x8f
 800a660:	f000 fd6a 	bl	800b138 <__assert_func>
 800a664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a668:	6006      	str	r6, [r0, #0]
 800a66a:	60c6      	str	r6, [r0, #12]
 800a66c:	b13c      	cbz	r4, 800a67e <_Bfree+0x3a>
 800a66e:	69eb      	ldr	r3, [r5, #28]
 800a670:	6862      	ldr	r2, [r4, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a678:	6021      	str	r1, [r4, #0]
 800a67a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	0800b891 	.word	0x0800b891
 800a684:	0800b911 	.word	0x0800b911

0800a688 <__multadd>:
 800a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68c:	690d      	ldr	r5, [r1, #16]
 800a68e:	4607      	mov	r7, r0
 800a690:	460c      	mov	r4, r1
 800a692:	461e      	mov	r6, r3
 800a694:	f101 0c14 	add.w	ip, r1, #20
 800a698:	2000      	movs	r0, #0
 800a69a:	f8dc 3000 	ldr.w	r3, [ip]
 800a69e:	b299      	uxth	r1, r3
 800a6a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a6a4:	0c1e      	lsrs	r6, r3, #16
 800a6a6:	0c0b      	lsrs	r3, r1, #16
 800a6a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a6ac:	b289      	uxth	r1, r1
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6b4:	4285      	cmp	r5, r0
 800a6b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6be:	dcec      	bgt.n	800a69a <__multadd+0x12>
 800a6c0:	b30e      	cbz	r6, 800a706 <__multadd+0x7e>
 800a6c2:	68a3      	ldr	r3, [r4, #8]
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dc19      	bgt.n	800a6fc <__multadd+0x74>
 800a6c8:	6861      	ldr	r1, [r4, #4]
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	3101      	adds	r1, #1
 800a6ce:	f7ff ff79 	bl	800a5c4 <_Balloc>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	b928      	cbnz	r0, 800a6e2 <__multadd+0x5a>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <__multadd+0x84>)
 800a6da:	480d      	ldr	r0, [pc, #52]	; (800a710 <__multadd+0x88>)
 800a6dc:	21ba      	movs	r1, #186	; 0xba
 800a6de:	f000 fd2b 	bl	800b138 <__assert_func>
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	3202      	adds	r2, #2
 800a6e6:	f104 010c 	add.w	r1, r4, #12
 800a6ea:	0092      	lsls	r2, r2, #2
 800a6ec:	300c      	adds	r0, #12
 800a6ee:	f000 fd15 	bl	800b11c <memcpy>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	f7ff ffa5 	bl	800a644 <_Bfree>
 800a6fa:	4644      	mov	r4, r8
 800a6fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a700:	3501      	adds	r5, #1
 800a702:	615e      	str	r6, [r3, #20]
 800a704:	6125      	str	r5, [r4, #16]
 800a706:	4620      	mov	r0, r4
 800a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a70c:	0800b900 	.word	0x0800b900
 800a710:	0800b911 	.word	0x0800b911

0800a714 <__hi0bits>:
 800a714:	0c03      	lsrs	r3, r0, #16
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	b9d3      	cbnz	r3, 800a750 <__hi0bits+0x3c>
 800a71a:	0400      	lsls	r0, r0, #16
 800a71c:	2310      	movs	r3, #16
 800a71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a722:	bf04      	itt	eq
 800a724:	0200      	lsleq	r0, r0, #8
 800a726:	3308      	addeq	r3, #8
 800a728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a72c:	bf04      	itt	eq
 800a72e:	0100      	lsleq	r0, r0, #4
 800a730:	3304      	addeq	r3, #4
 800a732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a736:	bf04      	itt	eq
 800a738:	0080      	lsleq	r0, r0, #2
 800a73a:	3302      	addeq	r3, #2
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db05      	blt.n	800a74c <__hi0bits+0x38>
 800a740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	bf08      	it	eq
 800a74a:	2320      	moveq	r3, #32
 800a74c:	4618      	mov	r0, r3
 800a74e:	4770      	bx	lr
 800a750:	2300      	movs	r3, #0
 800a752:	e7e4      	b.n	800a71e <__hi0bits+0xa>

0800a754 <__lo0bits>:
 800a754:	6803      	ldr	r3, [r0, #0]
 800a756:	f013 0207 	ands.w	r2, r3, #7
 800a75a:	d00c      	beq.n	800a776 <__lo0bits+0x22>
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d422      	bmi.n	800a7a6 <__lo0bits+0x52>
 800a760:	079a      	lsls	r2, r3, #30
 800a762:	bf49      	itett	mi
 800a764:	085b      	lsrmi	r3, r3, #1
 800a766:	089b      	lsrpl	r3, r3, #2
 800a768:	6003      	strmi	r3, [r0, #0]
 800a76a:	2201      	movmi	r2, #1
 800a76c:	bf5c      	itt	pl
 800a76e:	6003      	strpl	r3, [r0, #0]
 800a770:	2202      	movpl	r2, #2
 800a772:	4610      	mov	r0, r2
 800a774:	4770      	bx	lr
 800a776:	b299      	uxth	r1, r3
 800a778:	b909      	cbnz	r1, 800a77e <__lo0bits+0x2a>
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	2210      	movs	r2, #16
 800a77e:	b2d9      	uxtb	r1, r3
 800a780:	b909      	cbnz	r1, 800a786 <__lo0bits+0x32>
 800a782:	3208      	adds	r2, #8
 800a784:	0a1b      	lsrs	r3, r3, #8
 800a786:	0719      	lsls	r1, r3, #28
 800a788:	bf04      	itt	eq
 800a78a:	091b      	lsreq	r3, r3, #4
 800a78c:	3204      	addeq	r2, #4
 800a78e:	0799      	lsls	r1, r3, #30
 800a790:	bf04      	itt	eq
 800a792:	089b      	lsreq	r3, r3, #2
 800a794:	3202      	addeq	r2, #2
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d403      	bmi.n	800a7a2 <__lo0bits+0x4e>
 800a79a:	085b      	lsrs	r3, r3, #1
 800a79c:	f102 0201 	add.w	r2, r2, #1
 800a7a0:	d003      	beq.n	800a7aa <__lo0bits+0x56>
 800a7a2:	6003      	str	r3, [r0, #0]
 800a7a4:	e7e5      	b.n	800a772 <__lo0bits+0x1e>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	e7e3      	b.n	800a772 <__lo0bits+0x1e>
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	e7e1      	b.n	800a772 <__lo0bits+0x1e>
	...

0800a7b0 <__i2b>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	f7ff ff05 	bl	800a5c4 <_Balloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	b928      	cbnz	r0, 800a7ca <__i2b+0x1a>
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <__i2b+0x24>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	; (800a7d8 <__i2b+0x28>)
 800a7c2:	f240 1145 	movw	r1, #325	; 0x145
 800a7c6:	f000 fcb7 	bl	800b138 <__assert_func>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	6144      	str	r4, [r0, #20]
 800a7ce:	6103      	str	r3, [r0, #16]
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800b900 	.word	0x0800b900
 800a7d8:	0800b911 	.word	0x0800b911

0800a7dc <__multiply>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	4691      	mov	r9, r2
 800a7e2:	690a      	ldr	r2, [r1, #16]
 800a7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	bfb8      	it	lt
 800a7ec:	460b      	movlt	r3, r1
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	bfbc      	itt	lt
 800a7f2:	464c      	movlt	r4, r9
 800a7f4:	4699      	movlt	r9, r3
 800a7f6:	6927      	ldr	r7, [r4, #16]
 800a7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	6861      	ldr	r1, [r4, #4]
 800a800:	eb07 060a 	add.w	r6, r7, sl
 800a804:	42b3      	cmp	r3, r6
 800a806:	b085      	sub	sp, #20
 800a808:	bfb8      	it	lt
 800a80a:	3101      	addlt	r1, #1
 800a80c:	f7ff feda 	bl	800a5c4 <_Balloc>
 800a810:	b930      	cbnz	r0, 800a820 <__multiply+0x44>
 800a812:	4602      	mov	r2, r0
 800a814:	4b44      	ldr	r3, [pc, #272]	; (800a928 <__multiply+0x14c>)
 800a816:	4845      	ldr	r0, [pc, #276]	; (800a92c <__multiply+0x150>)
 800a818:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a81c:	f000 fc8c 	bl	800b138 <__assert_func>
 800a820:	f100 0514 	add.w	r5, r0, #20
 800a824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a828:	462b      	mov	r3, r5
 800a82a:	2200      	movs	r2, #0
 800a82c:	4543      	cmp	r3, r8
 800a82e:	d321      	bcc.n	800a874 <__multiply+0x98>
 800a830:	f104 0314 	add.w	r3, r4, #20
 800a834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a838:	f109 0314 	add.w	r3, r9, #20
 800a83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a840:	9202      	str	r2, [sp, #8]
 800a842:	1b3a      	subs	r2, r7, r4
 800a844:	3a15      	subs	r2, #21
 800a846:	f022 0203 	bic.w	r2, r2, #3
 800a84a:	3204      	adds	r2, #4
 800a84c:	f104 0115 	add.w	r1, r4, #21
 800a850:	428f      	cmp	r7, r1
 800a852:	bf38      	it	cc
 800a854:	2204      	movcc	r2, #4
 800a856:	9201      	str	r2, [sp, #4]
 800a858:	9a02      	ldr	r2, [sp, #8]
 800a85a:	9303      	str	r3, [sp, #12]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d80c      	bhi.n	800a87a <__multiply+0x9e>
 800a860:	2e00      	cmp	r6, #0
 800a862:	dd03      	ble.n	800a86c <__multiply+0x90>
 800a864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d05b      	beq.n	800a924 <__multiply+0x148>
 800a86c:	6106      	str	r6, [r0, #16]
 800a86e:	b005      	add	sp, #20
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	f843 2b04 	str.w	r2, [r3], #4
 800a878:	e7d8      	b.n	800a82c <__multiply+0x50>
 800a87a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d024      	beq.n	800a8ce <__multiply+0xf2>
 800a884:	f104 0e14 	add.w	lr, r4, #20
 800a888:	46a9      	mov	r9, r5
 800a88a:	f04f 0c00 	mov.w	ip, #0
 800a88e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a892:	f8d9 1000 	ldr.w	r1, [r9]
 800a896:	fa1f fb82 	uxth.w	fp, r2
 800a89a:	b289      	uxth	r1, r1
 800a89c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a8:	4461      	add	r1, ip
 800a8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8b6:	b289      	uxth	r1, r1
 800a8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8bc:	4577      	cmp	r7, lr
 800a8be:	f849 1b04 	str.w	r1, [r9], #4
 800a8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8c6:	d8e2      	bhi.n	800a88e <__multiply+0xb2>
 800a8c8:	9a01      	ldr	r2, [sp, #4]
 800a8ca:	f845 c002 	str.w	ip, [r5, r2]
 800a8ce:	9a03      	ldr	r2, [sp, #12]
 800a8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	f1b9 0f00 	cmp.w	r9, #0
 800a8da:	d021      	beq.n	800a920 <__multiply+0x144>
 800a8dc:	6829      	ldr	r1, [r5, #0]
 800a8de:	f104 0c14 	add.w	ip, r4, #20
 800a8e2:	46ae      	mov	lr, r5
 800a8e4:	f04f 0a00 	mov.w	sl, #0
 800a8e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a8f4:	4452      	add	r2, sl
 800a8f6:	b289      	uxth	r1, r1
 800a8f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a900:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a908:	f8be 1000 	ldrh.w	r1, [lr]
 800a90c:	fb09 110a 	mla	r1, r9, sl, r1
 800a910:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a914:	4567      	cmp	r7, ip
 800a916:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a91a:	d8e5      	bhi.n	800a8e8 <__multiply+0x10c>
 800a91c:	9a01      	ldr	r2, [sp, #4]
 800a91e:	50a9      	str	r1, [r5, r2]
 800a920:	3504      	adds	r5, #4
 800a922:	e799      	b.n	800a858 <__multiply+0x7c>
 800a924:	3e01      	subs	r6, #1
 800a926:	e79b      	b.n	800a860 <__multiply+0x84>
 800a928:	0800b900 	.word	0x0800b900
 800a92c:	0800b911 	.word	0x0800b911

0800a930 <__pow5mult>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4615      	mov	r5, r2
 800a936:	f012 0203 	ands.w	r2, r2, #3
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	d007      	beq.n	800a950 <__pow5mult+0x20>
 800a940:	4c25      	ldr	r4, [pc, #148]	; (800a9d8 <__pow5mult+0xa8>)
 800a942:	3a01      	subs	r2, #1
 800a944:	2300      	movs	r3, #0
 800a946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a94a:	f7ff fe9d 	bl	800a688 <__multadd>
 800a94e:	4607      	mov	r7, r0
 800a950:	10ad      	asrs	r5, r5, #2
 800a952:	d03d      	beq.n	800a9d0 <__pow5mult+0xa0>
 800a954:	69f4      	ldr	r4, [r6, #28]
 800a956:	b97c      	cbnz	r4, 800a978 <__pow5mult+0x48>
 800a958:	2010      	movs	r0, #16
 800a95a:	f7ff fd7f 	bl	800a45c <malloc>
 800a95e:	4602      	mov	r2, r0
 800a960:	61f0      	str	r0, [r6, #28]
 800a962:	b928      	cbnz	r0, 800a970 <__pow5mult+0x40>
 800a964:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <__pow5mult+0xac>)
 800a966:	481e      	ldr	r0, [pc, #120]	; (800a9e0 <__pow5mult+0xb0>)
 800a968:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a96c:	f000 fbe4 	bl	800b138 <__assert_func>
 800a970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a974:	6004      	str	r4, [r0, #0]
 800a976:	60c4      	str	r4, [r0, #12]
 800a978:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a980:	b94c      	cbnz	r4, 800a996 <__pow5mult+0x66>
 800a982:	f240 2171 	movw	r1, #625	; 0x271
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ff12 	bl	800a7b0 <__i2b>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a992:	4604      	mov	r4, r0
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	f04f 0900 	mov.w	r9, #0
 800a99a:	07eb      	lsls	r3, r5, #31
 800a99c:	d50a      	bpl.n	800a9b4 <__pow5mult+0x84>
 800a99e:	4639      	mov	r1, r7
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff1a 	bl	800a7dc <__multiply>
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f7ff fe49 	bl	800a644 <_Bfree>
 800a9b2:	4647      	mov	r7, r8
 800a9b4:	106d      	asrs	r5, r5, #1
 800a9b6:	d00b      	beq.n	800a9d0 <__pow5mult+0xa0>
 800a9b8:	6820      	ldr	r0, [r4, #0]
 800a9ba:	b938      	cbnz	r0, 800a9cc <__pow5mult+0x9c>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff ff0b 	bl	800a7dc <__multiply>
 800a9c6:	6020      	str	r0, [r4, #0]
 800a9c8:	f8c0 9000 	str.w	r9, [r0]
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	e7e4      	b.n	800a99a <__pow5mult+0x6a>
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800ba60 	.word	0x0800ba60
 800a9dc:	0800b891 	.word	0x0800b891
 800a9e0:	0800b911 	.word	0x0800b911

0800a9e4 <__lshift>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	6849      	ldr	r1, [r1, #4]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	4691      	mov	r9, r2
 800a9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9fc:	f108 0601 	add.w	r6, r8, #1
 800aa00:	42b3      	cmp	r3, r6
 800aa02:	db0b      	blt.n	800aa1c <__lshift+0x38>
 800aa04:	4638      	mov	r0, r7
 800aa06:	f7ff fddd 	bl	800a5c4 <_Balloc>
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	b948      	cbnz	r0, 800aa22 <__lshift+0x3e>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <__lshift+0xd0>)
 800aa12:	4829      	ldr	r0, [pc, #164]	; (800aab8 <__lshift+0xd4>)
 800aa14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa18:	f000 fb8e 	bl	800b138 <__assert_func>
 800aa1c:	3101      	adds	r1, #1
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	e7ee      	b.n	800aa00 <__lshift+0x1c>
 800aa22:	2300      	movs	r3, #0
 800aa24:	f100 0114 	add.w	r1, r0, #20
 800aa28:	f100 0210 	add.w	r2, r0, #16
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	4553      	cmp	r3, sl
 800aa30:	db33      	blt.n	800aa9a <__lshift+0xb6>
 800aa32:	6920      	ldr	r0, [r4, #16]
 800aa34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa38:	f104 0314 	add.w	r3, r4, #20
 800aa3c:	f019 091f 	ands.w	r9, r9, #31
 800aa40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa48:	d02b      	beq.n	800aaa2 <__lshift+0xbe>
 800aa4a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa4e:	468a      	mov	sl, r1
 800aa50:	2200      	movs	r2, #0
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	fa00 f009 	lsl.w	r0, r0, r9
 800aa58:	4310      	orrs	r0, r2
 800aa5a:	f84a 0b04 	str.w	r0, [sl], #4
 800aa5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa62:	459c      	cmp	ip, r3
 800aa64:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa68:	d8f3      	bhi.n	800aa52 <__lshift+0x6e>
 800aa6a:	ebac 0304 	sub.w	r3, ip, r4
 800aa6e:	3b15      	subs	r3, #21
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	3304      	adds	r3, #4
 800aa76:	f104 0015 	add.w	r0, r4, #21
 800aa7a:	4584      	cmp	ip, r0
 800aa7c:	bf38      	it	cc
 800aa7e:	2304      	movcc	r3, #4
 800aa80:	50ca      	str	r2, [r1, r3]
 800aa82:	b10a      	cbz	r2, 800aa88 <__lshift+0xa4>
 800aa84:	f108 0602 	add.w	r6, r8, #2
 800aa88:	3e01      	subs	r6, #1
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	612e      	str	r6, [r5, #16]
 800aa8e:	4621      	mov	r1, r4
 800aa90:	f7ff fdd8 	bl	800a644 <_Bfree>
 800aa94:	4628      	mov	r0, r5
 800aa96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	e7c5      	b.n	800aa2e <__lshift+0x4a>
 800aaa2:	3904      	subs	r1, #4
 800aaa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaac:	459c      	cmp	ip, r3
 800aaae:	d8f9      	bhi.n	800aaa4 <__lshift+0xc0>
 800aab0:	e7ea      	b.n	800aa88 <__lshift+0xa4>
 800aab2:	bf00      	nop
 800aab4:	0800b900 	.word	0x0800b900
 800aab8:	0800b911 	.word	0x0800b911

0800aabc <__mcmp>:
 800aabc:	b530      	push	{r4, r5, lr}
 800aabe:	6902      	ldr	r2, [r0, #16]
 800aac0:	690c      	ldr	r4, [r1, #16]
 800aac2:	1b12      	subs	r2, r2, r4
 800aac4:	d10e      	bne.n	800aae4 <__mcmp+0x28>
 800aac6:	f100 0314 	add.w	r3, r0, #20
 800aaca:	3114      	adds	r1, #20
 800aacc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aadc:	42a5      	cmp	r5, r4
 800aade:	d003      	beq.n	800aae8 <__mcmp+0x2c>
 800aae0:	d305      	bcc.n	800aaee <__mcmp+0x32>
 800aae2:	2201      	movs	r2, #1
 800aae4:	4610      	mov	r0, r2
 800aae6:	bd30      	pop	{r4, r5, pc}
 800aae8:	4283      	cmp	r3, r0
 800aaea:	d3f3      	bcc.n	800aad4 <__mcmp+0x18>
 800aaec:	e7fa      	b.n	800aae4 <__mcmp+0x28>
 800aaee:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf2:	e7f7      	b.n	800aae4 <__mcmp+0x28>

0800aaf4 <__mdiff>:
 800aaf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	460c      	mov	r4, r1
 800aafa:	4606      	mov	r6, r0
 800aafc:	4611      	mov	r1, r2
 800aafe:	4620      	mov	r0, r4
 800ab00:	4690      	mov	r8, r2
 800ab02:	f7ff ffdb 	bl	800aabc <__mcmp>
 800ab06:	1e05      	subs	r5, r0, #0
 800ab08:	d110      	bne.n	800ab2c <__mdiff+0x38>
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7ff fd59 	bl	800a5c4 <_Balloc>
 800ab12:	b930      	cbnz	r0, 800ab22 <__mdiff+0x2e>
 800ab14:	4b3a      	ldr	r3, [pc, #232]	; (800ac00 <__mdiff+0x10c>)
 800ab16:	4602      	mov	r2, r0
 800ab18:	f240 2137 	movw	r1, #567	; 0x237
 800ab1c:	4839      	ldr	r0, [pc, #228]	; (800ac04 <__mdiff+0x110>)
 800ab1e:	f000 fb0b 	bl	800b138 <__assert_func>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	bfa4      	itt	ge
 800ab2e:	4643      	movge	r3, r8
 800ab30:	46a0      	movge	r8, r4
 800ab32:	4630      	mov	r0, r6
 800ab34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab38:	bfa6      	itte	ge
 800ab3a:	461c      	movge	r4, r3
 800ab3c:	2500      	movge	r5, #0
 800ab3e:	2501      	movlt	r5, #1
 800ab40:	f7ff fd40 	bl	800a5c4 <_Balloc>
 800ab44:	b920      	cbnz	r0, 800ab50 <__mdiff+0x5c>
 800ab46:	4b2e      	ldr	r3, [pc, #184]	; (800ac00 <__mdiff+0x10c>)
 800ab48:	4602      	mov	r2, r0
 800ab4a:	f240 2145 	movw	r1, #581	; 0x245
 800ab4e:	e7e5      	b.n	800ab1c <__mdiff+0x28>
 800ab50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab54:	6926      	ldr	r6, [r4, #16]
 800ab56:	60c5      	str	r5, [r0, #12]
 800ab58:	f104 0914 	add.w	r9, r4, #20
 800ab5c:	f108 0514 	add.w	r5, r8, #20
 800ab60:	f100 0e14 	add.w	lr, r0, #20
 800ab64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab6c:	f108 0210 	add.w	r2, r8, #16
 800ab70:	46f2      	mov	sl, lr
 800ab72:	2100      	movs	r1, #0
 800ab74:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab7c:	fa11 f88b 	uxtah	r8, r1, fp
 800ab80:	b299      	uxth	r1, r3
 800ab82:	0c1b      	lsrs	r3, r3, #16
 800ab84:	eba8 0801 	sub.w	r8, r8, r1
 800ab88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab90:	fa1f f888 	uxth.w	r8, r8
 800ab94:	1419      	asrs	r1, r3, #16
 800ab96:	454e      	cmp	r6, r9
 800ab98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab9c:	f84a 3b04 	str.w	r3, [sl], #4
 800aba0:	d8e8      	bhi.n	800ab74 <__mdiff+0x80>
 800aba2:	1b33      	subs	r3, r6, r4
 800aba4:	3b15      	subs	r3, #21
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	3304      	adds	r3, #4
 800abac:	3415      	adds	r4, #21
 800abae:	42a6      	cmp	r6, r4
 800abb0:	bf38      	it	cc
 800abb2:	2304      	movcc	r3, #4
 800abb4:	441d      	add	r5, r3
 800abb6:	4473      	add	r3, lr
 800abb8:	469e      	mov	lr, r3
 800abba:	462e      	mov	r6, r5
 800abbc:	4566      	cmp	r6, ip
 800abbe:	d30e      	bcc.n	800abde <__mdiff+0xea>
 800abc0:	f10c 0203 	add.w	r2, ip, #3
 800abc4:	1b52      	subs	r2, r2, r5
 800abc6:	f022 0203 	bic.w	r2, r2, #3
 800abca:	3d03      	subs	r5, #3
 800abcc:	45ac      	cmp	ip, r5
 800abce:	bf38      	it	cc
 800abd0:	2200      	movcc	r2, #0
 800abd2:	4413      	add	r3, r2
 800abd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800abd8:	b17a      	cbz	r2, 800abfa <__mdiff+0x106>
 800abda:	6107      	str	r7, [r0, #16]
 800abdc:	e7a4      	b.n	800ab28 <__mdiff+0x34>
 800abde:	f856 8b04 	ldr.w	r8, [r6], #4
 800abe2:	fa11 f288 	uxtah	r2, r1, r8
 800abe6:	1414      	asrs	r4, r2, #16
 800abe8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abec:	b292      	uxth	r2, r2
 800abee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abf2:	f84e 2b04 	str.w	r2, [lr], #4
 800abf6:	1421      	asrs	r1, r4, #16
 800abf8:	e7e0      	b.n	800abbc <__mdiff+0xc8>
 800abfa:	3f01      	subs	r7, #1
 800abfc:	e7ea      	b.n	800abd4 <__mdiff+0xe0>
 800abfe:	bf00      	nop
 800ac00:	0800b900 	.word	0x0800b900
 800ac04:	0800b911 	.word	0x0800b911

0800ac08 <__d2b>:
 800ac08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	2101      	movs	r1, #1
 800ac10:	ec59 8b10 	vmov	r8, r9, d0
 800ac14:	4616      	mov	r6, r2
 800ac16:	f7ff fcd5 	bl	800a5c4 <_Balloc>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	b930      	cbnz	r0, 800ac2c <__d2b+0x24>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <__d2b+0xac>)
 800ac22:	4825      	ldr	r0, [pc, #148]	; (800acb8 <__d2b+0xb0>)
 800ac24:	f240 310f 	movw	r1, #783	; 0x30f
 800ac28:	f000 fa86 	bl	800b138 <__assert_func>
 800ac2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac34:	bb2d      	cbnz	r5, 800ac82 <__d2b+0x7a>
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	f1b8 0300 	subs.w	r3, r8, #0
 800ac3c:	d026      	beq.n	800ac8c <__d2b+0x84>
 800ac3e:	4668      	mov	r0, sp
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	f7ff fd87 	bl	800a754 <__lo0bits>
 800ac46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac4a:	b1e8      	cbz	r0, 800ac88 <__d2b+0x80>
 800ac4c:	f1c0 0320 	rsb	r3, r0, #32
 800ac50:	fa02 f303 	lsl.w	r3, r2, r3
 800ac54:	430b      	orrs	r3, r1
 800ac56:	40c2      	lsrs	r2, r0
 800ac58:	6163      	str	r3, [r4, #20]
 800ac5a:	9201      	str	r2, [sp, #4]
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	61a3      	str	r3, [r4, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bf14      	ite	ne
 800ac64:	2202      	movne	r2, #2
 800ac66:	2201      	moveq	r2, #1
 800ac68:	6122      	str	r2, [r4, #16]
 800ac6a:	b1bd      	cbz	r5, 800ac9c <__d2b+0x94>
 800ac6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac70:	4405      	add	r5, r0
 800ac72:	603d      	str	r5, [r7, #0]
 800ac74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac78:	6030      	str	r0, [r6, #0]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	b003      	add	sp, #12
 800ac7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac86:	e7d6      	b.n	800ac36 <__d2b+0x2e>
 800ac88:	6161      	str	r1, [r4, #20]
 800ac8a:	e7e7      	b.n	800ac5c <__d2b+0x54>
 800ac8c:	a801      	add	r0, sp, #4
 800ac8e:	f7ff fd61 	bl	800a754 <__lo0bits>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	6163      	str	r3, [r4, #20]
 800ac96:	3020      	adds	r0, #32
 800ac98:	2201      	movs	r2, #1
 800ac9a:	e7e5      	b.n	800ac68 <__d2b+0x60>
 800ac9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aca0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aca4:	6038      	str	r0, [r7, #0]
 800aca6:	6918      	ldr	r0, [r3, #16]
 800aca8:	f7ff fd34 	bl	800a714 <__hi0bits>
 800acac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acb0:	e7e2      	b.n	800ac78 <__d2b+0x70>
 800acb2:	bf00      	nop
 800acb4:	0800b900 	.word	0x0800b900
 800acb8:	0800b911 	.word	0x0800b911

0800acbc <__ssputs_r>:
 800acbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	688e      	ldr	r6, [r1, #8]
 800acc2:	461f      	mov	r7, r3
 800acc4:	42be      	cmp	r6, r7
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	4682      	mov	sl, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4690      	mov	r8, r2
 800acce:	d82c      	bhi.n	800ad2a <__ssputs_r+0x6e>
 800acd0:	898a      	ldrh	r2, [r1, #12]
 800acd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acd6:	d026      	beq.n	800ad26 <__ssputs_r+0x6a>
 800acd8:	6965      	ldr	r5, [r4, #20]
 800acda:	6909      	ldr	r1, [r1, #16]
 800acdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace0:	eba3 0901 	sub.w	r9, r3, r1
 800ace4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace8:	1c7b      	adds	r3, r7, #1
 800acea:	444b      	add	r3, r9
 800acec:	106d      	asrs	r5, r5, #1
 800acee:	429d      	cmp	r5, r3
 800acf0:	bf38      	it	cc
 800acf2:	461d      	movcc	r5, r3
 800acf4:	0553      	lsls	r3, r2, #21
 800acf6:	d527      	bpl.n	800ad48 <__ssputs_r+0x8c>
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7ff fbd7 	bl	800a4ac <_malloc_r>
 800acfe:	4606      	mov	r6, r0
 800ad00:	b360      	cbz	r0, 800ad5c <__ssputs_r+0xa0>
 800ad02:	6921      	ldr	r1, [r4, #16]
 800ad04:	464a      	mov	r2, r9
 800ad06:	f000 fa09 	bl	800b11c <memcpy>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	6126      	str	r6, [r4, #16]
 800ad18:	6165      	str	r5, [r4, #20]
 800ad1a:	444e      	add	r6, r9
 800ad1c:	eba5 0509 	sub.w	r5, r5, r9
 800ad20:	6026      	str	r6, [r4, #0]
 800ad22:	60a5      	str	r5, [r4, #8]
 800ad24:	463e      	mov	r6, r7
 800ad26:	42be      	cmp	r6, r7
 800ad28:	d900      	bls.n	800ad2c <__ssputs_r+0x70>
 800ad2a:	463e      	mov	r6, r7
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4641      	mov	r1, r8
 800ad32:	f000 f9c9 	bl	800b0c8 <memmove>
 800ad36:	68a3      	ldr	r3, [r4, #8]
 800ad38:	1b9b      	subs	r3, r3, r6
 800ad3a:	60a3      	str	r3, [r4, #8]
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	4433      	add	r3, r6
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	2000      	movs	r0, #0
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	462a      	mov	r2, r5
 800ad4a:	f000 fa3b 	bl	800b1c4 <_realloc_r>
 800ad4e:	4606      	mov	r6, r0
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d1e0      	bne.n	800ad16 <__ssputs_r+0x5a>
 800ad54:	6921      	ldr	r1, [r4, #16]
 800ad56:	4650      	mov	r0, sl
 800ad58:	f7ff fb34 	bl	800a3c4 <_free_r>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	f8ca 3000 	str.w	r3, [sl]
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6e:	e7e9      	b.n	800ad44 <__ssputs_r+0x88>

0800ad70 <_svfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	4698      	mov	r8, r3
 800ad76:	898b      	ldrh	r3, [r1, #12]
 800ad78:	061b      	lsls	r3, r3, #24
 800ad7a:	b09d      	sub	sp, #116	; 0x74
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	d50e      	bpl.n	800ada2 <_svfiprintf_r+0x32>
 800ad84:	690b      	ldr	r3, [r1, #16]
 800ad86:	b963      	cbnz	r3, 800ada2 <_svfiprintf_r+0x32>
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	f7ff fb8f 	bl	800a4ac <_malloc_r>
 800ad8e:	6028      	str	r0, [r5, #0]
 800ad90:	6128      	str	r0, [r5, #16]
 800ad92:	b920      	cbnz	r0, 800ad9e <_svfiprintf_r+0x2e>
 800ad94:	230c      	movs	r3, #12
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	e0d0      	b.n	800af40 <_svfiprintf_r+0x1d0>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	616b      	str	r3, [r5, #20]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9309      	str	r3, [sp, #36]	; 0x24
 800ada6:	2320      	movs	r3, #32
 800ada8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adac:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb0:	2330      	movs	r3, #48	; 0x30
 800adb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af58 <_svfiprintf_r+0x1e8>
 800adb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adba:	f04f 0901 	mov.w	r9, #1
 800adbe:	4623      	mov	r3, r4
 800adc0:	469a      	mov	sl, r3
 800adc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc6:	b10a      	cbz	r2, 800adcc <_svfiprintf_r+0x5c>
 800adc8:	2a25      	cmp	r2, #37	; 0x25
 800adca:	d1f9      	bne.n	800adc0 <_svfiprintf_r+0x50>
 800adcc:	ebba 0b04 	subs.w	fp, sl, r4
 800add0:	d00b      	beq.n	800adea <_svfiprintf_r+0x7a>
 800add2:	465b      	mov	r3, fp
 800add4:	4622      	mov	r2, r4
 800add6:	4629      	mov	r1, r5
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff ff6f 	bl	800acbc <__ssputs_r>
 800adde:	3001      	adds	r0, #1
 800ade0:	f000 80a9 	beq.w	800af36 <_svfiprintf_r+0x1c6>
 800ade4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade6:	445a      	add	r2, fp
 800ade8:	9209      	str	r2, [sp, #36]	; 0x24
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 80a1 	beq.w	800af36 <_svfiprintf_r+0x1c6>
 800adf4:	2300      	movs	r3, #0
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adfe:	f10a 0a01 	add.w	sl, sl, #1
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	9307      	str	r3, [sp, #28]
 800ae06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0c:	4654      	mov	r4, sl
 800ae0e:	2205      	movs	r2, #5
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	4850      	ldr	r0, [pc, #320]	; (800af58 <_svfiprintf_r+0x1e8>)
 800ae16:	f7f5 f9db 	bl	80001d0 <memchr>
 800ae1a:	9a04      	ldr	r2, [sp, #16]
 800ae1c:	b9d8      	cbnz	r0, 800ae56 <_svfiprintf_r+0xe6>
 800ae1e:	06d0      	lsls	r0, r2, #27
 800ae20:	bf44      	itt	mi
 800ae22:	2320      	movmi	r3, #32
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae28:	0711      	lsls	r1, r2, #28
 800ae2a:	bf44      	itt	mi
 800ae2c:	232b      	movmi	r3, #43	; 0x2b
 800ae2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae32:	f89a 3000 	ldrb.w	r3, [sl]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d015      	beq.n	800ae66 <_svfiprintf_r+0xf6>
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	4654      	mov	r4, sl
 800ae3e:	2000      	movs	r0, #0
 800ae40:	f04f 0c0a 	mov.w	ip, #10
 800ae44:	4621      	mov	r1, r4
 800ae46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4a:	3b30      	subs	r3, #48	; 0x30
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	d94d      	bls.n	800aeec <_svfiprintf_r+0x17c>
 800ae50:	b1b0      	cbz	r0, 800ae80 <_svfiprintf_r+0x110>
 800ae52:	9207      	str	r2, [sp, #28]
 800ae54:	e014      	b.n	800ae80 <_svfiprintf_r+0x110>
 800ae56:	eba0 0308 	sub.w	r3, r0, r8
 800ae5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	46a2      	mov	sl, r4
 800ae64:	e7d2      	b.n	800ae0c <_svfiprintf_r+0x9c>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	1d19      	adds	r1, r3, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	9103      	str	r1, [sp, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfbb      	ittet	lt
 800ae72:	425b      	neglt	r3, r3
 800ae74:	f042 0202 	orrlt.w	r2, r2, #2
 800ae78:	9307      	strge	r3, [sp, #28]
 800ae7a:	9307      	strlt	r3, [sp, #28]
 800ae7c:	bfb8      	it	lt
 800ae7e:	9204      	strlt	r2, [sp, #16]
 800ae80:	7823      	ldrb	r3, [r4, #0]
 800ae82:	2b2e      	cmp	r3, #46	; 0x2e
 800ae84:	d10c      	bne.n	800aea0 <_svfiprintf_r+0x130>
 800ae86:	7863      	ldrb	r3, [r4, #1]
 800ae88:	2b2a      	cmp	r3, #42	; 0x2a
 800ae8a:	d134      	bne.n	800aef6 <_svfiprintf_r+0x186>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	9203      	str	r2, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfb8      	it	lt
 800ae98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9c:	3402      	adds	r4, #2
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af68 <_svfiprintf_r+0x1f8>
 800aea4:	7821      	ldrb	r1, [r4, #0]
 800aea6:	2203      	movs	r2, #3
 800aea8:	4650      	mov	r0, sl
 800aeaa:	f7f5 f991 	bl	80001d0 <memchr>
 800aeae:	b138      	cbz	r0, 800aec0 <_svfiprintf_r+0x150>
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	eba0 000a 	sub.w	r0, r0, sl
 800aeb6:	2240      	movs	r2, #64	; 0x40
 800aeb8:	4082      	lsls	r2, r0
 800aeba:	4313      	orrs	r3, r2
 800aebc:	3401      	adds	r4, #1
 800aebe:	9304      	str	r3, [sp, #16]
 800aec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec4:	4825      	ldr	r0, [pc, #148]	; (800af5c <_svfiprintf_r+0x1ec>)
 800aec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeca:	2206      	movs	r2, #6
 800aecc:	f7f5 f980 	bl	80001d0 <memchr>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d038      	beq.n	800af46 <_svfiprintf_r+0x1d6>
 800aed4:	4b22      	ldr	r3, [pc, #136]	; (800af60 <_svfiprintf_r+0x1f0>)
 800aed6:	bb1b      	cbnz	r3, 800af20 <_svfiprintf_r+0x1b0>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	3307      	adds	r3, #7
 800aedc:	f023 0307 	bic.w	r3, r3, #7
 800aee0:	3308      	adds	r3, #8
 800aee2:	9303      	str	r3, [sp, #12]
 800aee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee6:	4433      	add	r3, r6
 800aee8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeea:	e768      	b.n	800adbe <_svfiprintf_r+0x4e>
 800aeec:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef0:	460c      	mov	r4, r1
 800aef2:	2001      	movs	r0, #1
 800aef4:	e7a6      	b.n	800ae44 <_svfiprintf_r+0xd4>
 800aef6:	2300      	movs	r3, #0
 800aef8:	3401      	adds	r4, #1
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	4619      	mov	r1, r3
 800aefe:	f04f 0c0a 	mov.w	ip, #10
 800af02:	4620      	mov	r0, r4
 800af04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af08:	3a30      	subs	r2, #48	; 0x30
 800af0a:	2a09      	cmp	r2, #9
 800af0c:	d903      	bls.n	800af16 <_svfiprintf_r+0x1a6>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0c6      	beq.n	800aea0 <_svfiprintf_r+0x130>
 800af12:	9105      	str	r1, [sp, #20]
 800af14:	e7c4      	b.n	800aea0 <_svfiprintf_r+0x130>
 800af16:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1a:	4604      	mov	r4, r0
 800af1c:	2301      	movs	r3, #1
 800af1e:	e7f0      	b.n	800af02 <_svfiprintf_r+0x192>
 800af20:	ab03      	add	r3, sp, #12
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	462a      	mov	r2, r5
 800af26:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <_svfiprintf_r+0x1f4>)
 800af28:	a904      	add	r1, sp, #16
 800af2a:	4638      	mov	r0, r7
 800af2c:	f7fd fe64 	bl	8008bf8 <_printf_float>
 800af30:	1c42      	adds	r2, r0, #1
 800af32:	4606      	mov	r6, r0
 800af34:	d1d6      	bne.n	800aee4 <_svfiprintf_r+0x174>
 800af36:	89ab      	ldrh	r3, [r5, #12]
 800af38:	065b      	lsls	r3, r3, #25
 800af3a:	f53f af2d 	bmi.w	800ad98 <_svfiprintf_r+0x28>
 800af3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af40:	b01d      	add	sp, #116	; 0x74
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b05      	ldr	r3, [pc, #20]	; (800af64 <_svfiprintf_r+0x1f4>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4638      	mov	r0, r7
 800af52:	f7fe f8f5 	bl	8009140 <_printf_i>
 800af56:	e7eb      	b.n	800af30 <_svfiprintf_r+0x1c0>
 800af58:	0800ba6c 	.word	0x0800ba6c
 800af5c:	0800ba76 	.word	0x0800ba76
 800af60:	08008bf9 	.word	0x08008bf9
 800af64:	0800acbd 	.word	0x0800acbd
 800af68:	0800ba72 	.word	0x0800ba72

0800af6c <__sflush_r>:
 800af6c:	898a      	ldrh	r2, [r1, #12]
 800af6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af72:	4605      	mov	r5, r0
 800af74:	0710      	lsls	r0, r2, #28
 800af76:	460c      	mov	r4, r1
 800af78:	d458      	bmi.n	800b02c <__sflush_r+0xc0>
 800af7a:	684b      	ldr	r3, [r1, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dc05      	bgt.n	800af8c <__sflush_r+0x20>
 800af80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	dc02      	bgt.n	800af8c <__sflush_r+0x20>
 800af86:	2000      	movs	r0, #0
 800af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af8e:	2e00      	cmp	r6, #0
 800af90:	d0f9      	beq.n	800af86 <__sflush_r+0x1a>
 800af92:	2300      	movs	r3, #0
 800af94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af98:	682f      	ldr	r7, [r5, #0]
 800af9a:	6a21      	ldr	r1, [r4, #32]
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	d032      	beq.n	800b006 <__sflush_r+0x9a>
 800afa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	075a      	lsls	r2, r3, #29
 800afa6:	d505      	bpl.n	800afb4 <__sflush_r+0x48>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	1ac0      	subs	r0, r0, r3
 800afac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afae:	b10b      	cbz	r3, 800afb4 <__sflush_r+0x48>
 800afb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afb2:	1ac0      	subs	r0, r0, r3
 800afb4:	2300      	movs	r3, #0
 800afb6:	4602      	mov	r2, r0
 800afb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afba:	6a21      	ldr	r1, [r4, #32]
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b0      	blx	r6
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	d106      	bne.n	800afd4 <__sflush_r+0x68>
 800afc6:	6829      	ldr	r1, [r5, #0]
 800afc8:	291d      	cmp	r1, #29
 800afca:	d82b      	bhi.n	800b024 <__sflush_r+0xb8>
 800afcc:	4a29      	ldr	r2, [pc, #164]	; (800b074 <__sflush_r+0x108>)
 800afce:	410a      	asrs	r2, r1
 800afd0:	07d6      	lsls	r6, r2, #31
 800afd2:	d427      	bmi.n	800b024 <__sflush_r+0xb8>
 800afd4:	2200      	movs	r2, #0
 800afd6:	6062      	str	r2, [r4, #4]
 800afd8:	04d9      	lsls	r1, r3, #19
 800afda:	6922      	ldr	r2, [r4, #16]
 800afdc:	6022      	str	r2, [r4, #0]
 800afde:	d504      	bpl.n	800afea <__sflush_r+0x7e>
 800afe0:	1c42      	adds	r2, r0, #1
 800afe2:	d101      	bne.n	800afe8 <__sflush_r+0x7c>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b903      	cbnz	r3, 800afea <__sflush_r+0x7e>
 800afe8:	6560      	str	r0, [r4, #84]	; 0x54
 800afea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afec:	602f      	str	r7, [r5, #0]
 800afee:	2900      	cmp	r1, #0
 800aff0:	d0c9      	beq.n	800af86 <__sflush_r+0x1a>
 800aff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aff6:	4299      	cmp	r1, r3
 800aff8:	d002      	beq.n	800b000 <__sflush_r+0x94>
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff f9e2 	bl	800a3c4 <_free_r>
 800b000:	2000      	movs	r0, #0
 800b002:	6360      	str	r0, [r4, #52]	; 0x34
 800b004:	e7c0      	b.n	800af88 <__sflush_r+0x1c>
 800b006:	2301      	movs	r3, #1
 800b008:	4628      	mov	r0, r5
 800b00a:	47b0      	blx	r6
 800b00c:	1c41      	adds	r1, r0, #1
 800b00e:	d1c8      	bne.n	800afa2 <__sflush_r+0x36>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0c5      	beq.n	800afa2 <__sflush_r+0x36>
 800b016:	2b1d      	cmp	r3, #29
 800b018:	d001      	beq.n	800b01e <__sflush_r+0xb2>
 800b01a:	2b16      	cmp	r3, #22
 800b01c:	d101      	bne.n	800b022 <__sflush_r+0xb6>
 800b01e:	602f      	str	r7, [r5, #0]
 800b020:	e7b1      	b.n	800af86 <__sflush_r+0x1a>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	e7ad      	b.n	800af88 <__sflush_r+0x1c>
 800b02c:	690f      	ldr	r7, [r1, #16]
 800b02e:	2f00      	cmp	r7, #0
 800b030:	d0a9      	beq.n	800af86 <__sflush_r+0x1a>
 800b032:	0793      	lsls	r3, r2, #30
 800b034:	680e      	ldr	r6, [r1, #0]
 800b036:	bf08      	it	eq
 800b038:	694b      	ldreq	r3, [r1, #20]
 800b03a:	600f      	str	r7, [r1, #0]
 800b03c:	bf18      	it	ne
 800b03e:	2300      	movne	r3, #0
 800b040:	eba6 0807 	sub.w	r8, r6, r7
 800b044:	608b      	str	r3, [r1, #8]
 800b046:	f1b8 0f00 	cmp.w	r8, #0
 800b04a:	dd9c      	ble.n	800af86 <__sflush_r+0x1a>
 800b04c:	6a21      	ldr	r1, [r4, #32]
 800b04e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b050:	4643      	mov	r3, r8
 800b052:	463a      	mov	r2, r7
 800b054:	4628      	mov	r0, r5
 800b056:	47b0      	blx	r6
 800b058:	2800      	cmp	r0, #0
 800b05a:	dc06      	bgt.n	800b06a <__sflush_r+0xfe>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e78e      	b.n	800af88 <__sflush_r+0x1c>
 800b06a:	4407      	add	r7, r0
 800b06c:	eba8 0800 	sub.w	r8, r8, r0
 800b070:	e7e9      	b.n	800b046 <__sflush_r+0xda>
 800b072:	bf00      	nop
 800b074:	dfbffffe 	.word	0xdfbffffe

0800b078 <_fflush_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	4605      	mov	r5, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b913      	cbnz	r3, 800b088 <_fflush_r+0x10>
 800b082:	2500      	movs	r5, #0
 800b084:	4628      	mov	r0, r5
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	b118      	cbz	r0, 800b092 <_fflush_r+0x1a>
 800b08a:	6a03      	ldr	r3, [r0, #32]
 800b08c:	b90b      	cbnz	r3, 800b092 <_fflush_r+0x1a>
 800b08e:	f7fe fa05 	bl	800949c <__sinit>
 800b092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0f3      	beq.n	800b082 <_fflush_r+0xa>
 800b09a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b09c:	07d0      	lsls	r0, r2, #31
 800b09e:	d404      	bmi.n	800b0aa <_fflush_r+0x32>
 800b0a0:	0599      	lsls	r1, r3, #22
 800b0a2:	d402      	bmi.n	800b0aa <_fflush_r+0x32>
 800b0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0a6:	f7fe fb10 	bl	80096ca <__retarget_lock_acquire_recursive>
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	f7ff ff5d 	bl	800af6c <__sflush_r>
 800b0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0b4:	07da      	lsls	r2, r3, #31
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	d4e4      	bmi.n	800b084 <_fflush_r+0xc>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	059b      	lsls	r3, r3, #22
 800b0be:	d4e1      	bmi.n	800b084 <_fflush_r+0xc>
 800b0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c2:	f7fe fb03 	bl	80096cc <__retarget_lock_release_recursive>
 800b0c6:	e7dd      	b.n	800b084 <_fflush_r+0xc>

0800b0c8 <memmove>:
 800b0c8:	4288      	cmp	r0, r1
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	eb01 0402 	add.w	r4, r1, r2
 800b0d0:	d902      	bls.n	800b0d8 <memmove+0x10>
 800b0d2:	4284      	cmp	r4, r0
 800b0d4:	4623      	mov	r3, r4
 800b0d6:	d807      	bhi.n	800b0e8 <memmove+0x20>
 800b0d8:	1e43      	subs	r3, r0, #1
 800b0da:	42a1      	cmp	r1, r4
 800b0dc:	d008      	beq.n	800b0f0 <memmove+0x28>
 800b0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0e6:	e7f8      	b.n	800b0da <memmove+0x12>
 800b0e8:	4402      	add	r2, r0
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	428a      	cmp	r2, r1
 800b0ee:	d100      	bne.n	800b0f2 <memmove+0x2a>
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0fa:	e7f7      	b.n	800b0ec <memmove+0x24>

0800b0fc <_sbrk_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4d06      	ldr	r5, [pc, #24]	; (800b118 <_sbrk_r+0x1c>)
 800b100:	2300      	movs	r3, #0
 800b102:	4604      	mov	r4, r0
 800b104:	4608      	mov	r0, r1
 800b106:	602b      	str	r3, [r5, #0]
 800b108:	f7f6 f926 	bl	8001358 <_sbrk>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	d102      	bne.n	800b116 <_sbrk_r+0x1a>
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	b103      	cbz	r3, 800b116 <_sbrk_r+0x1a>
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	2000205c 	.word	0x2000205c

0800b11c <memcpy>:
 800b11c:	440a      	add	r2, r1
 800b11e:	4291      	cmp	r1, r2
 800b120:	f100 33ff 	add.w	r3, r0, #4294967295
 800b124:	d100      	bne.n	800b128 <memcpy+0xc>
 800b126:	4770      	bx	lr
 800b128:	b510      	push	{r4, lr}
 800b12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b132:	4291      	cmp	r1, r2
 800b134:	d1f9      	bne.n	800b12a <memcpy+0xe>
 800b136:	bd10      	pop	{r4, pc}

0800b138 <__assert_func>:
 800b138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b13a:	4614      	mov	r4, r2
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b09      	ldr	r3, [pc, #36]	; (800b164 <__assert_func+0x2c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4605      	mov	r5, r0
 800b144:	68d8      	ldr	r0, [r3, #12]
 800b146:	b14c      	cbz	r4, 800b15c <__assert_func+0x24>
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <__assert_func+0x30>)
 800b14a:	9100      	str	r1, [sp, #0]
 800b14c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b150:	4906      	ldr	r1, [pc, #24]	; (800b16c <__assert_func+0x34>)
 800b152:	462b      	mov	r3, r5
 800b154:	f000 f872 	bl	800b23c <fiprintf>
 800b158:	f000 f882 	bl	800b260 <abort>
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <__assert_func+0x38>)
 800b15e:	461c      	mov	r4, r3
 800b160:	e7f3      	b.n	800b14a <__assert_func+0x12>
 800b162:	bf00      	nop
 800b164:	20000154 	.word	0x20000154
 800b168:	0800ba87 	.word	0x0800ba87
 800b16c:	0800ba94 	.word	0x0800ba94
 800b170:	0800bac2 	.word	0x0800bac2

0800b174 <_calloc_r>:
 800b174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b176:	fba1 2402 	umull	r2, r4, r1, r2
 800b17a:	b94c      	cbnz	r4, 800b190 <_calloc_r+0x1c>
 800b17c:	4611      	mov	r1, r2
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	f7ff f994 	bl	800a4ac <_malloc_r>
 800b184:	9a01      	ldr	r2, [sp, #4]
 800b186:	4605      	mov	r5, r0
 800b188:	b930      	cbnz	r0, 800b198 <_calloc_r+0x24>
 800b18a:	4628      	mov	r0, r5
 800b18c:	b003      	add	sp, #12
 800b18e:	bd30      	pop	{r4, r5, pc}
 800b190:	220c      	movs	r2, #12
 800b192:	6002      	str	r2, [r0, #0]
 800b194:	2500      	movs	r5, #0
 800b196:	e7f8      	b.n	800b18a <_calloc_r+0x16>
 800b198:	4621      	mov	r1, r4
 800b19a:	f7fe fa18 	bl	80095ce <memset>
 800b19e:	e7f4      	b.n	800b18a <_calloc_r+0x16>

0800b1a0 <__ascii_mbtowc>:
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	b901      	cbnz	r1, 800b1a6 <__ascii_mbtowc+0x6>
 800b1a4:	a901      	add	r1, sp, #4
 800b1a6:	b142      	cbz	r2, 800b1ba <__ascii_mbtowc+0x1a>
 800b1a8:	b14b      	cbz	r3, 800b1be <__ascii_mbtowc+0x1e>
 800b1aa:	7813      	ldrb	r3, [r2, #0]
 800b1ac:	600b      	str	r3, [r1, #0]
 800b1ae:	7812      	ldrb	r2, [r2, #0]
 800b1b0:	1e10      	subs	r0, r2, #0
 800b1b2:	bf18      	it	ne
 800b1b4:	2001      	movne	r0, #1
 800b1b6:	b002      	add	sp, #8
 800b1b8:	4770      	bx	lr
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	e7fb      	b.n	800b1b6 <__ascii_mbtowc+0x16>
 800b1be:	f06f 0001 	mvn.w	r0, #1
 800b1c2:	e7f8      	b.n	800b1b6 <__ascii_mbtowc+0x16>

0800b1c4 <_realloc_r>:
 800b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	b921      	cbnz	r1, 800b1da <_realloc_r+0x16>
 800b1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	f7ff b969 	b.w	800a4ac <_malloc_r>
 800b1da:	b92a      	cbnz	r2, 800b1e8 <_realloc_r+0x24>
 800b1dc:	f7ff f8f2 	bl	800a3c4 <_free_r>
 800b1e0:	4625      	mov	r5, r4
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e8:	f000 f841 	bl	800b26e <_malloc_usable_size_r>
 800b1ec:	4284      	cmp	r4, r0
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	d802      	bhi.n	800b1f8 <_realloc_r+0x34>
 800b1f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1f6:	d812      	bhi.n	800b21e <_realloc_r+0x5a>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	f7ff f956 	bl	800a4ac <_malloc_r>
 800b200:	4605      	mov	r5, r0
 800b202:	2800      	cmp	r0, #0
 800b204:	d0ed      	beq.n	800b1e2 <_realloc_r+0x1e>
 800b206:	42bc      	cmp	r4, r7
 800b208:	4622      	mov	r2, r4
 800b20a:	4631      	mov	r1, r6
 800b20c:	bf28      	it	cs
 800b20e:	463a      	movcs	r2, r7
 800b210:	f7ff ff84 	bl	800b11c <memcpy>
 800b214:	4631      	mov	r1, r6
 800b216:	4640      	mov	r0, r8
 800b218:	f7ff f8d4 	bl	800a3c4 <_free_r>
 800b21c:	e7e1      	b.n	800b1e2 <_realloc_r+0x1e>
 800b21e:	4635      	mov	r5, r6
 800b220:	e7df      	b.n	800b1e2 <_realloc_r+0x1e>

0800b222 <__ascii_wctomb>:
 800b222:	b149      	cbz	r1, 800b238 <__ascii_wctomb+0x16>
 800b224:	2aff      	cmp	r2, #255	; 0xff
 800b226:	bf85      	ittet	hi
 800b228:	238a      	movhi	r3, #138	; 0x8a
 800b22a:	6003      	strhi	r3, [r0, #0]
 800b22c:	700a      	strbls	r2, [r1, #0]
 800b22e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b232:	bf98      	it	ls
 800b234:	2001      	movls	r0, #1
 800b236:	4770      	bx	lr
 800b238:	4608      	mov	r0, r1
 800b23a:	4770      	bx	lr

0800b23c <fiprintf>:
 800b23c:	b40e      	push	{r1, r2, r3}
 800b23e:	b503      	push	{r0, r1, lr}
 800b240:	4601      	mov	r1, r0
 800b242:	ab03      	add	r3, sp, #12
 800b244:	4805      	ldr	r0, [pc, #20]	; (800b25c <fiprintf+0x20>)
 800b246:	f853 2b04 	ldr.w	r2, [r3], #4
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	9301      	str	r3, [sp, #4]
 800b24e:	f000 f83f 	bl	800b2d0 <_vfiprintf_r>
 800b252:	b002      	add	sp, #8
 800b254:	f85d eb04 	ldr.w	lr, [sp], #4
 800b258:	b003      	add	sp, #12
 800b25a:	4770      	bx	lr
 800b25c:	20000154 	.word	0x20000154

0800b260 <abort>:
 800b260:	b508      	push	{r3, lr}
 800b262:	2006      	movs	r0, #6
 800b264:	f000 fa0c 	bl	800b680 <raise>
 800b268:	2001      	movs	r0, #1
 800b26a:	f7f5 fffd 	bl	8001268 <_exit>

0800b26e <_malloc_usable_size_r>:
 800b26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b272:	1f18      	subs	r0, r3, #4
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbc      	itt	lt
 800b278:	580b      	ldrlt	r3, [r1, r0]
 800b27a:	18c0      	addlt	r0, r0, r3
 800b27c:	4770      	bx	lr

0800b27e <__sfputc_r>:
 800b27e:	6893      	ldr	r3, [r2, #8]
 800b280:	3b01      	subs	r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	b410      	push	{r4}
 800b286:	6093      	str	r3, [r2, #8]
 800b288:	da08      	bge.n	800b29c <__sfputc_r+0x1e>
 800b28a:	6994      	ldr	r4, [r2, #24]
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	db01      	blt.n	800b294 <__sfputc_r+0x16>
 800b290:	290a      	cmp	r1, #10
 800b292:	d103      	bne.n	800b29c <__sfputc_r+0x1e>
 800b294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b298:	f000 b934 	b.w	800b504 <__swbuf_r>
 800b29c:	6813      	ldr	r3, [r2, #0]
 800b29e:	1c58      	adds	r0, r3, #1
 800b2a0:	6010      	str	r0, [r2, #0]
 800b2a2:	7019      	strb	r1, [r3, #0]
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <__sfputs_r>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	18d5      	adds	r5, r2, r3
 800b2b6:	42ac      	cmp	r4, r5
 800b2b8:	d101      	bne.n	800b2be <__sfputs_r+0x12>
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	e007      	b.n	800b2ce <__sfputs_r+0x22>
 800b2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f7ff ffda 	bl	800b27e <__sfputc_r>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d1f3      	bne.n	800b2b6 <__sfputs_r+0xa>
 800b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2d0 <_vfiprintf_r>:
 800b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d4:	460d      	mov	r5, r1
 800b2d6:	b09d      	sub	sp, #116	; 0x74
 800b2d8:	4614      	mov	r4, r2
 800b2da:	4698      	mov	r8, r3
 800b2dc:	4606      	mov	r6, r0
 800b2de:	b118      	cbz	r0, 800b2e8 <_vfiprintf_r+0x18>
 800b2e0:	6a03      	ldr	r3, [r0, #32]
 800b2e2:	b90b      	cbnz	r3, 800b2e8 <_vfiprintf_r+0x18>
 800b2e4:	f7fe f8da 	bl	800949c <__sinit>
 800b2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ea:	07d9      	lsls	r1, r3, #31
 800b2ec:	d405      	bmi.n	800b2fa <_vfiprintf_r+0x2a>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	059a      	lsls	r2, r3, #22
 800b2f2:	d402      	bmi.n	800b2fa <_vfiprintf_r+0x2a>
 800b2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2f6:	f7fe f9e8 	bl	80096ca <__retarget_lock_acquire_recursive>
 800b2fa:	89ab      	ldrh	r3, [r5, #12]
 800b2fc:	071b      	lsls	r3, r3, #28
 800b2fe:	d501      	bpl.n	800b304 <_vfiprintf_r+0x34>
 800b300:	692b      	ldr	r3, [r5, #16]
 800b302:	b99b      	cbnz	r3, 800b32c <_vfiprintf_r+0x5c>
 800b304:	4629      	mov	r1, r5
 800b306:	4630      	mov	r0, r6
 800b308:	f000 f93a 	bl	800b580 <__swsetup_r>
 800b30c:	b170      	cbz	r0, 800b32c <_vfiprintf_r+0x5c>
 800b30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b310:	07dc      	lsls	r4, r3, #31
 800b312:	d504      	bpl.n	800b31e <_vfiprintf_r+0x4e>
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	b01d      	add	sp, #116	; 0x74
 800b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31e:	89ab      	ldrh	r3, [r5, #12]
 800b320:	0598      	lsls	r0, r3, #22
 800b322:	d4f7      	bmi.n	800b314 <_vfiprintf_r+0x44>
 800b324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b326:	f7fe f9d1 	bl	80096cc <__retarget_lock_release_recursive>
 800b32a:	e7f3      	b.n	800b314 <_vfiprintf_r+0x44>
 800b32c:	2300      	movs	r3, #0
 800b32e:	9309      	str	r3, [sp, #36]	; 0x24
 800b330:	2320      	movs	r3, #32
 800b332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b336:	f8cd 800c 	str.w	r8, [sp, #12]
 800b33a:	2330      	movs	r3, #48	; 0x30
 800b33c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b4f0 <_vfiprintf_r+0x220>
 800b340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b344:	f04f 0901 	mov.w	r9, #1
 800b348:	4623      	mov	r3, r4
 800b34a:	469a      	mov	sl, r3
 800b34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b350:	b10a      	cbz	r2, 800b356 <_vfiprintf_r+0x86>
 800b352:	2a25      	cmp	r2, #37	; 0x25
 800b354:	d1f9      	bne.n	800b34a <_vfiprintf_r+0x7a>
 800b356:	ebba 0b04 	subs.w	fp, sl, r4
 800b35a:	d00b      	beq.n	800b374 <_vfiprintf_r+0xa4>
 800b35c:	465b      	mov	r3, fp
 800b35e:	4622      	mov	r2, r4
 800b360:	4629      	mov	r1, r5
 800b362:	4630      	mov	r0, r6
 800b364:	f7ff ffa2 	bl	800b2ac <__sfputs_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	f000 80a9 	beq.w	800b4c0 <_vfiprintf_r+0x1f0>
 800b36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b370:	445a      	add	r2, fp
 800b372:	9209      	str	r2, [sp, #36]	; 0x24
 800b374:	f89a 3000 	ldrb.w	r3, [sl]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 80a1 	beq.w	800b4c0 <_vfiprintf_r+0x1f0>
 800b37e:	2300      	movs	r3, #0
 800b380:	f04f 32ff 	mov.w	r2, #4294967295
 800b384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b388:	f10a 0a01 	add.w	sl, sl, #1
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b394:	931a      	str	r3, [sp, #104]	; 0x68
 800b396:	4654      	mov	r4, sl
 800b398:	2205      	movs	r2, #5
 800b39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39e:	4854      	ldr	r0, [pc, #336]	; (800b4f0 <_vfiprintf_r+0x220>)
 800b3a0:	f7f4 ff16 	bl	80001d0 <memchr>
 800b3a4:	9a04      	ldr	r2, [sp, #16]
 800b3a6:	b9d8      	cbnz	r0, 800b3e0 <_vfiprintf_r+0x110>
 800b3a8:	06d1      	lsls	r1, r2, #27
 800b3aa:	bf44      	itt	mi
 800b3ac:	2320      	movmi	r3, #32
 800b3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b2:	0713      	lsls	r3, r2, #28
 800b3b4:	bf44      	itt	mi
 800b3b6:	232b      	movmi	r3, #43	; 0x2b
 800b3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c2:	d015      	beq.n	800b3f0 <_vfiprintf_r+0x120>
 800b3c4:	9a07      	ldr	r2, [sp, #28]
 800b3c6:	4654      	mov	r4, sl
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	f04f 0c0a 	mov.w	ip, #10
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3d4:	3b30      	subs	r3, #48	; 0x30
 800b3d6:	2b09      	cmp	r3, #9
 800b3d8:	d94d      	bls.n	800b476 <_vfiprintf_r+0x1a6>
 800b3da:	b1b0      	cbz	r0, 800b40a <_vfiprintf_r+0x13a>
 800b3dc:	9207      	str	r2, [sp, #28]
 800b3de:	e014      	b.n	800b40a <_vfiprintf_r+0x13a>
 800b3e0:	eba0 0308 	sub.w	r3, r0, r8
 800b3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	46a2      	mov	sl, r4
 800b3ee:	e7d2      	b.n	800b396 <_vfiprintf_r+0xc6>
 800b3f0:	9b03      	ldr	r3, [sp, #12]
 800b3f2:	1d19      	adds	r1, r3, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	9103      	str	r1, [sp, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfbb      	ittet	lt
 800b3fc:	425b      	neglt	r3, r3
 800b3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b402:	9307      	strge	r3, [sp, #28]
 800b404:	9307      	strlt	r3, [sp, #28]
 800b406:	bfb8      	it	lt
 800b408:	9204      	strlt	r2, [sp, #16]
 800b40a:	7823      	ldrb	r3, [r4, #0]
 800b40c:	2b2e      	cmp	r3, #46	; 0x2e
 800b40e:	d10c      	bne.n	800b42a <_vfiprintf_r+0x15a>
 800b410:	7863      	ldrb	r3, [r4, #1]
 800b412:	2b2a      	cmp	r3, #42	; 0x2a
 800b414:	d134      	bne.n	800b480 <_vfiprintf_r+0x1b0>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	1d1a      	adds	r2, r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	9203      	str	r2, [sp, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfb8      	it	lt
 800b422:	f04f 33ff 	movlt.w	r3, #4294967295
 800b426:	3402      	adds	r4, #2
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b500 <_vfiprintf_r+0x230>
 800b42e:	7821      	ldrb	r1, [r4, #0]
 800b430:	2203      	movs	r2, #3
 800b432:	4650      	mov	r0, sl
 800b434:	f7f4 fecc 	bl	80001d0 <memchr>
 800b438:	b138      	cbz	r0, 800b44a <_vfiprintf_r+0x17a>
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	eba0 000a 	sub.w	r0, r0, sl
 800b440:	2240      	movs	r2, #64	; 0x40
 800b442:	4082      	lsls	r2, r0
 800b444:	4313      	orrs	r3, r2
 800b446:	3401      	adds	r4, #1
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44e:	4829      	ldr	r0, [pc, #164]	; (800b4f4 <_vfiprintf_r+0x224>)
 800b450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b454:	2206      	movs	r2, #6
 800b456:	f7f4 febb 	bl	80001d0 <memchr>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d03f      	beq.n	800b4de <_vfiprintf_r+0x20e>
 800b45e:	4b26      	ldr	r3, [pc, #152]	; (800b4f8 <_vfiprintf_r+0x228>)
 800b460:	bb1b      	cbnz	r3, 800b4aa <_vfiprintf_r+0x1da>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	3307      	adds	r3, #7
 800b466:	f023 0307 	bic.w	r3, r3, #7
 800b46a:	3308      	adds	r3, #8
 800b46c:	9303      	str	r3, [sp, #12]
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	443b      	add	r3, r7
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	e768      	b.n	800b348 <_vfiprintf_r+0x78>
 800b476:	fb0c 3202 	mla	r2, ip, r2, r3
 800b47a:	460c      	mov	r4, r1
 800b47c:	2001      	movs	r0, #1
 800b47e:	e7a6      	b.n	800b3ce <_vfiprintf_r+0xfe>
 800b480:	2300      	movs	r3, #0
 800b482:	3401      	adds	r4, #1
 800b484:	9305      	str	r3, [sp, #20]
 800b486:	4619      	mov	r1, r3
 800b488:	f04f 0c0a 	mov.w	ip, #10
 800b48c:	4620      	mov	r0, r4
 800b48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b492:	3a30      	subs	r2, #48	; 0x30
 800b494:	2a09      	cmp	r2, #9
 800b496:	d903      	bls.n	800b4a0 <_vfiprintf_r+0x1d0>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0c6      	beq.n	800b42a <_vfiprintf_r+0x15a>
 800b49c:	9105      	str	r1, [sp, #20]
 800b49e:	e7c4      	b.n	800b42a <_vfiprintf_r+0x15a>
 800b4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e7f0      	b.n	800b48c <_vfiprintf_r+0x1bc>
 800b4aa:	ab03      	add	r3, sp, #12
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <_vfiprintf_r+0x22c>)
 800b4b2:	a904      	add	r1, sp, #16
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7fd fb9f 	bl	8008bf8 <_printf_float>
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	1c78      	adds	r0, r7, #1
 800b4be:	d1d6      	bne.n	800b46e <_vfiprintf_r+0x19e>
 800b4c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4c2:	07d9      	lsls	r1, r3, #31
 800b4c4:	d405      	bmi.n	800b4d2 <_vfiprintf_r+0x202>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	059a      	lsls	r2, r3, #22
 800b4ca:	d402      	bmi.n	800b4d2 <_vfiprintf_r+0x202>
 800b4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ce:	f7fe f8fd 	bl	80096cc <__retarget_lock_release_recursive>
 800b4d2:	89ab      	ldrh	r3, [r5, #12]
 800b4d4:	065b      	lsls	r3, r3, #25
 800b4d6:	f53f af1d 	bmi.w	800b314 <_vfiprintf_r+0x44>
 800b4da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4dc:	e71c      	b.n	800b318 <_vfiprintf_r+0x48>
 800b4de:	ab03      	add	r3, sp, #12
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <_vfiprintf_r+0x22c>)
 800b4e6:	a904      	add	r1, sp, #16
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7fd fe29 	bl	8009140 <_printf_i>
 800b4ee:	e7e4      	b.n	800b4ba <_vfiprintf_r+0x1ea>
 800b4f0:	0800ba6c 	.word	0x0800ba6c
 800b4f4:	0800ba76 	.word	0x0800ba76
 800b4f8:	08008bf9 	.word	0x08008bf9
 800b4fc:	0800b2ad 	.word	0x0800b2ad
 800b500:	0800ba72 	.word	0x0800ba72

0800b504 <__swbuf_r>:
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b506:	460e      	mov	r6, r1
 800b508:	4614      	mov	r4, r2
 800b50a:	4605      	mov	r5, r0
 800b50c:	b118      	cbz	r0, 800b516 <__swbuf_r+0x12>
 800b50e:	6a03      	ldr	r3, [r0, #32]
 800b510:	b90b      	cbnz	r3, 800b516 <__swbuf_r+0x12>
 800b512:	f7fd ffc3 	bl	800949c <__sinit>
 800b516:	69a3      	ldr	r3, [r4, #24]
 800b518:	60a3      	str	r3, [r4, #8]
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	071a      	lsls	r2, r3, #28
 800b51e:	d525      	bpl.n	800b56c <__swbuf_r+0x68>
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	b31b      	cbz	r3, 800b56c <__swbuf_r+0x68>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	6922      	ldr	r2, [r4, #16]
 800b528:	1a98      	subs	r0, r3, r2
 800b52a:	6963      	ldr	r3, [r4, #20]
 800b52c:	b2f6      	uxtb	r6, r6
 800b52e:	4283      	cmp	r3, r0
 800b530:	4637      	mov	r7, r6
 800b532:	dc04      	bgt.n	800b53e <__swbuf_r+0x3a>
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	f7ff fd9e 	bl	800b078 <_fflush_r>
 800b53c:	b9e0      	cbnz	r0, 800b578 <__swbuf_r+0x74>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	3b01      	subs	r3, #1
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	6022      	str	r2, [r4, #0]
 800b54a:	701e      	strb	r6, [r3, #0]
 800b54c:	6962      	ldr	r2, [r4, #20]
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	429a      	cmp	r2, r3
 800b552:	d004      	beq.n	800b55e <__swbuf_r+0x5a>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	07db      	lsls	r3, r3, #31
 800b558:	d506      	bpl.n	800b568 <__swbuf_r+0x64>
 800b55a:	2e0a      	cmp	r6, #10
 800b55c:	d104      	bne.n	800b568 <__swbuf_r+0x64>
 800b55e:	4621      	mov	r1, r4
 800b560:	4628      	mov	r0, r5
 800b562:	f7ff fd89 	bl	800b078 <_fflush_r>
 800b566:	b938      	cbnz	r0, 800b578 <__swbuf_r+0x74>
 800b568:	4638      	mov	r0, r7
 800b56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b56c:	4621      	mov	r1, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f806 	bl	800b580 <__swsetup_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d0d5      	beq.n	800b524 <__swbuf_r+0x20>
 800b578:	f04f 37ff 	mov.w	r7, #4294967295
 800b57c:	e7f4      	b.n	800b568 <__swbuf_r+0x64>
	...

0800b580 <__swsetup_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <__swsetup_r+0xac>)
 800b584:	4605      	mov	r5, r0
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	460c      	mov	r4, r1
 800b58a:	b118      	cbz	r0, 800b594 <__swsetup_r+0x14>
 800b58c:	6a03      	ldr	r3, [r0, #32]
 800b58e:	b90b      	cbnz	r3, 800b594 <__swsetup_r+0x14>
 800b590:	f7fd ff84 	bl	800949c <__sinit>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b59a:	0718      	lsls	r0, r3, #28
 800b59c:	d422      	bmi.n	800b5e4 <__swsetup_r+0x64>
 800b59e:	06d9      	lsls	r1, r3, #27
 800b5a0:	d407      	bmi.n	800b5b2 <__swsetup_r+0x32>
 800b5a2:	2309      	movs	r3, #9
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5aa:	81a3      	strh	r3, [r4, #12]
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e034      	b.n	800b61c <__swsetup_r+0x9c>
 800b5b2:	0758      	lsls	r0, r3, #29
 800b5b4:	d512      	bpl.n	800b5dc <__swsetup_r+0x5c>
 800b5b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b8:	b141      	cbz	r1, 800b5cc <__swsetup_r+0x4c>
 800b5ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	d002      	beq.n	800b5c8 <__swsetup_r+0x48>
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f7fe fefe 	bl	800a3c4 <_free_r>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	6363      	str	r3, [r4, #52]	; 0x34
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	6063      	str	r3, [r4, #4]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	6023      	str	r3, [r4, #0]
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f043 0308 	orr.w	r3, r3, #8
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	b94b      	cbnz	r3, 800b5fc <__swsetup_r+0x7c>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f2:	d003      	beq.n	800b5fc <__swsetup_r+0x7c>
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f000 f884 	bl	800b704 <__smakebuf_r>
 800b5fc:	89a0      	ldrh	r0, [r4, #12]
 800b5fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b602:	f010 0301 	ands.w	r3, r0, #1
 800b606:	d00a      	beq.n	800b61e <__swsetup_r+0x9e>
 800b608:	2300      	movs	r3, #0
 800b60a:	60a3      	str	r3, [r4, #8]
 800b60c:	6963      	ldr	r3, [r4, #20]
 800b60e:	425b      	negs	r3, r3
 800b610:	61a3      	str	r3, [r4, #24]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	b943      	cbnz	r3, 800b628 <__swsetup_r+0xa8>
 800b616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b61a:	d1c4      	bne.n	800b5a6 <__swsetup_r+0x26>
 800b61c:	bd38      	pop	{r3, r4, r5, pc}
 800b61e:	0781      	lsls	r1, r0, #30
 800b620:	bf58      	it	pl
 800b622:	6963      	ldrpl	r3, [r4, #20]
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	e7f4      	b.n	800b612 <__swsetup_r+0x92>
 800b628:	2000      	movs	r0, #0
 800b62a:	e7f7      	b.n	800b61c <__swsetup_r+0x9c>
 800b62c:	20000154 	.word	0x20000154

0800b630 <_raise_r>:
 800b630:	291f      	cmp	r1, #31
 800b632:	b538      	push	{r3, r4, r5, lr}
 800b634:	4604      	mov	r4, r0
 800b636:	460d      	mov	r5, r1
 800b638:	d904      	bls.n	800b644 <_raise_r+0x14>
 800b63a:	2316      	movs	r3, #22
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	f04f 30ff 	mov.w	r0, #4294967295
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b646:	b112      	cbz	r2, 800b64e <_raise_r+0x1e>
 800b648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b64c:	b94b      	cbnz	r3, 800b662 <_raise_r+0x32>
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 f830 	bl	800b6b4 <_getpid_r>
 800b654:	462a      	mov	r2, r5
 800b656:	4601      	mov	r1, r0
 800b658:	4620      	mov	r0, r4
 800b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65e:	f000 b817 	b.w	800b690 <_kill_r>
 800b662:	2b01      	cmp	r3, #1
 800b664:	d00a      	beq.n	800b67c <_raise_r+0x4c>
 800b666:	1c59      	adds	r1, r3, #1
 800b668:	d103      	bne.n	800b672 <_raise_r+0x42>
 800b66a:	2316      	movs	r3, #22
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	2001      	movs	r0, #1
 800b670:	e7e7      	b.n	800b642 <_raise_r+0x12>
 800b672:	2400      	movs	r4, #0
 800b674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b678:	4628      	mov	r0, r5
 800b67a:	4798      	blx	r3
 800b67c:	2000      	movs	r0, #0
 800b67e:	e7e0      	b.n	800b642 <_raise_r+0x12>

0800b680 <raise>:
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <raise+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f7ff bfd3 	b.w	800b630 <_raise_r>
 800b68a:	bf00      	nop
 800b68c:	20000154 	.word	0x20000154

0800b690 <_kill_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	; (800b6b0 <_kill_r+0x20>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	f7f5 fdd3 	bl	8001248 <_kill>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d102      	bne.n	800b6ac <_kill_r+0x1c>
 800b6a6:	682b      	ldr	r3, [r5, #0]
 800b6a8:	b103      	cbz	r3, 800b6ac <_kill_r+0x1c>
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
 800b6ae:	bf00      	nop
 800b6b0:	2000205c 	.word	0x2000205c

0800b6b4 <_getpid_r>:
 800b6b4:	f7f5 bdc0 	b.w	8001238 <_getpid>

0800b6b8 <__swhatbuf_r>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	b096      	sub	sp, #88	; 0x58
 800b6c4:	4615      	mov	r5, r2
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	da0d      	bge.n	800b6e6 <__swhatbuf_r+0x2e>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6d0:	f04f 0100 	mov.w	r1, #0
 800b6d4:	bf0c      	ite	eq
 800b6d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6da:	2340      	movne	r3, #64	; 0x40
 800b6dc:	2000      	movs	r0, #0
 800b6de:	6031      	str	r1, [r6, #0]
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	b016      	add	sp, #88	; 0x58
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	466a      	mov	r2, sp
 800b6e8:	f000 f848 	bl	800b77c <_fstat_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	dbec      	blt.n	800b6ca <__swhatbuf_r+0x12>
 800b6f0:	9901      	ldr	r1, [sp, #4]
 800b6f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6fa:	4259      	negs	r1, r3
 800b6fc:	4159      	adcs	r1, r3
 800b6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b702:	e7eb      	b.n	800b6dc <__swhatbuf_r+0x24>

0800b704 <__smakebuf_r>:
 800b704:	898b      	ldrh	r3, [r1, #12]
 800b706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b708:	079d      	lsls	r5, r3, #30
 800b70a:	4606      	mov	r6, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	d507      	bpl.n	800b720 <__smakebuf_r+0x1c>
 800b710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	2301      	movs	r3, #1
 800b71a:	6163      	str	r3, [r4, #20]
 800b71c:	b002      	add	sp, #8
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	ab01      	add	r3, sp, #4
 800b722:	466a      	mov	r2, sp
 800b724:	f7ff ffc8 	bl	800b6b8 <__swhatbuf_r>
 800b728:	9900      	ldr	r1, [sp, #0]
 800b72a:	4605      	mov	r5, r0
 800b72c:	4630      	mov	r0, r6
 800b72e:	f7fe febd 	bl	800a4ac <_malloc_r>
 800b732:	b948      	cbnz	r0, 800b748 <__smakebuf_r+0x44>
 800b734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b738:	059a      	lsls	r2, r3, #22
 800b73a:	d4ef      	bmi.n	800b71c <__smakebuf_r+0x18>
 800b73c:	f023 0303 	bic.w	r3, r3, #3
 800b740:	f043 0302 	orr.w	r3, r3, #2
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	e7e3      	b.n	800b710 <__smakebuf_r+0xc>
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	6020      	str	r0, [r4, #0]
 800b74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	9b00      	ldr	r3, [sp, #0]
 800b754:	6163      	str	r3, [r4, #20]
 800b756:	9b01      	ldr	r3, [sp, #4]
 800b758:	6120      	str	r0, [r4, #16]
 800b75a:	b15b      	cbz	r3, 800b774 <__smakebuf_r+0x70>
 800b75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b760:	4630      	mov	r0, r6
 800b762:	f000 f81d 	bl	800b7a0 <_isatty_r>
 800b766:	b128      	cbz	r0, 800b774 <__smakebuf_r+0x70>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f023 0303 	bic.w	r3, r3, #3
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	431d      	orrs	r5, r3
 800b778:	81a5      	strh	r5, [r4, #12]
 800b77a:	e7cf      	b.n	800b71c <__smakebuf_r+0x18>

0800b77c <_fstat_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d07      	ldr	r5, [pc, #28]	; (800b79c <_fstat_r+0x20>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	4611      	mov	r1, r2
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	f7f5 fdbc 	bl	8001306 <_fstat>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	d102      	bne.n	800b798 <_fstat_r+0x1c>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	b103      	cbz	r3, 800b798 <_fstat_r+0x1c>
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	bd38      	pop	{r3, r4, r5, pc}
 800b79a:	bf00      	nop
 800b79c:	2000205c 	.word	0x2000205c

0800b7a0 <_isatty_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d06      	ldr	r5, [pc, #24]	; (800b7bc <_isatty_r+0x1c>)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	602b      	str	r3, [r5, #0]
 800b7ac:	f7f5 fdbb 	bl	8001326 <_isatty>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_isatty_r+0x1a>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_isatty_r+0x1a>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	2000205c 	.word	0x2000205c

0800b7c0 <_init>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr

0800b7cc <_fini>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	bf00      	nop
 800b7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7d2:	bc08      	pop	{r3}
 800b7d4:	469e      	mov	lr, r3
 800b7d6:	4770      	bx	lr

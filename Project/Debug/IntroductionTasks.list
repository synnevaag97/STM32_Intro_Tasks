
IntroductionTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800b9f0  0800b9f0  0001b9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde4  0800bde4  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdec  0800bdec  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdec  0800bdec  0001bdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800bdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00001e04  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020c8  200020c8  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000139bc  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035d7  00000000  00000000  00033cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001100  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cd8  00000000  00000000  000383d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000249c3  00000000  00000000  000390a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001764c  00000000  00000000  0005da6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca7cc  00000000  00000000  000750b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000570c  00000000  00000000  0013f884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00144f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9d8 	.word	0x0800b9d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800b9d8 	.word	0x0800b9d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fd86 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f812 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f8de 	bl	8001070 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f878 	bl	8000fa8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000eb8:	f007 f9ee 	bl	8008298 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000ebc:	f000 f8a2 	bl	8001004 <MX_SPI1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //task4_init(&hspi1);
	  //task4(&hspi1);
	  task5(&hspi1);
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <main+0x2c>)
 8000ec2:	f000 fb3d 	bl	8001540 <task5>

	  HAL_Delay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eca:	f000 fde7 	bl	8001a9c <HAL_Delay>
  {
 8000ece:	e7f7      	b.n	8000ec0 <main+0x1c>
 8000ed0:	20000334 	.word	0x20000334

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	; 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	2230      	movs	r2, #48	; 0x30
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 fc7d 	bl	80097e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f48:	23a8      	movs	r3, #168	; 0xa8
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f50:	2307      	movs	r3, #7
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fc39 	bl	80037d0 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f64:	f000 f922 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2105      	movs	r1, #5
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fe9a 	bl	8003cc0 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f92:	f000 f90b 	bl	80011ac <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	; 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_I2C1_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <MX_I2C1_Init+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe6:	f001 f85f 	bl	80020a8 <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f8dc 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200002e0 	.word	0x200002e0
 8000ffc:	40005400 	.word	0x40005400
 8001000:	000186a0 	.word	0x000186a0

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2202      	movs	r2, #2
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2201      	movs	r2, #1
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2228      	movs	r2, #40	; 0x28
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f003 f83f 	bl	80040d8 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f8a4 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000334 	.word	0x20000334
 800106c:	40013000 	.word	0x40013000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <MX_GPIO_Init+0x12c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <MX_GPIO_Init+0x12c>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <MX_GPIO_Init+0x12c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_GPIO_Init+0x12c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a3c      	ldr	r2, [pc, #240]	; (800119c <MX_GPIO_Init+0x12c>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <MX_GPIO_Init+0x12c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_GPIO_Init+0x12c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a35      	ldr	r2, [pc, #212]	; (800119c <MX_GPIO_Init+0x12c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <MX_GPIO_Init+0x12c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_GPIO_Init+0x12c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <MX_GPIO_Init+0x12c>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_GPIO_Init+0x12c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_GPIO_Init+0x12c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <MX_GPIO_Init+0x12c>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_GPIO_Init+0x12c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <MX_GPIO_Init+0x130>)
 8001118:	f000 ff92 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <MX_GPIO_Init+0x134>)
 8001124:	f000 ff8c 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001128:	2308      	movs	r3, #8
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <MX_GPIO_Init+0x130>)
 8001140:	f000 fde2 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_GPIO_Init+0x138>)
 8001158:	f000 fdd6 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800115c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <MX_GPIO_Init+0x134>)
 8001176:	f000 fdc7 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_GPIO_Init+0x130>)
 8001190:	f000 fdba 	bl	8001d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40020000 	.word	0x40020000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_I2C_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12b      	bne.n	8001282 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_I2C_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001256:	2304      	movs	r3, #4
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <HAL_I2C_MspInit+0x8c>)
 8001262:	f000 fd51 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_I2C_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40005400 	.word	0x40005400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020400 	.word	0x40020400

08001298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_SPI_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12b      	bne.n	8001312 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012f2:	23e0      	movs	r3, #224	; 0xe0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001302:	2305      	movs	r3, #5
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 800130e:	f000 fcfb 	bl	8001d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40013000 	.word	0x40013000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 fb72 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <OTG_FS_IRQHandler+0x10>)
 8001382:	f001 f919 	bl	80025b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20001878 	.word	0x20001878

08001390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return 1;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_kill>:

int _kill(int pid, int sig)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013aa:	f008 fa6d 	bl	8009888 <__errno>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2216      	movs	r2, #22
 80013b2:	601a      	str	r2, [r3, #0]
  return -1;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_exit>:

void _exit (int status)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ffe7 	bl	80013a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d2:	e7fe      	b.n	80013d2 <_exit+0x12>

080013d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e00a      	b.n	80013fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e6:	f3af 8000 	nop.w
 80013ea:	4601      	mov	r1, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	b2ca      	uxtb	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf0      	blt.n	80013e6 <_read+0x12>
  }

  return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e009      	b.n	8001434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf1      	blt.n	8001420 <_write+0x12>
  }
  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_close>:

int _close(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146e:	605a      	str	r2, [r3, #4]
  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_isatty>:

int _isatty(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f008 f9d2 	bl	8009888 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20020000 	.word	0x20020000
 8001510:	00000400 	.word	0x00000400
 8001514:	2000038c 	.word	0x2000038c
 8001518:	200020c8 	.word	0x200020c8

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <task5>:
#include "task5.h"



void task5(SPI_HandleTypeDef *hspi1){
 8001540:	b580      	push	{r7, lr}
 8001542:	b0a6      	sub	sp, #152	; 0x98
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	lis3dsh_config parameters;
	parameters.ctrl_reg4_config = CTRL_REG4_ODR0 | CTRL_REG4_Xen | CTRL_REG4_Yen;
 8001548:	2313      	movs	r3, #19
 800154a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	parameters.ctrl_reg3_config = CTRL_REG3_INT1_EN | CTRL_REG3_DR_EN;
 800154e:	2388      	movs	r3, #136	; 0x88
 8001550:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	lis3dsh_init(hspi1, &parameters);
 8001554:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f9ee 	bl	800193c <lis3dsh_init>

	int ret = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	size_t length = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint8_t buffer_rx[2];
	uint8_t buffer_str[100];



	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 800156c:	4baa      	ldr	r3, [pc, #680]	; (8001818 <task5+0x2d8>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 813f 	beq.w	80017f8 <task5+0x2b8>
	{
		// Clear flag for next interrupt.
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800157a:	4ba7      	ldr	r3, [pc, #668]	; (8001818 <task5+0x2d8>)
 800157c:	2201      	movs	r2, #1
 800157e:	615a      	str	r2, [r3, #20]

		// Get Acc_x
		ret = lis3dsh_read(LIS3DSH_OUT_X_H_ADDR, buffer_rx, 1);
 8001580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001584:	2201      	movs	r2, #1
 8001586:	4619      	mov	r1, r3
 8001588:	2029      	movs	r0, #41	; 0x29
 800158a:	f000 f99f 	bl	80018cc <lis3dsh_read>
 800158e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		uint8_t x_val_h = (buffer_rx[0]);
 8001592:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001596:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		ret = lis3dsh_read(LIS3DSH_OUT_X_L_ADDR, buffer_rx, 1);
 800159a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	2028      	movs	r0, #40	; 0x28
 80015a4:	f000 f992 	bl	80018cc <lis3dsh_read>
 80015a8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		uint8_t x_val_l = (buffer_rx[0]);
 80015ac:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015b0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
		if (ret != HAL_OK ){
 80015b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 811a 	bne.w	80017f2 <task5+0x2b2>
			return;
		}


		// Get Acc_y
		ret = lis3dsh_read(LIS3DSH_OUT_Y_H_ADDR, buffer_rx, 1);
 80015be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c2:	2201      	movs	r2, #1
 80015c4:	4619      	mov	r1, r3
 80015c6:	202b      	movs	r0, #43	; 0x2b
 80015c8:	f000 f980 	bl	80018cc <lis3dsh_read>
 80015cc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		uint8_t y_val_h = (buffer_rx[0]);
 80015d0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015d4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

		ret = lis3dsh_read(LIS3DSH_OUT_Y_L_ADDR, buffer_rx, 1);
 80015d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015dc:	2201      	movs	r2, #1
 80015de:	4619      	mov	r1, r3
 80015e0:	202a      	movs	r0, #42	; 0x2a
 80015e2:	f000 f973 	bl	80018cc <lis3dsh_read>
 80015e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		uint8_t y_val_l = (buffer_rx[0]);
 80015ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015ee:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		if (ret != HAL_OK ){
 80015f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 80fd 	bne.w	80017f6 <task5+0x2b6>
			// Error, do something.
			return;
		}

		// Combine H and L into one uint16_t.
		uint16_t acc_x = (x_val_h << 8) | x_val_l;
 80015fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21b      	sxth	r3, r3
 800160e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		uint16_t acc_y = (y_val_h << 8) | y_val_l;
 8001612:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

		// Compute acceleration in m/s^2 from raw data.
		double acc_x_in_g = 0;
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		if ((acc_x & 0x8000) == 0x8000 ){
 8001634:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001638:	2b00      	cmp	r3, #0
 800163a:	da18      	bge.n	800166e <task5+0x12e>
			// Acceleration is negative
			// First compute the two's complement.
			uint16_t acc_x_twos_complement = (~acc_x) + 1;
 800163c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001640:	425b      	negs	r3, r3
 8001642:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			// Use conversion and set to negative
			acc_x_in_g = -((double)acc_x_twos_complement*0.00006);
 8001646:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff5a 	bl	8000504 <__aeabi_ui2d>
 8001650:	a36b      	add	r3, pc, #428	; (adr r3, 8001800 <task5+0x2c0>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffcf 	bl	80005f8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4611      	mov	r1, r2
 8001660:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800166c:	e00d      	b.n	800168a <task5+0x14a>
		} else{
			// Acceleration is positive
			// Using simple conversion model to compute the acceleration in gravitational forces also noted m/s^2.
			acc_x_in_g = (double)acc_x*0.00006;
 800166e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff46 	bl	8000504 <__aeabi_ui2d>
 8001678:	a361      	add	r3, pc, #388	; (adr r3, 8001800 <task5+0x2c0>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffbb 	bl	80005f8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		}

		double acc_y_in_g = 0;
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		if ((acc_y & 0x8000) == 0x8000 ){
 8001696:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800169a:	2b00      	cmp	r3, #0
 800169c:	da18      	bge.n	80016d0 <task5+0x190>
			// Acceleration is negative
			// First compute the two's complement.
			uint16_t acc_y_twos_complement = (~acc_y) + 1;
 800169e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80016a2:	425b      	negs	r3, r3
 80016a4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			// Use conversion and set to negative
			acc_y_in_g = -((double)acc_y_twos_complement*0.00006);
 80016a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff29 	bl	8000504 <__aeabi_ui2d>
 80016b2:	a353      	add	r3, pc, #332	; (adr r3, 8001800 <task5+0x2c0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff9e 	bl	80005f8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80016c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016ce:	e00d      	b.n	80016ec <task5+0x1ac>
		} else{
			// Acceleration is positive
			// Using simple conversion model to compute the acceleration in gravitational forces also noted m/s^2.
			acc_y_in_g = (double)acc_y*0.00006;
 80016d0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff15 	bl	8000504 <__aeabi_ui2d>
 80016da:	a349      	add	r3, pc, #292	; (adr r3, 8001800 <task5+0x2c0>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}

		// Set Leds according to orientation.
		if ((acc_x_in_g > -0.05) && (acc_x_in_g < 0.05)){
 80016ec:	a346      	add	r3, pc, #280	; (adr r3, 8001808 <task5+0x2c8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80016f6:	f7ff fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d016      	beq.n	800172e <task5+0x1ee>
 8001700:	a343      	add	r3, pc, #268	; (adr r3, 8001810 <task5+0x2d0>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800170a:	f7ff f9e7 	bl	8000adc <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <task5+0x1ee>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	4840      	ldr	r0, [pc, #256]	; (800181c <task5+0x2dc>)
 800171c:	f000 fc90 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	483d      	ldr	r0, [pc, #244]	; (800181c <task5+0x2dc>)
 8001728:	f000 fc8a 	bl	8002040 <HAL_GPIO_WritePin>
 800172c:	e014      	b.n	8001758 <task5+0x218>
		} else if ( (x_val_h >> 7) == 0x01) {
 800172e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001732:	09db      	lsrs	r3, r3, #7
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <task5+0x206>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800173a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173e:	4837      	ldr	r0, [pc, #220]	; (800181c <task5+0x2dc>)
 8001740:	f000 fc97 	bl	8002072 <HAL_GPIO_TogglePin>
 8001744:	e008      	b.n	8001758 <task5+0x218>
		} else if ( (x_val_h >> 7) == 0x00){
 8001746:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800174a:	2b00      	cmp	r3, #0
 800174c:	db04      	blt.n	8001758 <task5+0x218>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	4832      	ldr	r0, [pc, #200]	; (800181c <task5+0x2dc>)
 8001754:	f000 fc8d 	bl	8002072 <HAL_GPIO_TogglePin>
		}

		if ((acc_y_in_g > -0.05) && (acc_y_in_g < 0.05)){
 8001758:	a32b      	add	r3, pc, #172	; (adr r3, 8001808 <task5+0x2c8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001762:	f7ff f9d9 	bl	8000b18 <__aeabi_dcmpgt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d016      	beq.n	800179a <task5+0x25a>
 800176c:	a328      	add	r3, pc, #160	; (adr r3, 8001810 <task5+0x2d0>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001776:	f7ff f9b1 	bl	8000adc <__aeabi_dcmplt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <task5+0x25a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <task5+0x2dc>)
 8001788:	f000 fc5a 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001792:	4822      	ldr	r0, [pc, #136]	; (800181c <task5+0x2dc>)
 8001794:	f000 fc54 	bl	8002040 <HAL_GPIO_WritePin>
 8001798:	e014      	b.n	80017c4 <task5+0x284>
		} else if ( (y_val_h>>7) == 0x01) {
 800179a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <task5+0x272>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80017a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <task5+0x2dc>)
 80017ac:	f000 fc61 	bl	8002072 <HAL_GPIO_TogglePin>
 80017b0:	e008      	b.n	80017c4 <task5+0x284>
		} else if ((y_val_h >> 7) == 0x00){
 80017b2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db04      	blt.n	80017c4 <task5+0x284>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4817      	ldr	r0, [pc, #92]	; (800181c <task5+0x2dc>)
 80017c0:	f000 fc57 	bl	8002072 <HAL_GPIO_TogglePin>
		}

		sprintf((char*) &buffer_str, "Data received and leds set. \r\n"); // Store string in buffer
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <task5+0x2e0>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 ffa6 	bl	800971c <siprintf>
		length = strlen((char*) &buffer_str); // Extract size of string. Need \r\n to give proper length of string.
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd4b 	bl	8000270 <strlen>
 80017da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		CDC_Transmit_FS(buffer_str, length); // Transmit temperature data over USB.
 80017de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 fe12 	bl	8008414 <CDC_Transmit_FS>
 80017f0:	e002      	b.n	80017f8 <task5+0x2b8>
			return;
 80017f2:	bf00      	nop
 80017f4:	e000      	b.n	80017f8 <task5+0x2b8>
			return;
 80017f6:	bf00      	nop
	}
}
 80017f8:	3798      	adds	r7, #152	; 0x98
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	4d551d69 	.word	0x4d551d69
 8001804:	3f0f7510 	.word	0x3f0f7510
 8001808:	9999999a 	.word	0x9999999a
 800180c:	bfa99999 	.word	0xbfa99999
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fa99999 	.word	0x3fa99999
 8001818:	40013c00 	.word	0x40013c00
 800181c:	40020c00 	.word	0x40020c00
 8001820:	0800b9f0 	.word	0x0800b9f0

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001828:	f7ff fe78 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001852:	f008 f81f 	bl	8009894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fb25 	bl	8000ea4 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001868:	0800bdf4 	.word	0x0800bdf4
  ldr r2, =_sbss
 800186c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001870:	200020c8 	.word	0x200020c8

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <lis3dsh_write>:
#include "lis3dsh_task5.h"

static SPI_HandleTypeDef *handle_spi1;

int lis3dsh_write(uint8_t reg_address, uint8_t data){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer_tx[2];
	buffer_tx[0] = (WRITE_CMD | reg_address);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	723b      	strb	r3, [r7, #8]
	buffer_tx[1] = data;
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	727b      	strb	r3, [r7, #9]


	SET_CS_PIN();
 8001890:	2200      	movs	r2, #0
 8001892:	2108      	movs	r1, #8
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <lis3dsh_write+0x4c>)
 8001896:	f000 fbd3 	bl	8002040 <HAL_GPIO_WritePin>
	int ret = HAL_SPI_Transmit(handle_spi1, buffer_tx, 2, HAL_MAX_DELAY);
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <lis3dsh_write+0x50>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	2202      	movs	r2, #2
 80018a8:	f002 fc9f 	bl	80041ea <HAL_SPI_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
	CLEAR_CS_PIN();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2108      	movs	r1, #8
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <lis3dsh_write+0x4c>)
 80018b6:	f000 fbc3 	bl	8002040 <HAL_GPIO_WritePin>

	return ret;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	20000390 	.word	0x20000390

080018cc <lis3dsh_read>:
int lis3dsh_read(uint8_t reg_address, uint8_t *buffer_rx, size_t length){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_tx[1];
	buffer_tx[0] = (READ_CMD | reg_address);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	743b      	strb	r3, [r7, #16]

	SET_CS_PIN();
 80018e4:	2200      	movs	r2, #0
 80018e6:	2108      	movs	r1, #8
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <lis3dsh_read+0x68>)
 80018ea:	f000 fba9 	bl	8002040 <HAL_GPIO_WritePin>
	int ret = HAL_SPI_Transmit(handle_spi1, buffer_tx, 1, HAL_MAX_DELAY);
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <lis3dsh_read+0x6c>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f107 0110 	add.w	r1, r7, #16
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	2201      	movs	r2, #1
 80018fc:	f002 fc75 	bl	80041ea <HAL_SPI_Transmit>
 8001900:	4603      	mov	r3, r0
 8001902:	617b      	str	r3, [r7, #20]
	ret += HAL_SPI_Receive(handle_spi1, buffer_rx, length, HAL_MAX_DELAY);
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <lis3dsh_read+0x6c>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	b29a      	uxth	r2, r3
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	f002 fdad 	bl	8004470 <HAL_SPI_Receive>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
	CLEAR_CS_PIN();
 8001920:	2201      	movs	r2, #1
 8001922:	2108      	movs	r1, #8
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <lis3dsh_read+0x68>)
 8001926:	f000 fb8b 	bl	8002040 <HAL_GPIO_WritePin>

	return ret;
 800192a:	697b      	ldr	r3, [r7, #20]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	20000390 	.word	0x20000390

0800193c <lis3dsh_init>:

int lis3dsh_init(SPI_HandleTypeDef *hspi1, lis3dsh_config *parameters){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	handle_spi1 = hspi1;
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <lis3dsh_init+0x78>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6013      	str	r3, [r2, #0]
	int ret = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

	// Set CRTL_REG4
	ret += lis3dsh_write(LIS3DSH_CTRL_REG4_ADDR, parameters->ctrl_reg4_config);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	2020      	movs	r0, #32
 8001958:	f7ff ff8e 	bl	8001878 <lis3dsh_write>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

	// Set CTRL_REG3
	ret += lis3dsh_write(LIS3DSH_CTRL_REG3_ADDR, parameters->ctrl_reg3_config);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	4619      	mov	r1, r3
 800196a:	2023      	movs	r0, #35	; 0x23
 800196c:	f7ff ff84 	bl	8001878 <lis3dsh_write>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

	// Read and check ID
	uint8_t buffer_rx[1];
	ret += lis3dsh_read(LIS3DSH_WHO_AM_I_ADDR,buffer_rx,1);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	200f      	movs	r0, #15
 8001982:	f7ff ffa3 	bl	80018cc <lis3dsh_read>
 8001986:	4602      	mov	r2, r0
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
	uint8_t id = buffer_rx[0]; // ID Should be checked.
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	72fb      	strb	r3, [r7, #11]

	if (id != 0b00111111 ){
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	2b3f      	cmp	r3, #63	; 0x3f
 8001996:	d002      	beq.n	800199e <lis3dsh_init+0x62>
		// ID dosen't match.
		return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	e006      	b.n	80019ac <lis3dsh_init+0x70>
	}

	if (ret != HAL_OK){
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <lis3dsh_init+0x6e>
		// Initialization failed.
		return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	e000      	b.n	80019ac <lis3dsh_init+0x70>
	}
	return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000390 	.word	0x20000390

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f94f 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fbe4 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f967 	bl	8001cee <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f92f 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000394 	.word	0x20000394

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000394 	.word	0x20000394

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e16b      	b.n	8001ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 815a 	bne.w	8001ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80b4 	beq.w	8001ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a5f      	ldr	r2, [pc, #380]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x314>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02b      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x318>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d025      	beq.n	8001f2a <HAL_GPIO_Init+0x222>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x31c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <HAL_GPIO_Init+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x320>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4e      	ldr	r2, [pc, #312]	; (800202c <HAL_GPIO_Init+0x324>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x216>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_GPIO_Init+0x328>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x212>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x32c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x20e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_GPIO_Init+0x330>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x20a>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00e      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f12:	2308      	movs	r3, #8
 8001f14:	e00c      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f16:	2306      	movs	r3, #6
 8001f18:	e00a      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	e008      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f002 0203 	and.w	r2, r2, #3
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f40:	4935      	ldr	r1, [pc, #212]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_GPIO_Init+0x334>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f67f ae90 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40021400 	.word	0x40021400
 8002034:	40021800 	.word	0x40021800
 8002038:	40021c00 	.word	0x40021c00
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43d9      	mvns	r1, r3
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	400b      	ands	r3, r1
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f89a 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 ffd0 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	; (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	; (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	; (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e101      	b.n	8002546 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f006 f9a1 	bl	80086a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002370:	d102      	bne.n	8002378 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fd98 	bl	8004eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7c1a      	ldrb	r2, [r3, #16]
 800238a:	f88d 2000 	strb.w	r2, [sp]
 800238e:	3304      	adds	r3, #4
 8002390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002392:	f002 fc77 	bl	8004c84 <USB_CoreInit>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0ce      	b.n	8002546 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fd90 	bl	8004ed4 <USB_SetCurrentMode>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0bf      	b.n	8002546 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e04a      	b.n	8002462 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3315      	adds	r3, #21
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3314      	adds	r3, #20
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	b298      	uxth	r0, r3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	332e      	adds	r3, #46	; 0x2e
 8002408:	4602      	mov	r2, r0
 800240a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3318      	adds	r3, #24
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	331c      	adds	r3, #28
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3320      	adds	r3, #32
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3324      	adds	r3, #36	; 0x24
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3af      	bcc.n	80023cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e044      	b.n	80024fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	3301      	adds	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	429a      	cmp	r2, r3
 8002504:	d3b5      	bcc.n	8002472 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7c1a      	ldrb	r2, [r3, #16]
 800250e:	f88d 2000 	strb.w	r2, [sp]
 8002512:	3304      	adds	r3, #4
 8002514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002516:	f002 fd29 	bl	8004f6c <USB_DevInit>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e00c      	b.n	8002546 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fd6d 	bl	800601e <USB_DevDisconnect>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_Start+0x1c>
 8002566:	2302      	movs	r3, #2
 8002568:	e022      	b.n	80025b0 <HAL_PCD_Start+0x62>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fc7a 	bl	8004e90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fd1b 	bl	8005fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b08d      	sub	sp, #52	; 0x34
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fdd9 	bl	8006186 <USB_GetMode>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 848c 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fd3d 	bl	8006060 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8482 	beq.w	8002ef2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fd2a 	bl	8006060 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d107      	bne.n	8002626 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f002 0202 	and.w	r2, r2, #2
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fd18 	bl	8006060 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d161      	bne.n	80026fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0210 	bic.w	r2, r2, #16
 8002648:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 020f 	and.w	r2, r3, #15
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	0c5b      	lsrs	r3, r3, #17
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	2b02      	cmp	r3, #2
 8002674:	d124      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d035      	beq.n	80026ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800268c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6a38      	ldr	r0, [r7, #32]
 8002696:	f003 fb4f 	bl	8005d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a6:	441a      	add	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b8:	441a      	add	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	615a      	str	r2, [r3, #20]
 80026be:	e016      	b.n	80026ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	0c5b      	lsrs	r3, r3, #17
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d110      	bne.n	80026ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80026d2:	2208      	movs	r2, #8
 80026d4:	4619      	mov	r1, r3
 80026d6:	6a38      	ldr	r0, [r7, #32]
 80026d8:	f003 fb2e 	bl	8005d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e8:	441a      	add	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0210 	orr.w	r2, r2, #16
 80026fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fcac 	bl	8006060 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002712:	f040 80a7 	bne.w	8002864 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fcb1 	bl	8006086 <USB_ReadDevAllOutEpInterrupt>
 8002724:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002726:	e099      	b.n	800285c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 808e 	beq.w	8002850 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fcd5 	bl	80060ee <USB_ReadDevOutEPInterrupt>
 8002744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fea1 	bl	80034ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	2308      	movs	r3, #8
 8002784:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 ff77 	bl	800367c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2310      	movs	r3, #16
 80027a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d030      	beq.n	8002816 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d109      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	78db      	ldrb	r3, [r3, #3]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d108      	bne.n	8002804 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f006 f856 	bl	80088b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002810:	461a      	mov	r2, r3
 8002812:	2302      	movs	r3, #2
 8002814:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	2320      	movs	r3, #32
 8002830:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	461a      	mov	r2, r3
 800284a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800284e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3301      	adds	r3, #1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	f47f af62 	bne.w	8002728 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fbf9 	bl	8006060 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002878:	f040 80db 	bne.w	8002a32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fc1a 	bl	80060ba <USB_ReadDevAllInEpInterrupt>
 8002886:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800288c:	e0cd      	b.n	8002a2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80c2 	beq.w	8002a1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fc40 	bl	800612a <USB_ReadDevInEPInterrupt>
 80028aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d057      	beq.n	8002966 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69f9      	ldr	r1, [r7, #28]
 80028d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028d6:	4013      	ands	r3, r2
 80028d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e6:	461a      	mov	r2, r3
 80028e8:	2301      	movs	r3, #1
 80028ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	799b      	ldrb	r3, [r3, #6]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d132      	bne.n	800295a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3320      	adds	r3, #32
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4403      	add	r3, r0
 8002914:	331c      	adds	r3, #28
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4419      	add	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4403      	add	r3, r0
 8002928:	3320      	adds	r3, #32
 800292a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d113      	bne.n	800295a <HAL_PCD_IRQHandler+0x3a2>
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3324      	adds	r3, #36	; 0x24
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002952:	461a      	mov	r2, r3
 8002954:	2101      	movs	r1, #1
 8002956:	f003 fc47 	bl	80061e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f005 ff20 	bl	80087a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297c:	461a      	mov	r2, r3
 800297e:	2308      	movs	r3, #8
 8002980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002998:	461a      	mov	r2, r3
 800299a:	2310      	movs	r3, #16
 800299c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b4:	461a      	mov	r2, r3
 80029b6:	2340      	movs	r3, #64	; 0x40
 80029b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d023      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c6:	6a38      	ldr	r0, [r7, #32]
 80029c8:	f002 fc34 	bl	8005234 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	3310      	adds	r3, #16
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	3304      	adds	r3, #4
 80029de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	78db      	ldrb	r3, [r3, #3]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d108      	bne.n	80029fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f005 ff6d 	bl	80088d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	2302      	movs	r3, #2
 8002a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fcbb 	bl	8003394 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	3301      	adds	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f af2e 	bne.w	800288e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fb12 	bl	8006060 <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a46:	d122      	bne.n	8002a8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fea1 	bl	80037b8 <HAL_PCDEx_LPM_Callback>
 8002a76:	e002      	b.n	8002a7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f005 ff0b 	bl	8008894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fae4 	bl	8006060 <USB_ReadInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa2:	d112      	bne.n	8002aca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f005 fec7 	bl	8008848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ac8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fac6 	bl	8006060 <USB_ReadInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	f040 80b7 	bne.w	8002c50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2110      	movs	r1, #16
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 fb99 	bl	8005234 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b06:	e046      	b.n	8002b96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b14:	461a      	mov	r2, r3
 8002b16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	0151      	lsls	r1, r2, #5
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	440a      	add	r2, r1
 8002b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	3301      	adds	r3, #1
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	791b      	ldrb	r3, [r3, #4]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d3b2      	bcc.n	8002b08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7bdb      	ldrb	r3, [r3, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bce:	f043 030b 	orr.w	r3, r3, #11
 8002bd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be4:	f043 030b 	orr.w	r3, r3, #11
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	e015      	b.n	8002c18 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bfe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c12:	f043 030b 	orr.w	r3, r3, #11
 8002c16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f003 fad4 	bl	80061e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fa03 	bl	8006060 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c64:	d123      	bne.n	8002cae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fa99 	bl	80061a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fb56 	bl	8005326 <USB_GetDevSpeed>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	f001 fa07 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 8002c8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c90:	461a      	mov	r2, r3
 8002c92:	4620      	mov	r0, r4
 8002c94:	f002 f85a 	bl	8004d4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f005 fdac 	bl	80087f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 f9d4 	bl	8006060 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f005 fd89 	bl	80087da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f002 0208 	and.w	r2, r2, #8
 8002cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 f9bf 	bl	8006060 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b80      	cmp	r3, #128	; 0x80
 8002cea:	d123      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	e014      	b.n	8002d28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fb08 	bl	8003332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d3e4      	bcc.n	8002cfe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 f991 	bl	8006060 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d48:	d13c      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e02b      	b.n	8002da8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3318      	adds	r3, #24
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d115      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da12      	bge.n	8002da2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3317      	adds	r3, #23
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fac8 	bl	8003332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	3301      	adds	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d3cd      	bcc.n	8002d50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 f949 	bl	8006060 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd8:	d156      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dda:	2301      	movs	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	e045      	b.n	8002e6c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d12e      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da2b      	bge.n	8002e66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d121      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6053      	str	r3, [r2, #4]
            break;
 8002e64:	e008      	b.n	8002e78 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d3b3      	bcc.n	8002de0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f8e7 	bl	8006060 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f005 fd2a 	bl	80088f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f8d1 	bl	8006060 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d115      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f005 fd1a 	bl	8008914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	e000      	b.n	8002ef4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ef2:	bf00      	nop
    }
  }
}
 8002ef4:	3734      	adds	r7, #52	; 0x34
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}

08002efa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_PCD_SetAddress+0x1a>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e012      	b.n	8002f3a <HAL_PCD_SetAddress+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 f830 	bl	8005f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	4608      	mov	r0, r1
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4603      	mov	r3, r0
 8002f52:	70fb      	strb	r3, [r7, #3]
 8002f54:	460b      	mov	r3, r1
 8002f56:	803b      	strh	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0f      	bge.n	8002f88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	3310      	adds	r3, #16
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	705a      	strb	r2, [r3, #1]
 8002f86:	e00f      	b.n	8002fa8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fb4:	883a      	ldrh	r2, [r7, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	78ba      	ldrb	r2, [r7, #2]
 8002fbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fd2:	78bb      	ldrb	r3, [r7, #2]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_EP_Open+0xaa>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00e      	b.n	800300a <HAL_PCD_EP_Open+0xc8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 f9b8 	bl	8005370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003008:	7afb      	ldrb	r3, [r7, #11]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0f      	bge.n	8003046 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3310      	adds	r3, #16
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	705a      	strb	r2, [r3, #1]
 8003044:	e00f      	b.n	8003066 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_Close+0x6e>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_Close+0x8c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f002 f9f6 	bl	8005480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	460b      	mov	r3, r1
 80030b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	799b      	ldrb	r3, [r3, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	799b      	ldrb	r3, [r3, #6]
 800310a:	461a      	mov	r2, r3
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	f002 fa93 	bl	8005638 <USB_EPStartXfer>

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	460b      	mov	r3, r1
 800315a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315c:	7afb      	ldrb	r3, [r7, #11]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	3310      	adds	r3, #16
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2201      	movs	r2, #1
 800318a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b2da      	uxtb	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	f002 fa41 	bl	8005638 <USB_EPStartXfer>

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	7912      	ldrb	r2, [r2, #4]
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e04f      	b.n	800327e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da0f      	bge.n	8003206 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3310      	adds	r3, #16
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	705a      	strb	r2, [r3, #1]
 8003204:	e00d      	b.n	8003222 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_EP_SetStall+0x82>
 800323e:	2302      	movs	r3, #2
 8003240:	e01d      	b.n	800327e <HAL_PCD_EP_SetStall+0xbe>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fdc9 	bl	8005de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7999      	ldrb	r1, [r3, #6]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800326e:	461a      	mov	r2, r3
 8003270:	f002 ffba 	bl	80061e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	7912      	ldrb	r2, [r2, #4]
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e042      	b.n	800332a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0f      	bge.n	80032cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3310      	adds	r3, #16
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00f      	b.n	80032ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_PCD_EP_ClrStall+0x86>
 8003308:	2302      	movs	r3, #2
 800330a:	e00e      	b.n	800332a <HAL_PCD_EP_ClrStall+0xa4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fdd2 	bl	8005ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800333e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da0c      	bge.n	8003360 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3310      	adds	r3, #16
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e00c      	b.n	800337a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 020f 	and.w	r2, r3, #15
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f002 fbf1 	bl	8005b68 <USB_EPStopXfer>
 8003386:	4603      	mov	r3, r0
 8003388:	72fb      	strb	r3, [r7, #11]

  return ret;
 800338a:	7afb      	ldrb	r3, [r7, #11]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3310      	adds	r3, #16
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d901      	bls.n	80033cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e06b      	b.n	80034a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d902      	bls.n	80033e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3303      	adds	r3, #3
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f0:	e02a      	b.n	8003448 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	d902      	bls.n	800340e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3303      	adds	r3, #3
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68d9      	ldr	r1, [r3, #12]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4603      	mov	r3, r0
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f002 fc46 	bl	8005cbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	441a      	add	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	441a      	add	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	429a      	cmp	r2, r3
 800345c:	d809      	bhi.n	8003472 <PCD_WriteEmptyTxFifo+0xde>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003466:	429a      	cmp	r2, r3
 8003468:	d203      	bcs.n	8003472 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1bf      	bne.n	80033f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	429a      	cmp	r2, r3
 800347c:	d811      	bhi.n	80034a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2201      	movs	r2, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	43db      	mvns	r3, r3
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800349e:	4013      	ands	r3, r2
 80034a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	333c      	adds	r3, #60	; 0x3c
 80034c4:	3304      	adds	r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	799b      	ldrb	r3, [r3, #6]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d17b      	bne.n	80035da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4a61      	ldr	r2, [pc, #388]	; (8003674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	f240 80b9 	bls.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b3 	beq.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003514:	6093      	str	r3, [r2, #8]
 8003516:	e0a7      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352e:	461a      	mov	r2, r3
 8003530:	2320      	movs	r3, #32
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e098      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8093 	bne.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4a4b      	ldr	r2, [pc, #300]	; (8003674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d90f      	bls.n	800356a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003566:	6093      	str	r3, [r2, #8]
 8003568:	e07e      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	440b      	add	r3, r1
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d114      	bne.n	80035cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80035b4:	461a      	mov	r2, r3
 80035b6:	2101      	movs	r1, #1
 80035b8:	f002 fe16 	bl	80061e8 <USB_EP0_OutStart>
 80035bc:	e006      	b.n	80035cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f005 f8cc 	bl	8008770 <HAL_PCD_DataOutStageCallback>
 80035d8:	e046      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d124      	bne.n	800362c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	e032      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f005 f8a3 	bl	8008770 <HAL_PCD_DataOutStageCallback>
 800362a:	e01d      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d114      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003654:	461a      	mov	r2, r3
 8003656:	2100      	movs	r1, #0
 8003658:	f002 fdc6 	bl	80061e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f005 f884 	bl	8008770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	4f54300a 	.word	0x4f54300a
 8003678:	4f54310a 	.word	0x4f54310a

0800367c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	333c      	adds	r3, #60	; 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d90e      	bls.n	80036d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f005 f83b 	bl	800874c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <PCD_EP_OutSetupPacket_int+0x88>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d90c      	bls.n	80036f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	799b      	ldrb	r3, [r3, #6]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d108      	bne.n	80036f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036f0:	461a      	mov	r2, r3
 80036f2:	2101      	movs	r1, #1
 80036f4:	f002 fd78 	bl	80061e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	4f54300a 	.word	0x4f54300a

08003708 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
 8003714:	4613      	mov	r3, r2
 8003716:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003726:	883b      	ldrh	r3, [r7, #0]
 8003728:	0419      	lsls	r1, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	430a      	orrs	r2, r1
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
 8003734:	e028      	b.n	8003788 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e00d      	b.n	8003766 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	3340      	adds	r3, #64	; 0x40
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	3b01      	subs	r3, #1
 800376c:	429a      	cmp	r2, r3
 800376e:	d3ec      	bcc.n	800374a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003770:	883b      	ldrh	r3, [r7, #0]
 8003772:	0418      	lsls	r0, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	3b01      	subs	r3, #1
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	4302      	orrs	r2, r0
 8003780:	3340      	adds	r3, #64	; 0x40
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e267      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d075      	beq.n	80038da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ee:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d00c      	beq.n	8003814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003802:	2b08      	cmp	r3, #8
 8003804:	d112      	bne.n	800382c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	4b82      	ldr	r3, [pc, #520]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003812:	d10b      	bne.n	800382c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	4b7e      	ldr	r3, [pc, #504]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05b      	beq.n	80038d8 <HAL_RCC_OscConfig+0x108>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d157      	bne.n	80038d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e242      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003834:	d106      	bne.n	8003844 <HAL_RCC_OscConfig+0x74>
 8003836:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a75      	ldr	r2, [pc, #468]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e01d      	b.n	8003880 <HAL_RCC_OscConfig+0xb0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x98>
 800384e:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6f      	ldr	r2, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6c      	ldr	r2, [pc, #432]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0xb0>
 8003868:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a68      	ldr	r2, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe f8fc 	bl	8001a84 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe f8f8 	bl	8001a84 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e207      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0xc0>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe f8e8 	bl	8001a84 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe f8e4 	bl	8001a84 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1f3      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	4b51      	ldr	r3, [pc, #324]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0xe8>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d063      	beq.n	80039ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e6:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d11c      	bne.n	8003938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fe:	4b44      	ldr	r3, [pc, #272]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_RCC_OscConfig+0x152>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e1c7      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4937      	ldr	r1, [pc, #220]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	e03a      	b.n	80039ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003940:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <HAL_RCC_OscConfig+0x244>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe f89d 	bl	8001a84 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394e:	f7fe f899 	bl	8001a84 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e1a8      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4925      	ldr	r1, [pc, #148]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x244>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe f87c 	bl	8001a84 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe f878 	bl	8001a84 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e187      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d036      	beq.n	8003a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d016      	beq.n	80039f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_RCC_OscConfig+0x248>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fe f85c 	bl	8001a84 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d0:	f7fe f858 	bl	8001a84 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e167      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x240>)
 80039e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x200>
 80039ee:	e01b      	b.n	8003a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_OscConfig+0x248>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe f845 	bl	8001a84 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	e00e      	b.n	8003a1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe f841 	bl	8001a84 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d907      	bls.n	8003a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e150      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	42470000 	.word	0x42470000
 8003a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ea      	bne.n	80039fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8097 	beq.w	8003b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b81      	ldr	r3, [pc, #516]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	4b7d      	ldr	r3, [pc, #500]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
 8003a56:	4b7a      	ldr	r3, [pc, #488]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a66:	4b77      	ldr	r3, [pc, #476]	; (8003c44 <HAL_RCC_OscConfig+0x474>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d118      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a72:	4b74      	ldr	r3, [pc, #464]	; (8003c44 <HAL_RCC_OscConfig+0x474>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a73      	ldr	r2, [pc, #460]	; (8003c44 <HAL_RCC_OscConfig+0x474>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe f801 	bl	8001a84 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fd fffd 	bl	8001a84 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e10c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCC_OscConfig+0x474>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x2ea>
 8003aac:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCC_OscConfig+0x324>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x30c>
 8003ac2:	4b5f      	ldr	r3, [pc, #380]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a5e      	ldr	r2, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	4b5c      	ldr	r3, [pc, #368]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a5b      	ldr	r2, [pc, #364]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0x324>
 8003adc:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd ffc2 	bl	8001a84 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd ffbe 	bl	8001a84 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0cb      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1a:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ee      	beq.n	8003b04 <HAL_RCC_OscConfig+0x334>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b28:	f7fd ffac 	bl	8001a84 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd ffa8 	bl	8001a84 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0b5      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1ee      	bne.n	8003b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b58:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	4a38      	ldr	r2, [pc, #224]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80a1 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b6e:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d05c      	beq.n	8003c34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d141      	bne.n	8003c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_RCC_OscConfig+0x478>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd ff7c 	bl	8001a84 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd ff78 	bl	8001a84 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e087      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	491b      	ldr	r1, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x478>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fd ff51 	bl	8001a84 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd ff4d 	bl	8001a84 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e05c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x416>
 8003c04:	e054      	b.n	8003cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x478>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd ff3a 	bl	8001a84 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd ff36 	bl	8001a84 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e045      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x470>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x444>
 8003c32:	e03d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e038      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40007000 	.word	0x40007000
 8003c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_RCC_OscConfig+0x4ec>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d028      	beq.n	8003cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d121      	bne.n	8003cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d11a      	bne.n	8003cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d111      	bne.n	8003cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	3b01      	subs	r3, #1
 8003c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800

08003cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0cc      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d90c      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0b8      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	494d      	ldr	r1, [pc, #308]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d044      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d119      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e06f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e067      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4934      	ldr	r1, [pc, #208]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fd fe68 	bl	8001a84 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f7fd fe64 	bl	8001a84 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e04f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 020c 	and.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1eb      	bne.n	8003db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d20c      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e032      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4916      	ldr	r1, [pc, #88]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	490e      	ldr	r1, [pc, #56]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e46:	f000 f821 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	490a      	ldr	r1, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	5ccb      	ldrb	r3, [r1, r3]
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fdc8 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40023c00 	.word	0x40023c00
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	0800ba58 	.word	0x0800ba58
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b094      	sub	sp, #80	; 0x50
 8003e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	647b      	str	r3, [r7, #68]	; 0x44
 8003e98:	2300      	movs	r3, #0
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea4:	4b79      	ldr	r3, [pc, #484]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d00d      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x40>
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	f200 80e1 	bhi.w	8004078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ebe:	e0db      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b73      	ldr	r3, [pc, #460]	; (8004090 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ec4:	e0db      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ec6:	4b73      	ldr	r3, [pc, #460]	; (8004094 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eca:	e0d8      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ecc:	4b6f      	ldr	r3, [pc, #444]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d063      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	2200      	movs	r2, #0
 8003eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8003efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	0159      	lsls	r1, r3, #5
 8003f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f10:	0150      	lsls	r0, r2, #5
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4621      	mov	r1, r4
 8003f18:	1a51      	subs	r1, r2, r1
 8003f1a:	6139      	str	r1, [r7, #16]
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f30:	4659      	mov	r1, fp
 8003f32:	018b      	lsls	r3, r1, #6
 8003f34:	4651      	mov	r1, sl
 8003f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	018a      	lsls	r2, r1, #6
 8003f3e:	4651      	mov	r1, sl
 8003f40:	ebb2 0801 	subs.w	r8, r2, r1
 8003f44:	4659      	mov	r1, fp
 8003f46:	eb63 0901 	sbc.w	r9, r3, r1
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	eb18 0303 	adds.w	r3, r8, r3
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	eb49 0303 	adc.w	r3, r9, r3
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f7e:	4629      	mov	r1, r5
 8003f80:	024b      	lsls	r3, r1, #9
 8003f82:	4621      	mov	r1, r4
 8003f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f88:	4621      	mov	r1, r4
 8003f8a:	024a      	lsls	r2, r1, #9
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f92:	2200      	movs	r2, #0
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f9c:	f7fc fe04 	bl	8000ba8 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	e058      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003faa:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	f04f 0000 	mov.w	r0, #0
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	0159      	lsls	r1, r3, #5
 8003fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd6:	0150      	lsls	r0, r2, #5
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8004000:	eb63 050b 	sbc.w	r5, r3, fp
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	00eb      	lsls	r3, r5, #3
 800400e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004012:	00e2      	lsls	r2, r4, #3
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
 8004018:	4643      	mov	r3, r8
 800401a:	18e3      	adds	r3, r4, r3
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	464b      	mov	r3, r9
 8004020:	eb45 0303 	adc.w	r3, r5, r3
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004032:	4629      	mov	r1, r5
 8004034:	028b      	lsls	r3, r1, #10
 8004036:	4621      	mov	r1, r4
 8004038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800403c:	4621      	mov	r1, r4
 800403e:	028a      	lsls	r2, r1, #10
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004046:	2200      	movs	r2, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	61fa      	str	r2, [r7, #28]
 800404c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004050:	f7fc fdaa 	bl	8000ba8 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_GetSysClockFreq+0x200>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	3301      	adds	r3, #1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800406c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004076:	e002      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetSysClockFreq+0x204>)
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800407c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004080:	4618      	mov	r0, r3
 8004082:	3750      	adds	r7, #80	; 0x50
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200

08004098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_RCC_GetHCLKFreq+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000000 	.word	0x20000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040b4:	f7ff fff0 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0a9b      	lsrs	r3, r3, #10
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4903      	ldr	r1, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40023800 	.word	0x40023800
 80040d4:	0800ba68 	.word	0x0800ba68

080040d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07b      	b.n	80041e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d009      	beq.n	8004110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
 8004102:	e005      	b.n	8004110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f8b4 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	ea42 0103 	orr.w	r1, r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0104 	and.w	r1, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0210 	and.w	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_SPI_Transmit+0x22>
 8004208:	2302      	movs	r3, #2
 800420a:	e12d      	b.n	8004468 <HAL_SPI_Transmit+0x27e>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004214:	f7fd fc36 	bl	8001a84 <HAL_GetTick>
 8004218:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d002      	beq.n	8004230 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800422e:	e116      	b.n	800445e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_SPI_Transmit+0x52>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004240:	e10d      	b.n	800445e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d10f      	bne.n	80042aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004298:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d007      	beq.n	80042c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d0:	d14f      	bne.n	8004372 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Transmit+0xf6>
 80042da:	8afb      	ldrh	r3, [r7, #22]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d142      	bne.n	8004366 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004304:	e02f      	b.n	8004366 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d112      	bne.n	800433a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	1c9a      	adds	r2, r3, #2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	86da      	strh	r2, [r3, #54]	; 0x36
 8004338:	e015      	b.n	8004366 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800433a:	f7fd fba3 	bl	8001a84 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d803      	bhi.n	8004352 <HAL_SPI_Transmit+0x168>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d102      	bne.n	8004358 <HAL_SPI_Transmit+0x16e>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004364:	e07b      	b.n	800445e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ca      	bne.n	8004306 <HAL_SPI_Transmit+0x11c>
 8004370:	e050      	b.n	8004414 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Transmit+0x196>
 800437a:	8afb      	ldrh	r3, [r7, #22]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d144      	bne.n	800440a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043a6:	e030      	b.n	800440a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d113      	bne.n	80043de <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	; 0x36
 80043dc:	e015      	b.n	800440a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043de:	f7fd fb51 	bl	8001a84 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d803      	bhi.n	80043f6 <HAL_SPI_Transmit+0x20c>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_Transmit+0x212>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004408:	e029      	b.n	800445e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1c9      	bne.n	80043a8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	6839      	ldr	r1, [r7, #0]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fbdf 	bl	8004bdc <SPI_EndRxTxTransaction>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e003      	b.n	800445e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004466:	7ffb      	ldrb	r3, [r7, #31]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004490:	2302      	movs	r3, #2
 8004492:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004494:	e0fb      	b.n	800468e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d112      	bne.n	80044c6 <HAL_SPI_Receive+0x56>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10e      	bne.n	80044c6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2204      	movs	r2, #4
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f8ef 	bl	80046a0 <HAL_SPI_TransmitReceive>
 80044c2:	4603      	mov	r3, r0
 80044c4:	e0e8      	b.n	8004698 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_SPI_Receive+0x64>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0e1      	b.n	8004698 <HAL_SPI_Receive+0x228>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044dc:	f7fd fad2 	bl	8001a84 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_SPI_Receive+0x7e>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044f2:	e0cc      	b.n	800468e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453a:	d10f      	bne.n	800455c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d007      	beq.n	800457a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d16a      	bne.n	8004658 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004582:	e032      	b.n	80045ea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f103 020c 	add.w	r2, r3, #12
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045bc:	e015      	b.n	80045ea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045be:	f7fd fa61 	bl	8001a84 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d803      	bhi.n	80045d6 <HAL_SPI_Receive+0x166>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d102      	bne.n	80045dc <HAL_SPI_Receive+0x16c>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80045e8:	e051      	b.n	800468e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1c7      	bne.n	8004584 <HAL_SPI_Receive+0x114>
 80045f4:	e035      	b.n	8004662 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d113      	bne.n	800462c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	b292      	uxth	r2, r2
 8004610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	87da      	strh	r2, [r3, #62]	; 0x3e
 800462a:	e015      	b.n	8004658 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462c:	f7fd fa2a 	bl	8001a84 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d803      	bhi.n	8004644 <HAL_SPI_Receive+0x1d4>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d102      	bne.n	800464a <HAL_SPI_Receive+0x1da>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004656:	e01a      	b.n	800468e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1c9      	bne.n	80045f6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa52 	bl	8004b10 <SPI_EndRxTransaction>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
 8004684:	e003      	b.n	800468e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	; 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046ae:	2301      	movs	r3, #1
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x26>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e198      	b.n	80049f8 <HAL_SPI_TransmitReceive+0x358>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ce:	f7fd f9d9 	bl	8001a84 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d00f      	beq.n	8004710 <HAL_SPI_TransmitReceive+0x70>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f6:	d107      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x68>
 8004700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004704:	2b04      	cmp	r3, #4
 8004706:	d003      	beq.n	8004710 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004708:	2302      	movs	r3, #2
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800470e:	e16d      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x82>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x82>
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004728:	e160      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b04      	cmp	r3, #4
 8004734:	d003      	beq.n	800473e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2205      	movs	r2, #5
 800473a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	887a      	ldrh	r2, [r7, #2]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	887a      	ldrh	r2, [r7, #2]
 8004754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	887a      	ldrh	r2, [r7, #2]
 8004766:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d007      	beq.n	8004792 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d17c      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x10a>
 80047a4:	8b7b      	ldrh	r3, [r7, #26]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d16a      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	881a      	ldrh	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ce:	e057      	b.n	8004880 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d11b      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x176>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d016      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x176>
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d113      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d119      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1b8>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d014      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	b292      	uxth	r2, r2
 800483a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004854:	2301      	movs	r3, #1
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004858:	f7fd f914 	bl	8001a84 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004864:	429a      	cmp	r2, r3
 8004866:	d80b      	bhi.n	8004880 <HAL_SPI_TransmitReceive+0x1e0>
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d007      	beq.n	8004880 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800487e:	e0b5      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1a2      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x130>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d19d      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x130>
 8004894:	e080      	b.n	8004998 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x204>
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d16f      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ca:	e05b      	b.n	8004984 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d11c      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x274>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x274>
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d114      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b01      	cmp	r3, #1
 8004920:	d119      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x2b6>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d014      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004952:	2301      	movs	r3, #1
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004956:	f7fd f895 	bl	8001a84 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004962:	429a      	cmp	r2, r3
 8004964:	d803      	bhi.n	800496e <HAL_SPI_TransmitReceive+0x2ce>
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d102      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x2d4>
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004982:	e033      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d19e      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x22c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d199      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f91d 	bl	8004bdc <SPI_EndRxTxTransaction>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049b4:	e01a      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e003      	b.n	80049ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	; 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a10:	f7fd f838 	bl	8001a84 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a20:	f7fd f830 	bl	8001a84 <HAL_GetTick>
 8004a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	015b      	lsls	r3, r3, #5
 8004a2c:	0d1b      	lsrs	r3, r3, #20
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a36:	e054      	b.n	8004ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d050      	beq.n	8004ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a40:	f7fd f820 	bl	8001a84 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d902      	bls.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d13d      	bne.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d111      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d004      	beq.n	8004a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d107      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9c:	d10f      	bne.n	8004abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e017      	b.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4013      	ands	r3, r2
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d19b      	bne.n	8004a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000000 	.word	0x20000000

08004b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b24:	d111      	bne.n	8004b4a <SPI_EndRxTransaction+0x3a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	d004      	beq.n	8004b3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d107      	bne.n	8004b4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d12a      	bne.n	8004baa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5c:	d012      	beq.n	8004b84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff ff49 	bl	8004a00 <SPI_WaitFlagStateUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02d      	beq.n	8004bd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e026      	b.n	8004bd2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff36 	bl	8004a00 <SPI_WaitFlagStateUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01a      	beq.n	8004bd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e013      	b.n	8004bd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff ff23 	bl	8004a00 <SPI_WaitFlagStateUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e000      	b.n	8004bd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff04 	bl	8004a00 <SPI_WaitFlagStateUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e032      	b.n	8004c74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <SPI_EndRxTxTransaction+0xa0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <SPI_EndRxTxTransaction+0xa4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	0d5b      	lsrs	r3, r3, #21
 8004c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2c:	d112      	bne.n	8004c54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	; 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fee1 	bl	8004a00 <SPI_WaitFlagStateUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d016      	beq.n	8004c72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e00f      	b.n	8004c74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d0f2      	beq.n	8004c54 <SPI_EndRxTxTransaction+0x78>
 8004c6e:	e000      	b.n	8004c72 <SPI_EndRxTxTransaction+0x96>
        break;
 8004c70:	bf00      	nop
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	165e9f81 	.word	0x165e9f81

08004c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c84:	b084      	sub	sp, #16
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	f107 001c 	add.w	r0, r7, #28
 8004c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d123      	bne.n	8004ce6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 fae2 	bl	80062a4 <USB_CoreReset>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e01b      	b.n	8004d1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 fad6 	bl	80062a4 <USB_CoreReset>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d10:	e005      	b.n	8004d1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d1e:	7fbb      	ldrb	r3, [r7, #30]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10b      	bne.n	8004d3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f043 0206 	orr.w	r2, r3, #6
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d48:	b004      	add	sp, #16
 8004d4a:	4770      	bx	lr

08004d4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d165      	bne.n	8004e2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a41      	ldr	r2, [pc, #260]	; (8004e68 <USB_SetTurnaroundTime+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d906      	bls.n	8004d76 <USB_SetTurnaroundTime+0x2a>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <USB_SetTurnaroundTime+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d202      	bcs.n	8004d76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d70:	230f      	movs	r3, #15
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e062      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <USB_SetTurnaroundTime+0x120>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d306      	bcc.n	8004d8c <USB_SetTurnaroundTime+0x40>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <USB_SetTurnaroundTime+0x124>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d202      	bcs.n	8004d8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d86:	230e      	movs	r3, #14
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e057      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a38      	ldr	r2, [pc, #224]	; (8004e70 <USB_SetTurnaroundTime+0x124>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d306      	bcc.n	8004da2 <USB_SetTurnaroundTime+0x56>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <USB_SetTurnaroundTime+0x128>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d202      	bcs.n	8004da2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d9c:	230d      	movs	r3, #13
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e04c      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a33      	ldr	r2, [pc, #204]	; (8004e74 <USB_SetTurnaroundTime+0x128>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d306      	bcc.n	8004db8 <USB_SetTurnaroundTime+0x6c>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a32      	ldr	r2, [pc, #200]	; (8004e78 <USB_SetTurnaroundTime+0x12c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d802      	bhi.n	8004db8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004db2:	230c      	movs	r3, #12
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e041      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <USB_SetTurnaroundTime+0x12c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d906      	bls.n	8004dce <USB_SetTurnaroundTime+0x82>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a2e      	ldr	r2, [pc, #184]	; (8004e7c <USB_SetTurnaroundTime+0x130>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d802      	bhi.n	8004dce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dc8:	230b      	movs	r3, #11
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e036      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	; (8004e7c <USB_SetTurnaroundTime+0x130>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d906      	bls.n	8004de4 <USB_SetTurnaroundTime+0x98>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	; (8004e80 <USB_SetTurnaroundTime+0x134>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d802      	bhi.n	8004de4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dde:	230a      	movs	r3, #10
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e02b      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <USB_SetTurnaroundTime+0x134>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d906      	bls.n	8004dfa <USB_SetTurnaroundTime+0xae>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <USB_SetTurnaroundTime+0x138>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d202      	bcs.n	8004dfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004df4:	2309      	movs	r3, #9
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e020      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <USB_SetTurnaroundTime+0x138>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d306      	bcc.n	8004e10 <USB_SetTurnaroundTime+0xc4>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <USB_SetTurnaroundTime+0x13c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d802      	bhi.n	8004e10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e015      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <USB_SetTurnaroundTime+0x13c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d906      	bls.n	8004e26 <USB_SetTurnaroundTime+0xda>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <USB_SetTurnaroundTime+0x140>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d202      	bcs.n	8004e26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e20:	2307      	movs	r3, #7
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e00a      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e26:	2306      	movs	r3, #6
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e007      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e32:	2309      	movs	r3, #9
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e001      	b.n	8004e3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e38:	2309      	movs	r3, #9
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	00d8acbf 	.word	0x00d8acbf
 8004e6c:	00e4e1c0 	.word	0x00e4e1c0
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	01067380 	.word	0x01067380
 8004e78:	011a499f 	.word	0x011a499f
 8004e7c:	01312cff 	.word	0x01312cff
 8004e80:	014ca43f 	.word	0x014ca43f
 8004e84:	016e3600 	.word	0x016e3600
 8004e88:	01a6ab1f 	.word	0x01a6ab1f
 8004e8c:	01e84800 	.word	0x01e84800

08004e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d115      	bne.n	8004f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f02:	200a      	movs	r0, #10
 8004f04:	f7fc fdca 	bl	8001a9c <HAL_Delay>
      ms += 10U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	330a      	adds	r3, #10
 8004f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f939 	bl	8006186 <USB_GetMode>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d01e      	beq.n	8004f58 <USB_SetCurrentMode+0x84>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2bc7      	cmp	r3, #199	; 0xc7
 8004f1e:	d9f0      	bls.n	8004f02 <USB_SetCurrentMode+0x2e>
 8004f20:	e01a      	b.n	8004f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d115      	bne.n	8004f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f34:	200a      	movs	r0, #10
 8004f36:	f7fc fdb1 	bl	8001a9c <HAL_Delay>
      ms += 10U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	330a      	adds	r3, #10
 8004f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 f920 	bl	8006186 <USB_GetMode>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <USB_SetCurrentMode+0x84>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2bc7      	cmp	r3, #199	; 0xc7
 8004f50:	d9f0      	bls.n	8004f34 <USB_SetCurrentMode+0x60>
 8004f52:	e001      	b.n	8004f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e005      	b.n	8004f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2bc8      	cmp	r3, #200	; 0xc8
 8004f5c:	d101      	bne.n	8004f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e009      	b.n	8004fa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b0e      	cmp	r3, #14
 8004fa4:	d9f2      	bls.n	8004f8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11c      	bne.n	8004fe8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8004fe6:	e00b      	b.n	8005000 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800500c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10d      	bne.n	8005030 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800501c:	2100      	movs	r1, #0
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f968 	bl	80052f4 <USB_SetDevSpeed>
 8005024:	e008      	b.n	8005038 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005026:	2101      	movs	r1, #1
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f963 	bl	80052f4 <USB_SetDevSpeed>
 800502e:	e003      	b.n	8005038 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005030:	2103      	movs	r1, #3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f95e 	bl	80052f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005038:	2110      	movs	r1, #16
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8fa 	bl	8005234 <USB_FlushTxFifo>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f924 	bl	8005298 <USB_FlushRxFifo>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e043      	b.n	800510c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d118      	bne.n	80050ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e013      	b.n	80050e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	461a      	mov	r2, r3
 8005100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005110:	461a      	mov	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4293      	cmp	r3, r2
 8005116:	d3b5      	bcc.n	8005084 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	e043      	b.n	80051a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005134:	d118      	bne.n	8005168 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e013      	b.n	800517a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e008      	b.n	800517a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800519e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3301      	adds	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051aa:	461a      	mov	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d3b5      	bcc.n	800511e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <USB_DevInit+0x2c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005208:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800522c:	b004      	add	sp, #16
 800522e:	4770      	bx	lr
 8005230:	803c3800 	.word	0x803c3800

08005234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e01b      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	daf2      	bge.n	8005242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005278:	d901      	bls.n	800527e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e006      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d0f0      	beq.n	800526c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052b0:	d901      	bls.n	80052b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e018      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	daf2      	bge.n	80052a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2210      	movs	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0306 	and.w	r3, r3, #6
 800533e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
 800534a:	e00a      	b.n	8005362 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d002      	beq.n	8005358 <USB_GetDevSpeed+0x32>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d102      	bne.n	800535e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005358:	2302      	movs	r3, #2
 800535a:	75fb      	strb	r3, [r7, #23]
 800535c:	e001      	b.n	8005362 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800535e:	230f      	movs	r3, #15
 8005360:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005362:	7dfb      	ldrb	r3, [r7, #23]
}
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d13a      	bne.n	8005402 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2101      	movs	r1, #1
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	68f9      	ldr	r1, [r7, #12]
 80053a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d155      	bne.n	8005470 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	059b      	lsls	r3, r3, #22
 80053e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e8:	4313      	orrs	r3, r2
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e036      	b.n	8005470 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005420:	4313      	orrs	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d11a      	bne.n	8005470 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	791b      	ldrb	r3, [r3, #4]
 8005454:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005456:	430b      	orrs	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d161      	bne.n	8005560 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b2:	d11f      	bne.n	80054f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005514:	4013      	ands	r3, r2
 8005516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	2101      	movs	r1, #1
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	b29b      	uxth	r3, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005538:	4013      	ands	r3, r2
 800553a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	440b      	add	r3, r1
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	4619      	mov	r1, r3
 8005558:	4b35      	ldr	r3, [pc, #212]	; (8005630 <USB_DeactivateEndpoint+0x1b0>)
 800555a:	4013      	ands	r3, r2
 800555c:	600b      	str	r3, [r1, #0]
 800555e:	e060      	b.n	8005622 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005576:	d11f      	bne.n	80055b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005596:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	43db      	mvns	r3, r3
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d8:	4013      	ands	r3, r2
 80055da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	43db      	mvns	r3, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fc:	4013      	ands	r3, r2
 80055fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	0159      	lsls	r1, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	440b      	add	r3, r1
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	4619      	mov	r1, r3
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <USB_DeactivateEndpoint+0x1b4>)
 800561e:	4013      	ands	r3, r2
 8005620:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	ec337800 	.word	0xec337800
 8005634:	eff37800 	.word	0xeff37800

08005638 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b01      	cmp	r3, #1
 8005656:	f040 817a 	bne.w	800594e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d132      	bne.n	80056c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005680:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c0:	0cdb      	lsrs	r3, r3, #19
 80056c2:	04db      	lsls	r3, r3, #19
 80056c4:	6113      	str	r3, [r2, #16]
 80056c6:	e092      	b.n	80057ee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e2:	0cdb      	lsrs	r3, r3, #19
 80056e4:	04db      	lsls	r3, r3, #19
 80056e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005702:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005706:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800570a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d903      	bls.n	8005726 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005744:	6113      	str	r3, [r2, #16]
 8005746:	e01b      	b.n	8005780 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6919      	ldr	r1, [r3, #16]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	440b      	add	r3, r1
 8005760:	1e59      	subs	r1, r3, #1
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	fbb1 f3f3 	udiv	r3, r1, r3
 800576a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800576c:	4ba2      	ldr	r3, [pc, #648]	; (80059f8 <USB_EPStartXfer+0x3c0>)
 800576e:	400b      	ands	r3, r1
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	4401      	add	r1, r0
 8005778:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	0148      	lsls	r0, r1, #5
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	4401      	add	r1, r0
 800579e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057a2:	4313      	orrs	r3, r2
 80057a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	791b      	ldrb	r3, [r3, #4]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d11f      	bne.n	80057ee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d14b      	bne.n	800588c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	791b      	ldrb	r3, [r3, #4]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d128      	bne.n	800586a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e00f      	b.n	800586a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e165      	b.n	8005b58 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d015      	beq.n	80058e0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 814d 	beq.w	8005b58 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058da:	4313      	orrs	r3, r2
 80058dc:	634b      	str	r3, [r1, #52]	; 0x34
 80058de:	e13b      	b.n	8005b58 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e00f      	b.n	8005932 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005930:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	68d9      	ldr	r1, [r3, #12]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	b298      	uxth	r0, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4603      	mov	r3, r0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f9b8 	bl	8005cbc <USB_WritePacket>
 800594c:	e104      	b.n	8005b58 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	0cdb      	lsrs	r3, r3, #19
 800596a:	04db      	lsls	r3, r3, #19
 800596c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800598c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005990:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d131      	bne.n	80059fc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c6:	69b9      	ldr	r1, [r7, #24]
 80059c8:	0148      	lsls	r0, r1, #5
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	4401      	add	r1, r0
 80059ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f4:	6113      	str	r3, [r2, #16]
 80059f6:	e061      	b.n	8005abc <USB_EPStartXfer+0x484>
 80059f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d123      	bne.n	8005a4c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	0148      	lsls	r0, r1, #5
 8005a1e:	69f9      	ldr	r1, [r7, #28]
 8005a20:	4401      	add	r1, r0
 8005a22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a48:	6113      	str	r3, [r2, #16]
 8005a4a:	e037      	b.n	8005abc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	8afa      	ldrh	r2, [r7, #22]
 8005a68:	fb03 f202 	mul.w	r2, r3, r2
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	8afb      	ldrh	r3, [r7, #22]
 8005a80:	04d9      	lsls	r1, r3, #19
 8005a82:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <USB_EPStartXfer+0x52c>)
 8005a84:	400b      	ands	r3, r1
 8005a86:	69b9      	ldr	r1, [r7, #24]
 8005a88:	0148      	lsls	r0, r1, #5
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	4401      	add	r1, r0
 8005a8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a92:	4313      	orrs	r3, r2
 8005a94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	0148      	lsls	r0, r1, #5
 8005ab0:	69f9      	ldr	r1, [r7, #28]
 8005ab2:	4401      	add	r1, r0
 8005ab4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d10d      	bne.n	8005ade <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68d9      	ldr	r1, [r3, #12]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	460a      	mov	r2, r1
 8005adc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	791b      	ldrb	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d128      	bne.n	8005b38 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d110      	bne.n	8005b18 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e00f      	b.n	8005b38 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	1ff80000 	.word	0x1ff80000

08005b68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d14a      	bne.n	8005c1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	f040 8086 	bne.w	8005cae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d902      	bls.n	8005c00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfe:	e056      	b.n	8005cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c18:	d0e7      	beq.n	8005bea <USB_EPStopXfer+0x82>
 8005c1a:	e048      	b.n	8005cae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c34:	d13b      	bne.n	8005cae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d902      	bls.n	8005c94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
          break;
 8005c92:	e00c      	b.n	8005cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d0e7      	beq.n	8005c7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	; 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	460b      	mov	r3, r1
 8005ccc:	71fb      	strb	r3, [r7, #7]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d123      	bne.n	8005d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ce2:	88bb      	ldrh	r3, [r7, #4]
 8005ce4:	3303      	adds	r3, #3
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	e018      	b.n	8005d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	031a      	lsls	r2, r3, #12
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d3e2      	bcc.n	8005cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3724      	adds	r7, #36	; 0x24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b08b      	sub	sp, #44	; 0x2c
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	e014      	b.n	8005d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	3301      	adds	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	3301      	adds	r3, #1
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3301      	adds	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	3301      	adds	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	6a3a      	ldr	r2, [r7, #32]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3e6      	bcc.n	8005d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d96:	8bfb      	ldrh	r3, [r7, #30]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01e      	beq.n	8005dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	461a      	mov	r2, r3
 8005da8:	f107 0310 	add.w	r3, r7, #16
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	3301      	adds	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005dce:	8bfb      	ldrh	r3, [r7, #30]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dd4:	8bfb      	ldrh	r3, [r7, #30]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1ea      	bne.n	8005db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	372c      	adds	r7, #44	; 0x2c
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d12c      	bne.n	8005e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	db12      	blt.n	8005e3c <USB_EPSetStall+0x54>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00f      	beq.n	8005e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	e02b      	b.n	8005eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	db12      	blt.n	8005e96 <USB_EPSetStall+0xae>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d128      	bne.n	8005f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d003      	beq.n	8005f10 <USB_EPClearStall+0x4c>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	791b      	ldrb	r3, [r3, #4]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d138      	bne.n	8005f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e027      	b.n	8005f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	791b      	ldrb	r3, [r3, #4]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d003      	beq.n	8005f62 <USB_EPClearStall+0x9e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	791b      	ldrb	r3, [r3, #4]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d10f      	bne.n	8005f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600a:	f023 0302 	bic.w	r3, r3, #2
 800600e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	0c1b      	lsrs	r3, r3, #16
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	b29b      	uxth	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800611c:	68bb      	ldr	r3, [r7, #8]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	01db      	lsls	r3, r3, #7
 800615c:	b2db      	uxtb	r3, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4013      	ands	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006178:	68bb      	ldr	r3, [r7, #8]
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0301 	and.w	r3, r3, #1
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	460b      	mov	r3, r1
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	333c      	adds	r3, #60	; 0x3c
 80061fe:	3304      	adds	r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <USB_EP0_OutStart+0xb8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d90a      	bls.n	8006222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d101      	bne.n	8006222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e037      	b.n	8006292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	461a      	mov	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006250:	f043 0318 	orr.w	r3, r3, #24
 8006254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10f      	bne.n	8006290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800628e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	4f54300a 	.word	0x4f54300a

080062a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062bc:	d901      	bls.n	80062c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e01b      	b.n	80062fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	daf2      	bge.n	80062b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f043 0201 	orr.w	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062e6:	d901      	bls.n	80062ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d0f0      	beq.n	80062da <USB_CoreReset+0x36>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006314:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006318:	f002 fc94 	bl	8008c44 <USBD_static_malloc>
 800631c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32b0      	adds	r2, #176	; 0xb0
 800632e:	2100      	movs	r1, #0
 8006330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006334:	2302      	movs	r3, #2
 8006336:	e0d4      	b.n	80064e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006338:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f003 fa4f 	bl	80097e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	32b0      	adds	r2, #176	; 0xb0
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	32b0      	adds	r2, #176	; 0xb0
 800635e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7c1b      	ldrb	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d138      	bne.n	80063e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006370:	4b5e      	ldr	r3, [pc, #376]	; (80064ec <USBD_CDC_Init+0x1e4>)
 8006372:	7819      	ldrb	r1, [r3, #0]
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2202      	movs	r2, #2
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 fb3f 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006380:	4b5a      	ldr	r3, [pc, #360]	; (80064ec <USBD_CDC_Init+0x1e4>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3324      	adds	r3, #36	; 0x24
 8006396:	2201      	movs	r2, #1
 8006398:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800639a:	4b55      	ldr	r3, [pc, #340]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 800639c:	7819      	ldrb	r1, [r3, #0]
 800639e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a2:	2202      	movs	r2, #2
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 fb2a 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063aa:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f003 020f 	and.w	r2, r3, #15
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063c2:	2201      	movs	r2, #1
 80063c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <USBD_CDC_Init+0x1ec>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 020f 	and.w	r2, r3, #15
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3326      	adds	r3, #38	; 0x26
 80063dc:	2210      	movs	r2, #16
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e035      	b.n	800644e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063e2:	4b42      	ldr	r3, [pc, #264]	; (80064ec <USBD_CDC_Init+0x1e4>)
 80063e4:	7819      	ldrb	r1, [r3, #0]
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	2202      	movs	r2, #2
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 fb07 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063f0:	4b3e      	ldr	r3, [pc, #248]	; (80064ec <USBD_CDC_Init+0x1e4>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	2201      	movs	r2, #1
 8006408:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800640a:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 800640c:	7819      	ldrb	r1, [r3, #0]
 800640e:	2340      	movs	r3, #64	; 0x40
 8006410:	2202      	movs	r2, #2
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f002 faf3 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006418:	4b35      	ldr	r3, [pc, #212]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006430:	2201      	movs	r2, #1
 8006432:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006434:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <USBD_CDC_Init+0x1ec>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3326      	adds	r3, #38	; 0x26
 800644a:	2210      	movs	r2, #16
 800644c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800644e:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <USBD_CDC_Init+0x1ec>)
 8006450:	7819      	ldrb	r1, [r3, #0]
 8006452:	2308      	movs	r3, #8
 8006454:	2203      	movs	r2, #3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f002 fad1 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <USBD_CDC_Init+0x1ec>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	2201      	movs	r2, #1
 8006474:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	33b0      	adds	r3, #176	; 0xb0
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e018      	b.n	80064e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7c1b      	ldrb	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 80064ba:	7819      	ldrb	r1, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 fb88 	bl	8008bdc <USBD_LL_PrepareReceive>
 80064cc:	e008      	b.n	80064e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <USBD_CDC_Init+0x1e8>)
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 fb7e 	bl	8008bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000093 	.word	0x20000093
 80064f0:	20000094 	.word	0x20000094
 80064f4:	20000095 	.word	0x20000095

080064f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006504:	4b3a      	ldr	r3, [pc, #232]	; (80065f0 <USBD_CDC_DeInit+0xf8>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f002 fa9d 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006510:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <USBD_CDC_DeInit+0xf8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 020f 	and.w	r2, r3, #15
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	2200      	movs	r2, #0
 8006528:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800652a:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <USBD_CDC_DeInit+0xfc>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f002 fa8a 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006536:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <USBD_CDC_DeInit+0xfc>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800654e:	2200      	movs	r2, #0
 8006550:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <USBD_CDC_DeInit+0x100>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f002 fa76 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800655e:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <USBD_CDC_DeInit+0x100>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	2200      	movs	r2, #0
 8006576:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <USBD_CDC_DeInit+0x100>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3326      	adds	r3, #38	; 0x26
 800658e:	2200      	movs	r2, #0
 8006590:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	32b0      	adds	r2, #176	; 0xb0
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01f      	beq.n	80065e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	33b0      	adds	r3, #176	; 0xb0
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32b0      	adds	r2, #176	; 0xb0
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f002 fb4a 	bl	8008c60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32b0      	adds	r2, #176	; 0xb0
 80065d6:	2100      	movs	r1, #0
 80065d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000093 	.word	0x20000093
 80065f4:	20000094 	.word	0x20000094
 80065f8:	20000095 	.word	0x20000095

080065fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	32b0      	adds	r2, #176	; 0xb0
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	e0bf      	b.n	80067ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006634:	2b00      	cmp	r3, #0
 8006636:	d050      	beq.n	80066da <USBD_CDC_Setup+0xde>
 8006638:	2b20      	cmp	r3, #32
 800663a:	f040 80af 	bne.w	800679c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	88db      	ldrh	r3, [r3, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d03a      	beq.n	80066bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	b25b      	sxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	da1b      	bge.n	8006688 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	33b0      	adds	r3, #176	; 0xb0
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006666:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	88d2      	ldrh	r2, [r2, #6]
 800666c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	88db      	ldrh	r3, [r3, #6]
 8006672:	2b07      	cmp	r3, #7
 8006674:	bf28      	it	cs
 8006676:	2307      	movcs	r3, #7
 8006678:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	89fa      	ldrh	r2, [r7, #14]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fd89 	bl	8008198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006686:	e090      	b.n	80067aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	785a      	ldrb	r2, [r3, #1]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	88db      	ldrh	r3, [r3, #6]
 8006696:	2b3f      	cmp	r3, #63	; 0x3f
 8006698:	d803      	bhi.n	80066a2 <USBD_CDC_Setup+0xa6>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	88db      	ldrh	r3, [r3, #6]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	e000      	b.n	80066a4 <USBD_CDC_Setup+0xa8>
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066aa:	6939      	ldr	r1, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066b2:	461a      	mov	r2, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fd9b 	bl	80081f0 <USBD_CtlPrepareRx>
      break;
 80066ba:	e076      	b.n	80067aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	33b0      	adds	r3, #176	; 0xb0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	7850      	ldrb	r0, [r2, #1]
 80066d2:	2200      	movs	r2, #0
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	4798      	blx	r3
      break;
 80066d8:	e067      	b.n	80067aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b0b      	cmp	r3, #11
 80066e0:	d851      	bhi.n	8006786 <USBD_CDC_Setup+0x18a>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <USBD_CDC_Setup+0xec>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	08006719 	.word	0x08006719
 80066ec:	08006795 	.word	0x08006795
 80066f0:	08006787 	.word	0x08006787
 80066f4:	08006787 	.word	0x08006787
 80066f8:	08006787 	.word	0x08006787
 80066fc:	08006787 	.word	0x08006787
 8006700:	08006787 	.word	0x08006787
 8006704:	08006787 	.word	0x08006787
 8006708:	08006787 	.word	0x08006787
 800670c:	08006787 	.word	0x08006787
 8006710:	08006743 	.word	0x08006743
 8006714:	0800676d 	.word	0x0800676d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d107      	bne.n	8006734 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006724:	f107 030a 	add.w	r3, r7, #10
 8006728:	2202      	movs	r2, #2
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fd33 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006732:	e032      	b.n	800679a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fcbd 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	75fb      	strb	r3, [r7, #23]
          break;
 8006740:	e02b      	b.n	800679a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b03      	cmp	r3, #3
 800674c:	d107      	bne.n	800675e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800674e:	f107 030d 	add.w	r3, r7, #13
 8006752:	2201      	movs	r2, #1
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fd1e 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675c:	e01d      	b.n	800679a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fca8 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	75fb      	strb	r3, [r7, #23]
          break;
 800676a:	e016      	b.n	800679a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b03      	cmp	r3, #3
 8006776:	d00f      	beq.n	8006798 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fc9b 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006780:	2303      	movs	r3, #3
 8006782:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006784:	e008      	b.n	8006798 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fc94 	bl	80080b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	75fb      	strb	r3, [r7, #23]
          break;
 8006792:	e002      	b.n	800679a <USBD_CDC_Setup+0x19e>
          break;
 8006794:	bf00      	nop
 8006796:	e008      	b.n	80067aa <USBD_CDC_Setup+0x1ae>
          break;
 8006798:	bf00      	nop
      }
      break;
 800679a:	e006      	b.n	80067aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fc89 	bl	80080b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80067a4:	2303      	movs	r3, #3
 80067a6:	75fb      	strb	r3, [r7, #23]
      break;
 80067a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80067c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32b0      	adds	r2, #176	; 0xb0
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067da:	2303      	movs	r3, #3
 80067dc:	e065      	b.n	80068aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32b0      	adds	r2, #176	; 0xb0
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3318      	adds	r3, #24
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02f      	beq.n	8006868 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	3318      	adds	r3, #24
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	f003 010f 	and.w	r1, r3, #15
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	460b      	mov	r3, r1
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	440b      	add	r3, r1
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4403      	add	r3, r0
 8006830:	331c      	adds	r3, #28
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	fbb2 f1f3 	udiv	r1, r2, r3
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800683e:	2b00      	cmp	r3, #0
 8006840:	d112      	bne.n	8006868 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	f003 020f 	and.w	r2, r3, #15
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3318      	adds	r3, #24
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800685a:	78f9      	ldrb	r1, [r7, #3]
 800685c:	2300      	movs	r3, #0
 800685e:	2200      	movs	r2, #0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f002 f99a 	bl	8008b9a <USBD_LL_Transmit>
 8006866:	e01f      	b.n	80068a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	33b0      	adds	r3, #176	; 0xb0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	33b0      	adds	r3, #176	; 0xb0
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32b0      	adds	r2, #176	; 0xb0
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32b0      	adds	r2, #176	; 0xb0
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e01a      	b.n	800691a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f002 f998 	bl	8008c1e <USBD_LL_GetRxDataSize>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	33b0      	adds	r3, #176	; 0xb0
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006914:	4611      	mov	r1, r2
 8006916:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32b0      	adds	r2, #176	; 0xb0
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	e025      	b.n	8006990 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	33b0      	adds	r3, #176	; 0xb0
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01a      	beq.n	800698e <USBD_CDC_EP0_RxReady+0x6c>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800695e:	2bff      	cmp	r3, #255	; 0xff
 8006960:	d015      	beq.n	800698e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	33b0      	adds	r3, #176	; 0xb0
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800697a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006982:	b292      	uxth	r2, r2
 8006984:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	22ff      	movs	r2, #255	; 0xff
 800698a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069a0:	2182      	movs	r1, #130	; 0x82
 80069a2:	4818      	ldr	r0, [pc, #96]	; (8006a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069a4:	f000 fd4f 	bl	8007446 <USBD_GetEpDesc>
 80069a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069aa:	2101      	movs	r1, #1
 80069ac:	4815      	ldr	r0, [pc, #84]	; (8006a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069ae:	f000 fd4a 	bl	8007446 <USBD_GetEpDesc>
 80069b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069b4:	2181      	movs	r1, #129	; 0x81
 80069b6:	4813      	ldr	r0, [pc, #76]	; (8006a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069b8:	f000 fd45 	bl	8007446 <USBD_GetEpDesc>
 80069bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2210      	movs	r2, #16
 80069c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d8:	711a      	strb	r2, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ec:	711a      	strb	r2, [r3, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2243      	movs	r2, #67	; 0x43
 80069f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069f8:	4b02      	ldr	r3, [pc, #8]	; (8006a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000050 	.word	0x20000050

08006a08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a10:	2182      	movs	r1, #130	; 0x82
 8006a12:	4818      	ldr	r0, [pc, #96]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a14:	f000 fd17 	bl	8007446 <USBD_GetEpDesc>
 8006a18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4815      	ldr	r0, [pc, #84]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a1e:	f000 fd12 	bl	8007446 <USBD_GetEpDesc>
 8006a22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a24:	2181      	movs	r1, #129	; 0x81
 8006a26:	4813      	ldr	r0, [pc, #76]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a28:	f000 fd0d 	bl	8007446 <USBD_GetEpDesc>
 8006a2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2210      	movs	r2, #16
 8006a38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2200      	movs	r2, #0
 8006a44:	711a      	strb	r2, [r3, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f042 0202 	orr.w	r2, r2, #2
 8006a4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	711a      	strb	r2, [r3, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f042 0202 	orr.w	r2, r2, #2
 8006a60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2243      	movs	r2, #67	; 0x43
 8006a66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a68:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000050 	.word	0x20000050

08006a78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a80:	2182      	movs	r1, #130	; 0x82
 8006a82:	4818      	ldr	r0, [pc, #96]	; (8006ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a84:	f000 fcdf 	bl	8007446 <USBD_GetEpDesc>
 8006a88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4815      	ldr	r0, [pc, #84]	; (8006ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a8e:	f000 fcda 	bl	8007446 <USBD_GetEpDesc>
 8006a92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a94:	2181      	movs	r1, #129	; 0x81
 8006a96:	4813      	ldr	r0, [pc, #76]	; (8006ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a98:	f000 fcd5 	bl	8007446 <USBD_GetEpDesc>
 8006a9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab8:	711a      	strb	r2, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006acc:	711a      	strb	r2, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2243      	movs	r2, #67	; 0x43
 8006ad6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ad8:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000050 	.word	0x20000050

08006ae8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	220a      	movs	r2, #10
 8006af4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006af6:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	2000000c 	.word	0x2000000c

08006b08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e009      	b.n	8006b30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	33b0      	adds	r3, #176	; 0xb0
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	32b0      	adds	r2, #176	; 0xb0
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e008      	b.n	8006b74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	32b0      	adds	r2, #176	; 0xb0
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e004      	b.n	8006bae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32b0      	adds	r2, #176	; 0xb0
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e025      	b.n	8006c2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11f      	bne.n	8006c2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <USBD_CDC_TransmitPacket+0x7c>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4403      	add	r3, r0
 8006c0e:	3318      	adds	r3, #24
 8006c10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <USBD_CDC_TransmitPacket+0x7c>)
 8006c14:	7819      	ldrb	r1, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 ffb9 	bl	8008b9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000093 	.word	0x20000093

08006c3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32b0      	adds	r2, #176	; 0xb0
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	32b0      	adds	r2, #176	; 0xb0
 8006c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e018      	b.n	8006c9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7c1b      	ldrb	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <USBD_CDC_ReceivePacket+0x68>)
 8006c74:	7819      	ldrb	r1, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 ffab 	bl	8008bdc <USBD_LL_PrepareReceive>
 8006c86:	e008      	b.n	8006c9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <USBD_CDC_ReceivePacket+0x68>)
 8006c8a:	7819      	ldrb	r1, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 ffa1 	bl	8008bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000094 	.word	0x20000094

08006ca8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e01f      	b.n	8006d00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	79fa      	ldrb	r2, [r7, #7]
 8006cf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f001 fe1b 	bl	8008930 <USBD_LL_Init>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e025      	b.n	8006d6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00f      	beq.n	8006d5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f107 020e 	add.w	r2, r7, #14
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fe23 	bl	80089c8 <USBD_LL_Start>
 8006d82:	4603      	mov	r3, r0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	4611      	mov	r1, r2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e00:	2303      	movs	r3, #3
 8006e02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f90e 	bl	8008042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e34:	461a      	mov	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e42:	f003 031f 	and.w	r3, r3, #31
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d01a      	beq.n	8006e80 <USBD_LL_SetupStage+0x72>
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d822      	bhi.n	8006e94 <USBD_LL_SetupStage+0x86>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <USBD_LL_SetupStage+0x4a>
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d00a      	beq.n	8006e6c <USBD_LL_SetupStage+0x5e>
 8006e56:	e01d      	b.n	8006e94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb65 	bl	8007530 <USBD_StdDevReq>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6a:	e020      	b.n	8006eae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbcd 	bl	8007614 <USBD_StdItfReq>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7e:	e016      	b.n	8006eae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc2f 	bl	80076ec <USBD_StdEPReq>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
      break;
 8006e92:	e00c      	b.n	8006eae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fdf0 	bl	8008a88 <USBD_LL_StallEP>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006eac:	bf00      	nop
  }

  return ret;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d16e      	bne.n	8006fae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ed6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	f040 8098 	bne.w	8007014 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d913      	bls.n	8006f18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	bf28      	it	cs
 8006f0a:	4613      	movcs	r3, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f001 f98a 	bl	800822a <USBD_CtlContinueRx>
 8006f16:	e07d      	b.n	8007014 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d014      	beq.n	8006f50 <USBD_LL_DataOutStage+0x98>
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d81d      	bhi.n	8006f66 <USBD_LL_DataOutStage+0xae>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <USBD_LL_DataOutStage+0x7c>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d003      	beq.n	8006f3a <USBD_LL_DataOutStage+0x82>
 8006f32:	e018      	b.n	8006f66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	75bb      	strb	r3, [r7, #22]
            break;
 8006f38:	e018      	b.n	8006f6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fa64 	bl	8007412 <USBD_CoreFindIF>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f4e:	e00d      	b.n	8006f6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fa66 	bl	800742c <USBD_CoreFindEP>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75bb      	strb	r3, [r7, #22]
            break;
 8006f64:	e002      	b.n	8006f6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75bb      	strb	r3, [r7, #22]
            break;
 8006f6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f6c:	7dbb      	ldrb	r3, [r7, #22]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d119      	bne.n	8006fa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d113      	bne.n	8006fa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f7e:	7dba      	ldrb	r2, [r7, #22]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	32ae      	adds	r2, #174	; 0xae
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f8e:	7dba      	ldrb	r2, [r7, #22]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f96:	7dba      	ldrb	r2, [r7, #22]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	32ae      	adds	r2, #174	; 0xae
 8006f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 f950 	bl	800824c <USBD_CtlSendStatus>
 8006fac:	e032      	b.n	8007014 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fa37 	bl	800742c <USBD_CoreFindEP>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fc2:	7dbb      	ldrb	r3, [r7, #22]
 8006fc4:	2bff      	cmp	r3, #255	; 0xff
 8006fc6:	d025      	beq.n	8007014 <USBD_LL_DataOutStage+0x15c>
 8006fc8:	7dbb      	ldrb	r3, [r7, #22]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d122      	bne.n	8007014 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d117      	bne.n	800700a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006fda:	7dba      	ldrb	r2, [r7, #22]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	32ae      	adds	r2, #174	; 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006fea:	7dba      	ldrb	r2, [r7, #22]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ff2:	7dba      	ldrb	r2, [r7, #22]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	32ae      	adds	r2, #174	; 0xae
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	7afa      	ldrb	r2, [r7, #11]
 8007000:	4611      	mov	r1, r2
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	4798      	blx	r3
 8007006:	4603      	mov	r3, r0
 8007008:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	e000      	b.n	8007016 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	460b      	mov	r3, r1
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d16f      	bne.n	8007112 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3314      	adds	r3, #20
 8007036:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800703e:	2b02      	cmp	r3, #2
 8007040:	d15a      	bne.n	80070f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	429a      	cmp	r2, r3
 800704c:	d914      	bls.n	8007078 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	461a      	mov	r2, r3
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f001 f8b2 	bl	80081ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800706a:	2300      	movs	r3, #0
 800706c:	2200      	movs	r2, #0
 800706e:	2100      	movs	r1, #0
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f001 fdb3 	bl	8008bdc <USBD_LL_PrepareReceive>
 8007076:	e03f      	b.n	80070f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	429a      	cmp	r2, r3
 8007082:	d11c      	bne.n	80070be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800708c:	429a      	cmp	r2, r3
 800708e:	d316      	bcc.n	80070be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800709a:	429a      	cmp	r2, r3
 800709c:	d20f      	bcs.n	80070be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f001 f893 	bl	80081ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070b0:	2300      	movs	r3, #0
 80070b2:	2200      	movs	r2, #0
 80070b4:	2100      	movs	r1, #0
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 fd90 	bl	8008bdc <USBD_LL_PrepareReceive>
 80070bc:	e01c      	b.n	80070f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d10f      	bne.n	80070ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ea:	2180      	movs	r1, #128	; 0x80
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f001 fccb 	bl	8008a88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f001 f8bd 	bl	8008272 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03a      	beq.n	8007178 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fe42 	bl	8006d8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007110:	e032      	b.n	8007178 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f985 	bl	800742c <USBD_CoreFindEP>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2bff      	cmp	r3, #255	; 0xff
 800712a:	d025      	beq.n	8007178 <USBD_LL_DataInStage+0x15a>
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d122      	bne.n	8007178 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b03      	cmp	r3, #3
 800713c:	d11c      	bne.n	8007178 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800713e:	7dfa      	ldrb	r2, [r7, #23]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	32ae      	adds	r2, #174	; 0xae
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800714e:	7dfa      	ldrb	r2, [r7, #23]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007156:	7dfa      	ldrb	r2, [r7, #23]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	32ae      	adds	r2, #174	; 0xae
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	7afa      	ldrb	r2, [r7, #11]
 8007164:	4611      	mov	r1, r2
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	4798      	blx	r3
 800716a:	4603      	mov	r3, r0
 800716c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800716e:	7dbb      	ldrb	r3, [r7, #22]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007174:	7dbb      	ldrb	r3, [r7, #22]
 8007176:	e000      	b.n	800717a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d014      	beq.n	80071e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00e      	beq.n	80071e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6852      	ldr	r2, [r2, #4]
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	4611      	mov	r1, r2
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e8:	2340      	movs	r3, #64	; 0x40
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fc05 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	2200      	movs	r2, #0
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fbf7 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2240      	movs	r2, #64	; 0x40
 800721a:	621a      	str	r2, [r3, #32]

  return ret;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b04      	cmp	r3, #4
 8007258:	d006      	beq.n	8007268 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2204      	movs	r2, #4
 800726c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b04      	cmp	r3, #4
 8007290:	d106      	bne.n	80072a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007298:	b2da      	uxtb	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d110      	bne.n	80072e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	32ae      	adds	r2, #174	; 0xae
 8007304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e01c      	b.n	800734a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b03      	cmp	r3, #3
 800731a:	d115      	bne.n	8007348 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32ae      	adds	r2, #174	; 0xae
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32ae      	adds	r2, #174	; 0xae
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	4611      	mov	r1, r2
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32ae      	adds	r2, #174	; 0xae
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	e01c      	b.n	80073ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b03      	cmp	r3, #3
 800737e:	d115      	bne.n	80073ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32ae      	adds	r2, #174	; 0xae
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	; 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	4611      	mov	r1, r2
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6852      	ldr	r2, [r2, #4]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	4611      	mov	r1, r2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800741e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007438:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	429a      	cmp	r2, r3
 800746c:	d920      	bls.n	80074b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007476:	e013      	b.n	80074a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007478:	f107 030a 	add.w	r3, r7, #10
 800747c:	4619      	mov	r1, r3
 800747e:	6978      	ldr	r0, [r7, #20]
 8007480:	f000 f81b 	bl	80074ba <USBD_GetNextDesc>
 8007484:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b05      	cmp	r3, #5
 800748c:	d108      	bne.n	80074a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	429a      	cmp	r2, r3
 800749a:	d008      	beq.n	80074ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	885b      	ldrh	r3, [r3, #2]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	897b      	ldrh	r3, [r7, #10]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d8e5      	bhi.n	8007478 <USBD_GetEpDesc+0x32>
 80074ac:	e000      	b.n	80074b0 <USBD_GetEpDesc+0x6a>
          break;
 80074ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074b0:	693b      	ldr	r3, [r7, #16]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	3301      	adds	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007512:	8a3b      	ldrh	r3, [r7, #16]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	b21a      	sxth	r2, r3
 8007518:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800751c:	4313      	orrs	r3, r2
 800751e:	b21b      	sxth	r3, r3
 8007520:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007522:	89fb      	ldrh	r3, [r7, #14]
}
 8007524:	4618      	mov	r0, r3
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d005      	beq.n	8007556 <USBD_StdDevReq+0x26>
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d857      	bhi.n	80075fe <USBD_StdDevReq+0xce>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00f      	beq.n	8007572 <USBD_StdDevReq+0x42>
 8007552:	2b20      	cmp	r3, #32
 8007554:	d153      	bne.n	80075fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	32ae      	adds	r2, #174	; 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	e04a      	b.n	8007608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b09      	cmp	r3, #9
 8007578:	d83b      	bhi.n	80075f2 <USBD_StdDevReq+0xc2>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <USBD_StdDevReq+0x50>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075d5 	.word	0x080075d5
 8007584:	080075e9 	.word	0x080075e9
 8007588:	080075f3 	.word	0x080075f3
 800758c:	080075df 	.word	0x080075df
 8007590:	080075f3 	.word	0x080075f3
 8007594:	080075b3 	.word	0x080075b3
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075f3 	.word	0x080075f3
 80075a0:	080075cb 	.word	0x080075cb
 80075a4:	080075bd 	.word	0x080075bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa3c 	bl	8007a28 <USBD_GetDescriptor>
          break;
 80075b0:	e024      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fba1 	bl	8007cfc <USBD_SetAddress>
          break;
 80075ba:	e01f      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fbe0 	bl	8007d84 <USBD_SetConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
          break;
 80075c8:	e018      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fc83 	bl	8007ed8 <USBD_GetConfig>
          break;
 80075d2:	e013      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fcb4 	bl	8007f44 <USBD_GetStatus>
          break;
 80075dc:	e00e      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fce3 	bl	8007fac <USBD_SetFeature>
          break;
 80075e6:	e009      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fd07 	bl	8007ffe <USBD_ClrFeature>
          break;
 80075f0:	e004      	b.n	80075fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd5e 	bl	80080b6 <USBD_CtlError>
          break;
 80075fa:	bf00      	nop
      }
      break;
 80075fc:	e004      	b.n	8007608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fd58 	bl	80080b6 <USBD_CtlError>
      break;
 8007606:	bf00      	nop
  }

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d005      	beq.n	800763a <USBD_StdItfReq+0x26>
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d852      	bhi.n	80076d8 <USBD_StdItfReq+0xc4>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USBD_StdItfReq+0x26>
 8007636:	2b20      	cmp	r3, #32
 8007638:	d14e      	bne.n	80076d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	2b02      	cmp	r3, #2
 8007646:	d840      	bhi.n	80076ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	889b      	ldrh	r3, [r3, #4]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d836      	bhi.n	80076c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	889b      	ldrh	r3, [r3, #4]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fed9 	bl	8007412 <USBD_CoreFindIF>
 8007660:	4603      	mov	r3, r0
 8007662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2bff      	cmp	r3, #255	; 0xff
 8007668:	d01d      	beq.n	80076a6 <USBD_StdItfReq+0x92>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11a      	bne.n	80076a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007670:	7bba      	ldrb	r2, [r7, #14]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	; 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00f      	beq.n	80076a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007680:	7bba      	ldrb	r2, [r7, #14]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007688:	7bba      	ldrb	r2, [r7, #14]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	; 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800769e:	e004      	b.n	80076aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076a4:	e001      	b.n	80076aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88db      	ldrh	r3, [r3, #6]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d110      	bne.n	80076d4 <USBD_StdItfReq+0xc0>
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10d      	bne.n	80076d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fdc7 	bl	800824c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076be:	e009      	b.n	80076d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcf7 	bl	80080b6 <USBD_CtlError>
          break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fcf2 	bl	80080b6 <USBD_CtlError>
          break;
 80076d2:	e000      	b.n	80076d6 <USBD_StdItfReq+0xc2>
          break;
 80076d4:	bf00      	nop
      }
      break;
 80076d6:	e004      	b.n	80076e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fceb 	bl	80080b6 <USBD_CtlError>
      break;
 80076e0:	bf00      	nop
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	889b      	ldrh	r3, [r3, #4]
 80076fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d007      	beq.n	800771c <USBD_StdEPReq+0x30>
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	f200 817f 	bhi.w	8007a10 <USBD_StdEPReq+0x324>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d02a      	beq.n	800776c <USBD_StdEPReq+0x80>
 8007716:	2b20      	cmp	r3, #32
 8007718:	f040 817a 	bne.w	8007a10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fe83 	bl	800742c <USBD_CoreFindEP>
 8007726:	4603      	mov	r3, r0
 8007728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772a:	7b7b      	ldrb	r3, [r7, #13]
 800772c:	2bff      	cmp	r3, #255	; 0xff
 800772e:	f000 8174 	beq.w	8007a1a <USBD_StdEPReq+0x32e>
 8007732:	7b7b      	ldrb	r3, [r7, #13]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 8170 	bne.w	8007a1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800773a:	7b7a      	ldrb	r2, [r7, #13]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007742:	7b7a      	ldrb	r2, [r7, #13]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32ae      	adds	r2, #174	; 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8163 	beq.w	8007a1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007754:	7b7a      	ldrb	r2, [r7, #13]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	32ae      	adds	r2, #174	; 0xae
 800775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800776a:	e156      	b.n	8007a1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d008      	beq.n	8007786 <USBD_StdEPReq+0x9a>
 8007774:	2b03      	cmp	r3, #3
 8007776:	f300 8145 	bgt.w	8007a04 <USBD_StdEPReq+0x318>
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 809b 	beq.w	80078b6 <USBD_StdEPReq+0x1ca>
 8007780:	2b01      	cmp	r3, #1
 8007782:	d03c      	beq.n	80077fe <USBD_StdEPReq+0x112>
 8007784:	e13e      	b.n	8007a04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d002      	beq.n	8007798 <USBD_StdEPReq+0xac>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d016      	beq.n	80077c4 <USBD_StdEPReq+0xd8>
 8007796:	e02c      	b.n	80077f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <USBD_StdEPReq+0xce>
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b80      	cmp	r3, #128	; 0x80
 80077a2:	d00a      	beq.n	80077ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f96d 	bl	8008a88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ae:	2180      	movs	r1, #128	; 0x80
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f969 	bl	8008a88 <USBD_LL_StallEP>
 80077b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b8:	e020      	b.n	80077fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc7a 	bl	80080b6 <USBD_CtlError>
              break;
 80077c2:	e01b      	b.n	80077fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <USBD_StdEPReq+0xfe>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d008      	beq.n	80077ea <USBD_StdEPReq+0xfe>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	88db      	ldrh	r3, [r3, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f94f 	bl	8008a88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fd2e 	bl	800824c <USBD_CtlSendStatus>

              break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc5e 	bl	80080b6 <USBD_CtlError>
              break;
 80077fa:	bf00      	nop
          }
          break;
 80077fc:	e107      	b.n	8007a0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d002      	beq.n	8007810 <USBD_StdEPReq+0x124>
 800780a:	2b03      	cmp	r3, #3
 800780c:	d016      	beq.n	800783c <USBD_StdEPReq+0x150>
 800780e:	e04b      	b.n	80078a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <USBD_StdEPReq+0x146>
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	d00a      	beq.n	8007832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f931 	bl	8008a88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007826:	2180      	movs	r1, #128	; 0x80
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 f92d 	bl	8008a88 <USBD_LL_StallEP>
 800782e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007830:	e040      	b.n	80078b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc3e 	bl	80080b6 <USBD_CtlError>
              break;
 800783a:	e03b      	b.n	80078b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	885b      	ldrh	r3, [r3, #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d136      	bne.n	80078b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f937 	bl	8008ac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fcf7 	bl	800824c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fde2 	bl	800742c <USBD_CoreFindEP>
 8007868:	4603      	mov	r3, r0
 800786a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800786c:	7b7b      	ldrb	r3, [r7, #13]
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d01f      	beq.n	80078b2 <USBD_StdEPReq+0x1c6>
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11c      	bne.n	80078b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007878:	7b7a      	ldrb	r2, [r7, #13]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007880:	7b7a      	ldrb	r2, [r7, #13]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	32ae      	adds	r2, #174	; 0xae
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007890:	7b7a      	ldrb	r2, [r7, #13]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	32ae      	adds	r2, #174	; 0xae
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078a6:	e004      	b.n	80078b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc03 	bl	80080b6 <USBD_CtlError>
              break;
 80078b0:	e000      	b.n	80078b4 <USBD_StdEPReq+0x1c8>
              break;
 80078b2:	bf00      	nop
          }
          break;
 80078b4:	e0ab      	b.n	8007a0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d002      	beq.n	80078c8 <USBD_StdEPReq+0x1dc>
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d032      	beq.n	800792c <USBD_StdEPReq+0x240>
 80078c6:	e097      	b.n	80079f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <USBD_StdEPReq+0x1f2>
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d004      	beq.n	80078de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbed 	bl	80080b6 <USBD_CtlError>
                break;
 80078dc:	e091      	b.n	8007a02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da0b      	bge.n	80078fe <USBD_StdEPReq+0x212>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	3310      	adds	r3, #16
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	3304      	adds	r3, #4
 80078fc:	e00b      	b.n	8007916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	3304      	adds	r3, #4
 8007916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2202      	movs	r2, #2
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc37 	bl	8008198 <USBD_CtlSendData>
              break;
 800792a:	e06a      	b.n	8007a02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800792c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da11      	bge.n	8007958 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d117      	bne.n	800797e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fbb0 	bl	80080b6 <USBD_CtlError>
                  break;
 8007956:	e054      	b.n	8007a02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 020f 	and.w	r2, r3, #15
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb9d 	bl	80080b6 <USBD_CtlError>
                  break;
 800797c:	e041      	b.n	8007a02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007982:	2b00      	cmp	r3, #0
 8007984:	da0b      	bge.n	800799e <USBD_StdEPReq+0x2b2>
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	3310      	adds	r3, #16
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	e00b      	b.n	80079b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	3304      	adds	r3, #4
 80079b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <USBD_StdEPReq+0x2d8>
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d103      	bne.n	80079cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e00e      	b.n	80079ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 f897 	bl	8008b04 <USBD_LL_IsStallEP>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e002      	b.n	80079ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2202      	movs	r2, #2
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fbd1 	bl	8008198 <USBD_CtlSendData>
              break;
 80079f6:	e004      	b.n	8007a02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fb5b 	bl	80080b6 <USBD_CtlError>
              break;
 8007a00:	bf00      	nop
          }
          break;
 8007a02:	e004      	b.n	8007a0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb55 	bl	80080b6 <USBD_CtlError>
          break;
 8007a0c:	bf00      	nop
      }
      break;
 8007a0e:	e005      	b.n	8007a1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fb4f 	bl	80080b6 <USBD_CtlError>
      break;
 8007a18:	e000      	b.n	8007a1c <USBD_StdEPReq+0x330>
      break;
 8007a1a:	bf00      	nop
  }

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	885b      	ldrh	r3, [r3, #2]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	2b06      	cmp	r3, #6
 8007a4a:	f200 8128 	bhi.w	8007c9e <USBD_GetDescriptor+0x276>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <USBD_GetDescriptor+0x2c>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a89 	.word	0x08007a89
 8007a5c:	08007ac9 	.word	0x08007ac9
 8007a60:	08007c9f 	.word	0x08007c9f
 8007a64:	08007c9f 	.word	0x08007c9f
 8007a68:	08007c3f 	.word	0x08007c3f
 8007a6c:	08007c6b 	.word	0x08007c6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7c12      	ldrb	r2, [r2, #16]
 8007a7c:	f107 0108 	add.w	r1, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
      break;
 8007a86:	e112      	b.n	8007cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7c1b      	ldrb	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10d      	bne.n	8007aac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	f107 0208 	add.w	r2, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007aaa:	e100      	b.n	8007cae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	f107 0208 	add.w	r2, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e0f2      	b.n	8007cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	885b      	ldrh	r3, [r3, #2]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	f200 80ac 	bhi.w	8007c2c <USBD_GetDescriptor+0x204>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <USBD_GetDescriptor+0xb4>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007b29 	.word	0x08007b29
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b91 	.word	0x08007b91
 8007aec:	08007bc5 	.word	0x08007bc5
 8007af0:	08007bf9 	.word	0x08007bf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e091      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 facb 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e089      	b.n	8007c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e077      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fab1 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e06f      	b.n	8007c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e05d      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa97 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e055      	b.n	8007c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e043      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa7d 	bl	80080b6 <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e03b      	b.n	8007c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be6:	e029      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa63 	bl	80080b6 <USBD_CtlError>
            err++;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf6:	e021      	b.n	8007c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e00f      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa49 	bl	80080b6 <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e007      	b.n	8007c3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa41 	bl	80080b6 <USBD_CtlError>
          err++;
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	3301      	adds	r3, #1
 8007c38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c3a:	bf00      	nop
      }
      break;
 8007c3c:	e037      	b.n	8007cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7c1b      	ldrb	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f107 0208 	add.w	r2, r7, #8
 8007c52:	4610      	mov	r0, r2
 8007c54:	4798      	blx	r3
 8007c56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c58:	e029      	b.n	8007cae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa2a 	bl	80080b6 <USBD_CtlError>
        err++;
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	3301      	adds	r3, #1
 8007c66:	72fb      	strb	r3, [r7, #11]
      break;
 8007c68:	e021      	b.n	8007cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7c1b      	ldrb	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10d      	bne.n	8007c8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4798      	blx	r3
 8007c82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	2207      	movs	r2, #7
 8007c8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8c:	e00f      	b.n	8007cae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa10 	bl	80080b6 <USBD_CtlError>
        err++;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9c:	e007      	b.n	8007cae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa08 	bl	80080b6 <USBD_CtlError>
      err++;
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	72fb      	strb	r3, [r7, #11]
      break;
 8007cac:	bf00      	nop
  }

  if (err != 0U)
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11e      	bne.n	8007cf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d016      	beq.n	8007cea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cbc:	893b      	ldrh	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88da      	ldrh	r2, [r3, #6]
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	bf28      	it	cs
 8007ccc:	4613      	movcs	r3, r2
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cd2:	893b      	ldrh	r3, [r7, #8]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa5d 	bl	8008198 <USBD_CtlSendData>
 8007cde:	e009      	b.n	8007cf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9e7 	bl	80080b6 <USBD_CtlError>
 8007ce8:	e004      	b.n	8007cf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 faae 	bl	800824c <USBD_CtlSendStatus>
 8007cf0:	e000      	b.n	8007cf4 <USBD_GetDescriptor+0x2cc>
    return;
 8007cf2:	bf00      	nop
  }
}
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	889b      	ldrh	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d131      	bne.n	8007d72 <USBD_SetAddress+0x76>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	88db      	ldrh	r3, [r3, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d12d      	bne.n	8007d72 <USBD_SetAddress+0x76>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d1c:	d829      	bhi.n	8007d72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d104      	bne.n	8007d40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f9bc 	bl	80080b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	e01d      	b.n	8007d7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ff05 	bl	8008b5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa7a 	bl	800824c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	e009      	b.n	8007d7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d70:	e004      	b.n	8007d7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f99e 	bl	80080b6 <USBD_CtlError>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	4b4e      	ldr	r3, [pc, #312]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007d9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d9c:	4b4d      	ldr	r3, [pc, #308]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d905      	bls.n	8007db0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f985 	bl	80080b6 <USBD_CtlError>
    return USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e08c      	b.n	8007eca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d002      	beq.n	8007dc2 <USBD_SetConfig+0x3e>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d029      	beq.n	8007e14 <USBD_SetConfig+0x90>
 8007dc0:	e075      	b.n	8007eae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dc2:	4b44      	ldr	r3, [pc, #272]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d020      	beq.n	8007e0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dca:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fe ffe1 	bl	8006da2 <USBD_SetClassConfig>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d008      	beq.n	8007dfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f962 	bl	80080b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dfa:	e065      	b.n	8007ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa25 	bl	800824c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e0a:	e05d      	b.n	8007ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa1d 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007e12:	e059      	b.n	8007ec8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e14:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e24:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e2e:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fe ffd0 	bl	8006dda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa06 	bl	800824c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e40:	e042      	b.n	8007ec8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d02a      	beq.n	8007ea6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe ffbe 	bl	8006dda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fe ff97 	bl	8006da2 <USBD_SetClassConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00f      	beq.n	8007e9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f918 	bl	80080b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe ffa3 	bl	8006dda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e9c:	e014      	b.n	8007ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f9d4 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007ea4:	e010      	b.n	8007ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f9d0 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007eac:	e00c      	b.n	8007ec8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f900 	bl	80080b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eb6:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fe ff8c 	bl	8006dda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec6:	bf00      	nop
  }

  return ret;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000398 	.word	0x20000398

08007ed8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d004      	beq.n	8007ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8e2 	bl	80080b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ef2:	e023      	b.n	8007f3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	dc02      	bgt.n	8007f06 <USBD_GetConfig+0x2e>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc03      	bgt.n	8007f0c <USBD_GetConfig+0x34>
 8007f04:	e015      	b.n	8007f32 <USBD_GetConfig+0x5a>
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d00b      	beq.n	8007f22 <USBD_GetConfig+0x4a>
 8007f0a:	e012      	b.n	8007f32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3308      	adds	r3, #8
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f93c 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f20:	e00c      	b.n	8007f3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f934 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f30:	e004      	b.n	8007f3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8be 	bl	80080b6 <USBD_CtlError>
        break;
 8007f3a:	bf00      	nop
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d81e      	bhi.n	8007f9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d004      	beq.n	8007f6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8a5 	bl	80080b6 <USBD_CtlError>
        break;
 8007f6c:	e01a      	b.n	8007fa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f043 0202 	orr.w	r2, r3, #2
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	2202      	movs	r2, #2
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f900 	bl	8008198 <USBD_CtlSendData>
      break;
 8007f98:	e004      	b.n	8007fa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f88a 	bl	80080b6 <USBD_CtlError>
      break;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d107      	bne.n	8007fce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f940 	bl	800824c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fcc:	e013      	b.n	8007ff6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d10b      	bne.n	8007fee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	889b      	ldrh	r3, [r3, #4]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f930 	bl	800824c <USBD_CtlSendStatus>
}
 8007fec:	e003      	b.n	8007ff6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f860 	bl	80080b6 <USBD_CtlError>
}
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	2b02      	cmp	r3, #2
 8008014:	d80b      	bhi.n	800802e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10c      	bne.n	8008038 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f910 	bl	800824c <USBD_CtlSendStatus>
      }
      break;
 800802c:	e004      	b.n	8008038 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f840 	bl	80080b6 <USBD_CtlError>
      break;
 8008036:	e000      	b.n	800803a <USBD_ClrFeature+0x3c>
      break;
 8008038:	bf00      	nop
  }
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fa41 	bl	80074f4 <SWAPBYTE>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fa34 	bl	80074f4 <SWAPBYTE>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fa27 	bl	80074f4 <SWAPBYTE>
 80080a6:	4603      	mov	r3, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	80da      	strh	r2, [r3, #6]
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c0:	2180      	movs	r1, #128	; 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fce0 	bl	8008a88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fcdc 	bl	8008a88 <USBD_LL_StallEP>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d036      	beq.n	800815c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080f2:	6938      	ldr	r0, [r7, #16]
 80080f4:	f000 f836 	bl	8008164 <USBD_GetLen>
 80080f8:	4603      	mov	r3, r0
 80080fa:	3301      	adds	r3, #1
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
  idx++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	2203      	movs	r2, #3
 8008120:	701a      	strb	r2, [r3, #0]
  idx++;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	3301      	adds	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008128:	e013      	b.n	8008152 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	4413      	add	r3, r2
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
    idx++;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	3301      	adds	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4413      	add	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
    idx++;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	3301      	adds	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e7      	bne.n	800812a <USBD_GetString+0x52>
 800815a:	e000      	b.n	800815e <USBD_GetString+0x86>
    return;
 800815c:	bf00      	nop
  }
}
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008174:	e005      	b.n	8008182 <USBD_GetLen+0x1e>
  {
    len++;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	3301      	adds	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3301      	adds	r3, #1
 8008180:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f5      	bne.n	8008176 <USBD_GetLen+0x12>
  }

  return len;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fceb 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fcda 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2203      	movs	r2, #3
 8008200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	2100      	movs	r1, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fcde 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	2100      	movs	r1, #0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 fccd 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2204      	movs	r2, #4
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc99 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2205      	movs	r2, #5
 800827e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fca7 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800829c:	2200      	movs	r2, #0
 800829e:	4912      	ldr	r1, [pc, #72]	; (80082e8 <MX_USB_DEVICE_Init+0x50>)
 80082a0:	4812      	ldr	r0, [pc, #72]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082a2:	f7fe fd01 	bl	8006ca8 <USBD_Init>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ac:	f7f8 ff7e 	bl	80011ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082b0:	490f      	ldr	r1, [pc, #60]	; (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082b2:	480e      	ldr	r0, [pc, #56]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082b4:	f7fe fd28 	bl	8006d08 <USBD_RegisterClass>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082be:	f7f8 ff75 	bl	80011ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082c2:	490c      	ldr	r1, [pc, #48]	; (80082f4 <MX_USB_DEVICE_Init+0x5c>)
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082c6:	f7fe fc1f 	bl	8006b08 <USBD_CDC_RegisterInterface>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082d0:	f7f8 ff6c 	bl	80011ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082d6:	f7fe fd4d 	bl	8006d74 <USBD_Start>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082e0:	f7f8 ff64 	bl	80011ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200000ac 	.word	0x200000ac
 80082ec:	2000039c 	.word	0x2000039c
 80082f0:	20000018 	.word	0x20000018
 80082f4:	20000098 	.word	0x20000098

080082f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082fc:	2200      	movs	r2, #0
 80082fe:	4905      	ldr	r1, [pc, #20]	; (8008314 <CDC_Init_FS+0x1c>)
 8008300:	4805      	ldr	r0, [pc, #20]	; (8008318 <CDC_Init_FS+0x20>)
 8008302:	f7fe fc1b 	bl	8006b3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008306:	4905      	ldr	r1, [pc, #20]	; (800831c <CDC_Init_FS+0x24>)
 8008308:	4803      	ldr	r0, [pc, #12]	; (8008318 <CDC_Init_FS+0x20>)
 800830a:	f7fe fc39 	bl	8006b80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800830e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000e78 	.word	0x20000e78
 8008318:	2000039c 	.word	0x2000039c
 800831c:	20000678 	.word	0x20000678

08008320 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008324:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008326:	4618      	mov	r0, r3
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
 800833c:	4613      	mov	r3, r2
 800833e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b23      	cmp	r3, #35	; 0x23
 8008344:	d84a      	bhi.n	80083dc <CDC_Control_FS+0xac>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <CDC_Control_FS+0x1c>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083dd 	.word	0x080083dd
 8008350:	080083dd 	.word	0x080083dd
 8008354:	080083dd 	.word	0x080083dd
 8008358:	080083dd 	.word	0x080083dd
 800835c:	080083dd 	.word	0x080083dd
 8008360:	080083dd 	.word	0x080083dd
 8008364:	080083dd 	.word	0x080083dd
 8008368:	080083dd 	.word	0x080083dd
 800836c:	080083dd 	.word	0x080083dd
 8008370:	080083dd 	.word	0x080083dd
 8008374:	080083dd 	.word	0x080083dd
 8008378:	080083dd 	.word	0x080083dd
 800837c:	080083dd 	.word	0x080083dd
 8008380:	080083dd 	.word	0x080083dd
 8008384:	080083dd 	.word	0x080083dd
 8008388:	080083dd 	.word	0x080083dd
 800838c:	080083dd 	.word	0x080083dd
 8008390:	080083dd 	.word	0x080083dd
 8008394:	080083dd 	.word	0x080083dd
 8008398:	080083dd 	.word	0x080083dd
 800839c:	080083dd 	.word	0x080083dd
 80083a0:	080083dd 	.word	0x080083dd
 80083a4:	080083dd 	.word	0x080083dd
 80083a8:	080083dd 	.word	0x080083dd
 80083ac:	080083dd 	.word	0x080083dd
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083dd 	.word	0x080083dd
 80083c0:	080083dd 	.word	0x080083dd
 80083c4:	080083dd 	.word	0x080083dd
 80083c8:	080083dd 	.word	0x080083dd
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083dd 	.word	0x080083dd
 80083d4:	080083dd 	.word	0x080083dd
 80083d8:	080083dd 	.word	0x080083dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083dc:	bf00      	nop
  }

  return (USBD_OK);
 80083de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <CDC_Receive_FS+0x24>)
 80083fa:	f7fe fbc1 	bl	8006b80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083fe:	4804      	ldr	r0, [pc, #16]	; (8008410 <CDC_Receive_FS+0x24>)
 8008400:	f7fe fc1c 	bl	8006c3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008404:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	2000039c 	.word	0x2000039c

08008414 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008424:	4b0d      	ldr	r3, [pc, #52]	; (800845c <CDC_Transmit_FS+0x48>)
 8008426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008436:	2301      	movs	r3, #1
 8008438:	e00b      	b.n	8008452 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	461a      	mov	r2, r3
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4806      	ldr	r0, [pc, #24]	; (800845c <CDC_Transmit_FS+0x48>)
 8008442:	f7fe fb7b 	bl	8006b3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <CDC_Transmit_FS+0x48>)
 8008448:	f7fe fbb8 	bl	8006bbc <USBD_CDC_TransmitPacket>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000039c 	.word	0x2000039c

08008460 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008476:	4618      	mov	r0, r3
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2212      	movs	r2, #18
 8008494:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008496:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	200000c8 	.word	0x200000c8

080084a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2204      	movs	r2, #4
 80084b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ba:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	200000dc 	.word	0x200000dc

080084cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4907      	ldr	r1, [pc, #28]	; (8008500 <USBD_FS_ProductStrDescriptor+0x34>)
 80084e2:	4808      	ldr	r0, [pc, #32]	; (8008504 <USBD_FS_ProductStrDescriptor+0x38>)
 80084e4:	f7ff fdf8 	bl	80080d8 <USBD_GetString>
 80084e8:	e004      	b.n	80084f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4904      	ldr	r1, [pc, #16]	; (8008500 <USBD_FS_ProductStrDescriptor+0x34>)
 80084ee:	4805      	ldr	r0, [pc, #20]	; (8008504 <USBD_FS_ProductStrDescriptor+0x38>)
 80084f0:	f7ff fdf2 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20001678 	.word	0x20001678
 8008504:	0800ba10 	.word	0x0800ba10

08008508 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	4904      	ldr	r1, [pc, #16]	; (8008528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008518:	4804      	ldr	r0, [pc, #16]	; (800852c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800851a:	f7ff fddd 	bl	80080d8 <USBD_GetString>
  return USBD_StrDesc;
 800851e:	4b02      	ldr	r3, [pc, #8]	; (8008528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20001678 	.word	0x20001678
 800852c:	0800ba28 	.word	0x0800ba28

08008530 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	221a      	movs	r2, #26
 8008540:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008542:	f000 f843 	bl	80085cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008546:	4b02      	ldr	r3, [pc, #8]	; (8008550 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	200000e0 	.word	0x200000e0

08008554 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d105      	bne.n	8008572 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4907      	ldr	r1, [pc, #28]	; (8008588 <USBD_FS_ConfigStrDescriptor+0x34>)
 800856a:	4808      	ldr	r0, [pc, #32]	; (800858c <USBD_FS_ConfigStrDescriptor+0x38>)
 800856c:	f7ff fdb4 	bl	80080d8 <USBD_GetString>
 8008570:	e004      	b.n	800857c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	4904      	ldr	r1, [pc, #16]	; (8008588 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008576:	4805      	ldr	r0, [pc, #20]	; (800858c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008578:	f7ff fdae 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800857c:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20001678 	.word	0x20001678
 800858c:	0800ba3c 	.word	0x0800ba3c

08008590 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4907      	ldr	r1, [pc, #28]	; (80085c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085a6:	4808      	ldr	r0, [pc, #32]	; (80085c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085a8:	f7ff fd96 	bl	80080d8 <USBD_GetString>
 80085ac:	e004      	b.n	80085b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4904      	ldr	r1, [pc, #16]	; (80085c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085b2:	4805      	ldr	r0, [pc, #20]	; (80085c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085b4:	f7ff fd90 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20001678 	.word	0x20001678
 80085c8:	0800ba48 	.word	0x0800ba48

080085cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <Get_SerialNum+0x44>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <Get_SerialNum+0x48>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <Get_SerialNum+0x4c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4413      	add	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d009      	beq.n	8008606 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085f2:	2208      	movs	r2, #8
 80085f4:	4909      	ldr	r1, [pc, #36]	; (800861c <Get_SerialNum+0x50>)
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f814 	bl	8008624 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085fc:	2204      	movs	r2, #4
 80085fe:	4908      	ldr	r1, [pc, #32]	; (8008620 <Get_SerialNum+0x54>)
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	f000 f80f 	bl	8008624 <IntToUnicode>
  }
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	1fff7a10 	.word	0x1fff7a10
 8008614:	1fff7a14 	.word	0x1fff7a14
 8008618:	1fff7a18 	.word	0x1fff7a18
 800861c:	200000e2 	.word	0x200000e2
 8008620:	200000f2 	.word	0x200000f2

08008624 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
 800863a:	e027      	b.n	800868c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	0f1b      	lsrs	r3, r3, #28
 8008640:	2b09      	cmp	r3, #9
 8008642:	d80b      	bhi.n	800865c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	0f1b      	lsrs	r3, r3, #28
 8008648:	b2da      	uxtb	r2, r3
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4619      	mov	r1, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	440b      	add	r3, r1
 8008654:	3230      	adds	r2, #48	; 0x30
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	e00a      	b.n	8008672 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	0f1b      	lsrs	r3, r3, #28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	4619      	mov	r1, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	440b      	add	r3, r1
 800866c:	3237      	adds	r2, #55	; 0x37
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	3301      	adds	r3, #1
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4413      	add	r3, r2
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	3301      	adds	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
 800868c:	7dfa      	ldrb	r2, [r7, #23]
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	429a      	cmp	r2, r3
 8008692:	d3d3      	bcc.n	800863c <IntToUnicode+0x18>
  }
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ac:	f107 0314 	add.w	r3, r7, #20
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086c4:	d13a      	bne.n	800873c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e8:	2302      	movs	r3, #2
 80086ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086f0:	2303      	movs	r3, #3
 80086f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086f4:	230a      	movs	r3, #10
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086f8:	f107 0314 	add.w	r3, r7, #20
 80086fc:	4619      	mov	r1, r3
 80086fe:	4812      	ldr	r0, [pc, #72]	; (8008748 <HAL_PCD_MspInit+0xa4>)
 8008700:	f7f9 fb02 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008704:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 800870a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870e:	6353      	str	r3, [r2, #52]	; 0x34
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 8008716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008718:	4a0a      	ldr	r2, [pc, #40]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 800871a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800871e:	6453      	str	r3, [r2, #68]	; 0x44
 8008720:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_PCD_MspInit+0xa0>)
 8008722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800872c:	2200      	movs	r2, #0
 800872e:	2100      	movs	r1, #0
 8008730:	2043      	movs	r0, #67	; 0x43
 8008732:	f7f9 fab2 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008736:	2043      	movs	r0, #67	; 0x43
 8008738:	f7f9 facb 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800873c:	bf00      	nop
 800873e:	3728      	adds	r7, #40	; 0x28
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40023800 	.word	0x40023800
 8008748:	40020000 	.word	0x40020000

0800874c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fb53 	bl	8006e0e <USBD_LL_SetupStage>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	4619      	mov	r1, r3
 800879a:	f7fe fb8d 	bl	8006eb8 <USBD_LL_DataOutStage>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	3320      	adds	r3, #32
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f7fe fc26 	bl	800701e <USBD_LL_DataInStage>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fd60 	bl	80072ae <USBD_LL_SOF>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	79db      	ldrb	r3, [r3, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
 800880e:	e008      	b.n	8008822 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	79db      	ldrb	r3, [r3, #7]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d102      	bne.n	800881e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	e001      	b.n	8008822 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800881e:	f7f8 fcc5 	bl	80011ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008828:	7bfa      	ldrb	r2, [r7, #15]
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fcfa 	bl	8007226 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fca2 	bl	8007182 <USBD_LL_Reset>
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fcf5 	bl	8007246 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6812      	ldr	r2, [r2, #0]
 800886a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7adb      	ldrb	r3, [r3, #11]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <HAL_PCD_SuspendCallback+0x48>)
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4a03      	ldr	r2, [pc, #12]	; (8008890 <HAL_PCD_SuspendCallback+0x48>)
 8008882:	f043 0306 	orr.w	r3, r3, #6
 8008886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	e000ed00 	.word	0xe000ed00

08008894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fceb 	bl	800727e <USBD_LL_Resume>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fd43 	bl	8007352 <USBD_LL_IsoOUTIncomplete>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fcff 	bl	80072ee <USBD_LL_IsoINIncomplete>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fd55 	bl	80073b6 <USBD_LL_DevConnected>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fd52 	bl	80073cc <USBD_LL_DevDisconnected>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d13c      	bne.n	80089ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <USBD_LL_Init+0x94>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <USBD_LL_Init+0x94>)
 800894c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008950:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <USBD_LL_Init+0x94>)
 8008952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <USBD_LL_Init+0x94>)
 800895a:	2204      	movs	r2, #4
 800895c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <USBD_LL_Init+0x94>)
 8008960:	2202      	movs	r2, #2
 8008962:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <USBD_LL_Init+0x94>)
 8008966:	2200      	movs	r2, #0
 8008968:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <USBD_LL_Init+0x94>)
 800896c:	2202      	movs	r2, #2
 800896e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008970:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <USBD_LL_Init+0x94>)
 8008972:	2200      	movs	r2, #0
 8008974:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <USBD_LL_Init+0x94>)
 8008978:	2200      	movs	r2, #0
 800897a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800897c:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <USBD_LL_Init+0x94>)
 800897e:	2200      	movs	r2, #0
 8008980:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <USBD_LL_Init+0x94>)
 8008984:	2200      	movs	r2, #0
 8008986:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <USBD_LL_Init+0x94>)
 800898a:	2200      	movs	r2, #0
 800898c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800898e:	480d      	ldr	r0, [pc, #52]	; (80089c4 <USBD_LL_Init+0x94>)
 8008990:	f7f9 fcce 	bl	8002330 <HAL_PCD_Init>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800899a:	f7f8 fc07 	bl	80011ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	4808      	ldr	r0, [pc, #32]	; (80089c4 <USBD_LL_Init+0x94>)
 80089a2:	f7fa fef8 	bl	8003796 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089a6:	2240      	movs	r2, #64	; 0x40
 80089a8:	2100      	movs	r1, #0
 80089aa:	4806      	ldr	r0, [pc, #24]	; (80089c4 <USBD_LL_Init+0x94>)
 80089ac:	f7fa feac 	bl	8003708 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089b0:	2280      	movs	r2, #128	; 0x80
 80089b2:	2101      	movs	r1, #1
 80089b4:	4803      	ldr	r0, [pc, #12]	; (80089c4 <USBD_LL_Init+0x94>)
 80089b6:	f7fa fea7 	bl	8003708 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20001878 	.word	0x20001878

080089c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f9 fdb5 	bl	800254e <HAL_PCD_Start>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f942 	bl	8008c74 <USBD_Get_USB_Status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70bb      	strb	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a26:	78bb      	ldrb	r3, [r7, #2]
 8008a28:	883a      	ldrh	r2, [r7, #0]
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	f7fa fa89 	bl	8002f42 <HAL_PCD_EP_Open>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f91c 	bl	8008c74 <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fa fad2 	bl	8003012 <HAL_PCD_EP_Close>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f8fd 	bl	8008c74 <USBD_Get_USB_Status>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fa fb8a 	bl	80031c0 <HAL_PCD_EP_SetStall>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f8de 	bl	8008c74 <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fa fbce 	bl	8003286 <HAL_PCD_EP_ClrStall>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8bf 	bl	8008c74 <USBD_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da0b      	bge.n	8008b38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	3316      	adds	r3, #22
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	e00b      	b.n	8008b50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	4613      	mov	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008b4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fa f9bd 	bl	8002efa <HAL_PCD_SetAddress>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f874 	bl	8008c74 <USBD_Get_USB_Status>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bb8:	7af9      	ldrb	r1, [r7, #11]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	f7fa fac5 	bl	800314c <HAL_PCD_EP_Transmit>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f853 	bl	8008c74 <USBD_Get_USB_Status>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	460b      	mov	r3, r1
 8008bea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bfa:	7af9      	ldrb	r1, [r7, #11]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	f7fa fa51 	bl	80030a6 <HAL_PCD_EP_Receive>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f832 	bl	8008c74 <USBD_Get_USB_Status>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fa fa71 	bl	800311c <HAL_PCD_EP_GetRxCount>
 8008c3a:	4603      	mov	r3, r0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c4c:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <USBD_static_malloc+0x18>)
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20001d5c 	.word	0x20001d5c

08008c60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]

}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d817      	bhi.n	8008cb8 <USBD_Get_USB_Status+0x44>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <USBD_Get_USB_Status+0x1c>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008ca7 	.word	0x08008ca7
 8008c98:	08008cad 	.word	0x08008cad
 8008c9c:	08008cb3 	.word	0x08008cb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca4:	e00b      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8008caa:	e008      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e005      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb6:	e002      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	bf00      	nop
  }
  return usb_status;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <__cvt>:
 8008ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	ec55 4b10 	vmov	r4, r5, d0
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	4619      	mov	r1, r3
 8008cda:	462b      	mov	r3, r5
 8008cdc:	bfbb      	ittet	lt
 8008cde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ce2:	461d      	movlt	r5, r3
 8008ce4:	2300      	movge	r3, #0
 8008ce6:	232d      	movlt	r3, #45	; 0x2d
 8008ce8:	700b      	strb	r3, [r1, #0]
 8008cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	f023 0820 	bic.w	r8, r3, #32
 8008cf6:	bfbc      	itt	lt
 8008cf8:	4622      	movlt	r2, r4
 8008cfa:	4614      	movlt	r4, r2
 8008cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d00:	d005      	beq.n	8008d0e <__cvt+0x42>
 8008d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d06:	d100      	bne.n	8008d0a <__cvt+0x3e>
 8008d08:	3601      	adds	r6, #1
 8008d0a:	2102      	movs	r1, #2
 8008d0c:	e000      	b.n	8008d10 <__cvt+0x44>
 8008d0e:	2103      	movs	r1, #3
 8008d10:	ab03      	add	r3, sp, #12
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	ab02      	add	r3, sp, #8
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	ec45 4b10 	vmov	d0, r4, r5
 8008d1c:	4653      	mov	r3, sl
 8008d1e:	4632      	mov	r2, r6
 8008d20:	f000 fe6a 	bl	80099f8 <_dtoa_r>
 8008d24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d28:	4607      	mov	r7, r0
 8008d2a:	d102      	bne.n	8008d32 <__cvt+0x66>
 8008d2c:	f019 0f01 	tst.w	r9, #1
 8008d30:	d022      	beq.n	8008d78 <__cvt+0xac>
 8008d32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d36:	eb07 0906 	add.w	r9, r7, r6
 8008d3a:	d110      	bne.n	8008d5e <__cvt+0x92>
 8008d3c:	783b      	ldrb	r3, [r7, #0]
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	d10a      	bne.n	8008d58 <__cvt+0x8c>
 8008d42:	2200      	movs	r2, #0
 8008d44:	2300      	movs	r3, #0
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d4e:	b918      	cbnz	r0, 8008d58 <__cvt+0x8c>
 8008d50:	f1c6 0601 	rsb	r6, r6, #1
 8008d54:	f8ca 6000 	str.w	r6, [sl]
 8008d58:	f8da 3000 	ldr.w	r3, [sl]
 8008d5c:	4499      	add	r9, r3
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6a:	b108      	cbz	r0, 8008d70 <__cvt+0xa4>
 8008d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d70:	2230      	movs	r2, #48	; 0x30
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	454b      	cmp	r3, r9
 8008d76:	d307      	bcc.n	8008d88 <__cvt+0xbc>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d7c:	1bdb      	subs	r3, r3, r7
 8008d7e:	4638      	mov	r0, r7
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	b004      	add	sp, #16
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	1c59      	adds	r1, r3, #1
 8008d8a:	9103      	str	r1, [sp, #12]
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e7f0      	b.n	8008d72 <__cvt+0xa6>

08008d90 <__exponent>:
 8008d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d92:	4603      	mov	r3, r0
 8008d94:	2900      	cmp	r1, #0
 8008d96:	bfb8      	it	lt
 8008d98:	4249      	neglt	r1, r1
 8008d9a:	f803 2b02 	strb.w	r2, [r3], #2
 8008d9e:	bfb4      	ite	lt
 8008da0:	222d      	movlt	r2, #45	; 0x2d
 8008da2:	222b      	movge	r2, #43	; 0x2b
 8008da4:	2909      	cmp	r1, #9
 8008da6:	7042      	strb	r2, [r0, #1]
 8008da8:	dd2a      	ble.n	8008e00 <__exponent+0x70>
 8008daa:	f10d 0207 	add.w	r2, sp, #7
 8008dae:	4617      	mov	r7, r2
 8008db0:	260a      	movs	r6, #10
 8008db2:	4694      	mov	ip, r2
 8008db4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008db8:	fb06 1415 	mls	r4, r6, r5, r1
 8008dbc:	3430      	adds	r4, #48	; 0x30
 8008dbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2c63      	cmp	r4, #99	; 0x63
 8008dc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008dca:	4629      	mov	r1, r5
 8008dcc:	dcf1      	bgt.n	8008db2 <__exponent+0x22>
 8008dce:	3130      	adds	r1, #48	; 0x30
 8008dd0:	f1ac 0402 	sub.w	r4, ip, #2
 8008dd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008dd8:	1c41      	adds	r1, r0, #1
 8008dda:	4622      	mov	r2, r4
 8008ddc:	42ba      	cmp	r2, r7
 8008dde:	d30a      	bcc.n	8008df6 <__exponent+0x66>
 8008de0:	f10d 0209 	add.w	r2, sp, #9
 8008de4:	eba2 020c 	sub.w	r2, r2, ip
 8008de8:	42bc      	cmp	r4, r7
 8008dea:	bf88      	it	hi
 8008dec:	2200      	movhi	r2, #0
 8008dee:	4413      	add	r3, r2
 8008df0:	1a18      	subs	r0, r3, r0
 8008df2:	b003      	add	sp, #12
 8008df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008dfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008dfe:	e7ed      	b.n	8008ddc <__exponent+0x4c>
 8008e00:	2330      	movs	r3, #48	; 0x30
 8008e02:	3130      	adds	r1, #48	; 0x30
 8008e04:	7083      	strb	r3, [r0, #2]
 8008e06:	70c1      	strb	r1, [r0, #3]
 8008e08:	1d03      	adds	r3, r0, #4
 8008e0a:	e7f1      	b.n	8008df0 <__exponent+0x60>

08008e0c <_printf_float>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	ed2d 8b02 	vpush	{d8}
 8008e14:	b08d      	sub	sp, #52	; 0x34
 8008e16:	460c      	mov	r4, r1
 8008e18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e1c:	4616      	mov	r6, r2
 8008e1e:	461f      	mov	r7, r3
 8008e20:	4605      	mov	r5, r0
 8008e22:	f000 fce7 	bl	80097f4 <_localeconv_r>
 8008e26:	f8d0 a000 	ldr.w	sl, [r0]
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7f7 fa20 	bl	8000270 <strlen>
 8008e30:	2300      	movs	r3, #0
 8008e32:	930a      	str	r3, [sp, #40]	; 0x28
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e40:	3307      	adds	r3, #7
 8008e42:	f023 0307 	bic.w	r3, r3, #7
 8008e46:	f103 0208 	add.w	r2, r3, #8
 8008e4a:	f8c8 2000 	str.w	r2, [r8]
 8008e4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e5c:	ee08 0a10 	vmov	s16, r0
 8008e60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e68:	4b9e      	ldr	r3, [pc, #632]	; (80090e4 <_printf_float+0x2d8>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	f7f7 fe5d 	bl	8000b2c <__aeabi_dcmpun>
 8008e72:	bb88      	cbnz	r0, 8008ed8 <_printf_float+0xcc>
 8008e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e78:	4b9a      	ldr	r3, [pc, #616]	; (80090e4 <_printf_float+0x2d8>)
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7e:	f7f7 fe37 	bl	8000af0 <__aeabi_dcmple>
 8008e82:	bb48      	cbnz	r0, 8008ed8 <_printf_float+0xcc>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	f7f7 fe26 	bl	8000adc <__aeabi_dcmplt>
 8008e90:	b110      	cbz	r0, 8008e98 <_printf_float+0x8c>
 8008e92:	232d      	movs	r3, #45	; 0x2d
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	4a93      	ldr	r2, [pc, #588]	; (80090e8 <_printf_float+0x2dc>)
 8008e9a:	4b94      	ldr	r3, [pc, #592]	; (80090ec <_printf_float+0x2e0>)
 8008e9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ea0:	bf94      	ite	ls
 8008ea2:	4690      	movls	r8, r2
 8008ea4:	4698      	movhi	r8, r3
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	f023 0304 	bic.w	r3, r3, #4
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	f04f 0900 	mov.w	r9, #0
 8008eb6:	9700      	str	r7, [sp, #0]
 8008eb8:	4633      	mov	r3, r6
 8008eba:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f9da 	bl	8009278 <_printf_common>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f040 8090 	bne.w	8008fea <_printf_float+0x1de>
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	b00d      	add	sp, #52	; 0x34
 8008ed0:	ecbd 8b02 	vpop	{d8}
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fe24 	bl	8000b2c <__aeabi_dcmpun>
 8008ee4:	b140      	cbz	r0, 8008ef8 <_printf_float+0xec>
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfbc      	itt	lt
 8008eec:	232d      	movlt	r3, #45	; 0x2d
 8008eee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ef2:	4a7f      	ldr	r2, [pc, #508]	; (80090f0 <_printf_float+0x2e4>)
 8008ef4:	4b7f      	ldr	r3, [pc, #508]	; (80090f4 <_printf_float+0x2e8>)
 8008ef6:	e7d1      	b.n	8008e9c <_printf_float+0x90>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008efe:	9206      	str	r2, [sp, #24]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	d13f      	bne.n	8008f84 <_printf_float+0x178>
 8008f04:	2306      	movs	r3, #6
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	6861      	ldr	r1, [r4, #4]
 8008f0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f10:	2300      	movs	r3, #0
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	ab0a      	add	r3, sp, #40	; 0x28
 8008f16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f1a:	ab09      	add	r3, sp, #36	; 0x24
 8008f1c:	ec49 8b10 	vmov	d0, r8, r9
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f7ff fecf 	bl	8008ccc <__cvt>
 8008f2e:	9b06      	ldr	r3, [sp, #24]
 8008f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f32:	2b47      	cmp	r3, #71	; 0x47
 8008f34:	4680      	mov	r8, r0
 8008f36:	d108      	bne.n	8008f4a <_printf_float+0x13e>
 8008f38:	1cc8      	adds	r0, r1, #3
 8008f3a:	db02      	blt.n	8008f42 <_printf_float+0x136>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	dd41      	ble.n	8008fc6 <_printf_float+0x1ba>
 8008f42:	f1ab 0302 	sub.w	r3, fp, #2
 8008f46:	fa5f fb83 	uxtb.w	fp, r3
 8008f4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f4e:	d820      	bhi.n	8008f92 <_printf_float+0x186>
 8008f50:	3901      	subs	r1, #1
 8008f52:	465a      	mov	r2, fp
 8008f54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f58:	9109      	str	r1, [sp, #36]	; 0x24
 8008f5a:	f7ff ff19 	bl	8008d90 <__exponent>
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f60:	1813      	adds	r3, r2, r0
 8008f62:	2a01      	cmp	r2, #1
 8008f64:	4681      	mov	r9, r0
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	dc02      	bgt.n	8008f70 <_printf_float+0x164>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	07d2      	lsls	r2, r2, #31
 8008f6e:	d501      	bpl.n	8008f74 <_printf_float+0x168>
 8008f70:	3301      	adds	r3, #1
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d09c      	beq.n	8008eb6 <_printf_float+0xaa>
 8008f7c:	232d      	movs	r3, #45	; 0x2d
 8008f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f82:	e798      	b.n	8008eb6 <_printf_float+0xaa>
 8008f84:	9a06      	ldr	r2, [sp, #24]
 8008f86:	2a47      	cmp	r2, #71	; 0x47
 8008f88:	d1be      	bne.n	8008f08 <_printf_float+0xfc>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1bc      	bne.n	8008f08 <_printf_float+0xfc>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e7b9      	b.n	8008f06 <_printf_float+0xfa>
 8008f92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f96:	d118      	bne.n	8008fca <_printf_float+0x1be>
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	dd0b      	ble.n	8008fb6 <_printf_float+0x1aa>
 8008f9e:	6121      	str	r1, [r4, #16]
 8008fa0:	b913      	cbnz	r3, 8008fa8 <_printf_float+0x19c>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	07d0      	lsls	r0, r2, #31
 8008fa6:	d502      	bpl.n	8008fae <_printf_float+0x1a2>
 8008fa8:	3301      	adds	r3, #1
 8008faa:	440b      	add	r3, r1
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fb0:	f04f 0900 	mov.w	r9, #0
 8008fb4:	e7de      	b.n	8008f74 <_printf_float+0x168>
 8008fb6:	b913      	cbnz	r3, 8008fbe <_printf_float+0x1b2>
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	07d2      	lsls	r2, r2, #31
 8008fbc:	d501      	bpl.n	8008fc2 <_printf_float+0x1b6>
 8008fbe:	3302      	adds	r3, #2
 8008fc0:	e7f4      	b.n	8008fac <_printf_float+0x1a0>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7f2      	b.n	8008fac <_printf_float+0x1a0>
 8008fc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	db05      	blt.n	8008fdc <_printf_float+0x1d0>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	6121      	str	r1, [r4, #16]
 8008fd4:	07d8      	lsls	r0, r3, #31
 8008fd6:	d5ea      	bpl.n	8008fae <_printf_float+0x1a2>
 8008fd8:	1c4b      	adds	r3, r1, #1
 8008fda:	e7e7      	b.n	8008fac <_printf_float+0x1a0>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	bfd4      	ite	le
 8008fe0:	f1c1 0202 	rsble	r2, r1, #2
 8008fe4:	2201      	movgt	r2, #1
 8008fe6:	4413      	add	r3, r2
 8008fe8:	e7e0      	b.n	8008fac <_printf_float+0x1a0>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	055a      	lsls	r2, r3, #21
 8008fee:	d407      	bmi.n	8009000 <_printf_float+0x1f4>
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d12c      	bne.n	8009058 <_printf_float+0x24c>
 8008ffe:	e764      	b.n	8008eca <_printf_float+0xbe>
 8009000:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009004:	f240 80e0 	bls.w	80091c8 <_printf_float+0x3bc>
 8009008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	f7f7 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009014:	2800      	cmp	r0, #0
 8009016:	d034      	beq.n	8009082 <_printf_float+0x276>
 8009018:	4a37      	ldr	r2, [pc, #220]	; (80090f8 <_printf_float+0x2ec>)
 800901a:	2301      	movs	r3, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af51 	beq.w	8008eca <_printf_float+0xbe>
 8009028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800902c:	429a      	cmp	r2, r3
 800902e:	db02      	blt.n	8009036 <_printf_float+0x22a>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07d8      	lsls	r0, r3, #31
 8009034:	d510      	bpl.n	8009058 <_printf_float+0x24c>
 8009036:	ee18 3a10 	vmov	r3, s16
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f af41 	beq.w	8008eca <_printf_float+0xbe>
 8009048:	f04f 0800 	mov.w	r8, #0
 800904c:	f104 091a 	add.w	r9, r4, #26
 8009050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009052:	3b01      	subs	r3, #1
 8009054:	4543      	cmp	r3, r8
 8009056:	dc09      	bgt.n	800906c <_printf_float+0x260>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	f100 8107 	bmi.w	800926e <_printf_float+0x462>
 8009060:	68e0      	ldr	r0, [r4, #12]
 8009062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009064:	4298      	cmp	r0, r3
 8009066:	bfb8      	it	lt
 8009068:	4618      	movlt	r0, r3
 800906a:	e730      	b.n	8008ece <_printf_float+0xc2>
 800906c:	2301      	movs	r3, #1
 800906e:	464a      	mov	r2, r9
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f af27 	beq.w	8008eca <_printf_float+0xbe>
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	e7e6      	b.n	8009050 <_printf_float+0x244>
 8009082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc39      	bgt.n	80090fc <_printf_float+0x2f0>
 8009088:	4a1b      	ldr	r2, [pc, #108]	; (80090f8 <_printf_float+0x2ec>)
 800908a:	2301      	movs	r3, #1
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f af19 	beq.w	8008eca <_printf_float+0xbe>
 8009098:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800909c:	4313      	orrs	r3, r2
 800909e:	d102      	bne.n	80090a6 <_printf_float+0x29a>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07d9      	lsls	r1, r3, #31
 80090a4:	d5d8      	bpl.n	8009058 <_printf_float+0x24c>
 80090a6:	ee18 3a10 	vmov	r3, s16
 80090aa:	4652      	mov	r2, sl
 80090ac:	4631      	mov	r1, r6
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f af09 	beq.w	8008eca <_printf_float+0xbe>
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	f104 0a1a 	add.w	sl, r4, #26
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	425b      	negs	r3, r3
 80090c4:	454b      	cmp	r3, r9
 80090c6:	dc01      	bgt.n	80090cc <_printf_float+0x2c0>
 80090c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ca:	e792      	b.n	8008ff2 <_printf_float+0x1e6>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4652      	mov	r2, sl
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f aef7 	beq.w	8008eca <_printf_float+0xbe>
 80090dc:	f109 0901 	add.w	r9, r9, #1
 80090e0:	e7ee      	b.n	80090c0 <_printf_float+0x2b4>
 80090e2:	bf00      	nop
 80090e4:	7fefffff 	.word	0x7fefffff
 80090e8:	0800ba70 	.word	0x0800ba70
 80090ec:	0800ba74 	.word	0x0800ba74
 80090f0:	0800ba78 	.word	0x0800ba78
 80090f4:	0800ba7c 	.word	0x0800ba7c
 80090f8:	0800ba80 	.word	0x0800ba80
 80090fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009100:	429a      	cmp	r2, r3
 8009102:	bfa8      	it	ge
 8009104:	461a      	movge	r2, r3
 8009106:	2a00      	cmp	r2, #0
 8009108:	4691      	mov	r9, r2
 800910a:	dc37      	bgt.n	800917c <_printf_float+0x370>
 800910c:	f04f 0b00 	mov.w	fp, #0
 8009110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009114:	f104 021a 	add.w	r2, r4, #26
 8009118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	eba3 0309 	sub.w	r3, r3, r9
 8009120:	455b      	cmp	r3, fp
 8009122:	dc33      	bgt.n	800918c <_printf_float+0x380>
 8009124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009128:	429a      	cmp	r2, r3
 800912a:	db3b      	blt.n	80091a4 <_printf_float+0x398>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	07da      	lsls	r2, r3, #31
 8009130:	d438      	bmi.n	80091a4 <_printf_float+0x398>
 8009132:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009136:	eba2 0903 	sub.w	r9, r2, r3
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	1ad2      	subs	r2, r2, r3
 800913e:	4591      	cmp	r9, r2
 8009140:	bfa8      	it	ge
 8009142:	4691      	movge	r9, r2
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	dc35      	bgt.n	80091b6 <_printf_float+0x3aa>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009152:	f104 0a1a 	add.w	sl, r4, #26
 8009156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	eba3 0309 	sub.w	r3, r3, r9
 8009160:	4543      	cmp	r3, r8
 8009162:	f77f af79 	ble.w	8009058 <_printf_float+0x24c>
 8009166:	2301      	movs	r3, #1
 8009168:	4652      	mov	r2, sl
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	f43f aeaa 	beq.w	8008eca <_printf_float+0xbe>
 8009176:	f108 0801 	add.w	r8, r8, #1
 800917a:	e7ec      	b.n	8009156 <_printf_float+0x34a>
 800917c:	4613      	mov	r3, r2
 800917e:	4631      	mov	r1, r6
 8009180:	4642      	mov	r2, r8
 8009182:	4628      	mov	r0, r5
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	d1c0      	bne.n	800910c <_printf_float+0x300>
 800918a:	e69e      	b.n	8008eca <_printf_float+0xbe>
 800918c:	2301      	movs	r3, #1
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	9205      	str	r2, [sp, #20]
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f ae97 	beq.w	8008eca <_printf_float+0xbe>
 800919c:	9a05      	ldr	r2, [sp, #20]
 800919e:	f10b 0b01 	add.w	fp, fp, #1
 80091a2:	e7b9      	b.n	8009118 <_printf_float+0x30c>
 80091a4:	ee18 3a10 	vmov	r3, s16
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	d1be      	bne.n	8009132 <_printf_float+0x326>
 80091b4:	e689      	b.n	8008eca <_printf_float+0xbe>
 80091b6:	9a05      	ldr	r2, [sp, #20]
 80091b8:	464b      	mov	r3, r9
 80091ba:	4442      	add	r2, r8
 80091bc:	4631      	mov	r1, r6
 80091be:	4628      	mov	r0, r5
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	d1c1      	bne.n	800914a <_printf_float+0x33e>
 80091c6:	e680      	b.n	8008eca <_printf_float+0xbe>
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	dc01      	bgt.n	80091d2 <_printf_float+0x3c6>
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d53a      	bpl.n	8009248 <_printf_float+0x43c>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4642      	mov	r2, r8
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f ae74 	beq.w	8008eca <_printf_float+0xbe>
 80091e2:	ee18 3a10 	vmov	r3, s16
 80091e6:	4652      	mov	r2, sl
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f ae6b 	beq.w	8008eca <_printf_float+0xbe>
 80091f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091f8:	2200      	movs	r2, #0
 80091fa:	2300      	movs	r3, #0
 80091fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009200:	f7f7 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009204:	b9d8      	cbnz	r0, 800923e <_printf_float+0x432>
 8009206:	f10a 33ff 	add.w	r3, sl, #4294967295
 800920a:	f108 0201 	add.w	r2, r8, #1
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	d10e      	bne.n	8009236 <_printf_float+0x42a>
 8009218:	e657      	b.n	8008eca <_printf_float+0xbe>
 800921a:	2301      	movs	r3, #1
 800921c:	4652      	mov	r2, sl
 800921e:	4631      	mov	r1, r6
 8009220:	4628      	mov	r0, r5
 8009222:	47b8      	blx	r7
 8009224:	3001      	adds	r0, #1
 8009226:	f43f ae50 	beq.w	8008eca <_printf_float+0xbe>
 800922a:	f108 0801 	add.w	r8, r8, #1
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	3b01      	subs	r3, #1
 8009232:	4543      	cmp	r3, r8
 8009234:	dcf1      	bgt.n	800921a <_printf_float+0x40e>
 8009236:	464b      	mov	r3, r9
 8009238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800923c:	e6da      	b.n	8008ff4 <_printf_float+0x1e8>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	f104 0a1a 	add.w	sl, r4, #26
 8009246:	e7f2      	b.n	800922e <_printf_float+0x422>
 8009248:	2301      	movs	r3, #1
 800924a:	4642      	mov	r2, r8
 800924c:	e7df      	b.n	800920e <_printf_float+0x402>
 800924e:	2301      	movs	r3, #1
 8009250:	464a      	mov	r2, r9
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	f43f ae36 	beq.w	8008eca <_printf_float+0xbe>
 800925e:	f108 0801 	add.w	r8, r8, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	4543      	cmp	r3, r8
 800926a:	dcf0      	bgt.n	800924e <_printf_float+0x442>
 800926c:	e6f8      	b.n	8009060 <_printf_float+0x254>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	f104 0919 	add.w	r9, r4, #25
 8009276:	e7f4      	b.n	8009262 <_printf_float+0x456>

08009278 <_printf_common>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	4616      	mov	r6, r2
 800927e:	4699      	mov	r9, r3
 8009280:	688a      	ldr	r2, [r1, #8]
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009288:	4293      	cmp	r3, r2
 800928a:	bfb8      	it	lt
 800928c:	4613      	movlt	r3, r2
 800928e:	6033      	str	r3, [r6, #0]
 8009290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009294:	4607      	mov	r7, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b10a      	cbz	r2, 800929e <_printf_common+0x26>
 800929a:	3301      	adds	r3, #1
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	0699      	lsls	r1, r3, #26
 80092a2:	bf42      	ittt	mi
 80092a4:	6833      	ldrmi	r3, [r6, #0]
 80092a6:	3302      	addmi	r3, #2
 80092a8:	6033      	strmi	r3, [r6, #0]
 80092aa:	6825      	ldr	r5, [r4, #0]
 80092ac:	f015 0506 	ands.w	r5, r5, #6
 80092b0:	d106      	bne.n	80092c0 <_printf_common+0x48>
 80092b2:	f104 0a19 	add.w	sl, r4, #25
 80092b6:	68e3      	ldr	r3, [r4, #12]
 80092b8:	6832      	ldr	r2, [r6, #0]
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	42ab      	cmp	r3, r5
 80092be:	dc26      	bgt.n	800930e <_printf_common+0x96>
 80092c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092c4:	1e13      	subs	r3, r2, #0
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	bf18      	it	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	0692      	lsls	r2, r2, #26
 80092ce:	d42b      	bmi.n	8009328 <_printf_common+0xb0>
 80092d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092d4:	4649      	mov	r1, r9
 80092d6:	4638      	mov	r0, r7
 80092d8:	47c0      	blx	r8
 80092da:	3001      	adds	r0, #1
 80092dc:	d01e      	beq.n	800931c <_printf_common+0xa4>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	f003 0306 	and.w	r3, r3, #6
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	bf02      	ittt	eq
 80092ea:	68e5      	ldreq	r5, [r4, #12]
 80092ec:	6833      	ldreq	r3, [r6, #0]
 80092ee:	1aed      	subeq	r5, r5, r3
 80092f0:	68a3      	ldr	r3, [r4, #8]
 80092f2:	bf0c      	ite	eq
 80092f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f8:	2500      	movne	r5, #0
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bfc4      	itt	gt
 80092fe:	1a9b      	subgt	r3, r3, r2
 8009300:	18ed      	addgt	r5, r5, r3
 8009302:	2600      	movs	r6, #0
 8009304:	341a      	adds	r4, #26
 8009306:	42b5      	cmp	r5, r6
 8009308:	d11a      	bne.n	8009340 <_printf_common+0xc8>
 800930a:	2000      	movs	r0, #0
 800930c:	e008      	b.n	8009320 <_printf_common+0xa8>
 800930e:	2301      	movs	r3, #1
 8009310:	4652      	mov	r2, sl
 8009312:	4649      	mov	r1, r9
 8009314:	4638      	mov	r0, r7
 8009316:	47c0      	blx	r8
 8009318:	3001      	adds	r0, #1
 800931a:	d103      	bne.n	8009324 <_printf_common+0xac>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	3501      	adds	r5, #1
 8009326:	e7c6      	b.n	80092b6 <_printf_common+0x3e>
 8009328:	18e1      	adds	r1, r4, r3
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	2030      	movs	r0, #48	; 0x30
 800932e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009332:	4422      	add	r2, r4
 8009334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800933c:	3302      	adds	r3, #2
 800933e:	e7c7      	b.n	80092d0 <_printf_common+0x58>
 8009340:	2301      	movs	r3, #1
 8009342:	4622      	mov	r2, r4
 8009344:	4649      	mov	r1, r9
 8009346:	4638      	mov	r0, r7
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d0e6      	beq.n	800931c <_printf_common+0xa4>
 800934e:	3601      	adds	r6, #1
 8009350:	e7d9      	b.n	8009306 <_printf_common+0x8e>
	...

08009354 <_printf_i>:
 8009354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	7e0f      	ldrb	r7, [r1, #24]
 800935a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800935c:	2f78      	cmp	r7, #120	; 0x78
 800935e:	4691      	mov	r9, r2
 8009360:	4680      	mov	r8, r0
 8009362:	460c      	mov	r4, r1
 8009364:	469a      	mov	sl, r3
 8009366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800936a:	d807      	bhi.n	800937c <_printf_i+0x28>
 800936c:	2f62      	cmp	r7, #98	; 0x62
 800936e:	d80a      	bhi.n	8009386 <_printf_i+0x32>
 8009370:	2f00      	cmp	r7, #0
 8009372:	f000 80d4 	beq.w	800951e <_printf_i+0x1ca>
 8009376:	2f58      	cmp	r7, #88	; 0x58
 8009378:	f000 80c0 	beq.w	80094fc <_printf_i+0x1a8>
 800937c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009384:	e03a      	b.n	80093fc <_printf_i+0xa8>
 8009386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800938a:	2b15      	cmp	r3, #21
 800938c:	d8f6      	bhi.n	800937c <_printf_i+0x28>
 800938e:	a101      	add	r1, pc, #4	; (adr r1, 8009394 <_printf_i+0x40>)
 8009390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009394:	080093ed 	.word	0x080093ed
 8009398:	08009401 	.word	0x08009401
 800939c:	0800937d 	.word	0x0800937d
 80093a0:	0800937d 	.word	0x0800937d
 80093a4:	0800937d 	.word	0x0800937d
 80093a8:	0800937d 	.word	0x0800937d
 80093ac:	08009401 	.word	0x08009401
 80093b0:	0800937d 	.word	0x0800937d
 80093b4:	0800937d 	.word	0x0800937d
 80093b8:	0800937d 	.word	0x0800937d
 80093bc:	0800937d 	.word	0x0800937d
 80093c0:	08009505 	.word	0x08009505
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080094bf 	.word	0x080094bf
 80093cc:	0800937d 	.word	0x0800937d
 80093d0:	0800937d 	.word	0x0800937d
 80093d4:	08009527 	.word	0x08009527
 80093d8:	0800937d 	.word	0x0800937d
 80093dc:	0800942d 	.word	0x0800942d
 80093e0:	0800937d 	.word	0x0800937d
 80093e4:	0800937d 	.word	0x0800937d
 80093e8:	080094c7 	.word	0x080094c7
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	602a      	str	r2, [r5, #0]
 80093f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093fc:	2301      	movs	r3, #1
 80093fe:	e09f      	b.n	8009540 <_printf_i+0x1ec>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	0607      	lsls	r7, r0, #24
 8009406:	f103 0104 	add.w	r1, r3, #4
 800940a:	6029      	str	r1, [r5, #0]
 800940c:	d501      	bpl.n	8009412 <_printf_i+0xbe>
 800940e:	681e      	ldr	r6, [r3, #0]
 8009410:	e003      	b.n	800941a <_printf_i+0xc6>
 8009412:	0646      	lsls	r6, r0, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0xba>
 8009416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800941a:	2e00      	cmp	r6, #0
 800941c:	da03      	bge.n	8009426 <_printf_i+0xd2>
 800941e:	232d      	movs	r3, #45	; 0x2d
 8009420:	4276      	negs	r6, r6
 8009422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009426:	485a      	ldr	r0, [pc, #360]	; (8009590 <_printf_i+0x23c>)
 8009428:	230a      	movs	r3, #10
 800942a:	e012      	b.n	8009452 <_printf_i+0xfe>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	1d19      	adds	r1, r3, #4
 8009432:	6029      	str	r1, [r5, #0]
 8009434:	0605      	lsls	r5, r0, #24
 8009436:	d501      	bpl.n	800943c <_printf_i+0xe8>
 8009438:	681e      	ldr	r6, [r3, #0]
 800943a:	e002      	b.n	8009442 <_printf_i+0xee>
 800943c:	0641      	lsls	r1, r0, #25
 800943e:	d5fb      	bpl.n	8009438 <_printf_i+0xe4>
 8009440:	881e      	ldrh	r6, [r3, #0]
 8009442:	4853      	ldr	r0, [pc, #332]	; (8009590 <_printf_i+0x23c>)
 8009444:	2f6f      	cmp	r7, #111	; 0x6f
 8009446:	bf0c      	ite	eq
 8009448:	2308      	moveq	r3, #8
 800944a:	230a      	movne	r3, #10
 800944c:	2100      	movs	r1, #0
 800944e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009452:	6865      	ldr	r5, [r4, #4]
 8009454:	60a5      	str	r5, [r4, #8]
 8009456:	2d00      	cmp	r5, #0
 8009458:	bfa2      	ittt	ge
 800945a:	6821      	ldrge	r1, [r4, #0]
 800945c:	f021 0104 	bicge.w	r1, r1, #4
 8009460:	6021      	strge	r1, [r4, #0]
 8009462:	b90e      	cbnz	r6, 8009468 <_printf_i+0x114>
 8009464:	2d00      	cmp	r5, #0
 8009466:	d04b      	beq.n	8009500 <_printf_i+0x1ac>
 8009468:	4615      	mov	r5, r2
 800946a:	fbb6 f1f3 	udiv	r1, r6, r3
 800946e:	fb03 6711 	mls	r7, r3, r1, r6
 8009472:	5dc7      	ldrb	r7, [r0, r7]
 8009474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009478:	4637      	mov	r7, r6
 800947a:	42bb      	cmp	r3, r7
 800947c:	460e      	mov	r6, r1
 800947e:	d9f4      	bls.n	800946a <_printf_i+0x116>
 8009480:	2b08      	cmp	r3, #8
 8009482:	d10b      	bne.n	800949c <_printf_i+0x148>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	07de      	lsls	r6, r3, #31
 8009488:	d508      	bpl.n	800949c <_printf_i+0x148>
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	4299      	cmp	r1, r3
 8009490:	bfde      	ittt	le
 8009492:	2330      	movle	r3, #48	; 0x30
 8009494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800949c:	1b52      	subs	r2, r2, r5
 800949e:	6122      	str	r2, [r4, #16]
 80094a0:	f8cd a000 	str.w	sl, [sp]
 80094a4:	464b      	mov	r3, r9
 80094a6:	aa03      	add	r2, sp, #12
 80094a8:	4621      	mov	r1, r4
 80094aa:	4640      	mov	r0, r8
 80094ac:	f7ff fee4 	bl	8009278 <_printf_common>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d14a      	bne.n	800954a <_printf_i+0x1f6>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	b004      	add	sp, #16
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	f043 0320 	orr.w	r3, r3, #32
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	4833      	ldr	r0, [pc, #204]	; (8009594 <_printf_i+0x240>)
 80094c8:	2778      	movs	r7, #120	; 0x78
 80094ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	6829      	ldr	r1, [r5, #0]
 80094d2:	061f      	lsls	r7, r3, #24
 80094d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094d8:	d402      	bmi.n	80094e0 <_printf_i+0x18c>
 80094da:	065f      	lsls	r7, r3, #25
 80094dc:	bf48      	it	mi
 80094de:	b2b6      	uxthmi	r6, r6
 80094e0:	07df      	lsls	r7, r3, #31
 80094e2:	bf48      	it	mi
 80094e4:	f043 0320 	orrmi.w	r3, r3, #32
 80094e8:	6029      	str	r1, [r5, #0]
 80094ea:	bf48      	it	mi
 80094ec:	6023      	strmi	r3, [r4, #0]
 80094ee:	b91e      	cbnz	r6, 80094f8 <_printf_i+0x1a4>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	f023 0320 	bic.w	r3, r3, #32
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	2310      	movs	r3, #16
 80094fa:	e7a7      	b.n	800944c <_printf_i+0xf8>
 80094fc:	4824      	ldr	r0, [pc, #144]	; (8009590 <_printf_i+0x23c>)
 80094fe:	e7e4      	b.n	80094ca <_printf_i+0x176>
 8009500:	4615      	mov	r5, r2
 8009502:	e7bd      	b.n	8009480 <_printf_i+0x12c>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	6826      	ldr	r6, [r4, #0]
 8009508:	6961      	ldr	r1, [r4, #20]
 800950a:	1d18      	adds	r0, r3, #4
 800950c:	6028      	str	r0, [r5, #0]
 800950e:	0635      	lsls	r5, r6, #24
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	d501      	bpl.n	8009518 <_printf_i+0x1c4>
 8009514:	6019      	str	r1, [r3, #0]
 8009516:	e002      	b.n	800951e <_printf_i+0x1ca>
 8009518:	0670      	lsls	r0, r6, #25
 800951a:	d5fb      	bpl.n	8009514 <_printf_i+0x1c0>
 800951c:	8019      	strh	r1, [r3, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	4615      	mov	r5, r2
 8009524:	e7bc      	b.n	80094a0 <_printf_i+0x14c>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	1d1a      	adds	r2, r3, #4
 800952a:	602a      	str	r2, [r5, #0]
 800952c:	681d      	ldr	r5, [r3, #0]
 800952e:	6862      	ldr	r2, [r4, #4]
 8009530:	2100      	movs	r1, #0
 8009532:	4628      	mov	r0, r5
 8009534:	f7f6 fe4c 	bl	80001d0 <memchr>
 8009538:	b108      	cbz	r0, 800953e <_printf_i+0x1ea>
 800953a:	1b40      	subs	r0, r0, r5
 800953c:	6060      	str	r0, [r4, #4]
 800953e:	6863      	ldr	r3, [r4, #4]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	2300      	movs	r3, #0
 8009544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009548:	e7aa      	b.n	80094a0 <_printf_i+0x14c>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	462a      	mov	r2, r5
 800954e:	4649      	mov	r1, r9
 8009550:	4640      	mov	r0, r8
 8009552:	47d0      	blx	sl
 8009554:	3001      	adds	r0, #1
 8009556:	d0ad      	beq.n	80094b4 <_printf_i+0x160>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	079b      	lsls	r3, r3, #30
 800955c:	d413      	bmi.n	8009586 <_printf_i+0x232>
 800955e:	68e0      	ldr	r0, [r4, #12]
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	4298      	cmp	r0, r3
 8009564:	bfb8      	it	lt
 8009566:	4618      	movlt	r0, r3
 8009568:	e7a6      	b.n	80094b8 <_printf_i+0x164>
 800956a:	2301      	movs	r3, #1
 800956c:	4632      	mov	r2, r6
 800956e:	4649      	mov	r1, r9
 8009570:	4640      	mov	r0, r8
 8009572:	47d0      	blx	sl
 8009574:	3001      	adds	r0, #1
 8009576:	d09d      	beq.n	80094b4 <_printf_i+0x160>
 8009578:	3501      	adds	r5, #1
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	9903      	ldr	r1, [sp, #12]
 800957e:	1a5b      	subs	r3, r3, r1
 8009580:	42ab      	cmp	r3, r5
 8009582:	dcf2      	bgt.n	800956a <_printf_i+0x216>
 8009584:	e7eb      	b.n	800955e <_printf_i+0x20a>
 8009586:	2500      	movs	r5, #0
 8009588:	f104 0619 	add.w	r6, r4, #25
 800958c:	e7f5      	b.n	800957a <_printf_i+0x226>
 800958e:	bf00      	nop
 8009590:	0800ba82 	.word	0x0800ba82
 8009594:	0800ba93 	.word	0x0800ba93

08009598 <std>:
 8009598:	2300      	movs	r3, #0
 800959a:	b510      	push	{r4, lr}
 800959c:	4604      	mov	r4, r0
 800959e:	e9c0 3300 	strd	r3, r3, [r0]
 80095a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095a6:	6083      	str	r3, [r0, #8]
 80095a8:	8181      	strh	r1, [r0, #12]
 80095aa:	6643      	str	r3, [r0, #100]	; 0x64
 80095ac:	81c2      	strh	r2, [r0, #14]
 80095ae:	6183      	str	r3, [r0, #24]
 80095b0:	4619      	mov	r1, r3
 80095b2:	2208      	movs	r2, #8
 80095b4:	305c      	adds	r0, #92	; 0x5c
 80095b6:	f000 f914 	bl	80097e2 <memset>
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <std+0x58>)
 80095bc:	6263      	str	r3, [r4, #36]	; 0x24
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <std+0x5c>)
 80095c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <std+0x60>)
 80095c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <std+0x64>)
 80095c8:	6323      	str	r3, [r4, #48]	; 0x30
 80095ca:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <std+0x68>)
 80095cc:	6224      	str	r4, [r4, #32]
 80095ce:	429c      	cmp	r4, r3
 80095d0:	d006      	beq.n	80095e0 <std+0x48>
 80095d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80095d6:	4294      	cmp	r4, r2
 80095d8:	d002      	beq.n	80095e0 <std+0x48>
 80095da:	33d0      	adds	r3, #208	; 0xd0
 80095dc:	429c      	cmp	r4, r3
 80095de:	d105      	bne.n	80095ec <std+0x54>
 80095e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	f000 b978 	b.w	80098dc <__retarget_lock_init_recursive>
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	0800975d 	.word	0x0800975d
 80095f4:	0800977f 	.word	0x0800977f
 80095f8:	080097b7 	.word	0x080097b7
 80095fc:	080097db 	.word	0x080097db
 8009600:	20001f7c 	.word	0x20001f7c

08009604 <stdio_exit_handler>:
 8009604:	4a02      	ldr	r2, [pc, #8]	; (8009610 <stdio_exit_handler+0xc>)
 8009606:	4903      	ldr	r1, [pc, #12]	; (8009614 <stdio_exit_handler+0x10>)
 8009608:	4803      	ldr	r0, [pc, #12]	; (8009618 <stdio_exit_handler+0x14>)
 800960a:	f000 b869 	b.w	80096e0 <_fwalk_sglue>
 800960e:	bf00      	nop
 8009610:	200000fc 	.word	0x200000fc
 8009614:	0800b291 	.word	0x0800b291
 8009618:	20000108 	.word	0x20000108

0800961c <cleanup_stdio>:
 800961c:	6841      	ldr	r1, [r0, #4]
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <cleanup_stdio+0x34>)
 8009620:	4299      	cmp	r1, r3
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	d001      	beq.n	800962c <cleanup_stdio+0x10>
 8009628:	f001 fe32 	bl	800b290 <_fflush_r>
 800962c:	68a1      	ldr	r1, [r4, #8]
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <cleanup_stdio+0x38>)
 8009630:	4299      	cmp	r1, r3
 8009632:	d002      	beq.n	800963a <cleanup_stdio+0x1e>
 8009634:	4620      	mov	r0, r4
 8009636:	f001 fe2b 	bl	800b290 <_fflush_r>
 800963a:	68e1      	ldr	r1, [r4, #12]
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <cleanup_stdio+0x3c>)
 800963e:	4299      	cmp	r1, r3
 8009640:	d004      	beq.n	800964c <cleanup_stdio+0x30>
 8009642:	4620      	mov	r0, r4
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f001 be22 	b.w	800b290 <_fflush_r>
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	20001f7c 	.word	0x20001f7c
 8009654:	20001fe4 	.word	0x20001fe4
 8009658:	2000204c 	.word	0x2000204c

0800965c <global_stdio_init.part.0>:
 800965c:	b510      	push	{r4, lr}
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <global_stdio_init.part.0+0x30>)
 8009660:	4c0b      	ldr	r4, [pc, #44]	; (8009690 <global_stdio_init.part.0+0x34>)
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <global_stdio_init.part.0+0x38>)
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	4620      	mov	r0, r4
 8009668:	2200      	movs	r2, #0
 800966a:	2104      	movs	r1, #4
 800966c:	f7ff ff94 	bl	8009598 <std>
 8009670:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009674:	2201      	movs	r2, #1
 8009676:	2109      	movs	r1, #9
 8009678:	f7ff ff8e 	bl	8009598 <std>
 800967c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009680:	2202      	movs	r2, #2
 8009682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff bf86 	b.w	8009598 <std>
 800968c:	200020b4 	.word	0x200020b4
 8009690:	20001f7c 	.word	0x20001f7c
 8009694:	08009605 	.word	0x08009605

08009698 <__sfp_lock_acquire>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sfp_lock_acquire+0x8>)
 800969a:	f000 b920 	b.w	80098de <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	200020bd 	.word	0x200020bd

080096a4 <__sfp_lock_release>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sfp_lock_release+0x8>)
 80096a6:	f000 b91b 	b.w	80098e0 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	200020bd 	.word	0x200020bd

080096b0 <__sinit>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4604      	mov	r4, r0
 80096b4:	f7ff fff0 	bl	8009698 <__sfp_lock_acquire>
 80096b8:	6a23      	ldr	r3, [r4, #32]
 80096ba:	b11b      	cbz	r3, 80096c4 <__sinit+0x14>
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f7ff bff0 	b.w	80096a4 <__sfp_lock_release>
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <__sinit+0x28>)
 80096c6:	6223      	str	r3, [r4, #32]
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <__sinit+0x2c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f5      	bne.n	80096bc <__sinit+0xc>
 80096d0:	f7ff ffc4 	bl	800965c <global_stdio_init.part.0>
 80096d4:	e7f2      	b.n	80096bc <__sinit+0xc>
 80096d6:	bf00      	nop
 80096d8:	0800961d 	.word	0x0800961d
 80096dc:	200020b4 	.word	0x200020b4

080096e0 <_fwalk_sglue>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	4607      	mov	r7, r0
 80096e6:	4688      	mov	r8, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	2600      	movs	r6, #0
 80096ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096f0:	f1b9 0901 	subs.w	r9, r9, #1
 80096f4:	d505      	bpl.n	8009702 <_fwalk_sglue+0x22>
 80096f6:	6824      	ldr	r4, [r4, #0]
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	d1f7      	bne.n	80096ec <_fwalk_sglue+0xc>
 80096fc:	4630      	mov	r0, r6
 80096fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d907      	bls.n	8009718 <_fwalk_sglue+0x38>
 8009708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800970c:	3301      	adds	r3, #1
 800970e:	d003      	beq.n	8009718 <_fwalk_sglue+0x38>
 8009710:	4629      	mov	r1, r5
 8009712:	4638      	mov	r0, r7
 8009714:	47c0      	blx	r8
 8009716:	4306      	orrs	r6, r0
 8009718:	3568      	adds	r5, #104	; 0x68
 800971a:	e7e9      	b.n	80096f0 <_fwalk_sglue+0x10>

0800971c <siprintf>:
 800971c:	b40e      	push	{r1, r2, r3}
 800971e:	b500      	push	{lr}
 8009720:	b09c      	sub	sp, #112	; 0x70
 8009722:	ab1d      	add	r3, sp, #116	; 0x74
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	9006      	str	r0, [sp, #24]
 8009728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800972c:	4809      	ldr	r0, [pc, #36]	; (8009754 <siprintf+0x38>)
 800972e:	9107      	str	r1, [sp, #28]
 8009730:	9104      	str	r1, [sp, #16]
 8009732:	4909      	ldr	r1, [pc, #36]	; (8009758 <siprintf+0x3c>)
 8009734:	f853 2b04 	ldr.w	r2, [r3], #4
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	a902      	add	r1, sp, #8
 8009740:	f001 fc22 	bl	800af88 <_svfiprintf_r>
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
 800974a:	b01c      	add	sp, #112	; 0x70
 800974c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009750:	b003      	add	sp, #12
 8009752:	4770      	bx	lr
 8009754:	20000154 	.word	0x20000154
 8009758:	ffff0208 	.word	0xffff0208

0800975c <__sread>:
 800975c:	b510      	push	{r4, lr}
 800975e:	460c      	mov	r4, r1
 8009760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009764:	f000 f86c 	bl	8009840 <_read_r>
 8009768:	2800      	cmp	r0, #0
 800976a:	bfab      	itete	ge
 800976c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800976e:	89a3      	ldrhlt	r3, [r4, #12]
 8009770:	181b      	addge	r3, r3, r0
 8009772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009776:	bfac      	ite	ge
 8009778:	6563      	strge	r3, [r4, #84]	; 0x54
 800977a:	81a3      	strhlt	r3, [r4, #12]
 800977c:	bd10      	pop	{r4, pc}

0800977e <__swrite>:
 800977e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009782:	461f      	mov	r7, r3
 8009784:	898b      	ldrh	r3, [r1, #12]
 8009786:	05db      	lsls	r3, r3, #23
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	4616      	mov	r6, r2
 800978e:	d505      	bpl.n	800979c <__swrite+0x1e>
 8009790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009794:	2302      	movs	r3, #2
 8009796:	2200      	movs	r2, #0
 8009798:	f000 f840 	bl	800981c <_lseek_r>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	4632      	mov	r2, r6
 80097aa:	463b      	mov	r3, r7
 80097ac:	4628      	mov	r0, r5
 80097ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b2:	f000 b857 	b.w	8009864 <_write_r>

080097b6 <__sseek>:
 80097b6:	b510      	push	{r4, lr}
 80097b8:	460c      	mov	r4, r1
 80097ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097be:	f000 f82d 	bl	800981c <_lseek_r>
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	bf15      	itete	ne
 80097c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097d2:	81a3      	strheq	r3, [r4, #12]
 80097d4:	bf18      	it	ne
 80097d6:	81a3      	strhne	r3, [r4, #12]
 80097d8:	bd10      	pop	{r4, pc}

080097da <__sclose>:
 80097da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097de:	f000 b80d 	b.w	80097fc <_close_r>

080097e2 <memset>:
 80097e2:	4402      	add	r2, r0
 80097e4:	4603      	mov	r3, r0
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d100      	bne.n	80097ec <memset+0xa>
 80097ea:	4770      	bx	lr
 80097ec:	f803 1b01 	strb.w	r1, [r3], #1
 80097f0:	e7f9      	b.n	80097e6 <memset+0x4>
	...

080097f4 <_localeconv_r>:
 80097f4:	4800      	ldr	r0, [pc, #0]	; (80097f8 <_localeconv_r+0x4>)
 80097f6:	4770      	bx	lr
 80097f8:	20000248 	.word	0x20000248

080097fc <_close_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d06      	ldr	r5, [pc, #24]	; (8009818 <_close_r+0x1c>)
 8009800:	2300      	movs	r3, #0
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	f7f7 fe1d 	bl	8001446 <_close>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_close_r+0x1a>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_close_r+0x1a>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	200020b8 	.word	0x200020b8

0800981c <_lseek_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	; (800983c <_lseek_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f7 fe32 	bl	8001494 <_lseek>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_lseek_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_lseek_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	200020b8 	.word	0x200020b8

08009840 <_read_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <_read_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f7 fdc0 	bl	80013d4 <_read>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_read_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_read_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	200020b8 	.word	0x200020b8

08009864 <_write_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_write_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f7 fdcb 	bl	800140e <_write>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_write_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_write_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	200020b8 	.word	0x200020b8

08009888 <__errno>:
 8009888:	4b01      	ldr	r3, [pc, #4]	; (8009890 <__errno+0x8>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000154 	.word	0x20000154

08009894 <__libc_init_array>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4d0d      	ldr	r5, [pc, #52]	; (80098cc <__libc_init_array+0x38>)
 8009898:	4c0d      	ldr	r4, [pc, #52]	; (80098d0 <__libc_init_array+0x3c>)
 800989a:	1b64      	subs	r4, r4, r5
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	2600      	movs	r6, #0
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	d109      	bne.n	80098b8 <__libc_init_array+0x24>
 80098a4:	4d0b      	ldr	r5, [pc, #44]	; (80098d4 <__libc_init_array+0x40>)
 80098a6:	4c0c      	ldr	r4, [pc, #48]	; (80098d8 <__libc_init_array+0x44>)
 80098a8:	f002 f896 	bl	800b9d8 <_init>
 80098ac:	1b64      	subs	r4, r4, r5
 80098ae:	10a4      	asrs	r4, r4, #2
 80098b0:	2600      	movs	r6, #0
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	d105      	bne.n	80098c2 <__libc_init_array+0x2e>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098bc:	4798      	blx	r3
 80098be:	3601      	adds	r6, #1
 80098c0:	e7ee      	b.n	80098a0 <__libc_init_array+0xc>
 80098c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c6:	4798      	blx	r3
 80098c8:	3601      	adds	r6, #1
 80098ca:	e7f2      	b.n	80098b2 <__libc_init_array+0x1e>
 80098cc:	0800bdec 	.word	0x0800bdec
 80098d0:	0800bdec 	.word	0x0800bdec
 80098d4:	0800bdec 	.word	0x0800bdec
 80098d8:	0800bdf0 	.word	0x0800bdf0

080098dc <__retarget_lock_init_recursive>:
 80098dc:	4770      	bx	lr

080098de <__retarget_lock_acquire_recursive>:
 80098de:	4770      	bx	lr

080098e0 <__retarget_lock_release_recursive>:
 80098e0:	4770      	bx	lr

080098e2 <quorem>:
 80098e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	6903      	ldr	r3, [r0, #16]
 80098e8:	690c      	ldr	r4, [r1, #16]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	4607      	mov	r7, r0
 80098ee:	db7e      	blt.n	80099ee <quorem+0x10c>
 80098f0:	3c01      	subs	r4, #1
 80098f2:	f101 0814 	add.w	r8, r1, #20
 80098f6:	f100 0514 	add.w	r5, r0, #20
 80098fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009908:	3301      	adds	r3, #1
 800990a:	429a      	cmp	r2, r3
 800990c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009914:	fbb2 f6f3 	udiv	r6, r2, r3
 8009918:	d331      	bcc.n	800997e <quorem+0x9c>
 800991a:	f04f 0e00 	mov.w	lr, #0
 800991e:	4640      	mov	r0, r8
 8009920:	46ac      	mov	ip, r5
 8009922:	46f2      	mov	sl, lr
 8009924:	f850 2b04 	ldr.w	r2, [r0], #4
 8009928:	b293      	uxth	r3, r2
 800992a:	fb06 e303 	mla	r3, r6, r3, lr
 800992e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009932:	0c1a      	lsrs	r2, r3, #16
 8009934:	b29b      	uxth	r3, r3
 8009936:	ebaa 0303 	sub.w	r3, sl, r3
 800993a:	f8dc a000 	ldr.w	sl, [ip]
 800993e:	fa13 f38a 	uxtah	r3, r3, sl
 8009942:	fb06 220e 	mla	r2, r6, lr, r2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	9b00      	ldr	r3, [sp, #0]
 800994a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800994e:	b292      	uxth	r2, r2
 8009950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009958:	f8bd 3000 	ldrh.w	r3, [sp]
 800995c:	4581      	cmp	r9, r0
 800995e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009962:	f84c 3b04 	str.w	r3, [ip], #4
 8009966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800996a:	d2db      	bcs.n	8009924 <quorem+0x42>
 800996c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009970:	b92b      	cbnz	r3, 800997e <quorem+0x9c>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	3b04      	subs	r3, #4
 8009976:	429d      	cmp	r5, r3
 8009978:	461a      	mov	r2, r3
 800997a:	d32c      	bcc.n	80099d6 <quorem+0xf4>
 800997c:	613c      	str	r4, [r7, #16]
 800997e:	4638      	mov	r0, r7
 8009980:	f001 f9a8 	bl	800acd4 <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	db22      	blt.n	80099ce <quorem+0xec>
 8009988:	3601      	adds	r6, #1
 800998a:	4629      	mov	r1, r5
 800998c:	2000      	movs	r0, #0
 800998e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009992:	f8d1 c000 	ldr.w	ip, [r1]
 8009996:	b293      	uxth	r3, r2
 8009998:	1ac3      	subs	r3, r0, r3
 800999a:	0c12      	lsrs	r2, r2, #16
 800999c:	fa13 f38c 	uxtah	r3, r3, ip
 80099a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80099a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ae:	45c1      	cmp	r9, r8
 80099b0:	f841 3b04 	str.w	r3, [r1], #4
 80099b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099b8:	d2e9      	bcs.n	800998e <quorem+0xac>
 80099ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c2:	b922      	cbnz	r2, 80099ce <quorem+0xec>
 80099c4:	3b04      	subs	r3, #4
 80099c6:	429d      	cmp	r5, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	d30a      	bcc.n	80099e2 <quorem+0x100>
 80099cc:	613c      	str	r4, [r7, #16]
 80099ce:	4630      	mov	r0, r6
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	3b04      	subs	r3, #4
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1ce      	bne.n	800997c <quorem+0x9a>
 80099de:	3c01      	subs	r4, #1
 80099e0:	e7c9      	b.n	8009976 <quorem+0x94>
 80099e2:	6812      	ldr	r2, [r2, #0]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d1f0      	bne.n	80099cc <quorem+0xea>
 80099ea:	3c01      	subs	r4, #1
 80099ec:	e7eb      	b.n	80099c6 <quorem+0xe4>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7ee      	b.n	80099d0 <quorem+0xee>
 80099f2:	0000      	movs	r0, r0
 80099f4:	0000      	movs	r0, r0
	...

080099f8 <_dtoa_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	ed2d 8b04 	vpush	{d8-d9}
 8009a00:	69c5      	ldr	r5, [r0, #28]
 8009a02:	b093      	sub	sp, #76	; 0x4c
 8009a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a08:	ec57 6b10 	vmov	r6, r7, d0
 8009a0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a10:	9107      	str	r1, [sp, #28]
 8009a12:	4604      	mov	r4, r0
 8009a14:	920a      	str	r2, [sp, #40]	; 0x28
 8009a16:	930d      	str	r3, [sp, #52]	; 0x34
 8009a18:	b975      	cbnz	r5, 8009a38 <_dtoa_r+0x40>
 8009a1a:	2010      	movs	r0, #16
 8009a1c:	f000 fe2a 	bl	800a674 <malloc>
 8009a20:	4602      	mov	r2, r0
 8009a22:	61e0      	str	r0, [r4, #28]
 8009a24:	b920      	cbnz	r0, 8009a30 <_dtoa_r+0x38>
 8009a26:	4bae      	ldr	r3, [pc, #696]	; (8009ce0 <_dtoa_r+0x2e8>)
 8009a28:	21ef      	movs	r1, #239	; 0xef
 8009a2a:	48ae      	ldr	r0, [pc, #696]	; (8009ce4 <_dtoa_r+0x2ec>)
 8009a2c:	f001 fc90 	bl	800b350 <__assert_func>
 8009a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a34:	6005      	str	r5, [r0, #0]
 8009a36:	60c5      	str	r5, [r0, #12]
 8009a38:	69e3      	ldr	r3, [r4, #28]
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	b151      	cbz	r1, 8009a54 <_dtoa_r+0x5c>
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	604a      	str	r2, [r1, #4]
 8009a42:	2301      	movs	r3, #1
 8009a44:	4093      	lsls	r3, r2
 8009a46:	608b      	str	r3, [r1, #8]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 ff07 	bl	800a85c <_Bfree>
 8009a4e:	69e3      	ldr	r3, [r4, #28]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	1e3b      	subs	r3, r7, #0
 8009a56:	bfbb      	ittet	lt
 8009a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	9303      	strlt	r3, [sp, #12]
 8009a5e:	2300      	movge	r3, #0
 8009a60:	2201      	movlt	r2, #1
 8009a62:	bfac      	ite	ge
 8009a64:	f8c8 3000 	strge.w	r3, [r8]
 8009a68:	f8c8 2000 	strlt.w	r2, [r8]
 8009a6c:	4b9e      	ldr	r3, [pc, #632]	; (8009ce8 <_dtoa_r+0x2f0>)
 8009a6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a72:	ea33 0308 	bics.w	r3, r3, r8
 8009a76:	d11b      	bne.n	8009ab0 <_dtoa_r+0xb8>
 8009a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a84:	4333      	orrs	r3, r6
 8009a86:	f000 8593 	beq.w	800a5b0 <_dtoa_r+0xbb8>
 8009a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a8c:	b963      	cbnz	r3, 8009aa8 <_dtoa_r+0xb0>
 8009a8e:	4b97      	ldr	r3, [pc, #604]	; (8009cec <_dtoa_r+0x2f4>)
 8009a90:	e027      	b.n	8009ae2 <_dtoa_r+0xea>
 8009a92:	4b97      	ldr	r3, [pc, #604]	; (8009cf0 <_dtoa_r+0x2f8>)
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	9800      	ldr	r0, [sp, #0]
 8009a9e:	b013      	add	sp, #76	; 0x4c
 8009aa0:	ecbd 8b04 	vpop	{d8-d9}
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	4b90      	ldr	r3, [pc, #576]	; (8009cec <_dtoa_r+0x2f4>)
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	3303      	adds	r3, #3
 8009aae:	e7f3      	b.n	8009a98 <_dtoa_r+0xa0>
 8009ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	ec51 0b17 	vmov	r0, r1, d7
 8009aba:	eeb0 8a47 	vmov.f32	s16, s14
 8009abe:	eef0 8a67 	vmov.f32	s17, s15
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f7f7 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac8:	4681      	mov	r9, r0
 8009aca:	b160      	cbz	r0, 8009ae6 <_dtoa_r+0xee>
 8009acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ace:	2301      	movs	r3, #1
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8568 	beq.w	800a5aa <_dtoa_r+0xbb2>
 8009ada:	4b86      	ldr	r3, [pc, #536]	; (8009cf4 <_dtoa_r+0x2fc>)
 8009adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	e7da      	b.n	8009a9c <_dtoa_r+0xa4>
 8009ae6:	aa10      	add	r2, sp, #64	; 0x40
 8009ae8:	a911      	add	r1, sp, #68	; 0x44
 8009aea:	4620      	mov	r0, r4
 8009aec:	eeb0 0a48 	vmov.f32	s0, s16
 8009af0:	eef0 0a68 	vmov.f32	s1, s17
 8009af4:	f001 f994 	bl	800ae20 <__d2b>
 8009af8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009afc:	4682      	mov	sl, r0
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	d07f      	beq.n	8009c02 <_dtoa_r+0x20a>
 8009b02:	ee18 3a90 	vmov	r3, s17
 8009b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b0e:	ec51 0b18 	vmov	r0, r1, d8
 8009b12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b1e:	4619      	mov	r1, r3
 8009b20:	2200      	movs	r2, #0
 8009b22:	4b75      	ldr	r3, [pc, #468]	; (8009cf8 <_dtoa_r+0x300>)
 8009b24:	f7f6 fbb0 	bl	8000288 <__aeabi_dsub>
 8009b28:	a367      	add	r3, pc, #412	; (adr r3, 8009cc8 <_dtoa_r+0x2d0>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	a367      	add	r3, pc, #412	; (adr r3, 8009cd0 <_dtoa_r+0x2d8>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fba8 	bl	800028c <__adddf3>
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	4628      	mov	r0, r5
 8009b40:	460f      	mov	r7, r1
 8009b42:	f7f6 fcef 	bl	8000524 <__aeabi_i2d>
 8009b46:	a364      	add	r3, pc, #400	; (adr r3, 8009cd8 <_dtoa_r+0x2e0>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fb98 	bl	800028c <__adddf3>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	f7f6 fffa 	bl	8000b58 <__aeabi_d2iz>
 8009b64:	2200      	movs	r2, #0
 8009b66:	4683      	mov	fp, r0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	f7f6 ffb5 	bl	8000adc <__aeabi_dcmplt>
 8009b72:	b148      	cbz	r0, 8009b88 <_dtoa_r+0x190>
 8009b74:	4658      	mov	r0, fp
 8009b76:	f7f6 fcd5 	bl	8000524 <__aeabi_i2d>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f7f6 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b82:	b908      	cbnz	r0, 8009b88 <_dtoa_r+0x190>
 8009b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b88:	f1bb 0f16 	cmp.w	fp, #22
 8009b8c:	d857      	bhi.n	8009c3e <_dtoa_r+0x246>
 8009b8e:	4b5b      	ldr	r3, [pc, #364]	; (8009cfc <_dtoa_r+0x304>)
 8009b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	ec51 0b18 	vmov	r0, r1, d8
 8009b9c:	f7f6 ff9e 	bl	8000adc <__aeabi_dcmplt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d04e      	beq.n	8009c42 <_dtoa_r+0x24a>
 8009ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930c      	str	r3, [sp, #48]	; 0x30
 8009bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bae:	1b5b      	subs	r3, r3, r5
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	bf45      	ittet	mi
 8009bb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009bb8:	9305      	strmi	r3, [sp, #20]
 8009bba:	2300      	movpl	r3, #0
 8009bbc:	2300      	movmi	r3, #0
 8009bbe:	9206      	str	r2, [sp, #24]
 8009bc0:	bf54      	ite	pl
 8009bc2:	9305      	strpl	r3, [sp, #20]
 8009bc4:	9306      	strmi	r3, [sp, #24]
 8009bc6:	f1bb 0f00 	cmp.w	fp, #0
 8009bca:	db3c      	blt.n	8009c46 <_dtoa_r+0x24e>
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009bd2:	445b      	add	r3, fp
 8009bd4:	9306      	str	r3, [sp, #24]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b07      	ldr	r3, [sp, #28]
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d868      	bhi.n	8009cb2 <_dtoa_r+0x2ba>
 8009be0:	2b05      	cmp	r3, #5
 8009be2:	bfc4      	itt	gt
 8009be4:	3b04      	subgt	r3, #4
 8009be6:	9307      	strgt	r3, [sp, #28]
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	f1a3 0302 	sub.w	r3, r3, #2
 8009bee:	bfcc      	ite	gt
 8009bf0:	2500      	movgt	r5, #0
 8009bf2:	2501      	movle	r5, #1
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	f200 8085 	bhi.w	8009d04 <_dtoa_r+0x30c>
 8009bfa:	e8df f003 	tbb	[pc, r3]
 8009bfe:	3b2e      	.short	0x3b2e
 8009c00:	5839      	.short	0x5839
 8009c02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c06:	441d      	add	r5, r3
 8009c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	bfc1      	itttt	gt
 8009c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c14:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c20:	bfd6      	itet	le
 8009c22:	f1c3 0320 	rsble	r3, r3, #32
 8009c26:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c2a:	fa06 f003 	lslle.w	r0, r6, r3
 8009c2e:	f7f6 fc69 	bl	8000504 <__aeabi_ui2d>
 8009c32:	2201      	movs	r2, #1
 8009c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c38:	3d01      	subs	r5, #1
 8009c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c3c:	e76f      	b.n	8009b1e <_dtoa_r+0x126>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7b3      	b.n	8009baa <_dtoa_r+0x1b2>
 8009c42:	900c      	str	r0, [sp, #48]	; 0x30
 8009c44:	e7b2      	b.n	8009bac <_dtoa_r+0x1b4>
 8009c46:	9b05      	ldr	r3, [sp, #20]
 8009c48:	eba3 030b 	sub.w	r3, r3, fp
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	f1cb 0300 	rsb	r3, fp, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	2300      	movs	r3, #0
 8009c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c58:	e7bf      	b.n	8009bda <_dtoa_r+0x1e2>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dc52      	bgt.n	8009d0a <_dtoa_r+0x312>
 8009c64:	2301      	movs	r3, #1
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8009c6e:	e00b      	b.n	8009c88 <_dtoa_r+0x290>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7f3      	b.n	8009c5c <_dtoa_r+0x264>
 8009c74:	2300      	movs	r3, #0
 8009c76:	9309      	str	r3, [sp, #36]	; 0x24
 8009c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7a:	445b      	add	r3, fp
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	bfb8      	it	lt
 8009c86:	2301      	movlt	r3, #1
 8009c88:	69e0      	ldr	r0, [r4, #28]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	f102 0614 	add.w	r6, r2, #20
 8009c92:	429e      	cmp	r6, r3
 8009c94:	d93d      	bls.n	8009d12 <_dtoa_r+0x31a>
 8009c96:	6041      	str	r1, [r0, #4]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fd9f 	bl	800a7dc <_Balloc>
 8009c9e:	9000      	str	r0, [sp, #0]
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d139      	bne.n	8009d18 <_dtoa_r+0x320>
 8009ca4:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <_dtoa_r+0x308>)
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8009cac:	e6bd      	b.n	8009a2a <_dtoa_r+0x32>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7e1      	b.n	8009c76 <_dtoa_r+0x27e>
 8009cb2:	2501      	movs	r5, #1
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	9509      	str	r5, [sp, #36]	; 0x24
 8009cba:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2312      	movs	r3, #18
 8009cc6:	e7d1      	b.n	8009c6c <_dtoa_r+0x274>
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800bab1 	.word	0x0800bab1
 8009ce4:	0800bac8 	.word	0x0800bac8
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800baad 	.word	0x0800baad
 8009cf0:	0800baa4 	.word	0x0800baa4
 8009cf4:	0800ba81 	.word	0x0800ba81
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	0800bbb8 	.word	0x0800bbb8
 8009d00:	0800bb20 	.word	0x0800bb20
 8009d04:	2301      	movs	r3, #1
 8009d06:	9309      	str	r3, [sp, #36]	; 0x24
 8009d08:	e7d7      	b.n	8009cba <_dtoa_r+0x2c2>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	9304      	str	r3, [sp, #16]
 8009d10:	e7ba      	b.n	8009c88 <_dtoa_r+0x290>
 8009d12:	3101      	adds	r1, #1
 8009d14:	0052      	lsls	r2, r2, #1
 8009d16:	e7ba      	b.n	8009c8e <_dtoa_r+0x296>
 8009d18:	69e3      	ldr	r3, [r4, #28]
 8009d1a:	9a00      	ldr	r2, [sp, #0]
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	2b0e      	cmp	r3, #14
 8009d22:	f200 80a8 	bhi.w	8009e76 <_dtoa_r+0x47e>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	f000 80a5 	beq.w	8009e76 <_dtoa_r+0x47e>
 8009d2c:	f1bb 0f00 	cmp.w	fp, #0
 8009d30:	dd38      	ble.n	8009da4 <_dtoa_r+0x3ac>
 8009d32:	4bc0      	ldr	r3, [pc, #768]	; (800a034 <_dtoa_r+0x63c>)
 8009d34:	f00b 020f 	and.w	r2, fp, #15
 8009d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009d48:	d019      	beq.n	8009d7e <_dtoa_r+0x386>
 8009d4a:	4bbb      	ldr	r3, [pc, #748]	; (800a038 <_dtoa_r+0x640>)
 8009d4c:	ec51 0b18 	vmov	r0, r1, d8
 8009d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d54:	f7f6 fd7a 	bl	800084c <__aeabi_ddiv>
 8009d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5c:	f008 080f 	and.w	r8, r8, #15
 8009d60:	2503      	movs	r5, #3
 8009d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a038 <_dtoa_r+0x640>
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d10a      	bne.n	8009d82 <_dtoa_r+0x38a>
 8009d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	f7f6 fd6a 	bl	800084c <__aeabi_ddiv>
 8009d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d7c:	e02b      	b.n	8009dd6 <_dtoa_r+0x3de>
 8009d7e:	2502      	movs	r5, #2
 8009d80:	e7ef      	b.n	8009d62 <_dtoa_r+0x36a>
 8009d82:	f018 0f01 	tst.w	r8, #1
 8009d86:	d008      	beq.n	8009d9a <_dtoa_r+0x3a2>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	3501      	adds	r5, #1
 8009d96:	4606      	mov	r6, r0
 8009d98:	460f      	mov	r7, r1
 8009d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d9e:	f109 0908 	add.w	r9, r9, #8
 8009da2:	e7e0      	b.n	8009d66 <_dtoa_r+0x36e>
 8009da4:	f000 809f 	beq.w	8009ee6 <_dtoa_r+0x4ee>
 8009da8:	f1cb 0600 	rsb	r6, fp, #0
 8009dac:	4ba1      	ldr	r3, [pc, #644]	; (800a034 <_dtoa_r+0x63c>)
 8009dae:	4fa2      	ldr	r7, [pc, #648]	; (800a038 <_dtoa_r+0x640>)
 8009db0:	f006 020f 	and.w	r2, r6, #15
 8009db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	ec51 0b18 	vmov	r0, r1, d8
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	1136      	asrs	r6, r6, #4
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2502      	movs	r5, #2
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	d17e      	bne.n	8009ed0 <_dtoa_r+0x4d8>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1d0      	bne.n	8009d78 <_dtoa_r+0x380>
 8009dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8084 	beq.w	8009eea <_dtoa_r+0x4f2>
 8009de2:	4b96      	ldr	r3, [pc, #600]	; (800a03c <_dtoa_r+0x644>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	f7f6 fe77 	bl	8000adc <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d07b      	beq.n	8009eea <_dtoa_r+0x4f2>
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d078      	beq.n	8009eea <_dtoa_r+0x4f2>
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd39      	ble.n	8009e72 <_dtoa_r+0x47a>
 8009dfe:	4b90      	ldr	r3, [pc, #576]	; (800a040 <_dtoa_r+0x648>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fbf7 	bl	80005f8 <__aeabi_dmul>
 8009e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e0e:	9e01      	ldr	r6, [sp, #4]
 8009e10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e14:	3501      	adds	r5, #1
 8009e16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7f6 fb82 	bl	8000524 <__aeabi_i2d>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	f7f6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8009e28:	4b86      	ldr	r3, [pc, #536]	; (800a044 <_dtoa_r+0x64c>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f7f6 fa2e 	bl	800028c <__adddf3>
 8009e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e38:	9303      	str	r3, [sp, #12]
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d158      	bne.n	8009ef0 <_dtoa_r+0x4f8>
 8009e3e:	4b82      	ldr	r3, [pc, #520]	; (800a048 <_dtoa_r+0x650>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4e:	4680      	mov	r8, r0
 8009e50:	4689      	mov	r9, r1
 8009e52:	f7f6 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 8296 	bne.w	800a388 <_dtoa_r+0x990>
 8009e5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e60:	4640      	mov	r0, r8
 8009e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e66:	4649      	mov	r1, r9
 8009e68:	f7f6 fe38 	bl	8000adc <__aeabi_dcmplt>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f040 8289 	bne.w	800a384 <_dtoa_r+0x98c>
 8009e72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f2c0 814e 	blt.w	800a11a <_dtoa_r+0x722>
 8009e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e82:	f300 814a 	bgt.w	800a11a <_dtoa_r+0x722>
 8009e86:	4b6b      	ldr	r3, [pc, #428]	; (800a034 <_dtoa_r+0x63c>)
 8009e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f280 80dc 	bge.w	800a050 <_dtoa_r+0x658>
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f300 80d8 	bgt.w	800a050 <_dtoa_r+0x658>
 8009ea0:	f040 826f 	bne.w	800a382 <_dtoa_r+0x98a>
 8009ea4:	4b68      	ldr	r3, [pc, #416]	; (800a048 <_dtoa_r+0x650>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	4649      	mov	r1, r9
 8009eac:	f7f6 fba4 	bl	80005f8 <__aeabi_dmul>
 8009eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb4:	f7f6 fe26 	bl	8000b04 <__aeabi_dcmpge>
 8009eb8:	9e04      	ldr	r6, [sp, #16]
 8009eba:	4637      	mov	r7, r6
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f040 8245 	bne.w	800a34c <_dtoa_r+0x954>
 8009ec2:	9d00      	ldr	r5, [sp, #0]
 8009ec4:	2331      	movs	r3, #49	; 0x31
 8009ec6:	f805 3b01 	strb.w	r3, [r5], #1
 8009eca:	f10b 0b01 	add.w	fp, fp, #1
 8009ece:	e241      	b.n	800a354 <_dtoa_r+0x95c>
 8009ed0:	07f2      	lsls	r2, r6, #31
 8009ed2:	d505      	bpl.n	8009ee0 <_dtoa_r+0x4e8>
 8009ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed8:	f7f6 fb8e 	bl	80005f8 <__aeabi_dmul>
 8009edc:	3501      	adds	r5, #1
 8009ede:	2301      	movs	r3, #1
 8009ee0:	1076      	asrs	r6, r6, #1
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	e773      	b.n	8009dce <_dtoa_r+0x3d6>
 8009ee6:	2502      	movs	r5, #2
 8009ee8:	e775      	b.n	8009dd6 <_dtoa_r+0x3de>
 8009eea:	9e04      	ldr	r6, [sp, #16]
 8009eec:	465f      	mov	r7, fp
 8009eee:	e792      	b.n	8009e16 <_dtoa_r+0x41e>
 8009ef0:	9900      	ldr	r1, [sp, #0]
 8009ef2:	4b50      	ldr	r3, [pc, #320]	; (800a034 <_dtoa_r+0x63c>)
 8009ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ef8:	4431      	add	r1, r6
 8009efa:	9102      	str	r1, [sp, #8]
 8009efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efe:	eeb0 9a47 	vmov.f32	s18, s14
 8009f02:	eef0 9a67 	vmov.f32	s19, s15
 8009f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d044      	beq.n	8009f9c <_dtoa_r+0x5a4>
 8009f12:	494e      	ldr	r1, [pc, #312]	; (800a04c <_dtoa_r+0x654>)
 8009f14:	2000      	movs	r0, #0
 8009f16:	f7f6 fc99 	bl	800084c <__aeabi_ddiv>
 8009f1a:	ec53 2b19 	vmov	r2, r3, d9
 8009f1e:	f7f6 f9b3 	bl	8000288 <__aeabi_dsub>
 8009f22:	9d00      	ldr	r5, [sp, #0]
 8009f24:	ec41 0b19 	vmov	d9, r0, r1
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7f6 fe14 	bl	8000b58 <__aeabi_d2iz>
 8009f30:	4606      	mov	r6, r0
 8009f32:	f7f6 faf7 	bl	8000524 <__aeabi_i2d>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 f9a3 	bl	8000288 <__aeabi_dsub>
 8009f42:	3630      	adds	r6, #48	; 0x30
 8009f44:	f805 6b01 	strb.w	r6, [r5], #1
 8009f48:	ec53 2b19 	vmov	r2, r3, d9
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	f7f6 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d164      	bne.n	800a022 <_dtoa_r+0x62a>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	4937      	ldr	r1, [pc, #220]	; (800a03c <_dtoa_r+0x644>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f992 	bl	8000288 <__aeabi_dsub>
 8009f64:	ec53 2b19 	vmov	r2, r3, d9
 8009f68:	f7f6 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b6 	bne.w	800a0de <_dtoa_r+0x6e6>
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	429d      	cmp	r5, r3
 8009f76:	f43f af7c 	beq.w	8009e72 <_dtoa_r+0x47a>
 8009f7a:	4b31      	ldr	r3, [pc, #196]	; (800a040 <_dtoa_r+0x648>)
 8009f7c:	ec51 0b19 	vmov	r0, r1, d9
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	4b2e      	ldr	r3, [pc, #184]	; (800a040 <_dtoa_r+0x648>)
 8009f88:	ec41 0b19 	vmov	d9, r0, r1
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4649      	mov	r1, r9
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	4680      	mov	r8, r0
 8009f98:	4689      	mov	r9, r1
 8009f9a:	e7c5      	b.n	8009f28 <_dtoa_r+0x530>
 8009f9c:	ec51 0b17 	vmov	r0, r1, d7
 8009fa0:	f7f6 fb2a 	bl	80005f8 <__aeabi_dmul>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	9d00      	ldr	r5, [sp, #0]
 8009fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009faa:	ec41 0b19 	vmov	d9, r0, r1
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	f7f6 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	f7f6 fab4 	bl	8000524 <__aeabi_i2d>
 8009fbc:	3630      	adds	r6, #48	; 0x30
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	f7f6 f95f 	bl	8000288 <__aeabi_dsub>
 8009fca:	f805 6b01 	strb.w	r6, [r5], #1
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	429d      	cmp	r5, r3
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	4689      	mov	r9, r1
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	d124      	bne.n	800a026 <_dtoa_r+0x62e>
 8009fdc:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <_dtoa_r+0x654>)
 8009fde:	ec51 0b19 	vmov	r0, r1, d9
 8009fe2:	f7f6 f953 	bl	800028c <__adddf3>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d173      	bne.n	800a0de <_dtoa_r+0x6e6>
 8009ff6:	ec53 2b19 	vmov	r2, r3, d9
 8009ffa:	4914      	ldr	r1, [pc, #80]	; (800a04c <_dtoa_r+0x654>)
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7f6 f943 	bl	8000288 <__aeabi_dsub>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 fd67 	bl	8000adc <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f af2f 	beq.w	8009e72 <_dtoa_r+0x47a>
 800a014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a016:	1e6b      	subs	r3, r5, #1
 800a018:	930f      	str	r3, [sp, #60]	; 0x3c
 800a01a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d0f8      	beq.n	800a014 <_dtoa_r+0x61c>
 800a022:	46bb      	mov	fp, r7
 800a024:	e04a      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a026:	4b06      	ldr	r3, [pc, #24]	; (800a040 <_dtoa_r+0x648>)
 800a028:	f7f6 fae6 	bl	80005f8 <__aeabi_dmul>
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	e7bd      	b.n	8009fae <_dtoa_r+0x5b6>
 800a032:	bf00      	nop
 800a034:	0800bbb8 	.word	0x0800bbb8
 800a038:	0800bb90 	.word	0x0800bb90
 800a03c:	3ff00000 	.word	0x3ff00000
 800a040:	40240000 	.word	0x40240000
 800a044:	401c0000 	.word	0x401c0000
 800a048:	40140000 	.word	0x40140000
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a054:	9d00      	ldr	r5, [sp, #0]
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 fbf5 	bl	800084c <__aeabi_ddiv>
 800a062:	f7f6 fd79 	bl	8000b58 <__aeabi_d2iz>
 800a066:	9001      	str	r0, [sp, #4]
 800a068:	f7f6 fa5c 	bl	8000524 <__aeabi_i2d>
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 f904 	bl	8000288 <__aeabi_dsub>
 800a080:	9e01      	ldr	r6, [sp, #4]
 800a082:	9f04      	ldr	r7, [sp, #16]
 800a084:	3630      	adds	r6, #48	; 0x30
 800a086:	f805 6b01 	strb.w	r6, [r5], #1
 800a08a:	9e00      	ldr	r6, [sp, #0]
 800a08c:	1bae      	subs	r6, r5, r6
 800a08e:	42b7      	cmp	r7, r6
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	d134      	bne.n	800a100 <_dtoa_r+0x708>
 800a096:	f7f6 f8f9 	bl	800028c <__adddf3>
 800a09a:	4642      	mov	r2, r8
 800a09c:	464b      	mov	r3, r9
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f7f6 fd39 	bl	8000b18 <__aeabi_dcmpgt>
 800a0a6:	b9c8      	cbnz	r0, 800a0dc <_dtoa_r+0x6e4>
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	f7f6 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b4:	b110      	cbz	r0, 800a0bc <_dtoa_r+0x6c4>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	07db      	lsls	r3, r3, #31
 800a0ba:	d40f      	bmi.n	800a0dc <_dtoa_r+0x6e4>
 800a0bc:	4651      	mov	r1, sl
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 fbcc 	bl	800a85c <_Bfree>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c8:	702b      	strb	r3, [r5, #0]
 800a0ca:	f10b 0301 	add.w	r3, fp, #1
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f43f ace2 	beq.w	8009a9c <_dtoa_r+0xa4>
 800a0d8:	601d      	str	r5, [r3, #0]
 800a0da:	e4df      	b.n	8009a9c <_dtoa_r+0xa4>
 800a0dc:	465f      	mov	r7, fp
 800a0de:	462b      	mov	r3, r5
 800a0e0:	461d      	mov	r5, r3
 800a0e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e6:	2a39      	cmp	r2, #57	; 0x39
 800a0e8:	d106      	bne.n	800a0f8 <_dtoa_r+0x700>
 800a0ea:	9a00      	ldr	r2, [sp, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d1f7      	bne.n	800a0e0 <_dtoa_r+0x6e8>
 800a0f0:	9900      	ldr	r1, [sp, #0]
 800a0f2:	2230      	movs	r2, #48	; 0x30
 800a0f4:	3701      	adds	r7, #1
 800a0f6:	700a      	strb	r2, [r1, #0]
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e790      	b.n	800a022 <_dtoa_r+0x62a>
 800a100:	4ba3      	ldr	r3, [pc, #652]	; (800a390 <_dtoa_r+0x998>)
 800a102:	2200      	movs	r2, #0
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	2200      	movs	r2, #0
 800a10a:	2300      	movs	r3, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	f7f6 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a114:	2800      	cmp	r0, #0
 800a116:	d09e      	beq.n	800a056 <_dtoa_r+0x65e>
 800a118:	e7d0      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	f000 80ca 	beq.w	800a2b6 <_dtoa_r+0x8be>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	2a01      	cmp	r2, #1
 800a126:	f300 80ad 	bgt.w	800a284 <_dtoa_r+0x88c>
 800a12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	f000 80a5 	beq.w	800a27c <_dtoa_r+0x884>
 800a132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a136:	9e08      	ldr	r6, [sp, #32]
 800a138:	9d05      	ldr	r5, [sp, #20]
 800a13a:	9a05      	ldr	r2, [sp, #20]
 800a13c:	441a      	add	r2, r3
 800a13e:	9205      	str	r2, [sp, #20]
 800a140:	9a06      	ldr	r2, [sp, #24]
 800a142:	2101      	movs	r1, #1
 800a144:	441a      	add	r2, r3
 800a146:	4620      	mov	r0, r4
 800a148:	9206      	str	r2, [sp, #24]
 800a14a:	f000 fc3d 	bl	800a9c8 <__i2b>
 800a14e:	4607      	mov	r7, r0
 800a150:	b165      	cbz	r5, 800a16c <_dtoa_r+0x774>
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd09      	ble.n	800a16c <_dtoa_r+0x774>
 800a158:	42ab      	cmp	r3, r5
 800a15a:	9a05      	ldr	r2, [sp, #20]
 800a15c:	bfa8      	it	ge
 800a15e:	462b      	movge	r3, r5
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	9205      	str	r2, [sp, #20]
 800a164:	9a06      	ldr	r2, [sp, #24]
 800a166:	1aed      	subs	r5, r5, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	9306      	str	r3, [sp, #24]
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	b1f3      	cbz	r3, 800a1ae <_dtoa_r+0x7b6>
 800a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80a3 	beq.w	800a2be <_dtoa_r+0x8c6>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd10      	ble.n	800a19e <_dtoa_r+0x7a6>
 800a17c:	4639      	mov	r1, r7
 800a17e:	4632      	mov	r2, r6
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fce1 	bl	800ab48 <__pow5mult>
 800a186:	4652      	mov	r2, sl
 800a188:	4601      	mov	r1, r0
 800a18a:	4607      	mov	r7, r0
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 fc31 	bl	800a9f4 <__multiply>
 800a192:	4651      	mov	r1, sl
 800a194:	4680      	mov	r8, r0
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fb60 	bl	800a85c <_Bfree>
 800a19c:	46c2      	mov	sl, r8
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	1b9a      	subs	r2, r3, r6
 800a1a2:	d004      	beq.n	800a1ae <_dtoa_r+0x7b6>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fcce 	bl	800ab48 <__pow5mult>
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fc09 	bl	800a9c8 <__i2b>
 800a1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	f340 8081 	ble.w	800a2c2 <_dtoa_r+0x8ca>
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fcbf 	bl	800ab48 <__pow5mult>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	dd7a      	ble.n	800a2c8 <_dtoa_r+0x8d0>
 800a1d2:	f04f 0800 	mov.w	r8, #0
 800a1d6:	6933      	ldr	r3, [r6, #16]
 800a1d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1dc:	6918      	ldr	r0, [r3, #16]
 800a1de:	f000 fba5 	bl	800a92c <__hi0bits>
 800a1e2:	f1c0 0020 	rsb	r0, r0, #32
 800a1e6:	9b06      	ldr	r3, [sp, #24]
 800a1e8:	4418      	add	r0, r3
 800a1ea:	f010 001f 	ands.w	r0, r0, #31
 800a1ee:	f000 8094 	beq.w	800a31a <_dtoa_r+0x922>
 800a1f2:	f1c0 0320 	rsb	r3, r0, #32
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	f340 8085 	ble.w	800a306 <_dtoa_r+0x90e>
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	f1c0 001c 	rsb	r0, r0, #28
 800a202:	4403      	add	r3, r0
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	4403      	add	r3, r0
 800a20a:	4405      	add	r5, r0
 800a20c:	9306      	str	r3, [sp, #24]
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	dd05      	ble.n	800a220 <_dtoa_r+0x828>
 800a214:	4651      	mov	r1, sl
 800a216:	461a      	mov	r2, r3
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fcef 	bl	800abfc <__lshift>
 800a21e:	4682      	mov	sl, r0
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x83a>
 800a226:	4631      	mov	r1, r6
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fce6 	bl	800abfc <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a234:	2b00      	cmp	r3, #0
 800a236:	d072      	beq.n	800a31e <_dtoa_r+0x926>
 800a238:	4631      	mov	r1, r6
 800a23a:	4650      	mov	r0, sl
 800a23c:	f000 fd4a 	bl	800acd4 <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	da6c      	bge.n	800a31e <_dtoa_r+0x926>
 800a244:	2300      	movs	r3, #0
 800a246:	4651      	mov	r1, sl
 800a248:	220a      	movs	r2, #10
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fb28 	bl	800a8a0 <__multadd>
 800a250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a252:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a256:	4682      	mov	sl, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 81b0 	beq.w	800a5be <_dtoa_r+0xbc6>
 800a25e:	2300      	movs	r3, #0
 800a260:	4639      	mov	r1, r7
 800a262:	220a      	movs	r2, #10
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb1b 	bl	800a8a0 <__multadd>
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	4607      	mov	r7, r0
 800a270:	f300 8096 	bgt.w	800a3a0 <_dtoa_r+0x9a8>
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc59      	bgt.n	800a32e <_dtoa_r+0x936>
 800a27a:	e091      	b.n	800a3a0 <_dtoa_r+0x9a8>
 800a27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a282:	e758      	b.n	800a136 <_dtoa_r+0x73e>
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	1e5e      	subs	r6, r3, #1
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	42b3      	cmp	r3, r6
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b08      	ldrlt	r3, [sp, #32]
 800a290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a292:	9608      	strlt	r6, [sp, #32]
 800a294:	1af3      	sublt	r3, r6, r3
 800a296:	bfb4      	ite	lt
 800a298:	18d2      	addlt	r2, r2, r3
 800a29a:	1b9e      	subge	r6, r3, r6
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	bfbc      	itt	lt
 800a2a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a2a2:	2600      	movlt	r6, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb7      	itett	lt
 800a2a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a2ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a2b0:	1a9d      	sublt	r5, r3, r2
 800a2b2:	2300      	movlt	r3, #0
 800a2b4:	e741      	b.n	800a13a <_dtoa_r+0x742>
 800a2b6:	9e08      	ldr	r6, [sp, #32]
 800a2b8:	9d05      	ldr	r5, [sp, #20]
 800a2ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2bc:	e748      	b.n	800a150 <_dtoa_r+0x758>
 800a2be:	9a08      	ldr	r2, [sp, #32]
 800a2c0:	e770      	b.n	800a1a4 <_dtoa_r+0x7ac>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	dc19      	bgt.n	800a2fc <_dtoa_r+0x904>
 800a2c8:	9b02      	ldr	r3, [sp, #8]
 800a2ca:	b9bb      	cbnz	r3, 800a2fc <_dtoa_r+0x904>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d2:	b99b      	cbnz	r3, 800a2fc <_dtoa_r+0x904>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2da:	0d1b      	lsrs	r3, r3, #20
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	b183      	cbz	r3, 800a302 <_dtoa_r+0x90a>
 800a2e0:	9b05      	ldr	r3, [sp, #20]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	9b06      	ldr	r3, [sp, #24]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	f04f 0801 	mov.w	r8, #1
 800a2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f47f af6f 	bne.w	800a1d6 <_dtoa_r+0x7de>
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e774      	b.n	800a1e6 <_dtoa_r+0x7ee>
 800a2fc:	f04f 0800 	mov.w	r8, #0
 800a300:	e7f6      	b.n	800a2f0 <_dtoa_r+0x8f8>
 800a302:	4698      	mov	r8, r3
 800a304:	e7f4      	b.n	800a2f0 <_dtoa_r+0x8f8>
 800a306:	d082      	beq.n	800a20e <_dtoa_r+0x816>
 800a308:	9a05      	ldr	r2, [sp, #20]
 800a30a:	331c      	adds	r3, #28
 800a30c:	441a      	add	r2, r3
 800a30e:	9205      	str	r2, [sp, #20]
 800a310:	9a06      	ldr	r2, [sp, #24]
 800a312:	441a      	add	r2, r3
 800a314:	441d      	add	r5, r3
 800a316:	9206      	str	r2, [sp, #24]
 800a318:	e779      	b.n	800a20e <_dtoa_r+0x816>
 800a31a:	4603      	mov	r3, r0
 800a31c:	e7f4      	b.n	800a308 <_dtoa_r+0x910>
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc37      	bgt.n	800a394 <_dtoa_r+0x99c>
 800a324:	9b07      	ldr	r3, [sp, #28]
 800a326:	2b02      	cmp	r3, #2
 800a328:	dd34      	ble.n	800a394 <_dtoa_r+0x99c>
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	b963      	cbnz	r3, 800a34c <_dtoa_r+0x954>
 800a332:	4631      	mov	r1, r6
 800a334:	2205      	movs	r2, #5
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fab2 	bl	800a8a0 <__multadd>
 800a33c:	4601      	mov	r1, r0
 800a33e:	4606      	mov	r6, r0
 800a340:	4650      	mov	r0, sl
 800a342:	f000 fcc7 	bl	800acd4 <__mcmp>
 800a346:	2800      	cmp	r0, #0
 800a348:	f73f adbb 	bgt.w	8009ec2 <_dtoa_r+0x4ca>
 800a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34e:	9d00      	ldr	r5, [sp, #0]
 800a350:	ea6f 0b03 	mvn.w	fp, r3
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	4631      	mov	r1, r6
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fa7e 	bl	800a85c <_Bfree>
 800a360:	2f00      	cmp	r7, #0
 800a362:	f43f aeab 	beq.w	800a0bc <_dtoa_r+0x6c4>
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	d005      	beq.n	800a378 <_dtoa_r+0x980>
 800a36c:	45b8      	cmp	r8, r7
 800a36e:	d003      	beq.n	800a378 <_dtoa_r+0x980>
 800a370:	4641      	mov	r1, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fa72 	bl	800a85c <_Bfree>
 800a378:	4639      	mov	r1, r7
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fa6e 	bl	800a85c <_Bfree>
 800a380:	e69c      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a382:	2600      	movs	r6, #0
 800a384:	4637      	mov	r7, r6
 800a386:	e7e1      	b.n	800a34c <_dtoa_r+0x954>
 800a388:	46bb      	mov	fp, r7
 800a38a:	4637      	mov	r7, r6
 800a38c:	e599      	b.n	8009ec2 <_dtoa_r+0x4ca>
 800a38e:	bf00      	nop
 800a390:	40240000 	.word	0x40240000
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80c8 	beq.w	800a52c <_dtoa_r+0xb34>
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	dd05      	ble.n	800a3b0 <_dtoa_r+0x9b8>
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fc27 	bl	800abfc <__lshift>
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	f1b8 0f00 	cmp.w	r8, #0
 800a3b4:	d05b      	beq.n	800a46e <_dtoa_r+0xa76>
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fa0f 	bl	800a7dc <_Balloc>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <_dtoa_r+0x9d6>
 800a3c2:	4b83      	ldr	r3, [pc, #524]	; (800a5d0 <_dtoa_r+0xbd8>)
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a3ca:	f7ff bb2e 	b.w	8009a2a <_dtoa_r+0x32>
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	f107 010c 	add.w	r1, r7, #12
 800a3d8:	300c      	adds	r0, #12
 800a3da:	f000 ffab 	bl	800b334 <memcpy>
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fc0a 	bl	800abfc <__lshift>
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	9308      	str	r3, [sp, #32]
 800a3f6:	9b02      	ldr	r3, [sp, #8]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	46b8      	mov	r8, r7
 800a3fe:	9306      	str	r3, [sp, #24]
 800a400:	4607      	mov	r7, r0
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	4631      	mov	r1, r6
 800a406:	3b01      	subs	r3, #1
 800a408:	4650      	mov	r0, sl
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	f7ff fa69 	bl	80098e2 <quorem>
 800a410:	4641      	mov	r1, r8
 800a412:	9002      	str	r0, [sp, #8]
 800a414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a418:	4650      	mov	r0, sl
 800a41a:	f000 fc5b 	bl	800acd4 <__mcmp>
 800a41e:	463a      	mov	r2, r7
 800a420:	9005      	str	r0, [sp, #20]
 800a422:	4631      	mov	r1, r6
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fc71 	bl	800ad0c <__mdiff>
 800a42a:	68c2      	ldr	r2, [r0, #12]
 800a42c:	4605      	mov	r5, r0
 800a42e:	bb02      	cbnz	r2, 800a472 <_dtoa_r+0xa7a>
 800a430:	4601      	mov	r1, r0
 800a432:	4650      	mov	r0, sl
 800a434:	f000 fc4e 	bl	800acd4 <__mcmp>
 800a438:	4602      	mov	r2, r0
 800a43a:	4629      	mov	r1, r5
 800a43c:	4620      	mov	r0, r4
 800a43e:	9209      	str	r2, [sp, #36]	; 0x24
 800a440:	f000 fa0c 	bl	800a85c <_Bfree>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a448:	9d04      	ldr	r5, [sp, #16]
 800a44a:	ea43 0102 	orr.w	r1, r3, r2
 800a44e:	9b06      	ldr	r3, [sp, #24]
 800a450:	4319      	orrs	r1, r3
 800a452:	d110      	bne.n	800a476 <_dtoa_r+0xa7e>
 800a454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a458:	d029      	beq.n	800a4ae <_dtoa_r+0xab6>
 800a45a:	9b05      	ldr	r3, [sp, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd02      	ble.n	800a466 <_dtoa_r+0xa6e>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	f883 9000 	strb.w	r9, [r3]
 800a46c:	e774      	b.n	800a358 <_dtoa_r+0x960>
 800a46e:	4638      	mov	r0, r7
 800a470:	e7ba      	b.n	800a3e8 <_dtoa_r+0x9f0>
 800a472:	2201      	movs	r2, #1
 800a474:	e7e1      	b.n	800a43a <_dtoa_r+0xa42>
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	db04      	blt.n	800a486 <_dtoa_r+0xa8e>
 800a47c:	9907      	ldr	r1, [sp, #28]
 800a47e:	430b      	orrs	r3, r1
 800a480:	9906      	ldr	r1, [sp, #24]
 800a482:	430b      	orrs	r3, r1
 800a484:	d120      	bne.n	800a4c8 <_dtoa_r+0xad0>
 800a486:	2a00      	cmp	r2, #0
 800a488:	dded      	ble.n	800a466 <_dtoa_r+0xa6e>
 800a48a:	4651      	mov	r1, sl
 800a48c:	2201      	movs	r2, #1
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fbb4 	bl	800abfc <__lshift>
 800a494:	4631      	mov	r1, r6
 800a496:	4682      	mov	sl, r0
 800a498:	f000 fc1c 	bl	800acd4 <__mcmp>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dc03      	bgt.n	800a4a8 <_dtoa_r+0xab0>
 800a4a0:	d1e1      	bne.n	800a466 <_dtoa_r+0xa6e>
 800a4a2:	f019 0f01 	tst.w	r9, #1
 800a4a6:	d0de      	beq.n	800a466 <_dtoa_r+0xa6e>
 800a4a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4ac:	d1d8      	bne.n	800a460 <_dtoa_r+0xa68>
 800a4ae:	9a01      	ldr	r2, [sp, #4]
 800a4b0:	2339      	movs	r3, #57	; 0x39
 800a4b2:	7013      	strb	r3, [r2, #0]
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	461d      	mov	r5, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4be:	2a39      	cmp	r2, #57	; 0x39
 800a4c0:	d06c      	beq.n	800a59c <_dtoa_r+0xba4>
 800a4c2:	3201      	adds	r2, #1
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e747      	b.n	800a358 <_dtoa_r+0x960>
 800a4c8:	2a00      	cmp	r2, #0
 800a4ca:	dd07      	ble.n	800a4dc <_dtoa_r+0xae4>
 800a4cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4d0:	d0ed      	beq.n	800a4ae <_dtoa_r+0xab6>
 800a4d2:	9a01      	ldr	r2, [sp, #4]
 800a4d4:	f109 0301 	add.w	r3, r9, #1
 800a4d8:	7013      	strb	r3, [r2, #0]
 800a4da:	e73d      	b.n	800a358 <_dtoa_r+0x960>
 800a4dc:	9b04      	ldr	r3, [sp, #16]
 800a4de:	9a08      	ldr	r2, [sp, #32]
 800a4e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d043      	beq.n	800a570 <_dtoa_r+0xb78>
 800a4e8:	4651      	mov	r1, sl
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f9d6 	bl	800a8a0 <__multadd>
 800a4f4:	45b8      	cmp	r8, r7
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	f04f 020a 	mov.w	r2, #10
 800a500:	4641      	mov	r1, r8
 800a502:	4620      	mov	r0, r4
 800a504:	d107      	bne.n	800a516 <_dtoa_r+0xb1e>
 800a506:	f000 f9cb 	bl	800a8a0 <__multadd>
 800a50a:	4680      	mov	r8, r0
 800a50c:	4607      	mov	r7, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	e775      	b.n	800a402 <_dtoa_r+0xa0a>
 800a516:	f000 f9c3 	bl	800a8a0 <__multadd>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4680      	mov	r8, r0
 800a51e:	2300      	movs	r3, #0
 800a520:	220a      	movs	r2, #10
 800a522:	4620      	mov	r0, r4
 800a524:	f000 f9bc 	bl	800a8a0 <__multadd>
 800a528:	4607      	mov	r7, r0
 800a52a:	e7f0      	b.n	800a50e <_dtoa_r+0xb16>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9d00      	ldr	r5, [sp, #0]
 800a532:	4631      	mov	r1, r6
 800a534:	4650      	mov	r0, sl
 800a536:	f7ff f9d4 	bl	80098e2 <quorem>
 800a53a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a53e:	9b00      	ldr	r3, [sp, #0]
 800a540:	f805 9b01 	strb.w	r9, [r5], #1
 800a544:	1aea      	subs	r2, r5, r3
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	4293      	cmp	r3, r2
 800a54a:	dd07      	ble.n	800a55c <_dtoa_r+0xb64>
 800a54c:	4651      	mov	r1, sl
 800a54e:	2300      	movs	r3, #0
 800a550:	220a      	movs	r2, #10
 800a552:	4620      	mov	r0, r4
 800a554:	f000 f9a4 	bl	800a8a0 <__multadd>
 800a558:	4682      	mov	sl, r0
 800a55a:	e7ea      	b.n	800a532 <_dtoa_r+0xb3a>
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfc8      	it	gt
 800a562:	461d      	movgt	r5, r3
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	bfd8      	it	le
 800a568:	2501      	movle	r5, #1
 800a56a:	441d      	add	r5, r3
 800a56c:	f04f 0800 	mov.w	r8, #0
 800a570:	4651      	mov	r1, sl
 800a572:	2201      	movs	r2, #1
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fb41 	bl	800abfc <__lshift>
 800a57a:	4631      	mov	r1, r6
 800a57c:	4682      	mov	sl, r0
 800a57e:	f000 fba9 	bl	800acd4 <__mcmp>
 800a582:	2800      	cmp	r0, #0
 800a584:	dc96      	bgt.n	800a4b4 <_dtoa_r+0xabc>
 800a586:	d102      	bne.n	800a58e <_dtoa_r+0xb96>
 800a588:	f019 0f01 	tst.w	r9, #1
 800a58c:	d192      	bne.n	800a4b4 <_dtoa_r+0xabc>
 800a58e:	462b      	mov	r3, r5
 800a590:	461d      	mov	r5, r3
 800a592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a596:	2a30      	cmp	r2, #48	; 0x30
 800a598:	d0fa      	beq.n	800a590 <_dtoa_r+0xb98>
 800a59a:	e6dd      	b.n	800a358 <_dtoa_r+0x960>
 800a59c:	9a00      	ldr	r2, [sp, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d189      	bne.n	800a4b6 <_dtoa_r+0xabe>
 800a5a2:	f10b 0b01 	add.w	fp, fp, #1
 800a5a6:	2331      	movs	r3, #49	; 0x31
 800a5a8:	e796      	b.n	800a4d8 <_dtoa_r+0xae0>
 800a5aa:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <_dtoa_r+0xbdc>)
 800a5ac:	f7ff ba99 	b.w	8009ae2 <_dtoa_r+0xea>
 800a5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f47f aa6d 	bne.w	8009a92 <_dtoa_r+0x9a>
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <_dtoa_r+0xbe0>)
 800a5ba:	f7ff ba92 	b.w	8009ae2 <_dtoa_r+0xea>
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dcb5      	bgt.n	800a530 <_dtoa_r+0xb38>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	f73f aeb1 	bgt.w	800a32e <_dtoa_r+0x936>
 800a5cc:	e7b0      	b.n	800a530 <_dtoa_r+0xb38>
 800a5ce:	bf00      	nop
 800a5d0:	0800bb20 	.word	0x0800bb20
 800a5d4:	0800ba80 	.word	0x0800ba80
 800a5d8:	0800baa4 	.word	0x0800baa4

0800a5dc <_free_r>:
 800a5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d044      	beq.n	800a66c <_free_r+0x90>
 800a5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e6:	9001      	str	r0, [sp, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ee:	bfb8      	it	lt
 800a5f0:	18e4      	addlt	r4, r4, r3
 800a5f2:	f000 f8e7 	bl	800a7c4 <__malloc_lock>
 800a5f6:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <_free_r+0x94>)
 800a5f8:	9801      	ldr	r0, [sp, #4]
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	b933      	cbnz	r3, 800a60c <_free_r+0x30>
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	b003      	add	sp, #12
 800a604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a608:	f000 b8e2 	b.w	800a7d0 <__malloc_unlock>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d908      	bls.n	800a622 <_free_r+0x46>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf01      	itttt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	1949      	addeq	r1, r1, r5
 800a61e:	6021      	streq	r1, [r4, #0]
 800a620:	e7ed      	b.n	800a5fe <_free_r+0x22>
 800a622:	461a      	mov	r2, r3
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	b10b      	cbz	r3, 800a62c <_free_r+0x50>
 800a628:	42a3      	cmp	r3, r4
 800a62a:	d9fa      	bls.n	800a622 <_free_r+0x46>
 800a62c:	6811      	ldr	r1, [r2, #0]
 800a62e:	1855      	adds	r5, r2, r1
 800a630:	42a5      	cmp	r5, r4
 800a632:	d10b      	bne.n	800a64c <_free_r+0x70>
 800a634:	6824      	ldr	r4, [r4, #0]
 800a636:	4421      	add	r1, r4
 800a638:	1854      	adds	r4, r2, r1
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	6011      	str	r1, [r2, #0]
 800a63e:	d1e0      	bne.n	800a602 <_free_r+0x26>
 800a640:	681c      	ldr	r4, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	6053      	str	r3, [r2, #4]
 800a646:	440c      	add	r4, r1
 800a648:	6014      	str	r4, [r2, #0]
 800a64a:	e7da      	b.n	800a602 <_free_r+0x26>
 800a64c:	d902      	bls.n	800a654 <_free_r+0x78>
 800a64e:	230c      	movs	r3, #12
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	e7d6      	b.n	800a602 <_free_r+0x26>
 800a654:	6825      	ldr	r5, [r4, #0]
 800a656:	1961      	adds	r1, r4, r5
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf04      	itt	eq
 800a65c:	6819      	ldreq	r1, [r3, #0]
 800a65e:	685b      	ldreq	r3, [r3, #4]
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	bf04      	itt	eq
 800a664:	1949      	addeq	r1, r1, r5
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	6054      	str	r4, [r2, #4]
 800a66a:	e7ca      	b.n	800a602 <_free_r+0x26>
 800a66c:	b003      	add	sp, #12
 800a66e:	bd30      	pop	{r4, r5, pc}
 800a670:	200020c0 	.word	0x200020c0

0800a674 <malloc>:
 800a674:	4b02      	ldr	r3, [pc, #8]	; (800a680 <malloc+0xc>)
 800a676:	4601      	mov	r1, r0
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	f000 b823 	b.w	800a6c4 <_malloc_r>
 800a67e:	bf00      	nop
 800a680:	20000154 	.word	0x20000154

0800a684 <sbrk_aligned>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4e0e      	ldr	r6, [pc, #56]	; (800a6c0 <sbrk_aligned+0x3c>)
 800a688:	460c      	mov	r4, r1
 800a68a:	6831      	ldr	r1, [r6, #0]
 800a68c:	4605      	mov	r5, r0
 800a68e:	b911      	cbnz	r1, 800a696 <sbrk_aligned+0x12>
 800a690:	f000 fe40 	bl	800b314 <_sbrk_r>
 800a694:	6030      	str	r0, [r6, #0]
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 fe3b 	bl	800b314 <_sbrk_r>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d00a      	beq.n	800a6b8 <sbrk_aligned+0x34>
 800a6a2:	1cc4      	adds	r4, r0, #3
 800a6a4:	f024 0403 	bic.w	r4, r4, #3
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	d007      	beq.n	800a6bc <sbrk_aligned+0x38>
 800a6ac:	1a21      	subs	r1, r4, r0
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fe30 	bl	800b314 <_sbrk_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d101      	bne.n	800a6bc <sbrk_aligned+0x38>
 800a6b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	200020c4 	.word	0x200020c4

0800a6c4 <_malloc_r>:
 800a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c8:	1ccd      	adds	r5, r1, #3
 800a6ca:	f025 0503 	bic.w	r5, r5, #3
 800a6ce:	3508      	adds	r5, #8
 800a6d0:	2d0c      	cmp	r5, #12
 800a6d2:	bf38      	it	cc
 800a6d4:	250c      	movcc	r5, #12
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	4607      	mov	r7, r0
 800a6da:	db01      	blt.n	800a6e0 <_malloc_r+0x1c>
 800a6dc:	42a9      	cmp	r1, r5
 800a6de:	d905      	bls.n	800a6ec <_malloc_r+0x28>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7c0 <_malloc_r+0xfc>
 800a6f0:	f000 f868 	bl	800a7c4 <__malloc_lock>
 800a6f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f8:	461c      	mov	r4, r3
 800a6fa:	bb5c      	cbnz	r4, 800a754 <_malloc_r+0x90>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4638      	mov	r0, r7
 800a700:	f7ff ffc0 	bl	800a684 <sbrk_aligned>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	4604      	mov	r4, r0
 800a708:	d155      	bne.n	800a7b6 <_malloc_r+0xf2>
 800a70a:	f8d8 4000 	ldr.w	r4, [r8]
 800a70e:	4626      	mov	r6, r4
 800a710:	2e00      	cmp	r6, #0
 800a712:	d145      	bne.n	800a7a0 <_malloc_r+0xdc>
 800a714:	2c00      	cmp	r4, #0
 800a716:	d048      	beq.n	800a7aa <_malloc_r+0xe6>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	4631      	mov	r1, r6
 800a71c:	4638      	mov	r0, r7
 800a71e:	eb04 0903 	add.w	r9, r4, r3
 800a722:	f000 fdf7 	bl	800b314 <_sbrk_r>
 800a726:	4581      	cmp	r9, r0
 800a728:	d13f      	bne.n	800a7aa <_malloc_r+0xe6>
 800a72a:	6821      	ldr	r1, [r4, #0]
 800a72c:	1a6d      	subs	r5, r5, r1
 800a72e:	4629      	mov	r1, r5
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ffa7 	bl	800a684 <sbrk_aligned>
 800a736:	3001      	adds	r0, #1
 800a738:	d037      	beq.n	800a7aa <_malloc_r+0xe6>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	442b      	add	r3, r5
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	f8d8 3000 	ldr.w	r3, [r8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d038      	beq.n	800a7ba <_malloc_r+0xf6>
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	42a2      	cmp	r2, r4
 800a74c:	d12b      	bne.n	800a7a6 <_malloc_r+0xe2>
 800a74e:	2200      	movs	r2, #0
 800a750:	605a      	str	r2, [r3, #4]
 800a752:	e00f      	b.n	800a774 <_malloc_r+0xb0>
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	1b52      	subs	r2, r2, r5
 800a758:	d41f      	bmi.n	800a79a <_malloc_r+0xd6>
 800a75a:	2a0b      	cmp	r2, #11
 800a75c:	d917      	bls.n	800a78e <_malloc_r+0xca>
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	42a3      	cmp	r3, r4
 800a762:	6025      	str	r5, [r4, #0]
 800a764:	bf18      	it	ne
 800a766:	6059      	strne	r1, [r3, #4]
 800a768:	6863      	ldr	r3, [r4, #4]
 800a76a:	bf08      	it	eq
 800a76c:	f8c8 1000 	streq.w	r1, [r8]
 800a770:	5162      	str	r2, [r4, r5]
 800a772:	604b      	str	r3, [r1, #4]
 800a774:	4638      	mov	r0, r7
 800a776:	f104 060b 	add.w	r6, r4, #11
 800a77a:	f000 f829 	bl	800a7d0 <__malloc_unlock>
 800a77e:	f026 0607 	bic.w	r6, r6, #7
 800a782:	1d23      	adds	r3, r4, #4
 800a784:	1af2      	subs	r2, r6, r3
 800a786:	d0ae      	beq.n	800a6e6 <_malloc_r+0x22>
 800a788:	1b9b      	subs	r3, r3, r6
 800a78a:	50a3      	str	r3, [r4, r2]
 800a78c:	e7ab      	b.n	800a6e6 <_malloc_r+0x22>
 800a78e:	42a3      	cmp	r3, r4
 800a790:	6862      	ldr	r2, [r4, #4]
 800a792:	d1dd      	bne.n	800a750 <_malloc_r+0x8c>
 800a794:	f8c8 2000 	str.w	r2, [r8]
 800a798:	e7ec      	b.n	800a774 <_malloc_r+0xb0>
 800a79a:	4623      	mov	r3, r4
 800a79c:	6864      	ldr	r4, [r4, #4]
 800a79e:	e7ac      	b.n	800a6fa <_malloc_r+0x36>
 800a7a0:	4634      	mov	r4, r6
 800a7a2:	6876      	ldr	r6, [r6, #4]
 800a7a4:	e7b4      	b.n	800a710 <_malloc_r+0x4c>
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	e7cc      	b.n	800a744 <_malloc_r+0x80>
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	603b      	str	r3, [r7, #0]
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f000 f80e 	bl	800a7d0 <__malloc_unlock>
 800a7b4:	e797      	b.n	800a6e6 <_malloc_r+0x22>
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	e7dc      	b.n	800a774 <_malloc_r+0xb0>
 800a7ba:	605b      	str	r3, [r3, #4]
 800a7bc:	deff      	udf	#255	; 0xff
 800a7be:	bf00      	nop
 800a7c0:	200020c0 	.word	0x200020c0

0800a7c4 <__malloc_lock>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	; (800a7cc <__malloc_lock+0x8>)
 800a7c6:	f7ff b88a 	b.w	80098de <__retarget_lock_acquire_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	200020bc 	.word	0x200020bc

0800a7d0 <__malloc_unlock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_unlock+0x8>)
 800a7d2:	f7ff b885 	b.w	80098e0 <__retarget_lock_release_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	200020bc 	.word	0x200020bc

0800a7dc <_Balloc>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	69c6      	ldr	r6, [r0, #28]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	b976      	cbnz	r6, 800a804 <_Balloc+0x28>
 800a7e6:	2010      	movs	r0, #16
 800a7e8:	f7ff ff44 	bl	800a674 <malloc>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	61e0      	str	r0, [r4, #28]
 800a7f0:	b920      	cbnz	r0, 800a7fc <_Balloc+0x20>
 800a7f2:	4b18      	ldr	r3, [pc, #96]	; (800a854 <_Balloc+0x78>)
 800a7f4:	4818      	ldr	r0, [pc, #96]	; (800a858 <_Balloc+0x7c>)
 800a7f6:	216b      	movs	r1, #107	; 0x6b
 800a7f8:	f000 fdaa 	bl	800b350 <__assert_func>
 800a7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a800:	6006      	str	r6, [r0, #0]
 800a802:	60c6      	str	r6, [r0, #12]
 800a804:	69e6      	ldr	r6, [r4, #28]
 800a806:	68f3      	ldr	r3, [r6, #12]
 800a808:	b183      	cbz	r3, 800a82c <_Balloc+0x50>
 800a80a:	69e3      	ldr	r3, [r4, #28]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a812:	b9b8      	cbnz	r0, 800a844 <_Balloc+0x68>
 800a814:	2101      	movs	r1, #1
 800a816:	fa01 f605 	lsl.w	r6, r1, r5
 800a81a:	1d72      	adds	r2, r6, #5
 800a81c:	0092      	lsls	r2, r2, #2
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fdb4 	bl	800b38c <_calloc_r>
 800a824:	b160      	cbz	r0, 800a840 <_Balloc+0x64>
 800a826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a82a:	e00e      	b.n	800a84a <_Balloc+0x6e>
 800a82c:	2221      	movs	r2, #33	; 0x21
 800a82e:	2104      	movs	r1, #4
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fdab 	bl	800b38c <_calloc_r>
 800a836:	69e3      	ldr	r3, [r4, #28]
 800a838:	60f0      	str	r0, [r6, #12]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e4      	bne.n	800a80a <_Balloc+0x2e>
 800a840:	2000      	movs	r0, #0
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	6802      	ldr	r2, [r0, #0]
 800a846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a850:	e7f7      	b.n	800a842 <_Balloc+0x66>
 800a852:	bf00      	nop
 800a854:	0800bab1 	.word	0x0800bab1
 800a858:	0800bb31 	.word	0x0800bb31

0800a85c <_Bfree>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	69c6      	ldr	r6, [r0, #28]
 800a860:	4605      	mov	r5, r0
 800a862:	460c      	mov	r4, r1
 800a864:	b976      	cbnz	r6, 800a884 <_Bfree+0x28>
 800a866:	2010      	movs	r0, #16
 800a868:	f7ff ff04 	bl	800a674 <malloc>
 800a86c:	4602      	mov	r2, r0
 800a86e:	61e8      	str	r0, [r5, #28]
 800a870:	b920      	cbnz	r0, 800a87c <_Bfree+0x20>
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <_Bfree+0x3c>)
 800a874:	4809      	ldr	r0, [pc, #36]	; (800a89c <_Bfree+0x40>)
 800a876:	218f      	movs	r1, #143	; 0x8f
 800a878:	f000 fd6a 	bl	800b350 <__assert_func>
 800a87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a880:	6006      	str	r6, [r0, #0]
 800a882:	60c6      	str	r6, [r0, #12]
 800a884:	b13c      	cbz	r4, 800a896 <_Bfree+0x3a>
 800a886:	69eb      	ldr	r3, [r5, #28]
 800a888:	6862      	ldr	r2, [r4, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a890:	6021      	str	r1, [r4, #0]
 800a892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	0800bab1 	.word	0x0800bab1
 800a89c:	0800bb31 	.word	0x0800bb31

0800a8a0 <__multadd>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	690d      	ldr	r5, [r1, #16]
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	461e      	mov	r6, r3
 800a8ac:	f101 0c14 	add.w	ip, r1, #20
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8bc:	0c1e      	lsrs	r6, r3, #16
 800a8be:	0c0b      	lsrs	r3, r1, #16
 800a8c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8cc:	4285      	cmp	r5, r0
 800a8ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a8d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8d6:	dcec      	bgt.n	800a8b2 <__multadd+0x12>
 800a8d8:	b30e      	cbz	r6, 800a91e <__multadd+0x7e>
 800a8da:	68a3      	ldr	r3, [r4, #8]
 800a8dc:	42ab      	cmp	r3, r5
 800a8de:	dc19      	bgt.n	800a914 <__multadd+0x74>
 800a8e0:	6861      	ldr	r1, [r4, #4]
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	f7ff ff79 	bl	800a7dc <_Balloc>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	b928      	cbnz	r0, 800a8fa <__multadd+0x5a>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <__multadd+0x84>)
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <__multadd+0x88>)
 800a8f4:	21ba      	movs	r1, #186	; 0xba
 800a8f6:	f000 fd2b 	bl	800b350 <__assert_func>
 800a8fa:	6922      	ldr	r2, [r4, #16]
 800a8fc:	3202      	adds	r2, #2
 800a8fe:	f104 010c 	add.w	r1, r4, #12
 800a902:	0092      	lsls	r2, r2, #2
 800a904:	300c      	adds	r0, #12
 800a906:	f000 fd15 	bl	800b334 <memcpy>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff ffa5 	bl	800a85c <_Bfree>
 800a912:	4644      	mov	r4, r8
 800a914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a918:	3501      	adds	r5, #1
 800a91a:	615e      	str	r6, [r3, #20]
 800a91c:	6125      	str	r5, [r4, #16]
 800a91e:	4620      	mov	r0, r4
 800a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a924:	0800bb20 	.word	0x0800bb20
 800a928:	0800bb31 	.word	0x0800bb31

0800a92c <__hi0bits>:
 800a92c:	0c03      	lsrs	r3, r0, #16
 800a92e:	041b      	lsls	r3, r3, #16
 800a930:	b9d3      	cbnz	r3, 800a968 <__hi0bits+0x3c>
 800a932:	0400      	lsls	r0, r0, #16
 800a934:	2310      	movs	r3, #16
 800a936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a93a:	bf04      	itt	eq
 800a93c:	0200      	lsleq	r0, r0, #8
 800a93e:	3308      	addeq	r3, #8
 800a940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a944:	bf04      	itt	eq
 800a946:	0100      	lsleq	r0, r0, #4
 800a948:	3304      	addeq	r3, #4
 800a94a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a94e:	bf04      	itt	eq
 800a950:	0080      	lsleq	r0, r0, #2
 800a952:	3302      	addeq	r3, #2
 800a954:	2800      	cmp	r0, #0
 800a956:	db05      	blt.n	800a964 <__hi0bits+0x38>
 800a958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a95c:	f103 0301 	add.w	r3, r3, #1
 800a960:	bf08      	it	eq
 800a962:	2320      	moveq	r3, #32
 800a964:	4618      	mov	r0, r3
 800a966:	4770      	bx	lr
 800a968:	2300      	movs	r3, #0
 800a96a:	e7e4      	b.n	800a936 <__hi0bits+0xa>

0800a96c <__lo0bits>:
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	f013 0207 	ands.w	r2, r3, #7
 800a972:	d00c      	beq.n	800a98e <__lo0bits+0x22>
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d422      	bmi.n	800a9be <__lo0bits+0x52>
 800a978:	079a      	lsls	r2, r3, #30
 800a97a:	bf49      	itett	mi
 800a97c:	085b      	lsrmi	r3, r3, #1
 800a97e:	089b      	lsrpl	r3, r3, #2
 800a980:	6003      	strmi	r3, [r0, #0]
 800a982:	2201      	movmi	r2, #1
 800a984:	bf5c      	itt	pl
 800a986:	6003      	strpl	r3, [r0, #0]
 800a988:	2202      	movpl	r2, #2
 800a98a:	4610      	mov	r0, r2
 800a98c:	4770      	bx	lr
 800a98e:	b299      	uxth	r1, r3
 800a990:	b909      	cbnz	r1, 800a996 <__lo0bits+0x2a>
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	2210      	movs	r2, #16
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	b909      	cbnz	r1, 800a99e <__lo0bits+0x32>
 800a99a:	3208      	adds	r2, #8
 800a99c:	0a1b      	lsrs	r3, r3, #8
 800a99e:	0719      	lsls	r1, r3, #28
 800a9a0:	bf04      	itt	eq
 800a9a2:	091b      	lsreq	r3, r3, #4
 800a9a4:	3204      	addeq	r2, #4
 800a9a6:	0799      	lsls	r1, r3, #30
 800a9a8:	bf04      	itt	eq
 800a9aa:	089b      	lsreq	r3, r3, #2
 800a9ac:	3202      	addeq	r2, #2
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d403      	bmi.n	800a9ba <__lo0bits+0x4e>
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	f102 0201 	add.w	r2, r2, #1
 800a9b8:	d003      	beq.n	800a9c2 <__lo0bits+0x56>
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	e7e5      	b.n	800a98a <__lo0bits+0x1e>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e7e3      	b.n	800a98a <__lo0bits+0x1e>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	e7e1      	b.n	800a98a <__lo0bits+0x1e>
	...

0800a9c8 <__i2b>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	f7ff ff05 	bl	800a7dc <_Balloc>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	b928      	cbnz	r0, 800a9e2 <__i2b+0x1a>
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <__i2b+0x24>)
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <__i2b+0x28>)
 800a9da:	f240 1145 	movw	r1, #325	; 0x145
 800a9de:	f000 fcb7 	bl	800b350 <__assert_func>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	6144      	str	r4, [r0, #20]
 800a9e6:	6103      	str	r3, [r0, #16]
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800bb20 	.word	0x0800bb20
 800a9f0:	0800bb31 	.word	0x0800bb31

0800a9f4 <__multiply>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	4691      	mov	r9, r2
 800a9fa:	690a      	ldr	r2, [r1, #16]
 800a9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	bfb8      	it	lt
 800aa04:	460b      	movlt	r3, r1
 800aa06:	460c      	mov	r4, r1
 800aa08:	bfbc      	itt	lt
 800aa0a:	464c      	movlt	r4, r9
 800aa0c:	4699      	movlt	r9, r3
 800aa0e:	6927      	ldr	r7, [r4, #16]
 800aa10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	6861      	ldr	r1, [r4, #4]
 800aa18:	eb07 060a 	add.w	r6, r7, sl
 800aa1c:	42b3      	cmp	r3, r6
 800aa1e:	b085      	sub	sp, #20
 800aa20:	bfb8      	it	lt
 800aa22:	3101      	addlt	r1, #1
 800aa24:	f7ff feda 	bl	800a7dc <_Balloc>
 800aa28:	b930      	cbnz	r0, 800aa38 <__multiply+0x44>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <__multiply+0x14c>)
 800aa2e:	4845      	ldr	r0, [pc, #276]	; (800ab44 <__multiply+0x150>)
 800aa30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa34:	f000 fc8c 	bl	800b350 <__assert_func>
 800aa38:	f100 0514 	add.w	r5, r0, #20
 800aa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa40:	462b      	mov	r3, r5
 800aa42:	2200      	movs	r2, #0
 800aa44:	4543      	cmp	r3, r8
 800aa46:	d321      	bcc.n	800aa8c <__multiply+0x98>
 800aa48:	f104 0314 	add.w	r3, r4, #20
 800aa4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa50:	f109 0314 	add.w	r3, r9, #20
 800aa54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	1b3a      	subs	r2, r7, r4
 800aa5c:	3a15      	subs	r2, #21
 800aa5e:	f022 0203 	bic.w	r2, r2, #3
 800aa62:	3204      	adds	r2, #4
 800aa64:	f104 0115 	add.w	r1, r4, #21
 800aa68:	428f      	cmp	r7, r1
 800aa6a:	bf38      	it	cc
 800aa6c:	2204      	movcc	r2, #4
 800aa6e:	9201      	str	r2, [sp, #4]
 800aa70:	9a02      	ldr	r2, [sp, #8]
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d80c      	bhi.n	800aa92 <__multiply+0x9e>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	dd03      	ble.n	800aa84 <__multiply+0x90>
 800aa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d05b      	beq.n	800ab3c <__multiply+0x148>
 800aa84:	6106      	str	r6, [r0, #16]
 800aa86:	b005      	add	sp, #20
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8c:	f843 2b04 	str.w	r2, [r3], #4
 800aa90:	e7d8      	b.n	800aa44 <__multiply+0x50>
 800aa92:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa96:	f1ba 0f00 	cmp.w	sl, #0
 800aa9a:	d024      	beq.n	800aae6 <__multiply+0xf2>
 800aa9c:	f104 0e14 	add.w	lr, r4, #20
 800aaa0:	46a9      	mov	r9, r5
 800aaa2:	f04f 0c00 	mov.w	ip, #0
 800aaa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaaa:	f8d9 1000 	ldr.w	r1, [r9]
 800aaae:	fa1f fb82 	uxth.w	fp, r2
 800aab2:	b289      	uxth	r1, r1
 800aab4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aabc:	f8d9 2000 	ldr.w	r2, [r9]
 800aac0:	4461      	add	r1, ip
 800aac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aac6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aace:	b289      	uxth	r1, r1
 800aad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aad4:	4577      	cmp	r7, lr
 800aad6:	f849 1b04 	str.w	r1, [r9], #4
 800aada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aade:	d8e2      	bhi.n	800aaa6 <__multiply+0xb2>
 800aae0:	9a01      	ldr	r2, [sp, #4]
 800aae2:	f845 c002 	str.w	ip, [r5, r2]
 800aae6:	9a03      	ldr	r2, [sp, #12]
 800aae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aaec:	3304      	adds	r3, #4
 800aaee:	f1b9 0f00 	cmp.w	r9, #0
 800aaf2:	d021      	beq.n	800ab38 <__multiply+0x144>
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	f104 0c14 	add.w	ip, r4, #20
 800aafa:	46ae      	mov	lr, r5
 800aafc:	f04f 0a00 	mov.w	sl, #0
 800ab00:	f8bc b000 	ldrh.w	fp, [ip]
 800ab04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab08:	fb09 220b 	mla	r2, r9, fp, r2
 800ab0c:	4452      	add	r2, sl
 800ab0e:	b289      	uxth	r1, r1
 800ab10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab14:	f84e 1b04 	str.w	r1, [lr], #4
 800ab18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab20:	f8be 1000 	ldrh.w	r1, [lr]
 800ab24:	fb09 110a 	mla	r1, r9, sl, r1
 800ab28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab2c:	4567      	cmp	r7, ip
 800ab2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab32:	d8e5      	bhi.n	800ab00 <__multiply+0x10c>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	50a9      	str	r1, [r5, r2]
 800ab38:	3504      	adds	r5, #4
 800ab3a:	e799      	b.n	800aa70 <__multiply+0x7c>
 800ab3c:	3e01      	subs	r6, #1
 800ab3e:	e79b      	b.n	800aa78 <__multiply+0x84>
 800ab40:	0800bb20 	.word	0x0800bb20
 800ab44:	0800bb31 	.word	0x0800bb31

0800ab48 <__pow5mult>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	4615      	mov	r5, r2
 800ab4e:	f012 0203 	ands.w	r2, r2, #3
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	d007      	beq.n	800ab68 <__pow5mult+0x20>
 800ab58:	4c25      	ldr	r4, [pc, #148]	; (800abf0 <__pow5mult+0xa8>)
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab62:	f7ff fe9d 	bl	800a8a0 <__multadd>
 800ab66:	4607      	mov	r7, r0
 800ab68:	10ad      	asrs	r5, r5, #2
 800ab6a:	d03d      	beq.n	800abe8 <__pow5mult+0xa0>
 800ab6c:	69f4      	ldr	r4, [r6, #28]
 800ab6e:	b97c      	cbnz	r4, 800ab90 <__pow5mult+0x48>
 800ab70:	2010      	movs	r0, #16
 800ab72:	f7ff fd7f 	bl	800a674 <malloc>
 800ab76:	4602      	mov	r2, r0
 800ab78:	61f0      	str	r0, [r6, #28]
 800ab7a:	b928      	cbnz	r0, 800ab88 <__pow5mult+0x40>
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <__pow5mult+0xac>)
 800ab7e:	481e      	ldr	r0, [pc, #120]	; (800abf8 <__pow5mult+0xb0>)
 800ab80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab84:	f000 fbe4 	bl	800b350 <__assert_func>
 800ab88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab8c:	6004      	str	r4, [r0, #0]
 800ab8e:	60c4      	str	r4, [r0, #12]
 800ab90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab98:	b94c      	cbnz	r4, 800abae <__pow5mult+0x66>
 800ab9a:	f240 2171 	movw	r1, #625	; 0x271
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff12 	bl	800a9c8 <__i2b>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abaa:	4604      	mov	r4, r0
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	f04f 0900 	mov.w	r9, #0
 800abb2:	07eb      	lsls	r3, r5, #31
 800abb4:	d50a      	bpl.n	800abcc <__pow5mult+0x84>
 800abb6:	4639      	mov	r1, r7
 800abb8:	4622      	mov	r2, r4
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff ff1a 	bl	800a9f4 <__multiply>
 800abc0:	4639      	mov	r1, r7
 800abc2:	4680      	mov	r8, r0
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff fe49 	bl	800a85c <_Bfree>
 800abca:	4647      	mov	r7, r8
 800abcc:	106d      	asrs	r5, r5, #1
 800abce:	d00b      	beq.n	800abe8 <__pow5mult+0xa0>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	b938      	cbnz	r0, 800abe4 <__pow5mult+0x9c>
 800abd4:	4622      	mov	r2, r4
 800abd6:	4621      	mov	r1, r4
 800abd8:	4630      	mov	r0, r6
 800abda:	f7ff ff0b 	bl	800a9f4 <__multiply>
 800abde:	6020      	str	r0, [r4, #0]
 800abe0:	f8c0 9000 	str.w	r9, [r0]
 800abe4:	4604      	mov	r4, r0
 800abe6:	e7e4      	b.n	800abb2 <__pow5mult+0x6a>
 800abe8:	4638      	mov	r0, r7
 800abea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abee:	bf00      	nop
 800abf0:	0800bc80 	.word	0x0800bc80
 800abf4:	0800bab1 	.word	0x0800bab1
 800abf8:	0800bb31 	.word	0x0800bb31

0800abfc <__lshift>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	460c      	mov	r4, r1
 800ac02:	6849      	ldr	r1, [r1, #4]
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	4691      	mov	r9, r2
 800ac10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac14:	f108 0601 	add.w	r6, r8, #1
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	db0b      	blt.n	800ac34 <__lshift+0x38>
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff fddd 	bl	800a7dc <_Balloc>
 800ac22:	4605      	mov	r5, r0
 800ac24:	b948      	cbnz	r0, 800ac3a <__lshift+0x3e>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b28      	ldr	r3, [pc, #160]	; (800accc <__lshift+0xd0>)
 800ac2a:	4829      	ldr	r0, [pc, #164]	; (800acd0 <__lshift+0xd4>)
 800ac2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac30:	f000 fb8e 	bl	800b350 <__assert_func>
 800ac34:	3101      	adds	r1, #1
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	e7ee      	b.n	800ac18 <__lshift+0x1c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f100 0114 	add.w	r1, r0, #20
 800ac40:	f100 0210 	add.w	r2, r0, #16
 800ac44:	4618      	mov	r0, r3
 800ac46:	4553      	cmp	r3, sl
 800ac48:	db33      	blt.n	800acb2 <__lshift+0xb6>
 800ac4a:	6920      	ldr	r0, [r4, #16]
 800ac4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac50:	f104 0314 	add.w	r3, r4, #20
 800ac54:	f019 091f 	ands.w	r9, r9, #31
 800ac58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac60:	d02b      	beq.n	800acba <__lshift+0xbe>
 800ac62:	f1c9 0e20 	rsb	lr, r9, #32
 800ac66:	468a      	mov	sl, r1
 800ac68:	2200      	movs	r2, #0
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac70:	4310      	orrs	r0, r2
 800ac72:	f84a 0b04 	str.w	r0, [sl], #4
 800ac76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7a:	459c      	cmp	ip, r3
 800ac7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac80:	d8f3      	bhi.n	800ac6a <__lshift+0x6e>
 800ac82:	ebac 0304 	sub.w	r3, ip, r4
 800ac86:	3b15      	subs	r3, #21
 800ac88:	f023 0303 	bic.w	r3, r3, #3
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	f104 0015 	add.w	r0, r4, #21
 800ac92:	4584      	cmp	ip, r0
 800ac94:	bf38      	it	cc
 800ac96:	2304      	movcc	r3, #4
 800ac98:	50ca      	str	r2, [r1, r3]
 800ac9a:	b10a      	cbz	r2, 800aca0 <__lshift+0xa4>
 800ac9c:	f108 0602 	add.w	r6, r8, #2
 800aca0:	3e01      	subs	r6, #1
 800aca2:	4638      	mov	r0, r7
 800aca4:	612e      	str	r6, [r5, #16]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff fdd8 	bl	800a85c <_Bfree>
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb6:	3301      	adds	r3, #1
 800acb8:	e7c5      	b.n	800ac46 <__lshift+0x4a>
 800acba:	3904      	subs	r1, #4
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc4:	459c      	cmp	ip, r3
 800acc6:	d8f9      	bhi.n	800acbc <__lshift+0xc0>
 800acc8:	e7ea      	b.n	800aca0 <__lshift+0xa4>
 800acca:	bf00      	nop
 800accc:	0800bb20 	.word	0x0800bb20
 800acd0:	0800bb31 	.word	0x0800bb31

0800acd4 <__mcmp>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	6902      	ldr	r2, [r0, #16]
 800acd8:	690c      	ldr	r4, [r1, #16]
 800acda:	1b12      	subs	r2, r2, r4
 800acdc:	d10e      	bne.n	800acfc <__mcmp+0x28>
 800acde:	f100 0314 	add.w	r3, r0, #20
 800ace2:	3114      	adds	r1, #20
 800ace4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ace8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acf4:	42a5      	cmp	r5, r4
 800acf6:	d003      	beq.n	800ad00 <__mcmp+0x2c>
 800acf8:	d305      	bcc.n	800ad06 <__mcmp+0x32>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4610      	mov	r0, r2
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	4283      	cmp	r3, r0
 800ad02:	d3f3      	bcc.n	800acec <__mcmp+0x18>
 800ad04:	e7fa      	b.n	800acfc <__mcmp+0x28>
 800ad06:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0a:	e7f7      	b.n	800acfc <__mcmp+0x28>

0800ad0c <__mdiff>:
 800ad0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	4606      	mov	r6, r0
 800ad14:	4611      	mov	r1, r2
 800ad16:	4620      	mov	r0, r4
 800ad18:	4690      	mov	r8, r2
 800ad1a:	f7ff ffdb 	bl	800acd4 <__mcmp>
 800ad1e:	1e05      	subs	r5, r0, #0
 800ad20:	d110      	bne.n	800ad44 <__mdiff+0x38>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff fd59 	bl	800a7dc <_Balloc>
 800ad2a:	b930      	cbnz	r0, 800ad3a <__mdiff+0x2e>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__mdiff+0x10c>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f240 2137 	movw	r1, #567	; 0x237
 800ad34:	4839      	ldr	r0, [pc, #228]	; (800ae1c <__mdiff+0x110>)
 800ad36:	f000 fb0b 	bl	800b350 <__assert_func>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	bfa4      	itt	ge
 800ad46:	4643      	movge	r3, r8
 800ad48:	46a0      	movge	r8, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad50:	bfa6      	itte	ge
 800ad52:	461c      	movge	r4, r3
 800ad54:	2500      	movge	r5, #0
 800ad56:	2501      	movlt	r5, #1
 800ad58:	f7ff fd40 	bl	800a7dc <_Balloc>
 800ad5c:	b920      	cbnz	r0, 800ad68 <__mdiff+0x5c>
 800ad5e:	4b2e      	ldr	r3, [pc, #184]	; (800ae18 <__mdiff+0x10c>)
 800ad60:	4602      	mov	r2, r0
 800ad62:	f240 2145 	movw	r1, #581	; 0x245
 800ad66:	e7e5      	b.n	800ad34 <__mdiff+0x28>
 800ad68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad6c:	6926      	ldr	r6, [r4, #16]
 800ad6e:	60c5      	str	r5, [r0, #12]
 800ad70:	f104 0914 	add.w	r9, r4, #20
 800ad74:	f108 0514 	add.w	r5, r8, #20
 800ad78:	f100 0e14 	add.w	lr, r0, #20
 800ad7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad84:	f108 0210 	add.w	r2, r8, #16
 800ad88:	46f2      	mov	sl, lr
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad94:	fa11 f88b 	uxtah	r8, r1, fp
 800ad98:	b299      	uxth	r1, r3
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	eba8 0801 	sub.w	r8, r8, r1
 800ada0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ada4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ada8:	fa1f f888 	uxth.w	r8, r8
 800adac:	1419      	asrs	r1, r3, #16
 800adae:	454e      	cmp	r6, r9
 800adb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adb4:	f84a 3b04 	str.w	r3, [sl], #4
 800adb8:	d8e8      	bhi.n	800ad8c <__mdiff+0x80>
 800adba:	1b33      	subs	r3, r6, r4
 800adbc:	3b15      	subs	r3, #21
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	3304      	adds	r3, #4
 800adc4:	3415      	adds	r4, #21
 800adc6:	42a6      	cmp	r6, r4
 800adc8:	bf38      	it	cc
 800adca:	2304      	movcc	r3, #4
 800adcc:	441d      	add	r5, r3
 800adce:	4473      	add	r3, lr
 800add0:	469e      	mov	lr, r3
 800add2:	462e      	mov	r6, r5
 800add4:	4566      	cmp	r6, ip
 800add6:	d30e      	bcc.n	800adf6 <__mdiff+0xea>
 800add8:	f10c 0203 	add.w	r2, ip, #3
 800addc:	1b52      	subs	r2, r2, r5
 800adde:	f022 0203 	bic.w	r2, r2, #3
 800ade2:	3d03      	subs	r5, #3
 800ade4:	45ac      	cmp	ip, r5
 800ade6:	bf38      	it	cc
 800ade8:	2200      	movcc	r2, #0
 800adea:	4413      	add	r3, r2
 800adec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adf0:	b17a      	cbz	r2, 800ae12 <__mdiff+0x106>
 800adf2:	6107      	str	r7, [r0, #16]
 800adf4:	e7a4      	b.n	800ad40 <__mdiff+0x34>
 800adf6:	f856 8b04 	ldr.w	r8, [r6], #4
 800adfa:	fa11 f288 	uxtah	r2, r1, r8
 800adfe:	1414      	asrs	r4, r2, #16
 800ae00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae04:	b292      	uxth	r2, r2
 800ae06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae0a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae0e:	1421      	asrs	r1, r4, #16
 800ae10:	e7e0      	b.n	800add4 <__mdiff+0xc8>
 800ae12:	3f01      	subs	r7, #1
 800ae14:	e7ea      	b.n	800adec <__mdiff+0xe0>
 800ae16:	bf00      	nop
 800ae18:	0800bb20 	.word	0x0800bb20
 800ae1c:	0800bb31 	.word	0x0800bb31

0800ae20 <__d2b>:
 800ae20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	460f      	mov	r7, r1
 800ae26:	2101      	movs	r1, #1
 800ae28:	ec59 8b10 	vmov	r8, r9, d0
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	f7ff fcd5 	bl	800a7dc <_Balloc>
 800ae32:	4604      	mov	r4, r0
 800ae34:	b930      	cbnz	r0, 800ae44 <__d2b+0x24>
 800ae36:	4602      	mov	r2, r0
 800ae38:	4b24      	ldr	r3, [pc, #144]	; (800aecc <__d2b+0xac>)
 800ae3a:	4825      	ldr	r0, [pc, #148]	; (800aed0 <__d2b+0xb0>)
 800ae3c:	f240 310f 	movw	r1, #783	; 0x30f
 800ae40:	f000 fa86 	bl	800b350 <__assert_func>
 800ae44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae4c:	bb2d      	cbnz	r5, 800ae9a <__d2b+0x7a>
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f1b8 0300 	subs.w	r3, r8, #0
 800ae54:	d026      	beq.n	800aea4 <__d2b+0x84>
 800ae56:	4668      	mov	r0, sp
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f7ff fd87 	bl	800a96c <__lo0bits>
 800ae5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae62:	b1e8      	cbz	r0, 800aea0 <__d2b+0x80>
 800ae64:	f1c0 0320 	rsb	r3, r0, #32
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	40c2      	lsrs	r2, r0
 800ae70:	6163      	str	r3, [r4, #20]
 800ae72:	9201      	str	r2, [sp, #4]
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bf14      	ite	ne
 800ae7c:	2202      	movne	r2, #2
 800ae7e:	2201      	moveq	r2, #1
 800ae80:	6122      	str	r2, [r4, #16]
 800ae82:	b1bd      	cbz	r5, 800aeb4 <__d2b+0x94>
 800ae84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae88:	4405      	add	r5, r0
 800ae8a:	603d      	str	r5, [r7, #0]
 800ae8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4620      	mov	r0, r4
 800ae94:	b003      	add	sp, #12
 800ae96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae9e:	e7d6      	b.n	800ae4e <__d2b+0x2e>
 800aea0:	6161      	str	r1, [r4, #20]
 800aea2:	e7e7      	b.n	800ae74 <__d2b+0x54>
 800aea4:	a801      	add	r0, sp, #4
 800aea6:	f7ff fd61 	bl	800a96c <__lo0bits>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	6163      	str	r3, [r4, #20]
 800aeae:	3020      	adds	r0, #32
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	e7e5      	b.n	800ae80 <__d2b+0x60>
 800aeb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aeb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aebc:	6038      	str	r0, [r7, #0]
 800aebe:	6918      	ldr	r0, [r3, #16]
 800aec0:	f7ff fd34 	bl	800a92c <__hi0bits>
 800aec4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aec8:	e7e2      	b.n	800ae90 <__d2b+0x70>
 800aeca:	bf00      	nop
 800aecc:	0800bb20 	.word	0x0800bb20
 800aed0:	0800bb31 	.word	0x0800bb31

0800aed4 <__ssputs_r>:
 800aed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed8:	688e      	ldr	r6, [r1, #8]
 800aeda:	461f      	mov	r7, r3
 800aedc:	42be      	cmp	r6, r7
 800aede:	680b      	ldr	r3, [r1, #0]
 800aee0:	4682      	mov	sl, r0
 800aee2:	460c      	mov	r4, r1
 800aee4:	4690      	mov	r8, r2
 800aee6:	d82c      	bhi.n	800af42 <__ssputs_r+0x6e>
 800aee8:	898a      	ldrh	r2, [r1, #12]
 800aeea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aeee:	d026      	beq.n	800af3e <__ssputs_r+0x6a>
 800aef0:	6965      	ldr	r5, [r4, #20]
 800aef2:	6909      	ldr	r1, [r1, #16]
 800aef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aef8:	eba3 0901 	sub.w	r9, r3, r1
 800aefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af00:	1c7b      	adds	r3, r7, #1
 800af02:	444b      	add	r3, r9
 800af04:	106d      	asrs	r5, r5, #1
 800af06:	429d      	cmp	r5, r3
 800af08:	bf38      	it	cc
 800af0a:	461d      	movcc	r5, r3
 800af0c:	0553      	lsls	r3, r2, #21
 800af0e:	d527      	bpl.n	800af60 <__ssputs_r+0x8c>
 800af10:	4629      	mov	r1, r5
 800af12:	f7ff fbd7 	bl	800a6c4 <_malloc_r>
 800af16:	4606      	mov	r6, r0
 800af18:	b360      	cbz	r0, 800af74 <__ssputs_r+0xa0>
 800af1a:	6921      	ldr	r1, [r4, #16]
 800af1c:	464a      	mov	r2, r9
 800af1e:	f000 fa09 	bl	800b334 <memcpy>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6126      	str	r6, [r4, #16]
 800af30:	6165      	str	r5, [r4, #20]
 800af32:	444e      	add	r6, r9
 800af34:	eba5 0509 	sub.w	r5, r5, r9
 800af38:	6026      	str	r6, [r4, #0]
 800af3a:	60a5      	str	r5, [r4, #8]
 800af3c:	463e      	mov	r6, r7
 800af3e:	42be      	cmp	r6, r7
 800af40:	d900      	bls.n	800af44 <__ssputs_r+0x70>
 800af42:	463e      	mov	r6, r7
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	4632      	mov	r2, r6
 800af48:	4641      	mov	r1, r8
 800af4a:	f000 f9c9 	bl	800b2e0 <memmove>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	1b9b      	subs	r3, r3, r6
 800af52:	60a3      	str	r3, [r4, #8]
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	4433      	add	r3, r6
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	2000      	movs	r0, #0
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	462a      	mov	r2, r5
 800af62:	f000 fa3b 	bl	800b3dc <_realloc_r>
 800af66:	4606      	mov	r6, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1e0      	bne.n	800af2e <__ssputs_r+0x5a>
 800af6c:	6921      	ldr	r1, [r4, #16]
 800af6e:	4650      	mov	r0, sl
 800af70:	f7ff fb34 	bl	800a5dc <_free_r>
 800af74:	230c      	movs	r3, #12
 800af76:	f8ca 3000 	str.w	r3, [sl]
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	f04f 30ff 	mov.w	r0, #4294967295
 800af86:	e7e9      	b.n	800af5c <__ssputs_r+0x88>

0800af88 <_svfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4698      	mov	r8, r3
 800af8e:	898b      	ldrh	r3, [r1, #12]
 800af90:	061b      	lsls	r3, r3, #24
 800af92:	b09d      	sub	sp, #116	; 0x74
 800af94:	4607      	mov	r7, r0
 800af96:	460d      	mov	r5, r1
 800af98:	4614      	mov	r4, r2
 800af9a:	d50e      	bpl.n	800afba <_svfiprintf_r+0x32>
 800af9c:	690b      	ldr	r3, [r1, #16]
 800af9e:	b963      	cbnz	r3, 800afba <_svfiprintf_r+0x32>
 800afa0:	2140      	movs	r1, #64	; 0x40
 800afa2:	f7ff fb8f 	bl	800a6c4 <_malloc_r>
 800afa6:	6028      	str	r0, [r5, #0]
 800afa8:	6128      	str	r0, [r5, #16]
 800afaa:	b920      	cbnz	r0, 800afb6 <_svfiprintf_r+0x2e>
 800afac:	230c      	movs	r3, #12
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	e0d0      	b.n	800b158 <_svfiprintf_r+0x1d0>
 800afb6:	2340      	movs	r3, #64	; 0x40
 800afb8:	616b      	str	r3, [r5, #20]
 800afba:	2300      	movs	r3, #0
 800afbc:	9309      	str	r3, [sp, #36]	; 0x24
 800afbe:	2320      	movs	r3, #32
 800afc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc8:	2330      	movs	r3, #48	; 0x30
 800afca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b170 <_svfiprintf_r+0x1e8>
 800afce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afd2:	f04f 0901 	mov.w	r9, #1
 800afd6:	4623      	mov	r3, r4
 800afd8:	469a      	mov	sl, r3
 800afda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afde:	b10a      	cbz	r2, 800afe4 <_svfiprintf_r+0x5c>
 800afe0:	2a25      	cmp	r2, #37	; 0x25
 800afe2:	d1f9      	bne.n	800afd8 <_svfiprintf_r+0x50>
 800afe4:	ebba 0b04 	subs.w	fp, sl, r4
 800afe8:	d00b      	beq.n	800b002 <_svfiprintf_r+0x7a>
 800afea:	465b      	mov	r3, fp
 800afec:	4622      	mov	r2, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff ff6f 	bl	800aed4 <__ssputs_r>
 800aff6:	3001      	adds	r0, #1
 800aff8:	f000 80a9 	beq.w	800b14e <_svfiprintf_r+0x1c6>
 800affc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800affe:	445a      	add	r2, fp
 800b000:	9209      	str	r2, [sp, #36]	; 0x24
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 80a1 	beq.w	800b14e <_svfiprintf_r+0x1c6>
 800b00c:	2300      	movs	r3, #0
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b016:	f10a 0a01 	add.w	sl, sl, #1
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	9307      	str	r3, [sp, #28]
 800b01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b022:	931a      	str	r3, [sp, #104]	; 0x68
 800b024:	4654      	mov	r4, sl
 800b026:	2205      	movs	r2, #5
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	4850      	ldr	r0, [pc, #320]	; (800b170 <_svfiprintf_r+0x1e8>)
 800b02e:	f7f5 f8cf 	bl	80001d0 <memchr>
 800b032:	9a04      	ldr	r2, [sp, #16]
 800b034:	b9d8      	cbnz	r0, 800b06e <_svfiprintf_r+0xe6>
 800b036:	06d0      	lsls	r0, r2, #27
 800b038:	bf44      	itt	mi
 800b03a:	2320      	movmi	r3, #32
 800b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b040:	0711      	lsls	r1, r2, #28
 800b042:	bf44      	itt	mi
 800b044:	232b      	movmi	r3, #43	; 0x2b
 800b046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04a:	f89a 3000 	ldrb.w	r3, [sl]
 800b04e:	2b2a      	cmp	r3, #42	; 0x2a
 800b050:	d015      	beq.n	800b07e <_svfiprintf_r+0xf6>
 800b052:	9a07      	ldr	r2, [sp, #28]
 800b054:	4654      	mov	r4, sl
 800b056:	2000      	movs	r0, #0
 800b058:	f04f 0c0a 	mov.w	ip, #10
 800b05c:	4621      	mov	r1, r4
 800b05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b062:	3b30      	subs	r3, #48	; 0x30
 800b064:	2b09      	cmp	r3, #9
 800b066:	d94d      	bls.n	800b104 <_svfiprintf_r+0x17c>
 800b068:	b1b0      	cbz	r0, 800b098 <_svfiprintf_r+0x110>
 800b06a:	9207      	str	r2, [sp, #28]
 800b06c:	e014      	b.n	800b098 <_svfiprintf_r+0x110>
 800b06e:	eba0 0308 	sub.w	r3, r0, r8
 800b072:	fa09 f303 	lsl.w	r3, r9, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	46a2      	mov	sl, r4
 800b07c:	e7d2      	b.n	800b024 <_svfiprintf_r+0x9c>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9103      	str	r1, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bfbb      	ittet	lt
 800b08a:	425b      	neglt	r3, r3
 800b08c:	f042 0202 	orrlt.w	r2, r2, #2
 800b090:	9307      	strge	r3, [sp, #28]
 800b092:	9307      	strlt	r3, [sp, #28]
 800b094:	bfb8      	it	lt
 800b096:	9204      	strlt	r2, [sp, #16]
 800b098:	7823      	ldrb	r3, [r4, #0]
 800b09a:	2b2e      	cmp	r3, #46	; 0x2e
 800b09c:	d10c      	bne.n	800b0b8 <_svfiprintf_r+0x130>
 800b09e:	7863      	ldrb	r3, [r4, #1]
 800b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a2:	d134      	bne.n	800b10e <_svfiprintf_r+0x186>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	9203      	str	r2, [sp, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bfb8      	it	lt
 800b0b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0b4:	3402      	adds	r4, #2
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b180 <_svfiprintf_r+0x1f8>
 800b0bc:	7821      	ldrb	r1, [r4, #0]
 800b0be:	2203      	movs	r2, #3
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	f7f5 f885 	bl	80001d0 <memchr>
 800b0c6:	b138      	cbz	r0, 800b0d8 <_svfiprintf_r+0x150>
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	eba0 000a 	sub.w	r0, r0, sl
 800b0ce:	2240      	movs	r2, #64	; 0x40
 800b0d0:	4082      	lsls	r2, r0
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0dc:	4825      	ldr	r0, [pc, #148]	; (800b174 <_svfiprintf_r+0x1ec>)
 800b0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0e2:	2206      	movs	r2, #6
 800b0e4:	f7f5 f874 	bl	80001d0 <memchr>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d038      	beq.n	800b15e <_svfiprintf_r+0x1d6>
 800b0ec:	4b22      	ldr	r3, [pc, #136]	; (800b178 <_svfiprintf_r+0x1f0>)
 800b0ee:	bb1b      	cbnz	r3, 800b138 <_svfiprintf_r+0x1b0>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	3307      	adds	r3, #7
 800b0f4:	f023 0307 	bic.w	r3, r3, #7
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	9303      	str	r3, [sp, #12]
 800b0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fe:	4433      	add	r3, r6
 800b100:	9309      	str	r3, [sp, #36]	; 0x24
 800b102:	e768      	b.n	800afd6 <_svfiprintf_r+0x4e>
 800b104:	fb0c 3202 	mla	r2, ip, r2, r3
 800b108:	460c      	mov	r4, r1
 800b10a:	2001      	movs	r0, #1
 800b10c:	e7a6      	b.n	800b05c <_svfiprintf_r+0xd4>
 800b10e:	2300      	movs	r3, #0
 800b110:	3401      	adds	r4, #1
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	4619      	mov	r1, r3
 800b116:	f04f 0c0a 	mov.w	ip, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b120:	3a30      	subs	r2, #48	; 0x30
 800b122:	2a09      	cmp	r2, #9
 800b124:	d903      	bls.n	800b12e <_svfiprintf_r+0x1a6>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0c6      	beq.n	800b0b8 <_svfiprintf_r+0x130>
 800b12a:	9105      	str	r1, [sp, #20]
 800b12c:	e7c4      	b.n	800b0b8 <_svfiprintf_r+0x130>
 800b12e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b132:	4604      	mov	r4, r0
 800b134:	2301      	movs	r3, #1
 800b136:	e7f0      	b.n	800b11a <_svfiprintf_r+0x192>
 800b138:	ab03      	add	r3, sp, #12
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	462a      	mov	r2, r5
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <_svfiprintf_r+0x1f4>)
 800b140:	a904      	add	r1, sp, #16
 800b142:	4638      	mov	r0, r7
 800b144:	f7fd fe62 	bl	8008e0c <_printf_float>
 800b148:	1c42      	adds	r2, r0, #1
 800b14a:	4606      	mov	r6, r0
 800b14c:	d1d6      	bne.n	800b0fc <_svfiprintf_r+0x174>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	065b      	lsls	r3, r3, #25
 800b152:	f53f af2d 	bmi.w	800afb0 <_svfiprintf_r+0x28>
 800b156:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b158:	b01d      	add	sp, #116	; 0x74
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	ab03      	add	r3, sp, #12
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	462a      	mov	r2, r5
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <_svfiprintf_r+0x1f4>)
 800b166:	a904      	add	r1, sp, #16
 800b168:	4638      	mov	r0, r7
 800b16a:	f7fe f8f3 	bl	8009354 <_printf_i>
 800b16e:	e7eb      	b.n	800b148 <_svfiprintf_r+0x1c0>
 800b170:	0800bc8c 	.word	0x0800bc8c
 800b174:	0800bc96 	.word	0x0800bc96
 800b178:	08008e0d 	.word	0x08008e0d
 800b17c:	0800aed5 	.word	0x0800aed5
 800b180:	0800bc92 	.word	0x0800bc92

0800b184 <__sflush_r>:
 800b184:	898a      	ldrh	r2, [r1, #12]
 800b186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	4605      	mov	r5, r0
 800b18c:	0710      	lsls	r0, r2, #28
 800b18e:	460c      	mov	r4, r1
 800b190:	d458      	bmi.n	800b244 <__sflush_r+0xc0>
 800b192:	684b      	ldr	r3, [r1, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	dc05      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc02      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d0f9      	beq.n	800b19e <__sflush_r+0x1a>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1b0:	682f      	ldr	r7, [r5, #0]
 800b1b2:	6a21      	ldr	r1, [r4, #32]
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	d032      	beq.n	800b21e <__sflush_r+0x9a>
 800b1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	075a      	lsls	r2, r3, #29
 800b1be:	d505      	bpl.n	800b1cc <__sflush_r+0x48>
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	1ac0      	subs	r0, r0, r3
 800b1c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1c6:	b10b      	cbz	r3, 800b1cc <__sflush_r+0x48>
 800b1c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ca:	1ac0      	subs	r0, r0, r3
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1d2:	6a21      	ldr	r1, [r4, #32]
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b0      	blx	r6
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	d106      	bne.n	800b1ec <__sflush_r+0x68>
 800b1de:	6829      	ldr	r1, [r5, #0]
 800b1e0:	291d      	cmp	r1, #29
 800b1e2:	d82b      	bhi.n	800b23c <__sflush_r+0xb8>
 800b1e4:	4a29      	ldr	r2, [pc, #164]	; (800b28c <__sflush_r+0x108>)
 800b1e6:	410a      	asrs	r2, r1
 800b1e8:	07d6      	lsls	r6, r2, #31
 800b1ea:	d427      	bmi.n	800b23c <__sflush_r+0xb8>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	6062      	str	r2, [r4, #4]
 800b1f0:	04d9      	lsls	r1, r3, #19
 800b1f2:	6922      	ldr	r2, [r4, #16]
 800b1f4:	6022      	str	r2, [r4, #0]
 800b1f6:	d504      	bpl.n	800b202 <__sflush_r+0x7e>
 800b1f8:	1c42      	adds	r2, r0, #1
 800b1fa:	d101      	bne.n	800b200 <__sflush_r+0x7c>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b903      	cbnz	r3, 800b202 <__sflush_r+0x7e>
 800b200:	6560      	str	r0, [r4, #84]	; 0x54
 800b202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b204:	602f      	str	r7, [r5, #0]
 800b206:	2900      	cmp	r1, #0
 800b208:	d0c9      	beq.n	800b19e <__sflush_r+0x1a>
 800b20a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b20e:	4299      	cmp	r1, r3
 800b210:	d002      	beq.n	800b218 <__sflush_r+0x94>
 800b212:	4628      	mov	r0, r5
 800b214:	f7ff f9e2 	bl	800a5dc <_free_r>
 800b218:	2000      	movs	r0, #0
 800b21a:	6360      	str	r0, [r4, #52]	; 0x34
 800b21c:	e7c0      	b.n	800b1a0 <__sflush_r+0x1c>
 800b21e:	2301      	movs	r3, #1
 800b220:	4628      	mov	r0, r5
 800b222:	47b0      	blx	r6
 800b224:	1c41      	adds	r1, r0, #1
 800b226:	d1c8      	bne.n	800b1ba <__sflush_r+0x36>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0c5      	beq.n	800b1ba <__sflush_r+0x36>
 800b22e:	2b1d      	cmp	r3, #29
 800b230:	d001      	beq.n	800b236 <__sflush_r+0xb2>
 800b232:	2b16      	cmp	r3, #22
 800b234:	d101      	bne.n	800b23a <__sflush_r+0xb6>
 800b236:	602f      	str	r7, [r5, #0]
 800b238:	e7b1      	b.n	800b19e <__sflush_r+0x1a>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	e7ad      	b.n	800b1a0 <__sflush_r+0x1c>
 800b244:	690f      	ldr	r7, [r1, #16]
 800b246:	2f00      	cmp	r7, #0
 800b248:	d0a9      	beq.n	800b19e <__sflush_r+0x1a>
 800b24a:	0793      	lsls	r3, r2, #30
 800b24c:	680e      	ldr	r6, [r1, #0]
 800b24e:	bf08      	it	eq
 800b250:	694b      	ldreq	r3, [r1, #20]
 800b252:	600f      	str	r7, [r1, #0]
 800b254:	bf18      	it	ne
 800b256:	2300      	movne	r3, #0
 800b258:	eba6 0807 	sub.w	r8, r6, r7
 800b25c:	608b      	str	r3, [r1, #8]
 800b25e:	f1b8 0f00 	cmp.w	r8, #0
 800b262:	dd9c      	ble.n	800b19e <__sflush_r+0x1a>
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b268:	4643      	mov	r3, r8
 800b26a:	463a      	mov	r2, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b0      	blx	r6
 800b270:	2800      	cmp	r0, #0
 800b272:	dc06      	bgt.n	800b282 <__sflush_r+0xfe>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	e78e      	b.n	800b1a0 <__sflush_r+0x1c>
 800b282:	4407      	add	r7, r0
 800b284:	eba8 0800 	sub.w	r8, r8, r0
 800b288:	e7e9      	b.n	800b25e <__sflush_r+0xda>
 800b28a:	bf00      	nop
 800b28c:	dfbffffe 	.word	0xdfbffffe

0800b290 <_fflush_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	690b      	ldr	r3, [r1, #16]
 800b294:	4605      	mov	r5, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b913      	cbnz	r3, 800b2a0 <_fflush_r+0x10>
 800b29a:	2500      	movs	r5, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	b118      	cbz	r0, 800b2aa <_fflush_r+0x1a>
 800b2a2:	6a03      	ldr	r3, [r0, #32]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <_fflush_r+0x1a>
 800b2a6:	f7fe fa03 	bl	80096b0 <__sinit>
 800b2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0f3      	beq.n	800b29a <_fflush_r+0xa>
 800b2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2b4:	07d0      	lsls	r0, r2, #31
 800b2b6:	d404      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2b8:	0599      	lsls	r1, r3, #22
 800b2ba:	d402      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2be:	f7fe fb0e 	bl	80098de <__retarget_lock_acquire_recursive>
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	f7ff ff5d 	bl	800b184 <__sflush_r>
 800b2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2cc:	07da      	lsls	r2, r3, #31
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	d4e4      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	059b      	lsls	r3, r3, #22
 800b2d6:	d4e1      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2da:	f7fe fb01 	bl	80098e0 <__retarget_lock_release_recursive>
 800b2de:	e7dd      	b.n	800b29c <_fflush_r+0xc>

0800b2e0 <memmove>:
 800b2e0:	4288      	cmp	r0, r1
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	eb01 0402 	add.w	r4, r1, r2
 800b2e8:	d902      	bls.n	800b2f0 <memmove+0x10>
 800b2ea:	4284      	cmp	r4, r0
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	d807      	bhi.n	800b300 <memmove+0x20>
 800b2f0:	1e43      	subs	r3, r0, #1
 800b2f2:	42a1      	cmp	r1, r4
 800b2f4:	d008      	beq.n	800b308 <memmove+0x28>
 800b2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2fe:	e7f8      	b.n	800b2f2 <memmove+0x12>
 800b300:	4402      	add	r2, r0
 800b302:	4601      	mov	r1, r0
 800b304:	428a      	cmp	r2, r1
 800b306:	d100      	bne.n	800b30a <memmove+0x2a>
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b312:	e7f7      	b.n	800b304 <memmove+0x24>

0800b314 <_sbrk_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d06      	ldr	r5, [pc, #24]	; (800b330 <_sbrk_r+0x1c>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f6 f8c6 	bl	80014b0 <_sbrk>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_sbrk_r+0x1a>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_sbrk_r+0x1a>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	200020b8 	.word	0x200020b8

0800b334 <memcpy>:
 800b334:	440a      	add	r2, r1
 800b336:	4291      	cmp	r1, r2
 800b338:	f100 33ff 	add.w	r3, r0, #4294967295
 800b33c:	d100      	bne.n	800b340 <memcpy+0xc>
 800b33e:	4770      	bx	lr
 800b340:	b510      	push	{r4, lr}
 800b342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b34a:	4291      	cmp	r1, r2
 800b34c:	d1f9      	bne.n	800b342 <memcpy+0xe>
 800b34e:	bd10      	pop	{r4, pc}

0800b350 <__assert_func>:
 800b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b352:	4614      	mov	r4, r2
 800b354:	461a      	mov	r2, r3
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <__assert_func+0x2c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4605      	mov	r5, r0
 800b35c:	68d8      	ldr	r0, [r3, #12]
 800b35e:	b14c      	cbz	r4, 800b374 <__assert_func+0x24>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <__assert_func+0x30>)
 800b362:	9100      	str	r1, [sp, #0]
 800b364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b368:	4906      	ldr	r1, [pc, #24]	; (800b384 <__assert_func+0x34>)
 800b36a:	462b      	mov	r3, r5
 800b36c:	f000 f872 	bl	800b454 <fiprintf>
 800b370:	f000 f882 	bl	800b478 <abort>
 800b374:	4b04      	ldr	r3, [pc, #16]	; (800b388 <__assert_func+0x38>)
 800b376:	461c      	mov	r4, r3
 800b378:	e7f3      	b.n	800b362 <__assert_func+0x12>
 800b37a:	bf00      	nop
 800b37c:	20000154 	.word	0x20000154
 800b380:	0800bca7 	.word	0x0800bca7
 800b384:	0800bcb4 	.word	0x0800bcb4
 800b388:	0800bce2 	.word	0x0800bce2

0800b38c <_calloc_r>:
 800b38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b38e:	fba1 2402 	umull	r2, r4, r1, r2
 800b392:	b94c      	cbnz	r4, 800b3a8 <_calloc_r+0x1c>
 800b394:	4611      	mov	r1, r2
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	f7ff f994 	bl	800a6c4 <_malloc_r>
 800b39c:	9a01      	ldr	r2, [sp, #4]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b930      	cbnz	r0, 800b3b0 <_calloc_r+0x24>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	b003      	add	sp, #12
 800b3a6:	bd30      	pop	{r4, r5, pc}
 800b3a8:	220c      	movs	r2, #12
 800b3aa:	6002      	str	r2, [r0, #0]
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	e7f8      	b.n	800b3a2 <_calloc_r+0x16>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	f7fe fa16 	bl	80097e2 <memset>
 800b3b6:	e7f4      	b.n	800b3a2 <_calloc_r+0x16>

0800b3b8 <__ascii_mbtowc>:
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	b901      	cbnz	r1, 800b3be <__ascii_mbtowc+0x6>
 800b3bc:	a901      	add	r1, sp, #4
 800b3be:	b142      	cbz	r2, 800b3d2 <__ascii_mbtowc+0x1a>
 800b3c0:	b14b      	cbz	r3, 800b3d6 <__ascii_mbtowc+0x1e>
 800b3c2:	7813      	ldrb	r3, [r2, #0]
 800b3c4:	600b      	str	r3, [r1, #0]
 800b3c6:	7812      	ldrb	r2, [r2, #0]
 800b3c8:	1e10      	subs	r0, r2, #0
 800b3ca:	bf18      	it	ne
 800b3cc:	2001      	movne	r0, #1
 800b3ce:	b002      	add	sp, #8
 800b3d0:	4770      	bx	lr
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	e7fb      	b.n	800b3ce <__ascii_mbtowc+0x16>
 800b3d6:	f06f 0001 	mvn.w	r0, #1
 800b3da:	e7f8      	b.n	800b3ce <__ascii_mbtowc+0x16>

0800b3dc <_realloc_r>:
 800b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4614      	mov	r4, r2
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	b921      	cbnz	r1, 800b3f2 <_realloc_r+0x16>
 800b3e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	f7ff b969 	b.w	800a6c4 <_malloc_r>
 800b3f2:	b92a      	cbnz	r2, 800b400 <_realloc_r+0x24>
 800b3f4:	f7ff f8f2 	bl	800a5dc <_free_r>
 800b3f8:	4625      	mov	r5, r4
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b400:	f000 f841 	bl	800b486 <_malloc_usable_size_r>
 800b404:	4284      	cmp	r4, r0
 800b406:	4607      	mov	r7, r0
 800b408:	d802      	bhi.n	800b410 <_realloc_r+0x34>
 800b40a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b40e:	d812      	bhi.n	800b436 <_realloc_r+0x5a>
 800b410:	4621      	mov	r1, r4
 800b412:	4640      	mov	r0, r8
 800b414:	f7ff f956 	bl	800a6c4 <_malloc_r>
 800b418:	4605      	mov	r5, r0
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d0ed      	beq.n	800b3fa <_realloc_r+0x1e>
 800b41e:	42bc      	cmp	r4, r7
 800b420:	4622      	mov	r2, r4
 800b422:	4631      	mov	r1, r6
 800b424:	bf28      	it	cs
 800b426:	463a      	movcs	r2, r7
 800b428:	f7ff ff84 	bl	800b334 <memcpy>
 800b42c:	4631      	mov	r1, r6
 800b42e:	4640      	mov	r0, r8
 800b430:	f7ff f8d4 	bl	800a5dc <_free_r>
 800b434:	e7e1      	b.n	800b3fa <_realloc_r+0x1e>
 800b436:	4635      	mov	r5, r6
 800b438:	e7df      	b.n	800b3fa <_realloc_r+0x1e>

0800b43a <__ascii_wctomb>:
 800b43a:	b149      	cbz	r1, 800b450 <__ascii_wctomb+0x16>
 800b43c:	2aff      	cmp	r2, #255	; 0xff
 800b43e:	bf85      	ittet	hi
 800b440:	238a      	movhi	r3, #138	; 0x8a
 800b442:	6003      	strhi	r3, [r0, #0]
 800b444:	700a      	strbls	r2, [r1, #0]
 800b446:	f04f 30ff 	movhi.w	r0, #4294967295
 800b44a:	bf98      	it	ls
 800b44c:	2001      	movls	r0, #1
 800b44e:	4770      	bx	lr
 800b450:	4608      	mov	r0, r1
 800b452:	4770      	bx	lr

0800b454 <fiprintf>:
 800b454:	b40e      	push	{r1, r2, r3}
 800b456:	b503      	push	{r0, r1, lr}
 800b458:	4601      	mov	r1, r0
 800b45a:	ab03      	add	r3, sp, #12
 800b45c:	4805      	ldr	r0, [pc, #20]	; (800b474 <fiprintf+0x20>)
 800b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b462:	6800      	ldr	r0, [r0, #0]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	f000 f83f 	bl	800b4e8 <_vfiprintf_r>
 800b46a:	b002      	add	sp, #8
 800b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b470:	b003      	add	sp, #12
 800b472:	4770      	bx	lr
 800b474:	20000154 	.word	0x20000154

0800b478 <abort>:
 800b478:	b508      	push	{r3, lr}
 800b47a:	2006      	movs	r0, #6
 800b47c:	f000 fa0c 	bl	800b898 <raise>
 800b480:	2001      	movs	r0, #1
 800b482:	f7f5 ff9d 	bl	80013c0 <_exit>

0800b486 <_malloc_usable_size_r>:
 800b486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48a:	1f18      	subs	r0, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfbc      	itt	lt
 800b490:	580b      	ldrlt	r3, [r1, r0]
 800b492:	18c0      	addlt	r0, r0, r3
 800b494:	4770      	bx	lr

0800b496 <__sfputc_r>:
 800b496:	6893      	ldr	r3, [r2, #8]
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	b410      	push	{r4}
 800b49e:	6093      	str	r3, [r2, #8]
 800b4a0:	da08      	bge.n	800b4b4 <__sfputc_r+0x1e>
 800b4a2:	6994      	ldr	r4, [r2, #24]
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	db01      	blt.n	800b4ac <__sfputc_r+0x16>
 800b4a8:	290a      	cmp	r1, #10
 800b4aa:	d103      	bne.n	800b4b4 <__sfputc_r+0x1e>
 800b4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b0:	f000 b934 	b.w	800b71c <__swbuf_r>
 800b4b4:	6813      	ldr	r3, [r2, #0]
 800b4b6:	1c58      	adds	r0, r3, #1
 800b4b8:	6010      	str	r0, [r2, #0]
 800b4ba:	7019      	strb	r1, [r3, #0]
 800b4bc:	4608      	mov	r0, r1
 800b4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <__sfputs_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	18d5      	adds	r5, r2, r3
 800b4ce:	42ac      	cmp	r4, r5
 800b4d0:	d101      	bne.n	800b4d6 <__sfputs_r+0x12>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e007      	b.n	800b4e6 <__sfputs_r+0x22>
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	463a      	mov	r2, r7
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f7ff ffda 	bl	800b496 <__sfputc_r>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	d1f3      	bne.n	800b4ce <__sfputs_r+0xa>
 800b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4e8 <_vfiprintf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	b09d      	sub	sp, #116	; 0x74
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4698      	mov	r8, r3
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	b118      	cbz	r0, 800b500 <_vfiprintf_r+0x18>
 800b4f8:	6a03      	ldr	r3, [r0, #32]
 800b4fa:	b90b      	cbnz	r3, 800b500 <_vfiprintf_r+0x18>
 800b4fc:	f7fe f8d8 	bl	80096b0 <__sinit>
 800b500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	d405      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	059a      	lsls	r2, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50e:	f7fe f9e6 	bl	80098de <__retarget_lock_acquire_recursive>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	071b      	lsls	r3, r3, #28
 800b516:	d501      	bpl.n	800b51c <_vfiprintf_r+0x34>
 800b518:	692b      	ldr	r3, [r5, #16]
 800b51a:	b99b      	cbnz	r3, 800b544 <_vfiprintf_r+0x5c>
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 f93a 	bl	800b798 <__swsetup_r>
 800b524:	b170      	cbz	r0, 800b544 <_vfiprintf_r+0x5c>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07dc      	lsls	r4, r3, #31
 800b52a:	d504      	bpl.n	800b536 <_vfiprintf_r+0x4e>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b01d      	add	sp, #116	; 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d4f7      	bmi.n	800b52c <_vfiprintf_r+0x44>
 800b53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53e:	f7fe f9cf 	bl	80098e0 <__retarget_lock_release_recursive>
 800b542:	e7f3      	b.n	800b52c <_vfiprintf_r+0x44>
 800b544:	2300      	movs	r3, #0
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	2320      	movs	r3, #32
 800b54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b552:	2330      	movs	r3, #48	; 0x30
 800b554:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b708 <_vfiprintf_r+0x220>
 800b558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55c:	f04f 0901 	mov.w	r9, #1
 800b560:	4623      	mov	r3, r4
 800b562:	469a      	mov	sl, r3
 800b564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b568:	b10a      	cbz	r2, 800b56e <_vfiprintf_r+0x86>
 800b56a:	2a25      	cmp	r2, #37	; 0x25
 800b56c:	d1f9      	bne.n	800b562 <_vfiprintf_r+0x7a>
 800b56e:	ebba 0b04 	subs.w	fp, sl, r4
 800b572:	d00b      	beq.n	800b58c <_vfiprintf_r+0xa4>
 800b574:	465b      	mov	r3, fp
 800b576:	4622      	mov	r2, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa2 	bl	800b4c4 <__sfputs_r>
 800b580:	3001      	adds	r0, #1
 800b582:	f000 80a9 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	445a      	add	r2, fp
 800b58a:	9209      	str	r2, [sp, #36]	; 0x24
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a1 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a0:	f10a 0a01 	add.w	sl, sl, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b6:	4854      	ldr	r0, [pc, #336]	; (800b708 <_vfiprintf_r+0x220>)
 800b5b8:	f7f4 fe0a 	bl	80001d0 <memchr>
 800b5bc:	9a04      	ldr	r2, [sp, #16]
 800b5be:	b9d8      	cbnz	r0, 800b5f8 <_vfiprintf_r+0x110>
 800b5c0:	06d1      	lsls	r1, r2, #27
 800b5c2:	bf44      	itt	mi
 800b5c4:	2320      	movmi	r3, #32
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	0713      	lsls	r3, r2, #28
 800b5cc:	bf44      	itt	mi
 800b5ce:	232b      	movmi	r3, #43	; 0x2b
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d015      	beq.n	800b608 <_vfiprintf_r+0x120>
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ec:	3b30      	subs	r3, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d94d      	bls.n	800b68e <_vfiprintf_r+0x1a6>
 800b5f2:	b1b0      	cbz	r0, 800b622 <_vfiprintf_r+0x13a>
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	e014      	b.n	800b622 <_vfiprintf_r+0x13a>
 800b5f8:	eba0 0308 	sub.w	r3, r0, r8
 800b5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	46a2      	mov	sl, r4
 800b606:	e7d2      	b.n	800b5ae <_vfiprintf_r+0xc6>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfbb      	ittet	lt
 800b614:	425b      	neglt	r3, r3
 800b616:	f042 0202 	orrlt.w	r2, r2, #2
 800b61a:	9307      	strge	r3, [sp, #28]
 800b61c:	9307      	strlt	r3, [sp, #28]
 800b61e:	bfb8      	it	lt
 800b620:	9204      	strlt	r2, [sp, #16]
 800b622:	7823      	ldrb	r3, [r4, #0]
 800b624:	2b2e      	cmp	r3, #46	; 0x2e
 800b626:	d10c      	bne.n	800b642 <_vfiprintf_r+0x15a>
 800b628:	7863      	ldrb	r3, [r4, #1]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d134      	bne.n	800b698 <_vfiprintf_r+0x1b0>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	9203      	str	r2, [sp, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63e:	3402      	adds	r4, #2
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b718 <_vfiprintf_r+0x230>
 800b646:	7821      	ldrb	r1, [r4, #0]
 800b648:	2203      	movs	r2, #3
 800b64a:	4650      	mov	r0, sl
 800b64c:	f7f4 fdc0 	bl	80001d0 <memchr>
 800b650:	b138      	cbz	r0, 800b662 <_vfiprintf_r+0x17a>
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	eba0 000a 	sub.w	r0, r0, sl
 800b658:	2240      	movs	r2, #64	; 0x40
 800b65a:	4082      	lsls	r2, r0
 800b65c:	4313      	orrs	r3, r2
 800b65e:	3401      	adds	r4, #1
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b666:	4829      	ldr	r0, [pc, #164]	; (800b70c <_vfiprintf_r+0x224>)
 800b668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66c:	2206      	movs	r2, #6
 800b66e:	f7f4 fdaf 	bl	80001d0 <memchr>
 800b672:	2800      	cmp	r0, #0
 800b674:	d03f      	beq.n	800b6f6 <_vfiprintf_r+0x20e>
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <_vfiprintf_r+0x228>)
 800b678:	bb1b      	cbnz	r3, 800b6c2 <_vfiprintf_r+0x1da>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3307      	adds	r3, #7
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	3308      	adds	r3, #8
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	443b      	add	r3, r7
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	e768      	b.n	800b560 <_vfiprintf_r+0x78>
 800b68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b692:	460c      	mov	r4, r1
 800b694:	2001      	movs	r0, #1
 800b696:	e7a6      	b.n	800b5e6 <_vfiprintf_r+0xfe>
 800b698:	2300      	movs	r3, #0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6aa:	3a30      	subs	r2, #48	; 0x30
 800b6ac:	2a09      	cmp	r2, #9
 800b6ae:	d903      	bls.n	800b6b8 <_vfiprintf_r+0x1d0>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0c6      	beq.n	800b642 <_vfiprintf_r+0x15a>
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	e7c4      	b.n	800b642 <_vfiprintf_r+0x15a>
 800b6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6bc:	4604      	mov	r4, r0
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e7f0      	b.n	800b6a4 <_vfiprintf_r+0x1bc>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4b12      	ldr	r3, [pc, #72]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6ca:	a904      	add	r1, sp, #16
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fd fb9d 	bl	8008e0c <_printf_float>
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	1c78      	adds	r0, r7, #1
 800b6d6:	d1d6      	bne.n	800b686 <_vfiprintf_r+0x19e>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e6:	f7fe f8fb 	bl	80098e0 <__retarget_lock_release_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	065b      	lsls	r3, r3, #25
 800b6ee:	f53f af1d 	bmi.w	800b52c <_vfiprintf_r+0x44>
 800b6f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f4:	e71c      	b.n	800b530 <_vfiprintf_r+0x48>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	4630      	mov	r0, r6
 800b702:	f7fd fe27 	bl	8009354 <_printf_i>
 800b706:	e7e4      	b.n	800b6d2 <_vfiprintf_r+0x1ea>
 800b708:	0800bc8c 	.word	0x0800bc8c
 800b70c:	0800bc96 	.word	0x0800bc96
 800b710:	08008e0d 	.word	0x08008e0d
 800b714:	0800b4c5 	.word	0x0800b4c5
 800b718:	0800bc92 	.word	0x0800bc92

0800b71c <__swbuf_r>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	4614      	mov	r4, r2
 800b722:	4605      	mov	r5, r0
 800b724:	b118      	cbz	r0, 800b72e <__swbuf_r+0x12>
 800b726:	6a03      	ldr	r3, [r0, #32]
 800b728:	b90b      	cbnz	r3, 800b72e <__swbuf_r+0x12>
 800b72a:	f7fd ffc1 	bl	80096b0 <__sinit>
 800b72e:	69a3      	ldr	r3, [r4, #24]
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	071a      	lsls	r2, r3, #28
 800b736:	d525      	bpl.n	800b784 <__swbuf_r+0x68>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b31b      	cbz	r3, 800b784 <__swbuf_r+0x68>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	6922      	ldr	r2, [r4, #16]
 800b740:	1a98      	subs	r0, r3, r2
 800b742:	6963      	ldr	r3, [r4, #20]
 800b744:	b2f6      	uxtb	r6, r6
 800b746:	4283      	cmp	r3, r0
 800b748:	4637      	mov	r7, r6
 800b74a:	dc04      	bgt.n	800b756 <__swbuf_r+0x3a>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f7ff fd9e 	bl	800b290 <_fflush_r>
 800b754:	b9e0      	cbnz	r0, 800b790 <__swbuf_r+0x74>
 800b756:	68a3      	ldr	r3, [r4, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	60a3      	str	r3, [r4, #8]
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	701e      	strb	r6, [r3, #0]
 800b764:	6962      	ldr	r2, [r4, #20]
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	429a      	cmp	r2, r3
 800b76a:	d004      	beq.n	800b776 <__swbuf_r+0x5a>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	07db      	lsls	r3, r3, #31
 800b770:	d506      	bpl.n	800b780 <__swbuf_r+0x64>
 800b772:	2e0a      	cmp	r6, #10
 800b774:	d104      	bne.n	800b780 <__swbuf_r+0x64>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f7ff fd89 	bl	800b290 <_fflush_r>
 800b77e:	b938      	cbnz	r0, 800b790 <__swbuf_r+0x74>
 800b780:	4638      	mov	r0, r7
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f806 	bl	800b798 <__swsetup_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0d5      	beq.n	800b73c <__swbuf_r+0x20>
 800b790:	f04f 37ff 	mov.w	r7, #4294967295
 800b794:	e7f4      	b.n	800b780 <__swbuf_r+0x64>
	...

0800b798 <__swsetup_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <__swsetup_r+0xac>)
 800b79c:	4605      	mov	r5, r0
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	b118      	cbz	r0, 800b7ac <__swsetup_r+0x14>
 800b7a4:	6a03      	ldr	r3, [r0, #32]
 800b7a6:	b90b      	cbnz	r3, 800b7ac <__swsetup_r+0x14>
 800b7a8:	f7fd ff82 	bl	80096b0 <__sinit>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7b2:	0718      	lsls	r0, r3, #28
 800b7b4:	d422      	bmi.n	800b7fc <__swsetup_r+0x64>
 800b7b6:	06d9      	lsls	r1, r3, #27
 800b7b8:	d407      	bmi.n	800b7ca <__swsetup_r+0x32>
 800b7ba:	2309      	movs	r3, #9
 800b7bc:	602b      	str	r3, [r5, #0]
 800b7be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	e034      	b.n	800b834 <__swsetup_r+0x9c>
 800b7ca:	0758      	lsls	r0, r3, #29
 800b7cc:	d512      	bpl.n	800b7f4 <__swsetup_r+0x5c>
 800b7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d0:	b141      	cbz	r1, 800b7e4 <__swsetup_r+0x4c>
 800b7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d6:	4299      	cmp	r1, r3
 800b7d8:	d002      	beq.n	800b7e0 <__swsetup_r+0x48>
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f7fe fefe 	bl	800a5dc <_free_r>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	6063      	str	r3, [r4, #4]
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f043 0308 	orr.w	r3, r3, #8
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b94b      	cbnz	r3, 800b814 <__swsetup_r+0x7c>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b80a:	d003      	beq.n	800b814 <__swsetup_r+0x7c>
 800b80c:	4621      	mov	r1, r4
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 f884 	bl	800b91c <__smakebuf_r>
 800b814:	89a0      	ldrh	r0, [r4, #12]
 800b816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b81a:	f010 0301 	ands.w	r3, r0, #1
 800b81e:	d00a      	beq.n	800b836 <__swsetup_r+0x9e>
 800b820:	2300      	movs	r3, #0
 800b822:	60a3      	str	r3, [r4, #8]
 800b824:	6963      	ldr	r3, [r4, #20]
 800b826:	425b      	negs	r3, r3
 800b828:	61a3      	str	r3, [r4, #24]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	b943      	cbnz	r3, 800b840 <__swsetup_r+0xa8>
 800b82e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b832:	d1c4      	bne.n	800b7be <__swsetup_r+0x26>
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	0781      	lsls	r1, r0, #30
 800b838:	bf58      	it	pl
 800b83a:	6963      	ldrpl	r3, [r4, #20]
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	e7f4      	b.n	800b82a <__swsetup_r+0x92>
 800b840:	2000      	movs	r0, #0
 800b842:	e7f7      	b.n	800b834 <__swsetup_r+0x9c>
 800b844:	20000154 	.word	0x20000154

0800b848 <_raise_r>:
 800b848:	291f      	cmp	r1, #31
 800b84a:	b538      	push	{r3, r4, r5, lr}
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	d904      	bls.n	800b85c <_raise_r+0x14>
 800b852:	2316      	movs	r3, #22
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b85e:	b112      	cbz	r2, 800b866 <_raise_r+0x1e>
 800b860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b864:	b94b      	cbnz	r3, 800b87a <_raise_r+0x32>
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f830 	bl	800b8cc <_getpid_r>
 800b86c:	462a      	mov	r2, r5
 800b86e:	4601      	mov	r1, r0
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b876:	f000 b817 	b.w	800b8a8 <_kill_r>
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d00a      	beq.n	800b894 <_raise_r+0x4c>
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	d103      	bne.n	800b88a <_raise_r+0x42>
 800b882:	2316      	movs	r3, #22
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	2001      	movs	r0, #1
 800b888:	e7e7      	b.n	800b85a <_raise_r+0x12>
 800b88a:	2400      	movs	r4, #0
 800b88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b890:	4628      	mov	r0, r5
 800b892:	4798      	blx	r3
 800b894:	2000      	movs	r0, #0
 800b896:	e7e0      	b.n	800b85a <_raise_r+0x12>

0800b898 <raise>:
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <raise+0xc>)
 800b89a:	4601      	mov	r1, r0
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	f7ff bfd3 	b.w	800b848 <_raise_r>
 800b8a2:	bf00      	nop
 800b8a4:	20000154 	.word	0x20000154

0800b8a8 <_kill_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_kill_r+0x20>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f7f5 fd73 	bl	80013a0 <_kill>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d102      	bne.n	800b8c4 <_kill_r+0x1c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b103      	cbz	r3, 800b8c4 <_kill_r+0x1c>
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}
 800b8c6:	bf00      	nop
 800b8c8:	200020b8 	.word	0x200020b8

0800b8cc <_getpid_r>:
 800b8cc:	f7f5 bd60 	b.w	8001390 <_getpid>

0800b8d0 <__swhatbuf_r>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	b096      	sub	sp, #88	; 0x58
 800b8dc:	4615      	mov	r5, r2
 800b8de:	461e      	mov	r6, r3
 800b8e0:	da0d      	bge.n	800b8fe <__swhatbuf_r+0x2e>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8e8:	f04f 0100 	mov.w	r1, #0
 800b8ec:	bf0c      	ite	eq
 800b8ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8f2:	2340      	movne	r3, #64	; 0x40
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	6031      	str	r1, [r6, #0]
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	b016      	add	sp, #88	; 0x58
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
 800b8fe:	466a      	mov	r2, sp
 800b900:	f000 f848 	bl	800b994 <_fstat_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	dbec      	blt.n	800b8e2 <__swhatbuf_r+0x12>
 800b908:	9901      	ldr	r1, [sp, #4]
 800b90a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b90e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b912:	4259      	negs	r1, r3
 800b914:	4159      	adcs	r1, r3
 800b916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b91a:	e7eb      	b.n	800b8f4 <__swhatbuf_r+0x24>

0800b91c <__smakebuf_r>:
 800b91c:	898b      	ldrh	r3, [r1, #12]
 800b91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b920:	079d      	lsls	r5, r3, #30
 800b922:	4606      	mov	r6, r0
 800b924:	460c      	mov	r4, r1
 800b926:	d507      	bpl.n	800b938 <__smakebuf_r+0x1c>
 800b928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	2301      	movs	r3, #1
 800b932:	6163      	str	r3, [r4, #20]
 800b934:	b002      	add	sp, #8
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	ab01      	add	r3, sp, #4
 800b93a:	466a      	mov	r2, sp
 800b93c:	f7ff ffc8 	bl	800b8d0 <__swhatbuf_r>
 800b940:	9900      	ldr	r1, [sp, #0]
 800b942:	4605      	mov	r5, r0
 800b944:	4630      	mov	r0, r6
 800b946:	f7fe febd 	bl	800a6c4 <_malloc_r>
 800b94a:	b948      	cbnz	r0, 800b960 <__smakebuf_r+0x44>
 800b94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b950:	059a      	lsls	r2, r3, #22
 800b952:	d4ef      	bmi.n	800b934 <__smakebuf_r+0x18>
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	f043 0302 	orr.w	r3, r3, #2
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7e3      	b.n	800b928 <__smakebuf_r+0xc>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	9b00      	ldr	r3, [sp, #0]
 800b96c:	6163      	str	r3, [r4, #20]
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	6120      	str	r0, [r4, #16]
 800b972:	b15b      	cbz	r3, 800b98c <__smakebuf_r+0x70>
 800b974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 f81d 	bl	800b9b8 <_isatty_r>
 800b97e:	b128      	cbz	r0, 800b98c <__smakebuf_r+0x70>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	431d      	orrs	r5, r3
 800b990:	81a5      	strh	r5, [r4, #12]
 800b992:	e7cf      	b.n	800b934 <__smakebuf_r+0x18>

0800b994 <_fstat_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_fstat_r+0x20>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7f5 fd5c 	bl	800145e <_fstat>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d102      	bne.n	800b9b0 <_fstat_r+0x1c>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b103      	cbz	r3, 800b9b0 <_fstat_r+0x1c>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200020b8 	.word	0x200020b8

0800b9b8 <_isatty_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_isatty_r+0x1c>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7f5 fd5b 	bl	800147e <_isatty>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_isatty_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_isatty_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	200020b8 	.word	0x200020b8

0800b9d8 <_init>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	bf00      	nop
 800b9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9de:	bc08      	pop	{r3}
 800b9e0:	469e      	mov	lr, r3
 800b9e2:	4770      	bx	lr

0800b9e4 <_fini>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr

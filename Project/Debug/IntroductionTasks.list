
IntroductionTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e61c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800e7b0  0800e7b0  0001e7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed0c  0800ed0c  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed0c  0800ed0c  0001ed0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed14  0800ed14  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed14  0800ed14  0001ed14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed18  0800ed18  0001ed18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800ed1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c8  2**0
                  CONTENTS
 10 .bss          0000684c  200002c8  200002c8  000202c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006b14  20006b14  000202c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000230f5  00000000  00000000  0002033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004fe6  00000000  00000000  00043430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e60  00000000  00000000  00048418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001765  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000769c  00000000  00000000  0004b9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000245c0  00000000  00000000  00053079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd8d6  00000000  00000000  00077639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000091f4  00000000  00000000  00154f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0015e104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e794 	.word	0x0800e794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800e794 	.word	0x0800e794

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fcea 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f86e 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f93a 	bl	8001128 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f8d4 	bl	8001060 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000eb8:	f000 f900 	bl	80010bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ebc:	f006 fece 	bl	8007c5c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of blinking_resource */
  blinking_resourceHandle = osMutexNew(&blinking_resource_attributes);
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <main+0x98>)
 8000ec2:	f006 ffc2 	bl	8007e4a <osMutexNew>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <main+0x9c>)
 8000eca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of accTask */
  accTaskHandle = osThreadNew(acc_fetch, NULL, &accTask_attributes);
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <main+0xa0>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	481d      	ldr	r0, [pc, #116]	; (8000f48 <main+0xa4>)
 8000ed2:	f006 ff0d 	bl	8007cf0 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <main+0xa8>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of tmpTask */
  tmpTaskHandle = osThreadNew(tmp_fetch, NULL, &tmpTask_attributes);
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <main+0xac>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	481c      	ldr	r0, [pc, #112]	; (8000f54 <main+0xb0>)
 8000ee2:	f006 ff05 	bl	8007cf0 <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <main+0xb4>)
 8000eea:	6013      	str	r3, [r2, #0]

  /* creation of ledGreenTask */
  ledGreenTaskHandle = osThreadNew(ledGreen, NULL, &ledGreenTask_attributes);
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <main+0xb8>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	481b      	ldr	r0, [pc, #108]	; (8000f60 <main+0xbc>)
 8000ef2:	f006 fefd 	bl	8007cf0 <osThreadNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <main+0xc0>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* creation of ledOrangeTask */
  ledOrangeTaskHandle = osThreadNew(ledOrange, NULL, &ledOrangeTask_attributes);
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <main+0xc4>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	481a      	ldr	r0, [pc, #104]	; (8000f6c <main+0xc8>)
 8000f02:	f006 fef5 	bl	8007cf0 <osThreadNew>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <main+0xcc>)
 8000f0a:	6013      	str	r3, [r2, #0]

  /* creation of ledRedTask */
  ledRedTaskHandle = osThreadNew(ledRed, NULL, &ledRedTask_attributes);
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <main+0xd0>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4819      	ldr	r0, [pc, #100]	; (8000f78 <main+0xd4>)
 8000f12:	f006 feed 	bl	8007cf0 <osThreadNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <main+0xd8>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* creation of ledBlueTask */
  ledBlueTaskHandle = osThreadNew(ledBlue, NULL, &ledBlueTask_attributes);
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <main+0xdc>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <main+0xe0>)
 8000f22:	f006 fee5 	bl	8007cf0 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <main+0xe4>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f2c:	f006 feba 	bl	8007ca4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 fce6 	bl	8001904 <HAL_Delay>
 8000f38:	e7fa      	b.n	8000f30 <main+0x8c>
 8000f3a:	bf00      	nop
 8000f3c:	0800e974 	.word	0x0800e974
 8000f40:	200003a8 	.word	0x200003a8
 8000f44:	0800e89c 	.word	0x0800e89c
 8000f48:	080012bd 	.word	0x080012bd
 8000f4c:	20000390 	.word	0x20000390
 8000f50:	0800e8c0 	.word	0x0800e8c0
 8000f54:	080012fd 	.word	0x080012fd
 8000f58:	20000394 	.word	0x20000394
 8000f5c:	0800e8e4 	.word	0x0800e8e4
 8000f60:	08001339 	.word	0x08001339
 8000f64:	20000398 	.word	0x20000398
 8000f68:	0800e908 	.word	0x0800e908
 8000f6c:	08001351 	.word	0x08001351
 8000f70:	2000039c 	.word	0x2000039c
 8000f74:	0800e92c 	.word	0x0800e92c
 8000f78:	08001369 	.word	0x08001369
 8000f7c:	200003a0 	.word	0x200003a0
 8000f80:	0800e950 	.word	0x0800e950
 8000f84:	08001381 	.word	0x08001381
 8000f88:	200003a4 	.word	0x200003a4

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00b faab 	bl	800c4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <SystemClock_Config+0xcc>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <SystemClock_Config+0xd0>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001000:	23a8      	movs	r3, #168	; 0xa8
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001008:	2307      	movs	r3, #7
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fae1 	bl	80035d8 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800101c:	f000 f9ce 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2105      	movs	r1, #5
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fd42 	bl	8003ac8 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800104a:	f000 f9b7 	bl	80013bc <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	; 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <MX_I2C1_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_I2C1_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_I2C1_Init+0x50>)
 800109e:	f000 ff07 	bl	8001eb0 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f988 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200002e4 	.word	0x200002e4
 80010b4:	40005400 	.word	0x40005400
 80010b8:	000186a0 	.word	0x000186a0

080010bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <MX_SPI1_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI1_Init+0x64>)
 80010dc:	2202      	movs	r2, #2
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f0:	2228      	movs	r2, #40	; 0x28
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI1_Init+0x64>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_SPI1_Init+0x64>)
 800110e:	f002 ff2d 	bl	8003f6c <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001118:	f000 f950 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000338 	.word	0x20000338
 8001124:	40013000 	.word	0x40013000

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a43      	ldr	r2, [pc, #268]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <MX_GPIO_Init+0x12c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <MX_GPIO_Init+0x12c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a35      	ldr	r2, [pc, #212]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <MX_GPIO_Init+0x12c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <MX_GPIO_Init+0x12c>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <MX_GPIO_Init+0x12c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_GPIO_Init+0x12c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <MX_GPIO_Init+0x12c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_GPIO_Init+0x12c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2108      	movs	r1, #8
 80011ce:	4822      	ldr	r0, [pc, #136]	; (8001258 <MX_GPIO_Init+0x130>)
 80011d0:	f000 fe3a 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011da:	4820      	ldr	r0, [pc, #128]	; (800125c <MX_GPIO_Init+0x134>)
 80011dc:	f000 fe34 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_GPIO_Init+0x130>)
 80011f8:	f000 fc8a 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <MX_GPIO_Init+0x138>)
 8001210:	f000 fc7e 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001214:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <MX_GPIO_Init+0x134>)
 800122e:	f000 fc6f 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001236:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0x130>)
 8001248:	f000 fc62 	bl	8001b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40021000 	.word	0x40021000
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40020000 	.word	0x40020000

08001264 <blink_led_5_time>:

/* USER CODE BEGIN 4 */


void blink_led_5_time(uint16_t GPIO_PIN){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	osMutexWait(blinking_resourceHandle, HAL_MAX_DELAY);
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <blink_led_5_time+0x50>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f04f 31ff 	mov.w	r1, #4294967295
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fe6d 	bl	8007f56 <osMutexAcquire>
	for (int i = 0; i < 5; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e00b      	b.n	800129a <blink_led_5_time+0x36>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <blink_led_5_time+0x54>)
 8001288:	f000 fdf7 	bl	8001e7a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f000 fb38 	bl	8001904 <HAL_Delay>
	for (int i = 0; i < 5; i++){
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b04      	cmp	r3, #4
 800129e:	ddf0      	ble.n	8001282 <blink_led_5_time+0x1e>
	}
	osMutexRelease(blinking_resourceHandle);
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <blink_led_5_time+0x50>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fea1 	bl	8007fec <osMutexRelease>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003a8 	.word	0x200003a8
 80012b8:	40020c00 	.word	0x40020c00

080012bc <acc_fetch>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_acc_fetch */
void acc_fetch(void *argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b09c      	sub	sp, #112	; 0x70
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012c4:	f009 fe72 	bl	800afac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t buffer[100];
  for(;;)
  {
	  sprintf((char*) &buffer, "In for loop for acc \r\n");
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	490a      	ldr	r1, [pc, #40]	; (80012f8 <acc_fetch+0x3c>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00b f8ae 	bl	800c430 <siprintf>
	  size_t length = strlen((char*) &buffer);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ffc9 	bl	8000270 <strlen>
 80012de:	66f8      	str	r0, [r7, #108]	; 0x6c
	  CDC_Transmit_FS(buffer, length);
 80012e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f009 ff1c 	bl	800b128 <CDC_Transmit_FS>
	  //task5(&hspi1);
    osDelay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f006 fd8f 	bl	8007e14 <osDelay>
  {
 80012f6:	e7e7      	b.n	80012c8 <acc_fetch+0xc>
 80012f8:	0800e80c 	.word	0x0800e80c

080012fc <tmp_fetch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tmp_fetch */
void tmp_fetch(void *argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09c      	sub	sp, #112	; 0x70
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tmp_fetch */
	/* Infinite loop */
	uint8_t buffer[100];
	for(;;)
	{
		sprintf((char*) &buffer, "In for loop for temp \r\n");
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	490a      	ldr	r1, [pc, #40]	; (8001334 <tmp_fetch+0x38>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00b f890 	bl	800c430 <siprintf>
		size_t length = strlen((char*) &buffer);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffab 	bl	8000270 <strlen>
 800131a:	66f8      	str	r0, [r7, #108]	; 0x6c
		CDC_Transmit_FS(buffer, length);
 800131c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800131e:	b29a      	uxth	r2, r3
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f009 fefe 	bl	800b128 <CDC_Transmit_FS>

		//task3(&hi2c1);
		osDelay(100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f006 fd71 	bl	8007e14 <osDelay>
	{
 8001332:	e7e7      	b.n	8001304 <tmp_fetch+0x8>
 8001334:	0800e824 	.word	0x0800e824

08001338 <ledGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledGreen */
void ledGreen(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledGreen */
  /* Infinite loop */
  for(;;)
  {
	blink_led_5_time(GPIO_PIN_12);
 8001340:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001344:	f7ff ff8e 	bl	8001264 <blink_led_5_time>
    osDelay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f006 fd63 	bl	8007e14 <osDelay>
	blink_led_5_time(GPIO_PIN_12);
 800134e:	e7f7      	b.n	8001340 <ledGreen+0x8>

08001350 <ledOrange>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledOrange */
void ledOrange(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledOrange */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_13);
 8001358:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800135c:	f7ff ff82 	bl	8001264 <blink_led_5_time>
    osDelay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f006 fd57 	bl	8007e14 <osDelay>
	  blink_led_5_time(GPIO_PIN_13);
 8001366:	e7f7      	b.n	8001358 <ledOrange+0x8>

08001368 <ledRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledRed */
void ledRed(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledRed */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_14);
 8001370:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001374:	f7ff ff76 	bl	8001264 <blink_led_5_time>
    osDelay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f006 fd4b 	bl	8007e14 <osDelay>
	  blink_led_5_time(GPIO_PIN_14);
 800137e:	e7f7      	b.n	8001370 <ledRed+0x8>

08001380 <ledBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledBlue */
void ledBlue(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledBlue */
  /* Infinite loop */
  for(;;)
  {
	  blink_led_5_time(GPIO_PIN_15);
 8001388:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800138c:	f7ff ff6a 	bl	8001264 <blink_led_5_time>
    osDelay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f006 fd3f 	bl	8007e14 <osDelay>
	  blink_led_5_time(GPIO_PIN_15);
 8001396:	e7f7      	b.n	8001388 <ledBlue+0x8>

08001398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013aa:	f000 fa8b 	bl	80018c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_MspInit+0x54>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_MspInit+0x54>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_MspInit+0x54>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_MspInit+0x54>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_MspInit+0x54>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_MspInit+0x54>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	210f      	movs	r1, #15
 800140a:	f06f 0001 	mvn.w	r0, #1
 800140e:	f000 fb55 	bl	8001abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12b      	bne.n	800149a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <HAL_I2C_MspInit+0x8c>)
 800147a:	f000 fb49 	bl	8001b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_SPI_MspInit+0x84>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d12b      	bne.n	800152a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_SPI_MspInit+0x88>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <HAL_SPI_MspInit+0x88>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_SPI_MspInit+0x88>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_SPI_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_SPI_MspInit+0x88>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_SPI_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800150a:	23e0      	movs	r3, #224	; 0xe0
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151a:	2305      	movs	r3, #5
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_SPI_MspInit+0x8c>)
 8001526:	f000 faf3 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40013000 	.word	0x40013000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_InitTick+0xd4>)
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_InitTick+0xd4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6453      	str	r3, [r2, #68]	; 0x44
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_InitTick+0xd4>)
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fcc6 	bl	8003f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800157c:	f002 fcb0 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	4a23      	ldr	r2, [pc, #140]	; (8001618 <HAL_InitTick+0xd8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3b01      	subs	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_InitTick+0xdc>)
 8001596:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_InitTick+0xe0>)
 8001598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_InitTick+0xdc>)
 800159c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_InitTick+0xdc>)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_InitTick+0xdc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_InitTick+0xdc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_InitTick+0xdc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <HAL_InitTick+0xdc>)
 80015bc:	f002 fd5f 	bl	800407e <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80015c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11b      	bne.n	8001606 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <HAL_InitTick+0xdc>)
 80015d0:	f002 fdae 	bl	8004130 <HAL_TIM_Base_Start_IT>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80015da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015e2:	2019      	movs	r0, #25
 80015e4:	f000 fa86 	bl	8001af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	d808      	bhi.n	8001600 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015ee:	2200      	movs	r2, #0
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	2019      	movs	r0, #25
 80015f4:	f000 fa62 	bl	8001abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_InitTick+0xe4>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e002      	b.n	8001606 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800160a:	4618      	mov	r0, r3
 800160c:	3730      	adds	r7, #48	; 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	431bde83 	.word	0x431bde83
 800161c:	200003ac 	.word	0x200003ac
 8001620:	40010000 	.word	0x40010000
 8001624:	20000004 	.word	0x20000004

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800165a:	f002 fdd9 	bl	8004210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003ac 	.word	0x200003ac

08001668 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <OTG_FS_IRQHandler+0x10>)
 800166e:	f000 fea7 	bl	80023c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200062c4 	.word	0x200062c4

0800167c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_kill>:

int _kill(int pid, int sig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001696:	f00a ffd7 	bl	800c648 <__errno>
 800169a:	4603      	mov	r3, r0
 800169c:	2216      	movs	r2, #22
 800169e:	601a      	str	r2, [r3, #0]
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_exit>:

void _exit (int status)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffe7 	bl	800168c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016be:	e7fe      	b.n	80016be <_exit+0x12>

080016c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
  }

  return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf1      	blt.n	800170c <_write+0x12>
  }
  return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:

int _close(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
  return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f00a ff3c 	bl	800c648 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200003f4 	.word	0x200003f4
 8001804:	20006b18 	.word	0x20006b18

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001830:	f7ff ffea 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	; (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f00a fefb 	bl	800c654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb21 	bl	8000ea4 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001870:	0800ed1c 	.word	0x0800ed1c
  ldr r2, =_sbss
 8001874:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001878:	20006b14 	.word	0x20006b14

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f8fc 	bl	8001aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f7ff fe46 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fd88 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	200003f8 	.word	0x200003f8

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200003f8 	.word	0x200003f8

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff4c 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ace:	f7ff ff61 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	f7ff ffb1 	bl	8001a40 <NVIC_EncodePriority>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff80 	bl	80019ec <__NVIC_SetPriority>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff54 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e16b      	b.n	8001e04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 815a 	bne.w	8001dfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d017      	beq.n	8001c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80b4 	beq.w	8001dfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <HAL_GPIO_Init+0x30c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a5f      	ldr	r2, [pc, #380]	; (8001e1c <HAL_GPIO_Init+0x30c>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_GPIO_Init+0x30c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <HAL_GPIO_Init+0x310>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_GPIO_Init+0x314>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02b      	beq.n	8001d36 <HAL_GPIO_Init+0x226>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_GPIO_Init+0x318>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_Init+0x222>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_GPIO_Init+0x31c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_GPIO_Init+0x21e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x320>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x21a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4e      	ldr	r2, [pc, #312]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x216>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4d      	ldr	r2, [pc, #308]	; (8001e38 <HAL_GPIO_Init+0x328>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x212>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <HAL_GPIO_Init+0x32c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_GPIO_Init+0x330>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x20a>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e00e      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	e00c      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d1e:	2306      	movs	r3, #6
 8001d20:	e00a      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d22:	2305      	movs	r3, #5
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x228>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x310>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f ae90 	bls.w	8001b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40021400 	.word	0x40021400
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e12b      	b.n	800211a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff faa2 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	; 0x24
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f14:	f001 ffd0 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a81      	ldr	r2, [pc, #516]	; (8002124 <HAL_I2C_Init+0x274>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d807      	bhi.n	8001f34 <HAL_I2C_Init+0x84>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a80      	ldr	r2, [pc, #512]	; (8002128 <HAL_I2C_Init+0x278>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e006      	b.n	8001f42 <HAL_I2C_Init+0x92>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a7d      	ldr	r2, [pc, #500]	; (800212c <HAL_I2C_Init+0x27c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0e7      	b.n	800211a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a78      	ldr	r2, [pc, #480]	; (8002130 <HAL_I2C_Init+0x280>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_I2C_Init+0x274>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d802      	bhi.n	8001f84 <HAL_I2C_Init+0xd4>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3301      	adds	r3, #1
 8001f82:	e009      	b.n	8001f98 <HAL_I2C_Init+0xe8>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_I2C_Init+0x284>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	495c      	ldr	r1, [pc, #368]	; (8002124 <HAL_I2C_Init+0x274>)
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d819      	bhi.n	8001fec <HAL_I2C_Init+0x13c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e59      	subs	r1, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fcc:	400b      	ands	r3, r1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_I2C_Init+0x138>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e59      	subs	r1, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	e051      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e04f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_I2C_Init+0x168>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e012      	b.n	800203e <HAL_I2C_Init+0x18e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x196>
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <HAL_I2C_Init+0x1bc>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e58      	subs	r0, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	e00f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6911      	ldr	r1, [r2, #16]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	000186a0 	.word	0x000186a0
 8002128:	001e847f 	.word	0x001e847f
 800212c:	003d08ff 	.word	0x003d08ff
 8002130:	431bde83 	.word	0x431bde83
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af02      	add	r7, sp, #8
 800213e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e101      	b.n	800234e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f009 f927 	bl	800b3b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002178:	d102      	bne.n	8002180 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fb32 	bl	80047ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7c1a      	ldrb	r2, [r3, #16]
 8002192:	f88d 2000 	strb.w	r2, [sp]
 8002196:	3304      	adds	r3, #4
 8002198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219a:	f002 fa11 	bl	80045c0 <USB_CoreInit>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ce      	b.n	800234e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fb2a 	bl	8004810 <USB_SetCurrentMode>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0bf      	b.n	800234e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e04a      	b.n	800226a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3315      	adds	r3, #21
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3314      	adds	r3, #20
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	b298      	uxth	r0, r3
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	332e      	adds	r3, #46	; 0x2e
 8002210:	4602      	mov	r2, r0
 8002212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3318      	adds	r3, #24
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	331c      	adds	r3, #28
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3320      	adds	r3, #32
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3324      	adds	r3, #36	; 0x24
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	3301      	adds	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	429a      	cmp	r2, r3
 8002272:	d3af      	bcc.n	80021d4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e044      	b.n	8002304 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f203 2355 	addw	r3, r3, #597	; 0x255
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	3301      	adds	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	429a      	cmp	r2, r3
 800230c:	d3b5      	bcc.n	800227a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7c1a      	ldrb	r2, [r3, #16]
 8002316:	f88d 2000 	strb.w	r2, [sp]
 800231a:	3304      	adds	r3, #4
 800231c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231e:	f002 fac3 	bl	80048a8 <USB_DevInit>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e00c      	b.n	800234e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fb07 	bl	800595a <USB_DevDisconnect>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_Start+0x1c>
 800236e:	2302      	movs	r3, #2
 8002370:	e022      	b.n	80023b8 <HAL_PCD_Start+0x62>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fa14 	bl	80047cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fab5 	bl	8005918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b08d      	sub	sp, #52	; 0x34
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fb73 	bl	8005ac2 <USB_GetMode>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 848c 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fad7 	bl	800599c <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8482 	beq.w	8002cfa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fac4 	bl	800599c <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d107      	bne.n	800242e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 0202 	and.w	r2, r2, #2
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fab2 	bl	800599c <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b10      	cmp	r3, #16
 8002440:	d161      	bne.n	8002506 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0210 	bic.w	r2, r2, #16
 8002450:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	0c5b      	lsrs	r3, r3, #17
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	2b02      	cmp	r3, #2
 800247c:	d124      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d035      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6a38      	ldr	r0, [r7, #32]
 800249e:	f003 f8e9 	bl	8005674 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ae:	441a      	add	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c0:	441a      	add	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	e016      	b.n	80024f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	0c5b      	lsrs	r3, r3, #17
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d110      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024da:	2208      	movs	r2, #8
 80024dc:	4619      	mov	r1, r3
 80024de:	6a38      	ldr	r0, [r7, #32]
 80024e0:	f003 f8c8 	bl	8005674 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f0:	441a      	add	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0210 	orr.w	r2, r2, #16
 8002504:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fa46 	bl	800599c <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800251a:	f040 80a7 	bne.w	800266c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fa4b 	bl	80059c2 <USB_ReadDevAllOutEpInterrupt>
 800252c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800252e:	e099      	b.n	8002664 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 808e 	beq.w	8002658 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fa6f 	bl	8005a2a <USB_ReadDevOutEPInterrupt>
 800254c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00c      	beq.n	8002572 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	2301      	movs	r3, #1
 8002568:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800256a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fea1 	bl	80032b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	2308      	movs	r3, #8
 800258c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 ff77 	bl	8003484 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	2310      	movs	r3, #16
 80025b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d030      	beq.n	800261e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d109      	bne.n	80025dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	78db      	ldrb	r3, [r3, #3]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	b2db      	uxtb	r3, r3
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f008 ffdc 	bl	800b5c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	2302      	movs	r3, #2
 800261c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	461a      	mov	r2, r3
 8002636:	2320      	movs	r3, #32
 8002638:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002656:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3301      	adds	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	f47f af62 	bne.w	8002530 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f993 	bl	800599c <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002680:	f040 80db 	bne.w	800283a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f003 f9b4 	bl	80059f6 <USB_ReadDevAllInEpInterrupt>
 800268e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002694:	e0cd      	b.n	8002832 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80c2 	beq.w	8002826 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 f9da 	bl	8005a66 <USB_ReadDevInEPInterrupt>
 80026b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d057      	beq.n	800276e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	2201      	movs	r2, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69f9      	ldr	r1, [r7, #28]
 80026da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026de:	4013      	ands	r3, r2
 80026e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	799b      	ldrb	r3, [r3, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d132      	bne.n	8002762 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3320      	adds	r3, #32
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4403      	add	r3, r0
 800271c:	331c      	adds	r3, #28
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4419      	add	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4403      	add	r3, r0
 8002730:	3320      	adds	r3, #32
 8002732:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <HAL_PCD_IRQHandler+0x3a2>
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3324      	adds	r3, #36	; 0x24
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d108      	bne.n	8002762 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800275a:	461a      	mov	r2, r3
 800275c:	2101      	movs	r1, #1
 800275e:	f003 f9e1 	bl	8005b24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f008 fea6 	bl	800b4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002784:	461a      	mov	r2, r3
 8002786:	2308      	movs	r3, #8
 8002788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a0:	461a      	mov	r2, r3
 80027a2:	2310      	movs	r3, #16
 80027a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027bc:	461a      	mov	r2, r3
 80027be:	2340      	movs	r3, #64	; 0x40
 80027c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ce:	6a38      	ldr	r0, [r7, #32]
 80027d0:	f002 f9ce 	bl	8004b70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	3310      	adds	r3, #16
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	3304      	adds	r3, #4
 80027e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	78db      	ldrb	r3, [r3, #3]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f008 fef3 	bl	800b5e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2302      	movs	r3, #2
 8002812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800281e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fcbb 	bl	800319c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af2e 	bne.w	8002696 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 f8ac 	bl	800599c <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800284a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284e:	d122      	bne.n	8002896 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fea1 	bl	80035c0 <HAL_PCDEx_LPM_Callback>
 800287e:	e002      	b.n	8002886 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f008 fe91 	bl	800b5a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 f87e 	bl	800599c <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d112      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f008 fe4d 	bl	800b55c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028d0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 f860 	bl	800599c <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	f040 80b7 	bne.w	8002a58 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2110      	movs	r1, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f002 f933 	bl	8004b70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	e046      	b.n	800299e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291c:	461a      	mov	r2, r3
 800291e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002922:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	0151      	lsls	r1, r2, #5
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	440a      	add	r2, r1
 800293a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800293e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002956:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002968:	0151      	lsls	r1, r2, #5
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	440a      	add	r2, r1
 800296e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	440a      	add	r2, r1
 800298e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002996:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	3301      	adds	r3, #1
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d3b2      	bcc.n	8002910 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7bdb      	ldrb	r3, [r3, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d6:	f043 030b 	orr.w	r3, r3, #11
 80029da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ec:	f043 030b 	orr.w	r3, r3, #11
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	e015      	b.n	8002a20 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1a:	f043 030b 	orr.w	r3, r3, #11
 8002a1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f003 f86e 	bl	8005b24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 ff9d 	bl	800599c <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d123      	bne.n	8002ab6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 f833 	bl	8005ade <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 f8f0 	bl	8004c62 <USB_GetDevSpeed>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	f001 fa07 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8002a92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f001 fdf4 	bl	8004688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f008 fd32 	bl	800b50a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 ff6e 	bl	800599c <USB_ReadInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f008 fd0f 	bl	800b4ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 0208 	and.w	r2, r2, #8
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 ff59 	bl	800599c <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d123      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e014      	b.n	8002b30 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb08 	bl	800313a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	461a      	mov	r2, r3
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d3e4      	bcc.n	8002b06 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 ff2b 	bl	800599c <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b50:	d13c      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b52:	2301      	movs	r3, #1
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	e02b      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3318      	adds	r3, #24
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d115      	bne.n	8002baa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da12      	bge.n	8002baa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3317      	adds	r3, #23
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fac8 	bl	800313a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d3cd      	bcc.n	8002b58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fee3 	bl	800599c <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be0:	d156      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be2:	2301      	movs	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e045      	b.n	8002c74 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d12e      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da2b      	bge.n	8002c6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002c22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d121      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6a:	6053      	str	r3, [r2, #4]
            break;
 8002c6c:	e008      	b.n	8002c80 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d3b3      	bcc.n	8002be8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fe81 	bl	800599c <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d10a      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f008 fcb0 	bl	800b60c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fe6b 	bl	800599c <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d115      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f008 fca0 	bl	800b628 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	e000      	b.n	8002cfc <HAL_PCD_IRQHandler+0x93c>
      return;
 8002cfa:	bf00      	nop
    }
  }
}
 8002cfc:	3734      	adds	r7, #52	; 0x34
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}

08002d02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_PCD_SetAddress+0x1a>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e012      	b.n	8002d42 <HAL_PCD_SetAddress+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fdca 	bl	80058cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	4603      	mov	r3, r0
 8002d5a:	70fb      	strb	r3, [r7, #3]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	803b      	strh	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da0f      	bge.n	8002d90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3310      	adds	r3, #16
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	3304      	adds	r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	705a      	strb	r2, [r3, #1]
 8002d8e:	e00f      	b.n	8002db0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dbc:	883a      	ldrh	r2, [r7, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	78ba      	ldrb	r2, [r7, #2]
 8002dc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dda:	78bb      	ldrb	r3, [r7, #2]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d102      	bne.n	8002de6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_Open+0xaa>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e00e      	b.n	8002e12 <HAL_PCD_EP_Open+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 ff52 	bl	8004cac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002e10:	7afb      	ldrb	r3, [r7, #11]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da0f      	bge.n	8002e4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3310      	adds	r3, #16
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	705a      	strb	r2, [r3, #1]
 8002e4c:	e00f      	b.n	8002e6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_PCD_EP_Close+0x6e>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e00e      	b.n	8002ea6 <HAL_PCD_EP_Close+0x8c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 ff90 	bl	8004dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef0:	7afb      	ldrb	r3, [r7, #11]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	799b      	ldrb	r3, [r3, #6]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	799b      	ldrb	r3, [r3, #6]
 8002f12:	461a      	mov	r2, r3
 8002f14:	6979      	ldr	r1, [r7, #20]
 8002f16:	f002 f82d 	bl	8004f74 <USB_EPStartXfer>

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	460b      	mov	r3, r1
 8002f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3310      	adds	r3, #16
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2201      	movs	r2, #1
 8002f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	799b      	ldrb	r3, [r3, #6]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	799b      	ldrb	r3, [r3, #6]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	f001 ffdb 	bl	8004f74 <USB_EPStartXfer>

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	7912      	ldrb	r2, [r2, #4]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e04f      	b.n	8003086 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da0f      	bge.n	800300e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 020f 	and.w	r2, r3, #15
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	705a      	strb	r2, [r3, #1]
 800300c:	e00d      	b.n	800302a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_PCD_EP_SetStall+0x82>
 8003046:	2302      	movs	r3, #2
 8003048:	e01d      	b.n	8003086 <HAL_PCD_EP_SetStall+0xbe>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fb63 	bl	8005724 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7999      	ldrb	r1, [r3, #6]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003076:	461a      	mov	r2, r3
 8003078:	f002 fd54 	bl	8005b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	7912      	ldrb	r2, [r2, #4]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e042      	b.n	8003132 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da0f      	bge.n	80030d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3310      	adds	r3, #16
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	705a      	strb	r2, [r3, #1]
 80030d2:	e00f      	b.n	80030f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_EP_ClrStall+0x86>
 8003110:	2302      	movs	r3, #2
 8003112:	e00e      	b.n	8003132 <HAL_PCD_EP_ClrStall+0xa4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fb6c 	bl	8005800 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da0c      	bge.n	8003168 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3310      	adds	r3, #16
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e00c      	b.n	8003182 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f002 f98b 	bl	80054a4 <USB_EPStopXfer>
 800318e:	4603      	mov	r3, r0
 8003190:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003192:	7afb      	ldrb	r3, [r7, #11]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	3310      	adds	r3, #16
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d901      	bls.n	80031d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e06b      	b.n	80032ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d902      	bls.n	80031f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3303      	adds	r3, #3
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031f8:	e02a      	b.n	8003250 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d902      	bls.n	8003216 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3303      	adds	r3, #3
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68d9      	ldr	r1, [r3, #12]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4603      	mov	r3, r0
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f002 f9e0 	bl	80055f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	441a      	add	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	429a      	cmp	r2, r3
 8003264:	d809      	bhi.n	800327a <PCD_WriteEmptyTxFifo+0xde>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800326e:	429a      	cmp	r2, r3
 8003270:	d203      	bcs.n	800327a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1bf      	bne.n	80031fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	429a      	cmp	r2, r3
 8003284:	d811      	bhi.n	80032aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2201      	movs	r2, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	43db      	mvns	r3, r3
 80032a0:	6939      	ldr	r1, [r7, #16]
 80032a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032a6:	4013      	ands	r3, r2
 80032a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	333c      	adds	r3, #60	; 0x3c
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d17b      	bne.n	80033e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4a61      	ldr	r2, [pc, #388]	; (800347c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	f240 80b9 	bls.w	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80b3 	beq.w	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	461a      	mov	r2, r3
 8003318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331c:	6093      	str	r3, [r2, #8]
 800331e:	e0a7      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	2320      	movs	r3, #32
 800333a:	6093      	str	r3, [r2, #8]
 800333c:	e098      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 8093 	bne.w	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d90f      	bls.n	8003372 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	e07e      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	0159      	lsls	r1, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	440b      	add	r3, r1
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d114      	bne.n	80033d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80033bc:	461a      	mov	r2, r3
 80033be:	2101      	movs	r1, #1
 80033c0:	f002 fbb0 	bl	8005b24 <USB_EP0_OutStart>
 80033c4:	e006      	b.n	80033d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f008 f852 	bl	800b484 <HAL_PCD_DataOutStageCallback>
 80033e0:	e046      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d124      	bne.n	8003434 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e032      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	2320      	movs	r3, #32
 8003424:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f008 f829 	bl	800b484 <HAL_PCD_DataOutStageCallback>
 8003432:	e01d      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d114      	bne.n	8003464 <PCD_EP_OutXfrComplete_int+0x1b0>
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800345c:	461a      	mov	r2, r3
 800345e:	2100      	movs	r1, #0
 8003460:	f002 fb60 	bl	8005b24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f008 f80a 	bl	800b484 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	4f54300a 	.word	0x4f54300a
 8003480:	4f54310a 	.word	0x4f54310a

08003484 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	333c      	adds	r3, #60	; 0x3c
 800349c:	3304      	adds	r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <PCD_EP_OutSetupPacket_int+0x88>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d90e      	bls.n	80034d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	461a      	mov	r2, r3
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f007 ffc1 	bl	800b460 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <PCD_EP_OutSetupPacket_int+0x88>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d90c      	bls.n	8003500 <PCD_EP_OutSetupPacket_int+0x7c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	799b      	ldrb	r3, [r3, #6]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034f8:	461a      	mov	r2, r3
 80034fa:	2101      	movs	r1, #1
 80034fc:	f002 fb12 	bl	8005b24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	4f54300a 	.word	0x4f54300a

08003510 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
 800351c:	4613      	mov	r3, r2
 800351e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800352e:	883b      	ldrh	r3, [r7, #0]
 8003530:	0419      	lsls	r1, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	430a      	orrs	r2, r1
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
 800353c:	e028      	b.n	8003590 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e00d      	b.n	800356e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	3340      	adds	r3, #64	; 0x40
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4413      	add	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	3301      	adds	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	3b01      	subs	r3, #1
 8003574:	429a      	cmp	r2, r3
 8003576:	d3ec      	bcc.n	8003552 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003578:	883b      	ldrh	r3, [r7, #0]
 800357a:	0418      	lsls	r0, r3, #16
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	3b01      	subs	r3, #1
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4302      	orrs	r2, r0
 8003588:	3340      	adds	r3, #64	; 0x40
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e267      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d075      	beq.n	80036e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00c      	beq.n	800361c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b85      	ldr	r3, [pc, #532]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800360a:	2b08      	cmp	r3, #8
 800360c:	d112      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b7e      	ldr	r3, [pc, #504]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05b      	beq.n	80036e0 <HAL_RCC_OscConfig+0x108>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d157      	bne.n	80036e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e242      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x74>
 800363e:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x98>
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6f      	ldr	r2, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b6d      	ldr	r3, [pc, #436]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6c      	ldr	r2, [pc, #432]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 8003670:	4b69      	ldr	r3, [pc, #420]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe f92c 	bl	80018ec <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe f928 	bl	80018ec <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e207      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xc0>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f918 	bl	80018ec <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f914 	bl	80018ec <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1f3      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0xe8>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003702:	2b08      	cmp	r3, #8
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1c7      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4937      	ldr	r1, [pc, #220]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x244>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe f8cd 	bl	80018ec <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003756:	f7fe f8c9 	bl	80018ec <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1a8      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4925      	ldr	r1, [pc, #148]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x244>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f8ac 	bl	80018ec <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003798:	f7fe f8a8 	bl	80018ec <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e187      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d036      	beq.n	8003830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCC_OscConfig+0x248>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fe f88c 	bl	80018ec <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fe f888 	bl	80018ec <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e167      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x200>
 80037f6:	e01b      	b.n	8003830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x248>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fe:	f7fe f875 	bl	80018ec <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e00e      	b.n	8003824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe f871 	bl	80018ec <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d907      	bls.n	8003824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e150      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	42470000 	.word	0x42470000
 8003820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ea      	bne.n	8003806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8097 	beq.w	800396c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a7c      	ldr	r2, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b77      	ldr	r3, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fe f831 	bl	80018ec <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fe f82d 	bl	80018ec <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e10c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2ea>
 80038b4:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x30c>
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a5b      	ldr	r2, [pc, #364]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038e4:	4b58      	ldr	r3, [pc, #352]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a57      	ldr	r2, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a54      	ldr	r2, [pc, #336]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fff2 	bl	80018ec <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd ffee 	bl	80018ec <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0cb      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ee      	beq.n	800390c <HAL_RCC_OscConfig+0x334>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fd ffdc 	bl	80018ec <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd ffd8 	bl	80018ec <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0b5      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ee      	bne.n	8003938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a1 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d05c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d141      	bne.n	8003a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fd ffac 	bl	80018ec <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd ffa8 	bl	80018ec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e087      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	491b      	ldr	r1, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fd ff81 	bl	80018ec <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fd ff7d 	bl	80018ec <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e05c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x416>
 8003a0c:	e054      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd ff6a 	bl	80018ec <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd ff66 	bl	80018ec <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e045      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x444>
 8003a3a:	e03d      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e038      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d121      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0cc      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90c      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d044      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4934      	ldr	r1, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fe98 	bl	80018ec <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd fe94 	bl	80018ec <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20c      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fc66 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800e984 	.word	0x0800e984
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b094      	sub	sp, #80	; 0x50
 8003c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	f200 80e1 	bhi.w	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc6:	e0db      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ccc:	e0db      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e0d8      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d06:	4622      	mov	r2, r4
 8003d08:	462b      	mov	r3, r5
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4621      	mov	r1, r4
 8003d20:	1a51      	subs	r1, r2, r1
 8003d22:	6139      	str	r1, [r7, #16]
 8003d24:	4629      	mov	r1, r5
 8003d26:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	018b      	lsls	r3, r1, #6
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d42:	4651      	mov	r1, sl
 8003d44:	018a      	lsls	r2, r1, #6
 8003d46:	4651      	mov	r1, sl
 8003d48:	ebb2 0801 	subs.w	r8, r2, r1
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	462b      	mov	r3, r5
 8003d74:	eb49 0303 	adc.w	r3, r9, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d86:	4629      	mov	r1, r5
 8003d88:	024b      	lsls	r3, r1, #9
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d90:	4621      	mov	r1, r4
 8003d92:	024a      	lsls	r2, r1, #9
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da4:	f7fc ff00 	bl	8000ba8 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	e058      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	2200      	movs	r2, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4641      	mov	r1, r8
 8003de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e04:	ebb2 040a 	subs.w	r4, r2, sl
 8003e08:	eb63 050b 	sbc.w	r5, r3, fp
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	464b      	mov	r3, r9
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	028b      	lsls	r3, r1, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e44:	4621      	mov	r1, r4
 8003e46:	028a      	lsls	r2, r1, #10
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	61fa      	str	r2, [r7, #28]
 8003e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e58:	f7fc fea6 	bl	8000ba8 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4613      	mov	r3, r2
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3750      	adds	r7, #80	; 0x50
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0a9b      	lsrs	r3, r3, #10
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	0800e994 	.word	0x0800e994

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee4:	f7ff ffdc 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0b5b      	lsrs	r3, r3, #13
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	0800e994 	.word	0x0800e994

08003f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	220f      	movs	r2, #15
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_RCC_GetClockConfig+0x5c>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCC_GetClockConfig+0x5c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_RCC_GetClockConfig+0x60>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40023c00 	.word	0x40023c00

08003f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e07b      	b.n	8004076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d009      	beq.n	8003fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fa76 	bl	80014b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0104 	and.w	r1, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0210 	and.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e041      	b.n	8004114 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f839 	bl	800411c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f000 f9bf 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e04e      	b.n	80041e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d01d      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_TIM_Base_Start_IT+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_TIM_Base_Start_IT+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_TIM_Base_Start_IT+0xd8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d111      	bne.n	80041d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d010      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	e007      	b.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40010400 	.word	0x40010400
 8004208:	40014000 	.word	0x40014000
 800420c:	40001800 	.word	0x40001800

08004210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8d2 	bl	8004404 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8c4 	bl	80043f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8d5 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0204 	mvn.w	r2, #4
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8ac 	bl	8004404 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f89e 	bl	80043f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8af 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0208 	mvn.w	r2, #8
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f886 	bl	8004404 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f878 	bl	80043f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f889 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0210 	mvn.w	r2, #16
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2208      	movs	r2, #8
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f860 	bl	8004404 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f852 	bl	80043f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f863 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd f80e 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f906 	bl	80045ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f834 	bl	800442c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0220 	mvn.w	r2, #32
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8d8 	bl	8004598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a46      	ldr	r2, [pc, #280]	; (800456c <TIM_Base_SetConfig+0x12c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a43      	ldr	r2, [pc, #268]	; (8004570 <TIM_Base_SetConfig+0x130>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a42      	ldr	r2, [pc, #264]	; (8004574 <TIM_Base_SetConfig+0x134>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a41      	ldr	r2, [pc, #260]	; (8004578 <TIM_Base_SetConfig+0x138>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	; (800457c <TIM_Base_SetConfig+0x13c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <TIM_Base_SetConfig+0x12c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d027      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a32      	ldr	r2, [pc, #200]	; (8004570 <TIM_Base_SetConfig+0x130>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d023      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a31      	ldr	r2, [pc, #196]	; (8004574 <TIM_Base_SetConfig+0x134>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a30      	ldr	r2, [pc, #192]	; (8004578 <TIM_Base_SetConfig+0x138>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0x13c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <TIM_Base_SetConfig+0x140>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <TIM_Base_SetConfig+0x144>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <TIM_Base_SetConfig+0x148>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	; (800458c <TIM_Base_SetConfig+0x14c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <TIM_Base_SetConfig+0x150>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <TIM_Base_SetConfig+0x154>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <TIM_Base_SetConfig+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM_Base_SetConfig+0x13c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]
  }
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	40001800 	.word	0x40001800
 8004590:	40001c00 	.word	0x40001c00
 8004594:	40002000 	.word	0x40002000

08004598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 001c 	add.w	r0, r7, #28
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d123      	bne.n	8004622 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fae2 	bl	8005be0 <USB_CoreReset>
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e01b      	b.n	800465a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f001 fad6 	bl	8005be0 <USB_CoreReset>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004638:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
 800464c:	e005      	b.n	800465a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800465a:	7fbb      	ldrb	r3, [r7, #30]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10b      	bne.n	8004678 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f043 0206 	orr.w	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004684:	b004      	add	sp, #16
 8004686:	4770      	bx	lr

08004688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d165      	bne.n	8004768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a41      	ldr	r2, [pc, #260]	; (80047a4 <USB_SetTurnaroundTime+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d906      	bls.n	80046b2 <USB_SetTurnaroundTime+0x2a>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a40      	ldr	r2, [pc, #256]	; (80047a8 <USB_SetTurnaroundTime+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d202      	bcs.n	80046b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046ac:	230f      	movs	r3, #15
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e062      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <USB_SetTurnaroundTime+0x120>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d306      	bcc.n	80046c8 <USB_SetTurnaroundTime+0x40>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4a3b      	ldr	r2, [pc, #236]	; (80047ac <USB_SetTurnaroundTime+0x124>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d202      	bcs.n	80046c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046c2:	230e      	movs	r3, #14
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e057      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4a38      	ldr	r2, [pc, #224]	; (80047ac <USB_SetTurnaroundTime+0x124>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d306      	bcc.n	80046de <USB_SetTurnaroundTime+0x56>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <USB_SetTurnaroundTime+0x128>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d202      	bcs.n	80046de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046d8:	230d      	movs	r3, #13
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e04c      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <USB_SetTurnaroundTime+0x128>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d306      	bcc.n	80046f4 <USB_SetTurnaroundTime+0x6c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <USB_SetTurnaroundTime+0x12c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d802      	bhi.n	80046f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046ee:	230c      	movs	r3, #12
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e041      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <USB_SetTurnaroundTime+0x12c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d906      	bls.n	800470a <USB_SetTurnaroundTime+0x82>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <USB_SetTurnaroundTime+0x130>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d802      	bhi.n	800470a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004704:	230b      	movs	r3, #11
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e036      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <USB_SetTurnaroundTime+0x130>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d906      	bls.n	8004720 <USB_SetTurnaroundTime+0x98>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <USB_SetTurnaroundTime+0x134>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d802      	bhi.n	8004720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800471a:	230a      	movs	r3, #10
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e02b      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <USB_SetTurnaroundTime+0x134>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d906      	bls.n	8004736 <USB_SetTurnaroundTime+0xae>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <USB_SetTurnaroundTime+0x138>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d202      	bcs.n	8004736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004730:	2309      	movs	r3, #9
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e020      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <USB_SetTurnaroundTime+0x138>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d306      	bcc.n	800474c <USB_SetTurnaroundTime+0xc4>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <USB_SetTurnaroundTime+0x13c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004746:	2308      	movs	r3, #8
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e015      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <USB_SetTurnaroundTime+0x13c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d906      	bls.n	8004762 <USB_SetTurnaroundTime+0xda>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <USB_SetTurnaroundTime+0x140>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d202      	bcs.n	8004762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800475c:	2307      	movs	r3, #7
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e00a      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004762:	2306      	movs	r3, #6
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e007      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800476e:	2309      	movs	r3, #9
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e001      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004774:	2309      	movs	r3, #9
 8004776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	029b      	lsls	r3, r3, #10
 800478c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	00d8acbf 	.word	0x00d8acbf
 80047a8:	00e4e1c0 	.word	0x00e4e1c0
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	01067380 	.word	0x01067380
 80047b4:	011a499f 	.word	0x011a499f
 80047b8:	01312cff 	.word	0x01312cff
 80047bc:	014ca43f 	.word	0x014ca43f
 80047c0:	016e3600 	.word	0x016e3600
 80047c4:	01a6ab1f 	.word	0x01a6ab1f
 80047c8:	01e84800 	.word	0x01e84800

080047cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0201 	bic.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d115      	bne.n	800485e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800483e:	200a      	movs	r0, #10
 8004840:	f7fd f860 	bl	8001904 <HAL_Delay>
      ms += 10U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	330a      	adds	r3, #10
 8004848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 f939 	bl	8005ac2 <USB_GetMode>
 8004850:	4603      	mov	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d01e      	beq.n	8004894 <USB_SetCurrentMode+0x84>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2bc7      	cmp	r3, #199	; 0xc7
 800485a:	d9f0      	bls.n	800483e <USB_SetCurrentMode+0x2e>
 800485c:	e01a      	b.n	8004894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d115      	bne.n	8004890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004870:	200a      	movs	r0, #10
 8004872:	f7fd f847 	bl	8001904 <HAL_Delay>
      ms += 10U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	330a      	adds	r3, #10
 800487a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f001 f920 	bl	8005ac2 <USB_GetMode>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <USB_SetCurrentMode+0x84>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2bc7      	cmp	r3, #199	; 0xc7
 800488c:	d9f0      	bls.n	8004870 <USB_SetCurrentMode+0x60>
 800488e:	e001      	b.n	8004894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e005      	b.n	80048a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2bc8      	cmp	r3, #200	; 0xc8
 8004898:	d101      	bne.n	800489e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a8:	b084      	sub	sp, #16
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e009      	b.n	80048dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3340      	adds	r3, #64	; 0x40
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0e      	cmp	r3, #14
 80048e0:	d9f2      	bls.n	80048c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11c      	bne.n	8004924 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
 8004922:	e00b      	b.n	800493c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004948:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10d      	bne.n	800496c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004958:	2100      	movs	r1, #0
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f968 	bl	8004c30 <USB_SetDevSpeed>
 8004960:	e008      	b.n	8004974 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004962:	2101      	movs	r1, #1
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f963 	bl	8004c30 <USB_SetDevSpeed>
 800496a:	e003      	b.n	8004974 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800496c:	2103      	movs	r1, #3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f95e 	bl	8004c30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004974:	2110      	movs	r1, #16
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8fa 	bl	8004b70 <USB_FlushTxFifo>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f924 	bl	8004bd4 <USB_FlushRxFifo>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	461a      	mov	r2, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e043      	b.n	8004a48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d6:	d118      	bne.n	8004a0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e013      	b.n	8004a1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	461a      	mov	r2, r3
 8004a02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e008      	b.n	8004a1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d3b5      	bcc.n	80049c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e043      	b.n	8004ae2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a70:	d118      	bne.n	8004aa4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e013      	b.n	8004ab6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e008      	b.n	8004ab6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ada:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d3b5      	bcc.n	8004a5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f043 0210 	orr.w	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <USB_DevInit+0x2c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f043 0208 	orr.w	r2, r3, #8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr
 8004b6c:	803c3800 	.word	0x803c3800

08004b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b8a:	d901      	bls.n	8004b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e01b      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	daf2      	bge.n	8004b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	019b      	lsls	r3, r3, #6
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004bb4:	d901      	bls.n	8004bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e006      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d0f0      	beq.n	8004ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004bec:	d901      	bls.n	8004bf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e018      	b.n	8004c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	daf2      	bge.n	8004be0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2210      	movs	r2, #16
 8004c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c10:	d901      	bls.n	8004c16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e006      	b.n	8004c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d0f0      	beq.n	8004c04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0306 	and.w	r3, r3, #6
 8004c7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
 8004c86:	e00a      	b.n	8004c9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d002      	beq.n	8004c94 <USB_GetDevSpeed+0x32>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d102      	bne.n	8004c9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c94:	2302      	movs	r3, #2
 8004c96:	75fb      	strb	r3, [r7, #23]
 8004c98:	e001      	b.n	8004c9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d13a      	bne.n	8004d3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d155      	bne.n	8004dac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	791b      	ldrb	r3, [r3, #4]
 8004d1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d24:	4313      	orrs	r3, r2
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	e036      	b.n	8004dac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11a      	bne.n	8004dac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d92:	430b      	orrs	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d161      	bne.n	8004e9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dee:	d11f      	bne.n	8004e30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e50:	4013      	ands	r3, r2
 8004e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e74:	4013      	ands	r3, r2
 8004e76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	0159      	lsls	r1, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	4619      	mov	r1, r3
 8004e94:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <USB_DeactivateEndpoint+0x1b0>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
 8004e9a:	e060      	b.n	8004f5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb2:	d11f      	bne.n	8004ef4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f14:	4013      	ands	r3, r2
 8004f16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	43db      	mvns	r3, r3
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	0159      	lsls	r1, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	440b      	add	r3, r1
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	4619      	mov	r1, r3
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <USB_DeactivateEndpoint+0x1b4>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	ec337800 	.word	0xec337800
 8004f70:	eff37800 	.word	0xeff37800

08004f74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 817a 	bne.w	800528a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d132      	bne.n	8005004 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	0cdb      	lsrs	r3, r3, #19
 8004ffe:	04db      	lsls	r3, r3, #19
 8005000:	6113      	str	r3, [r2, #16]
 8005002:	e092      	b.n	800512a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501e:	0cdb      	lsrs	r3, r3, #19
 8005020:	04db      	lsls	r3, r3, #19
 8005022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005046:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d11a      	bne.n	8005084 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d903      	bls.n	8005062 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005080:	6113      	str	r3, [r2, #16]
 8005082:	e01b      	b.n	80050bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6919      	ldr	r1, [r3, #16]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	440b      	add	r3, r1
 800509c:	1e59      	subs	r1, r3, #1
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a8:	4ba2      	ldr	r3, [pc, #648]	; (8005334 <USB_EPStartXfer+0x3c0>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	0148      	lsls	r0, r1, #5
 80050b0:	69f9      	ldr	r1, [r7, #28]
 80050b2:	4401      	add	r1, r0
 80050b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	69b9      	ldr	r1, [r7, #24]
 80050d4:	0148      	lsls	r0, r1, #5
 80050d6:	69f9      	ldr	r1, [r7, #28]
 80050d8:	4401      	add	r1, r0
 80050da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	791b      	ldrb	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11f      	bne.n	800512a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d14b      	bne.n	80051c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	791b      	ldrb	r3, [r3, #4]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d128      	bne.n	80051a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e00f      	b.n	80051a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e165      	b.n	8005494 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	791b      	ldrb	r3, [r3, #4]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d015      	beq.n	800521c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 814d 	beq.w	8005494 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	2101      	movs	r1, #1
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005216:	4313      	orrs	r3, r2
 8005218:	634b      	str	r3, [r1, #52]	; 0x34
 800521a:	e13b      	b.n	8005494 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e00f      	b.n	800526e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	b298      	uxth	r0, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4603      	mov	r3, r0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f9b8 	bl	80055f8 <USB_WritePacket>
 8005288:	e104      	b.n	8005494 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a4:	0cdb      	lsrs	r3, r3, #19
 80052a6:	04db      	lsls	r3, r3, #19
 80052a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052cc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d131      	bne.n	8005338 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	0148      	lsls	r0, r1, #5
 8005306:	69f9      	ldr	r1, [r7, #28]
 8005308:	4401      	add	r1, r0
 800530a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800530e:	4313      	orrs	r3, r2
 8005310:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005330:	6113      	str	r3, [r2, #16]
 8005332:	e061      	b.n	80053f8 <USB_EPStartXfer+0x484>
 8005334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d123      	bne.n	8005388 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	0148      	lsls	r0, r1, #5
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	4401      	add	r1, r0
 800535e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005362:	4313      	orrs	r3, r2
 8005364:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005384:	6113      	str	r3, [r2, #16]
 8005386:	e037      	b.n	80053f8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4413      	add	r3, r2
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	8afa      	ldrh	r2, [r7, #22]
 80053a4:	fb03 f202 	mul.w	r2, r3, r2
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	04d9      	lsls	r1, r3, #19
 80053be:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <USB_EPStartXfer+0x52c>)
 80053c0:	400b      	ands	r3, r1
 80053c2:	69b9      	ldr	r1, [r7, #24]
 80053c4:	0148      	lsls	r0, r1, #5
 80053c6:	69f9      	ldr	r1, [r7, #28]
 80053c8:	4401      	add	r1, r0
 80053ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ce:	4313      	orrs	r3, r2
 80053d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	0148      	lsls	r0, r1, #5
 80053ec:	69f9      	ldr	r1, [r7, #28]
 80053ee:	4401      	add	r1, r0
 80053f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d10d      	bne.n	800541a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	68d9      	ldr	r1, [r3, #12]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	460a      	mov	r2, r1
 8005418:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	791b      	ldrb	r3, [r3, #4]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d128      	bne.n	8005474 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d110      	bne.n	8005454 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00f      	b.n	8005474 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005472:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	1ff80000 	.word	0x1ff80000

080054a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d14a      	bne.n	8005558 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054da:	f040 8086 	bne.w	80055ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005500:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005532:	4293      	cmp	r3, r2
 8005534:	d902      	bls.n	800553c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
          break;
 800553a:	e056      	b.n	80055ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d0e7      	beq.n	8005526 <USB_EPStopXfer+0x82>
 8005556:	e048      	b.n	80055ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005570:	d13b      	bne.n	80055ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005594:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d902      	bls.n	80055d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
          break;
 80055ce:	e00c      	b.n	80055ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d0e7      	beq.n	80055ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4611      	mov	r1, r2
 8005604:	461a      	mov	r2, r3
 8005606:	460b      	mov	r3, r1
 8005608:	71fb      	strb	r3, [r7, #7]
 800560a:	4613      	mov	r3, r2
 800560c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d123      	bne.n	8005666 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800561e:	88bb      	ldrh	r3, [r7, #4]
 8005620:	3303      	adds	r3, #3
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e018      	b.n	800565e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	031a      	lsls	r2, r3, #12
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	461a      	mov	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	3301      	adds	r3, #1
 8005644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3301      	adds	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	3301      	adds	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d3e2      	bcc.n	800562c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3724      	adds	r7, #36	; 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005674:	b480      	push	{r7}
 8005676:	b08b      	sub	sp, #44	; 0x2c
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	b29b      	uxth	r3, r3
 8005690:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	e014      	b.n	80056ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	3301      	adds	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	3301      	adds	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	3301      	adds	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	3301      	adds	r3, #1
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3e6      	bcc.n	80056a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056d2:	8bfb      	ldrh	r3, [r7, #30]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e2:	461a      	mov	r2, r3
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	701a      	strb	r2, [r3, #0]
      i++;
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	3301      	adds	r3, #1
 8005702:	623b      	str	r3, [r7, #32]
      pDest++;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	3301      	adds	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800570a:	8bfb      	ldrh	r3, [r7, #30]
 800570c:	3b01      	subs	r3, #1
 800570e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005710:	8bfb      	ldrh	r3, [r7, #30]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ea      	bne.n	80056ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005718:	4618      	mov	r0, r3
 800571a:	372c      	adds	r7, #44	; 0x2c
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d12c      	bne.n	800579a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db12      	blt.n	8005778 <USB_EPSetStall+0x54>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00f      	beq.n	8005778 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005776:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e02b      	b.n	80057f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db12      	blt.n	80057d2 <USB_EPSetStall+0xae>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d128      	bne.n	800586e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	791b      	ldrb	r3, [r3, #4]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d003      	beq.n	800584c <USB_EPClearStall+0x4c>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d138      	bne.n	80058be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	e027      	b.n	80058be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800588c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	791b      	ldrb	r3, [r3, #4]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d003      	beq.n	800589e <USB_EPClearStall+0x9e>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d10f      	bne.n	80058be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005900:	68f9      	ldr	r1, [r7, #12]
 8005902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005946:	f023 0302 	bic.w	r3, r3, #2
 800594a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005974:	f023 0303 	bic.w	r3, r3, #3
 8005978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059b4:	68fb      	ldr	r3, [r7, #12]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	0c1b      	lsrs	r3, r3, #16
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	b29b      	uxth	r3, r3
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a58:	68bb      	ldr	r3, [r7, #8]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	01db      	lsls	r3, r3, #7
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0301 	and.w	r3, r3, #1
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	333c      	adds	r3, #60	; 0x3c
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4a26      	ldr	r2, [pc, #152]	; (8005bdc <USB_EP0_OutStart+0xb8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d90a      	bls.n	8005b5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b58:	d101      	bne.n	8005b5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e037      	b.n	8005bce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	f043 0318 	orr.w	r3, r3, #24
 8005b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ba4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10f      	bne.n	8005bcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	4f54300a 	.word	0x4f54300a

08005be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bf8:	d901      	bls.n	8005bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e01b      	b.n	8005c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	daf2      	bge.n	8005bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f043 0201 	orr.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c22:	d901      	bls.n	8005c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e006      	b.n	8005c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d0f0      	beq.n	8005c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c54:	f005 fe80 	bl	800b958 <USBD_static_malloc>
 8005c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	32b0      	adds	r2, #176	; 0xb0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0d4      	b.n	8005e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005c78:	2100      	movs	r1, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f006 fc3b 	bl	800c4f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32b0      	adds	r2, #176	; 0xb0
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	32b0      	adds	r2, #176	; 0xb0
 8005c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c1b      	ldrb	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d138      	bne.n	8005d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cac:	4b5e      	ldr	r3, [pc, #376]	; (8005e28 <USBD_CDC_Init+0x1e4>)
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f005 fd2b 	bl	800b712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cbc:	4b5a      	ldr	r3, [pc, #360]	; (8005e28 <USBD_CDC_Init+0x1e4>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3324      	adds	r3, #36	; 0x24
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cd6:	4b55      	ldr	r3, [pc, #340]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005cd8:	7819      	ldrb	r1, [r3, #0]
 8005cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cde:	2202      	movs	r2, #2
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f005 fd16 	bl	800b712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ce6:	4b51      	ldr	r3, [pc, #324]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 020f 	and.w	r2, r3, #15
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cfe:	2201      	movs	r2, #1
 8005d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d02:	4b4b      	ldr	r3, [pc, #300]	; (8005e30 <USBD_CDC_Init+0x1ec>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	3326      	adds	r3, #38	; 0x26
 8005d18:	2210      	movs	r2, #16
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e035      	b.n	8005d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d1e:	4b42      	ldr	r3, [pc, #264]	; (8005e28 <USBD_CDC_Init+0x1e4>)
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	2202      	movs	r2, #2
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f005 fcf3 	bl	800b712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d2c:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <USBD_CDC_Init+0x1e4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 020f 	and.w	r2, r3, #15
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3324      	adds	r3, #36	; 0x24
 8005d42:	2201      	movs	r2, #1
 8005d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d46:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005d48:	7819      	ldrb	r1, [r3, #0]
 8005d4a:	2340      	movs	r3, #64	; 0x40
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f005 fcdf 	bl	800b712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d54:	4b35      	ldr	r3, [pc, #212]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 020f 	and.w	r2, r3, #15
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <USBD_CDC_Init+0x1ec>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3326      	adds	r3, #38	; 0x26
 8005d86:	2210      	movs	r2, #16
 8005d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d8a:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <USBD_CDC_Init+0x1ec>)
 8005d8c:	7819      	ldrb	r1, [r3, #0]
 8005d8e:	2308      	movs	r3, #8
 8005d90:	2203      	movs	r2, #3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f005 fcbd 	bl	800b712 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <USBD_CDC_Init+0x1ec>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	3324      	adds	r3, #36	; 0x24
 8005dae:	2201      	movs	r2, #1
 8005db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	33b0      	adds	r3, #176	; 0xb0
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e018      	b.n	8005e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7c1b      	ldrb	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df4:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005df6:	7819      	ldrb	r1, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f005 fd74 	bl	800b8f0 <USBD_LL_PrepareReceive>
 8005e08:	e008      	b.n	8005e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <USBD_CDC_Init+0x1e8>)
 8005e0c:	7819      	ldrb	r1, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f005 fd6a 	bl	800b8f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000093 	.word	0x20000093
 8005e2c:	20000094 	.word	0x20000094
 8005e30:	20000095 	.word	0x20000095

08005e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e40:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <USBD_CDC_DeInit+0xf8>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f005 fc89 	bl	800b75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e4c:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <USBD_CDC_DeInit+0xf8>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f003 020f 	and.w	r2, r3, #15
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	3324      	adds	r3, #36	; 0x24
 8005e62:	2200      	movs	r2, #0
 8005e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e66:	4b32      	ldr	r3, [pc, #200]	; (8005f30 <USBD_CDC_DeInit+0xfc>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f005 fc76 	bl	800b75e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <USBD_CDC_DeInit+0xfc>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005e8e:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <USBD_CDC_DeInit+0x100>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f005 fc62 	bl	800b75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <USBD_CDC_DeInit+0x100>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	3324      	adds	r3, #36	; 0x24
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <USBD_CDC_DeInit+0x100>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3326      	adds	r3, #38	; 0x26
 8005eca:	2200      	movs	r2, #0
 8005ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	32b0      	adds	r2, #176	; 0xb0
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01f      	beq.n	8005f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	33b0      	adds	r3, #176	; 0xb0
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32b0      	adds	r2, #176	; 0xb0
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f005 fd36 	bl	800b974 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32b0      	adds	r2, #176	; 0xb0
 8005f12:	2100      	movs	r1, #0
 8005f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000093 	.word	0x20000093
 8005f30:	20000094 	.word	0x20000094
 8005f34:	20000095 	.word	0x20000095

08005f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	32b0      	adds	r2, #176	; 0xb0
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e0bf      	b.n	80060e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d050      	beq.n	8006016 <USBD_CDC_Setup+0xde>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	f040 80af 	bne.w	80060d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d03a      	beq.n	8005ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da1b      	bge.n	8005fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	33b0      	adds	r3, #176	; 0xb0
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	88d2      	ldrh	r2, [r2, #6]
 8005fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	88db      	ldrh	r3, [r3, #6]
 8005fae:	2b07      	cmp	r3, #7
 8005fb0:	bf28      	it	cs
 8005fb2:	2307      	movcs	r3, #7
 8005fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	89fa      	ldrh	r2, [r7, #14]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fd89 	bl	8007ad4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005fc2:	e090      	b.n	80060e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	785a      	ldrb	r2, [r3, #1]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	88db      	ldrh	r3, [r3, #6]
 8005fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8005fd4:	d803      	bhi.n	8005fde <USBD_CDC_Setup+0xa6>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	88db      	ldrh	r3, [r3, #6]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	e000      	b.n	8005fe0 <USBD_CDC_Setup+0xa8>
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005fe6:	6939      	ldr	r1, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fd9b 	bl	8007b2c <USBD_CtlPrepareRx>
      break;
 8005ff6:	e076      	b.n	80060e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	33b0      	adds	r3, #176	; 0xb0
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	7850      	ldrb	r0, [r2, #1]
 800600e:	2200      	movs	r2, #0
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	4798      	blx	r3
      break;
 8006014:	e067      	b.n	80060e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d851      	bhi.n	80060c2 <USBD_CDC_Setup+0x18a>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <USBD_CDC_Setup+0xec>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006055 	.word	0x08006055
 8006028:	080060d1 	.word	0x080060d1
 800602c:	080060c3 	.word	0x080060c3
 8006030:	080060c3 	.word	0x080060c3
 8006034:	080060c3 	.word	0x080060c3
 8006038:	080060c3 	.word	0x080060c3
 800603c:	080060c3 	.word	0x080060c3
 8006040:	080060c3 	.word	0x080060c3
 8006044:	080060c3 	.word	0x080060c3
 8006048:	080060c3 	.word	0x080060c3
 800604c:	0800607f 	.word	0x0800607f
 8006050:	080060a9 	.word	0x080060a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b03      	cmp	r3, #3
 800605e:	d107      	bne.n	8006070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006060:	f107 030a 	add.w	r3, r7, #10
 8006064:	2202      	movs	r2, #2
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fd33 	bl	8007ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800606e:	e032      	b.n	80060d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fcbd 	bl	80079f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006078:	2303      	movs	r3, #3
 800607a:	75fb      	strb	r3, [r7, #23]
          break;
 800607c:	e02b      	b.n	80060d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d107      	bne.n	800609a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800608a:	f107 030d 	add.w	r3, r7, #13
 800608e:	2201      	movs	r2, #1
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fd1e 	bl	8007ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006098:	e01d      	b.n	80060d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fca8 	bl	80079f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	75fb      	strb	r3, [r7, #23]
          break;
 80060a6:	e016      	b.n	80060d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d00f      	beq.n	80060d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fc9b 	bl	80079f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060c0:	e008      	b.n	80060d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fc94 	bl	80079f2 <USBD_CtlError>
          ret = USBD_FAIL;
 80060ca:	2303      	movs	r3, #3
 80060cc:	75fb      	strb	r3, [r7, #23]
          break;
 80060ce:	e002      	b.n	80060d6 <USBD_CDC_Setup+0x19e>
          break;
 80060d0:	bf00      	nop
 80060d2:	e008      	b.n	80060e6 <USBD_CDC_Setup+0x1ae>
          break;
 80060d4:	bf00      	nop
      }
      break;
 80060d6:	e006      	b.n	80060e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fc89 	bl	80079f2 <USBD_CtlError>
      ret = USBD_FAIL;
 80060e0:	2303      	movs	r3, #3
 80060e2:	75fb      	strb	r3, [r7, #23]
      break;
 80060e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32b0      	adds	r2, #176	; 0xb0
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006116:	2303      	movs	r3, #3
 8006118:	e065      	b.n	80061e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	32b0      	adds	r2, #176	; 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3318      	adds	r3, #24
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d02f      	beq.n	80061a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	f003 020f 	and.w	r2, r3, #15
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	3318      	adds	r3, #24
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 010f 	and.w	r1, r3, #15
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	460b      	mov	r3, r1
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	440b      	add	r3, r1
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4403      	add	r3, r0
 800616c:	331c      	adds	r3, #28
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	fbb2 f1f3 	udiv	r1, r2, r3
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800617a:	2b00      	cmp	r3, #0
 800617c:	d112      	bne.n	80061a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	3318      	adds	r3, #24
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006196:	78f9      	ldrb	r1, [r7, #3]
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f005 fb86 	bl	800b8ae <USBD_LL_Transmit>
 80061a2:	e01f      	b.n	80061e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	33b0      	adds	r3, #176	; 0xb0
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	33b0      	adds	r3, #176	; 0xb0
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	32b0      	adds	r2, #176	; 0xb0
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	32b0      	adds	r2, #176	; 0xb0
 8006214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e01a      	b.n	8006256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f005 fb84 	bl	800b932 <USBD_LL_GetRxDataSize>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	33b0      	adds	r3, #176	; 0xb0
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006250:	4611      	mov	r1, r2
 8006252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	32b0      	adds	r2, #176	; 0xb0
 8006270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	e025      	b.n	80062cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	33b0      	adds	r3, #176	; 0xb0
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01a      	beq.n	80062ca <USBD_CDC_EP0_RxReady+0x6c>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800629a:	2bff      	cmp	r3, #255	; 0xff
 800629c:	d015      	beq.n	80062ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	33b0      	adds	r3, #176	; 0xb0
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062be:	b292      	uxth	r2, r2
 80062c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	22ff      	movs	r2, #255	; 0xff
 80062c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062dc:	2182      	movs	r1, #130	; 0x82
 80062de:	4818      	ldr	r0, [pc, #96]	; (8006340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062e0:	f000 fd4f 	bl	8006d82 <USBD_GetEpDesc>
 80062e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062e6:	2101      	movs	r1, #1
 80062e8:	4815      	ldr	r0, [pc, #84]	; (8006340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062ea:	f000 fd4a 	bl	8006d82 <USBD_GetEpDesc>
 80062ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062f0:	2181      	movs	r1, #129	; 0x81
 80062f2:	4813      	ldr	r0, [pc, #76]	; (8006340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062f4:	f000 fd45 	bl	8006d82 <USBD_GetEpDesc>
 80062f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2210      	movs	r2, #16
 8006304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2200      	movs	r2, #0
 8006310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006314:	711a      	strb	r2, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2243      	movs	r2, #67	; 0x43
 8006332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000050 	.word	0x20000050

08006344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800634c:	2182      	movs	r1, #130	; 0x82
 800634e:	4818      	ldr	r0, [pc, #96]	; (80063b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006350:	f000 fd17 	bl	8006d82 <USBD_GetEpDesc>
 8006354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006356:	2101      	movs	r1, #1
 8006358:	4815      	ldr	r0, [pc, #84]	; (80063b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800635a:	f000 fd12 	bl	8006d82 <USBD_GetEpDesc>
 800635e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006360:	2181      	movs	r1, #129	; 0x81
 8006362:	4813      	ldr	r0, [pc, #76]	; (80063b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006364:	f000 fd0d 	bl	8006d82 <USBD_GetEpDesc>
 8006368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2210      	movs	r2, #16
 8006374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2200      	movs	r2, #0
 8006380:	711a      	strb	r2, [r3, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f042 0202 	orr.w	r2, r2, #2
 8006388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	711a      	strb	r2, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f042 0202 	orr.w	r2, r2, #2
 800639c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2243      	movs	r2, #67	; 0x43
 80063a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000050 	.word	0x20000050

080063b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063bc:	2182      	movs	r1, #130	; 0x82
 80063be:	4818      	ldr	r0, [pc, #96]	; (8006420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063c0:	f000 fcdf 	bl	8006d82 <USBD_GetEpDesc>
 80063c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063c6:	2101      	movs	r1, #1
 80063c8:	4815      	ldr	r0, [pc, #84]	; (8006420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063ca:	f000 fcda 	bl	8006d82 <USBD_GetEpDesc>
 80063ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063d0:	2181      	movs	r1, #129	; 0x81
 80063d2:	4813      	ldr	r0, [pc, #76]	; (8006420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063d4:	f000 fcd5 	bl	8006d82 <USBD_GetEpDesc>
 80063d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2210      	movs	r2, #16
 80063e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f4:	711a      	strb	r2, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006408:	711a      	strb	r2, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2243      	movs	r2, #67	; 0x43
 8006412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000050 	.word	0x20000050

08006424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	220a      	movs	r2, #10
 8006430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006432:	4b03      	ldr	r3, [pc, #12]	; (8006440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	2000000c 	.word	0x2000000c

08006444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006454:	2303      	movs	r3, #3
 8006456:	e009      	b.n	800646c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	33b0      	adds	r3, #176	; 0xb0
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	32b0      	adds	r2, #176	; 0xb0
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800649a:	2303      	movs	r3, #3
 800649c:	e008      	b.n	80064b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	32b0      	adds	r2, #176	; 0xb0
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	e004      	b.n	80064ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32b0      	adds	r2, #176	; 0xb0
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	e025      	b.n	800656a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11f      	bne.n	8006568 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2201      	movs	r2, #1
 800652c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <USBD_CDC_TransmitPacket+0x7c>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4403      	add	r3, r0
 800654a:	3318      	adds	r3, #24
 800654c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <USBD_CDC_TransmitPacket+0x7c>)
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f005 f9a5 	bl	800b8ae <USBD_LL_Transmit>

    ret = USBD_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000093 	.word	0x20000093

08006578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	32b0      	adds	r2, #176	; 0xb0
 800658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	32b0      	adds	r2, #176	; 0xb0
 800659a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e018      	b.n	80065d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7c1b      	ldrb	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <USBD_CDC_ReceivePacket+0x68>)
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f005 f997 	bl	800b8f0 <USBD_LL_PrepareReceive>
 80065c2:	e008      	b.n	80065d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <USBD_CDC_ReceivePacket+0x68>)
 80065c6:	7819      	ldrb	r1, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ce:	2340      	movs	r3, #64	; 0x40
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f005 f98d 	bl	800b8f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000094 	.word	0x20000094

080065e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e01f      	b.n	800663c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	79fa      	ldrb	r2, [r7, #7]
 800662e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f005 f807 	bl	800b644 <USBD_LL_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]

  return ret;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e025      	b.n	80066a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	32ae      	adds	r2, #174	; 0xae
 800666e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00f      	beq.n	8006698 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32ae      	adds	r2, #174	; 0xae
 8006682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f107 020e 	add.w	r2, r7, #14
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	4602      	mov	r2, r0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f005 f80f 	bl	800b6dc <USBD_LL_Start>
 80066be:	4603      	mov	r3, r0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	4611      	mov	r1, r2
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	4611      	mov	r1, r2
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f90e 	bl	800797e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	2b02      	cmp	r3, #2
 8006784:	d01a      	beq.n	80067bc <USBD_LL_SetupStage+0x72>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d822      	bhi.n	80067d0 <USBD_LL_SetupStage+0x86>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <USBD_LL_SetupStage+0x4a>
 800678e:	2b01      	cmp	r3, #1
 8006790:	d00a      	beq.n	80067a8 <USBD_LL_SetupStage+0x5e>
 8006792:	e01d      	b.n	80067d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fb65 	bl	8006e6c <USBD_StdDevReq>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]
      break;
 80067a6:	e020      	b.n	80067ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fbcd 	bl	8006f50 <USBD_StdItfReq>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]
      break;
 80067ba:	e016      	b.n	80067ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc2f 	bl	8007028 <USBD_StdEPReq>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]
      break;
 80067ce:	e00c      	b.n	80067ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 ffdc 	bl	800b79c <USBD_LL_StallEP>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
      break;
 80067e8:	bf00      	nop
  }

  return ret;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	460b      	mov	r3, r1
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d16e      	bne.n	80068ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800681a:	2b03      	cmp	r3, #3
 800681c:	f040 8098 	bne.w	8006950 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	429a      	cmp	r2, r3
 800682a:	d913      	bls.n	8006854 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	4293      	cmp	r3, r2
 8006844:	bf28      	it	cs
 8006846:	4613      	movcs	r3, r2
 8006848:	461a      	mov	r2, r3
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 f98a 	bl	8007b66 <USBD_CtlContinueRx>
 8006852:	e07d      	b.n	8006950 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b02      	cmp	r3, #2
 8006860:	d014      	beq.n	800688c <USBD_LL_DataOutStage+0x98>
 8006862:	2b02      	cmp	r3, #2
 8006864:	d81d      	bhi.n	80068a2 <USBD_LL_DataOutStage+0xae>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <USBD_LL_DataOutStage+0x7c>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d003      	beq.n	8006876 <USBD_LL_DataOutStage+0x82>
 800686e:	e018      	b.n	80068a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	75bb      	strb	r3, [r7, #22]
            break;
 8006874:	e018      	b.n	80068a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800687c:	b2db      	uxtb	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fa64 	bl	8006d4e <USBD_CoreFindIF>
 8006886:	4603      	mov	r3, r0
 8006888:	75bb      	strb	r3, [r7, #22]
            break;
 800688a:	e00d      	b.n	80068a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fa66 	bl	8006d68 <USBD_CoreFindEP>
 800689c:	4603      	mov	r3, r0
 800689e:	75bb      	strb	r3, [r7, #22]
            break;
 80068a0:	e002      	b.n	80068a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75bb      	strb	r3, [r7, #22]
            break;
 80068a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d119      	bne.n	80068e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d113      	bne.n	80068e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80068ba:	7dba      	ldrb	r2, [r7, #22]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	32ae      	adds	r2, #174	; 0xae
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80068ca:	7dba      	ldrb	r2, [r7, #22]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80068d2:	7dba      	ldrb	r2, [r7, #22]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	32ae      	adds	r2, #174	; 0xae
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f001 f950 	bl	8007b88 <USBD_CtlSendStatus>
 80068e8:	e032      	b.n	8006950 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fa37 	bl	8006d68 <USBD_CoreFindEP>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068fe:	7dbb      	ldrb	r3, [r7, #22]
 8006900:	2bff      	cmp	r3, #255	; 0xff
 8006902:	d025      	beq.n	8006950 <USBD_LL_DataOutStage+0x15c>
 8006904:	7dbb      	ldrb	r3, [r7, #22]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d122      	bne.n	8006950 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b03      	cmp	r3, #3
 8006914:	d117      	bne.n	8006946 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006916:	7dba      	ldrb	r2, [r7, #22]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	32ae      	adds	r2, #174	; 0xae
 800691c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00f      	beq.n	8006946 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006926:	7dba      	ldrb	r2, [r7, #22]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800692e:	7dba      	ldrb	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32ae      	adds	r2, #174	; 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	7afa      	ldrb	r2, [r7, #11]
 800693c:	4611      	mov	r1, r2
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	4798      	blx	r3
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	e000      	b.n	8006952 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	460b      	mov	r3, r1
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d16f      	bne.n	8006a4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3314      	adds	r3, #20
 8006972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800697a:	2b02      	cmp	r3, #2
 800697c:	d15a      	bne.n	8006a34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d914      	bls.n	80069b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	461a      	mov	r2, r3
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f001 f8b2 	bl	8007b0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069a6:	2300      	movs	r3, #0
 80069a8:	2200      	movs	r2, #0
 80069aa:	2100      	movs	r1, #0
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f004 ff9f 	bl	800b8f0 <USBD_LL_PrepareReceive>
 80069b2:	e03f      	b.n	8006a34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d11c      	bne.n	80069fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d316      	bcc.n	80069fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d20f      	bcs.n	80069fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069da:	2200      	movs	r2, #0
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 f893 	bl	8007b0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f004 ff7c 	bl	800b8f0 <USBD_LL_PrepareReceive>
 80069f8:	e01c      	b.n	8006a34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d10f      	bne.n	8006a26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f004 feb7 	bl	800b79c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 f8bd 	bl	8007bae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d03a      	beq.n	8006ab4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff fe42 	bl	80066c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a4c:	e032      	b.n	8006ab4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f985 	bl	8006d68 <USBD_CoreFindEP>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2bff      	cmp	r3, #255	; 0xff
 8006a66:	d025      	beq.n	8006ab4 <USBD_LL_DataInStage+0x15a>
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d122      	bne.n	8006ab4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d11c      	bne.n	8006ab4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a7a:	7dfa      	ldrb	r2, [r7, #23]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	32ae      	adds	r2, #174	; 0xae
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a8a:	7dfa      	ldrb	r2, [r7, #23]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a92:	7dfa      	ldrb	r2, [r7, #23]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	32ae      	adds	r2, #174	; 0xae
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	7afa      	ldrb	r2, [r7, #11]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	4798      	blx	r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006aaa:	7dbb      	ldrb	r3, [r7, #22]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ab0:	7dbb      	ldrb	r3, [r7, #22]
 8006ab2:	e000      	b.n	8006ab6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d014      	beq.n	8006b24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6852      	ldr	r2, [r2, #4]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	4611      	mov	r1, r2
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f004 fdf1 	bl	800b712 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	2200      	movs	r2, #0
 8006b44:	2180      	movs	r1, #128	; 0x80
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f004 fde3 	bl	800b712 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2240      	movs	r2, #64	; 0x40
 8006b56:	621a      	str	r2, [r3, #32]

  return ret;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d006      	beq.n	8006ba4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d106      	bne.n	8006bdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d110      	bne.n	8006c20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	32ae      	adds	r2, #174	; 0xae
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e01c      	b.n	8006c86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d115      	bne.n	8006c84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	32ae      	adds	r2, #174	; 0xae
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	32ae      	adds	r2, #174	; 0xae
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	32ae      	adds	r2, #174	; 0xae
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e01c      	b.n	8006cea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d115      	bne.n	8006ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32ae      	adds	r2, #174	; 0xae
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32ae      	adds	r2, #174	; 0xae
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00e      	beq.n	8006d44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6852      	ldr	r2, [r2, #4]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	4611      	mov	r1, r2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d920      	bls.n	8006dec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006db2:	e013      	b.n	8006ddc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006db4:	f107 030a 	add.w	r3, r7, #10
 8006db8:	4619      	mov	r1, r3
 8006dba:	6978      	ldr	r0, [r7, #20]
 8006dbc:	f000 f81b 	bl	8006df6 <USBD_GetNextDesc>
 8006dc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d108      	bne.n	8006ddc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	789b      	ldrb	r3, [r3, #2]
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d008      	beq.n	8006dea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	897b      	ldrh	r3, [r7, #10]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d8e5      	bhi.n	8006db4 <USBD_GetEpDesc+0x32>
 8006de8:	e000      	b.n	8006dec <USBD_GetEpDesc+0x6a>
          break;
 8006dea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006dec:	693b      	ldr	r3, [r7, #16]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4413      	add	r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4413      	add	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	3301      	adds	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e4e:	8a3b      	ldrh	r3, [r7, #16]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	b21a      	sxth	r2, r3
 8006e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b21b      	sxth	r3, r3
 8006e5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e5e:	89fb      	ldrh	r3, [r7, #14]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d005      	beq.n	8006e92 <USBD_StdDevReq+0x26>
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d857      	bhi.n	8006f3a <USBD_StdDevReq+0xce>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <USBD_StdDevReq+0x42>
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d153      	bne.n	8006f3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	32ae      	adds	r2, #174	; 0xae
 8006e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006eac:	e04a      	b.n	8006f44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d83b      	bhi.n	8006f2e <USBD_StdDevReq+0xc2>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <USBD_StdDevReq+0x50>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f11 	.word	0x08006f11
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08006f2f 	.word	0x08006f2f
 8006ec8:	08006f1b 	.word	0x08006f1b
 8006ecc:	08006f2f 	.word	0x08006f2f
 8006ed0:	08006eef 	.word	0x08006eef
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006f2f 	.word	0x08006f2f
 8006edc:	08006f07 	.word	0x08006f07
 8006ee0:	08006ef9 	.word	0x08006ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa3c 	bl	8007364 <USBD_GetDescriptor>
          break;
 8006eec:	e024      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fba1 	bl	8007638 <USBD_SetAddress>
          break;
 8006ef6:	e01f      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fbe0 	bl	80076c0 <USBD_SetConfig>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
          break;
 8006f04:	e018      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc83 	bl	8007814 <USBD_GetConfig>
          break;
 8006f0e:	e013      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fcb4 	bl	8007880 <USBD_GetStatus>
          break;
 8006f18:	e00e      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fce3 	bl	80078e8 <USBD_SetFeature>
          break;
 8006f22:	e009      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fd07 	bl	800793a <USBD_ClrFeature>
          break;
 8006f2c:	e004      	b.n	8006f38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fd5e 	bl	80079f2 <USBD_CtlError>
          break;
 8006f36:	bf00      	nop
      }
      break;
 8006f38:	e004      	b.n	8006f44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fd58 	bl	80079f2 <USBD_CtlError>
      break;
 8006f42:	bf00      	nop
  }

  return ret;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d005      	beq.n	8006f76 <USBD_StdItfReq+0x26>
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d852      	bhi.n	8007014 <USBD_StdItfReq+0xc4>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <USBD_StdItfReq+0x26>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d14e      	bne.n	8007014 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d840      	bhi.n	8007006 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	889b      	ldrh	r3, [r3, #4]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d836      	bhi.n	8006ffc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	889b      	ldrh	r3, [r3, #4]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fed9 	bl	8006d4e <USBD_CoreFindIF>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2bff      	cmp	r3, #255	; 0xff
 8006fa4:	d01d      	beq.n	8006fe2 <USBD_StdItfReq+0x92>
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d11a      	bne.n	8006fe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006fac:	7bba      	ldrb	r2, [r7, #14]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32ae      	adds	r2, #174	; 0xae
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00f      	beq.n	8006fdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006fbc:	7bba      	ldrb	r2, [r7, #14]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fc4:	7bba      	ldrb	r2, [r7, #14]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006fda:	e004      	b.n	8006fe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006fe0:	e001      	b.n	8006fe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d110      	bne.n	8007010 <USBD_StdItfReq+0xc0>
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10d      	bne.n	8007010 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fdc7 	bl	8007b88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ffa:	e009      	b.n	8007010 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fcf7 	bl	80079f2 <USBD_CtlError>
          break;
 8007004:	e004      	b.n	8007010 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fcf2 	bl	80079f2 <USBD_CtlError>
          break;
 800700e:	e000      	b.n	8007012 <USBD_StdItfReq+0xc2>
          break;
 8007010:	bf00      	nop
      }
      break;
 8007012:	e004      	b.n	800701e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fceb 	bl	80079f2 <USBD_CtlError>
      break;
 800701c:	bf00      	nop
  }

  return ret;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	889b      	ldrh	r3, [r3, #4]
 800703a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007044:	2b40      	cmp	r3, #64	; 0x40
 8007046:	d007      	beq.n	8007058 <USBD_StdEPReq+0x30>
 8007048:	2b40      	cmp	r3, #64	; 0x40
 800704a:	f200 817f 	bhi.w	800734c <USBD_StdEPReq+0x324>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d02a      	beq.n	80070a8 <USBD_StdEPReq+0x80>
 8007052:	2b20      	cmp	r3, #32
 8007054:	f040 817a 	bne.w	800734c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fe83 	bl	8006d68 <USBD_CoreFindEP>
 8007062:	4603      	mov	r3, r0
 8007064:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007066:	7b7b      	ldrb	r3, [r7, #13]
 8007068:	2bff      	cmp	r3, #255	; 0xff
 800706a:	f000 8174 	beq.w	8007356 <USBD_StdEPReq+0x32e>
 800706e:	7b7b      	ldrb	r3, [r7, #13]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 8170 	bne.w	8007356 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007076:	7b7a      	ldrb	r2, [r7, #13]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800707e:	7b7a      	ldrb	r2, [r7, #13]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	32ae      	adds	r2, #174	; 0xae
 8007084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8163 	beq.w	8007356 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007090:	7b7a      	ldrb	r2, [r7, #13]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32ae      	adds	r2, #174	; 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070a6:	e156      	b.n	8007356 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d008      	beq.n	80070c2 <USBD_StdEPReq+0x9a>
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	f300 8145 	bgt.w	8007340 <USBD_StdEPReq+0x318>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 809b 	beq.w	80071f2 <USBD_StdEPReq+0x1ca>
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d03c      	beq.n	800713a <USBD_StdEPReq+0x112>
 80070c0:	e13e      	b.n	8007340 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d002      	beq.n	80070d4 <USBD_StdEPReq+0xac>
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d016      	beq.n	8007100 <USBD_StdEPReq+0xd8>
 80070d2:	e02c      	b.n	800712e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <USBD_StdEPReq+0xce>
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b80      	cmp	r3, #128	; 0x80
 80070de:	d00a      	beq.n	80070f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f004 fb59 	bl	800b79c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ea:	2180      	movs	r1, #128	; 0x80
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f004 fb55 	bl	800b79c <USBD_LL_StallEP>
 80070f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070f4:	e020      	b.n	8007138 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc7a 	bl	80079f2 <USBD_CtlError>
              break;
 80070fe:	e01b      	b.n	8007138 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10e      	bne.n	8007126 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <USBD_StdEPReq+0xfe>
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d008      	beq.n	8007126 <USBD_StdEPReq+0xfe>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f004 fb3b 	bl	800b79c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fd2e 	bl	8007b88 <USBD_CtlSendStatus>

              break;
 800712c:	e004      	b.n	8007138 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc5e 	bl	80079f2 <USBD_CtlError>
              break;
 8007136:	bf00      	nop
          }
          break;
 8007138:	e107      	b.n	800734a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d002      	beq.n	800714c <USBD_StdEPReq+0x124>
 8007146:	2b03      	cmp	r3, #3
 8007148:	d016      	beq.n	8007178 <USBD_StdEPReq+0x150>
 800714a:	e04b      	b.n	80071e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00d      	beq.n	800716e <USBD_StdEPReq+0x146>
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b80      	cmp	r3, #128	; 0x80
 8007156:	d00a      	beq.n	800716e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f004 fb1d 	bl	800b79c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f004 fb19 	bl	800b79c <USBD_LL_StallEP>
 800716a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800716c:	e040      	b.n	80071f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc3e 	bl	80079f2 <USBD_CtlError>
              break;
 8007176:	e03b      	b.n	80071f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	885b      	ldrh	r3, [r3, #2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d136      	bne.n	80071ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f004 fb23 	bl	800b7da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fcf7 	bl	8007b88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fde2 	bl	8006d68 <USBD_CoreFindEP>
 80071a4:	4603      	mov	r3, r0
 80071a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071a8:	7b7b      	ldrb	r3, [r7, #13]
 80071aa:	2bff      	cmp	r3, #255	; 0xff
 80071ac:	d01f      	beq.n	80071ee <USBD_StdEPReq+0x1c6>
 80071ae:	7b7b      	ldrb	r3, [r7, #13]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11c      	bne.n	80071ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80071b4:	7b7a      	ldrb	r2, [r7, #13]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80071bc:	7b7a      	ldrb	r2, [r7, #13]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	32ae      	adds	r2, #174	; 0xae
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d010      	beq.n	80071ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071cc:	7b7a      	ldrb	r2, [r7, #13]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	; 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80071e2:	e004      	b.n	80071ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fc03 	bl	80079f2 <USBD_CtlError>
              break;
 80071ec:	e000      	b.n	80071f0 <USBD_StdEPReq+0x1c8>
              break;
 80071ee:	bf00      	nop
          }
          break;
 80071f0:	e0ab      	b.n	800734a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d002      	beq.n	8007204 <USBD_StdEPReq+0x1dc>
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d032      	beq.n	8007268 <USBD_StdEPReq+0x240>
 8007202:	e097      	b.n	8007334 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <USBD_StdEPReq+0x1f2>
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b80      	cmp	r3, #128	; 0x80
 800720e:	d004      	beq.n	800721a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbed 	bl	80079f2 <USBD_CtlError>
                break;
 8007218:	e091      	b.n	800733e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da0b      	bge.n	800723a <USBD_StdEPReq+0x212>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3310      	adds	r3, #16
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	e00b      	b.n	8007252 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2202      	movs	r2, #2
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc37 	bl	8007ad4 <USBD_CtlSendData>
              break;
 8007266:	e06a      	b.n	800733e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800726c:	2b00      	cmp	r3, #0
 800726e:	da11      	bge.n	8007294 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	f003 020f 	and.w	r2, r3, #15
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	3324      	adds	r3, #36	; 0x24
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d117      	bne.n	80072ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fbb0 	bl	80079f2 <USBD_CtlError>
                  break;
 8007292:	e054      	b.n	800733e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	f003 020f 	and.w	r2, r3, #15
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fb9d 	bl	80079f2 <USBD_CtlError>
                  break;
 80072b8:	e041      	b.n	800733e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da0b      	bge.n	80072da <USBD_StdEPReq+0x2b2>
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	3310      	adds	r3, #16
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	3304      	adds	r3, #4
 80072d8:	e00b      	b.n	80072f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	3304      	adds	r3, #4
 80072f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <USBD_StdEPReq+0x2d8>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d103      	bne.n	8007308 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e00e      	b.n	8007326 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f004 fa83 	bl	800b818 <USBD_LL_IsStallEP>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2201      	movs	r2, #1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e002      	b.n	8007326 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2202      	movs	r2, #2
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbd1 	bl	8007ad4 <USBD_CtlSendData>
              break;
 8007332:	e004      	b.n	800733e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb5b 	bl	80079f2 <USBD_CtlError>
              break;
 800733c:	bf00      	nop
          }
          break;
 800733e:	e004      	b.n	800734a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fb55 	bl	80079f2 <USBD_CtlError>
          break;
 8007348:	bf00      	nop
      }
      break;
 800734a:	e005      	b.n	8007358 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fb4f 	bl	80079f2 <USBD_CtlError>
      break;
 8007354:	e000      	b.n	8007358 <USBD_StdEPReq+0x330>
      break;
 8007356:	bf00      	nop
  }

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	2b06      	cmp	r3, #6
 8007386:	f200 8128 	bhi.w	80075da <USBD_GetDescriptor+0x276>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <USBD_GetDescriptor+0x2c>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073c5 	.word	0x080073c5
 8007398:	08007405 	.word	0x08007405
 800739c:	080075db 	.word	0x080075db
 80073a0:	080075db 	.word	0x080075db
 80073a4:	0800757b 	.word	0x0800757b
 80073a8:	080075a7 	.word	0x080075a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
      break;
 80073c2:	e112      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7c1b      	ldrb	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	f107 0208 	add.w	r2, r7, #8
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
 80073dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	2202      	movs	r2, #2
 80073e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073e6:	e100      	b.n	80075ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	f107 0208 	add.w	r2, r7, #8
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
 80073f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	2202      	movs	r2, #2
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	e0f2      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	885b      	ldrh	r3, [r3, #2]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b05      	cmp	r3, #5
 800740c:	f200 80ac 	bhi.w	8007568 <USBD_GetDescriptor+0x204>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <USBD_GetDescriptor+0xb4>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007431 	.word	0x08007431
 800741c:	08007465 	.word	0x08007465
 8007420:	08007499 	.word	0x08007499
 8007424:	080074cd 	.word	0x080074cd
 8007428:	08007501 	.word	0x08007501
 800742c:	08007535 	.word	0x08007535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7c12      	ldrb	r2, [r2, #16]
 8007448:	f107 0108 	add.w	r1, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007452:	e091      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 facb 	bl	80079f2 <USBD_CtlError>
            err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
          break;
 8007462:	e089      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7c12      	ldrb	r2, [r2, #16]
 800747c:	f107 0108 	add.w	r1, r7, #8
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007486:	e077      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fab1 	bl	80079f2 <USBD_CtlError>
            err++;
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	3301      	adds	r3, #1
 8007494:	72fb      	strb	r3, [r7, #11]
          break;
 8007496:	e06f      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ba:	e05d      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa97 	bl	80079f2 <USBD_CtlError>
            err++;
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	3301      	adds	r3, #1
 80074c8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ca:	e055      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ee:	e043      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa7d 	bl	80079f2 <USBD_CtlError>
            err++;
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	3301      	adds	r3, #1
 80074fc:	72fb      	strb	r3, [r7, #11]
          break;
 80074fe:	e03b      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007522:	e029      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa63 	bl	80079f2 <USBD_CtlError>
            err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
          break;
 8007532:	e021      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007556:	e00f      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa49 	bl	80079f2 <USBD_CtlError>
            err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
          break;
 8007566:	e007      	b.n	8007578 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa41 	bl	80079f2 <USBD_CtlError>
          err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007576:	bf00      	nop
      }
      break;
 8007578:	e037      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	f107 0208 	add.w	r2, r7, #8
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
 8007592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007594:	e029      	b.n	80075ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa2a 	bl	80079f2 <USBD_CtlError>
        err++;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	3301      	adds	r3, #1
 80075a2:	72fb      	strb	r3, [r7, #11]
      break;
 80075a4:	e021      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1b      	ldrb	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	f107 0208 	add.w	r2, r7, #8
 80075ba:	4610      	mov	r0, r2
 80075bc:	4798      	blx	r3
 80075be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	2207      	movs	r2, #7
 80075c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075c8:	e00f      	b.n	80075ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa10 	bl	80079f2 <USBD_CtlError>
        err++;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	3301      	adds	r3, #1
 80075d6:	72fb      	strb	r3, [r7, #11]
      break;
 80075d8:	e007      	b.n	80075ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fa08 	bl	80079f2 <USBD_CtlError>
      err++;
 80075e2:	7afb      	ldrb	r3, [r7, #11]
 80075e4:	3301      	adds	r3, #1
 80075e6:	72fb      	strb	r3, [r7, #11]
      break;
 80075e8:	bf00      	nop
  }

  if (err != 0U)
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11e      	bne.n	800762e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	88db      	ldrh	r3, [r3, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d016      	beq.n	8007626 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075f8:	893b      	ldrh	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88da      	ldrh	r2, [r3, #6]
 8007602:	893b      	ldrh	r3, [r7, #8]
 8007604:	4293      	cmp	r3, r2
 8007606:	bf28      	it	cs
 8007608:	4613      	movcs	r3, r2
 800760a:	b29b      	uxth	r3, r3
 800760c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800760e:	893b      	ldrh	r3, [r7, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa5d 	bl	8007ad4 <USBD_CtlSendData>
 800761a:	e009      	b.n	8007630 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9e7 	bl	80079f2 <USBD_CtlError>
 8007624:	e004      	b.n	8007630 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 faae 	bl	8007b88 <USBD_CtlSendStatus>
 800762c:	e000      	b.n	8007630 <USBD_GetDescriptor+0x2cc>
    return;
 800762e:	bf00      	nop
  }
}
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop

08007638 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	889b      	ldrh	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d131      	bne.n	80076ae <USBD_SetAddress+0x76>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	88db      	ldrh	r3, [r3, #6]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d12d      	bne.n	80076ae <USBD_SetAddress+0x76>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	885b      	ldrh	r3, [r3, #2]
 8007656:	2b7f      	cmp	r3, #127	; 0x7f
 8007658:	d829      	bhi.n	80076ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007664:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d104      	bne.n	800767c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9bc 	bl	80079f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	e01d      	b.n	80076b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7bfa      	ldrb	r2, [r7, #15]
 8007680:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f004 f8f1 	bl	800b870 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa7a 	bl	8007b88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	e009      	b.n	80076b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ac:	e004      	b.n	80076b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f99e 	bl	80079f2 <USBD_CtlError>
  }
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	4b4e      	ldr	r3, [pc, #312]	; (8007810 <USBD_SetConfig+0x150>)
 80076d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076d8:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <USBD_SetConfig+0x150>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d905      	bls.n	80076ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f985 	bl	80079f2 <USBD_CtlError>
    return USBD_FAIL;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e08c      	b.n	8007806 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d002      	beq.n	80076fe <USBD_SetConfig+0x3e>
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d029      	beq.n	8007750 <USBD_SetConfig+0x90>
 80076fc:	e075      	b.n	80077ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076fe:	4b44      	ldr	r3, [pc, #272]	; (8007810 <USBD_SetConfig+0x150>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007706:	4b42      	ldr	r3, [pc, #264]	; (8007810 <USBD_SetConfig+0x150>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007710:	4b3f      	ldr	r3, [pc, #252]	; (8007810 <USBD_SetConfig+0x150>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fe ffe1 	bl	80066de <USBD_SetClassConfig>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f962 	bl	80079f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007736:	e065      	b.n	8007804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa25 	bl	8007b88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2203      	movs	r2, #3
 8007742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007746:	e05d      	b.n	8007804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa1d 	bl	8007b88 <USBD_CtlSendStatus>
      break;
 800774e:	e059      	b.n	8007804 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007750:	4b2f      	ldr	r3, [pc, #188]	; (8007810 <USBD_SetConfig+0x150>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d112      	bne.n	800777e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007760:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <USBD_SetConfig+0x150>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800776a:	4b29      	ldr	r3, [pc, #164]	; (8007810 <USBD_SetConfig+0x150>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fe ffd0 	bl	8006716 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa06 	bl	8007b88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800777c:	e042      	b.n	8007804 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800777e:	4b24      	ldr	r3, [pc, #144]	; (8007810 <USBD_SetConfig+0x150>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d02a      	beq.n	80077e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fe ffbe 	bl	8006716 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <USBD_SetConfig+0x150>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077a4:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <USBD_SetConfig+0x150>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fe ff97 	bl	80066de <USBD_SetClassConfig>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00f      	beq.n	80077da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f918 	bl	80079f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fe ffa3 	bl	8006716 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077d8:	e014      	b.n	8007804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f9d4 	bl	8007b88 <USBD_CtlSendStatus>
      break;
 80077e0:	e010      	b.n	8007804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9d0 	bl	8007b88 <USBD_CtlSendStatus>
      break;
 80077e8:	e00c      	b.n	8007804 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f900 	bl	80079f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <USBD_SetConfig+0x150>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7fe ff8c 	bl	8006716 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	73fb      	strb	r3, [r7, #15]
      break;
 8007802:	bf00      	nop
  }

  return ret;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200003fc 	.word	0x200003fc

08007814 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	88db      	ldrh	r3, [r3, #6]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d004      	beq.n	8007830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f8e2 	bl	80079f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800782e:	e023      	b.n	8007878 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	dc02      	bgt.n	8007842 <USBD_GetConfig+0x2e>
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc03      	bgt.n	8007848 <USBD_GetConfig+0x34>
 8007840:	e015      	b.n	800786e <USBD_GetConfig+0x5a>
 8007842:	2b03      	cmp	r3, #3
 8007844:	d00b      	beq.n	800785e <USBD_GetConfig+0x4a>
 8007846:	e012      	b.n	800786e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3308      	adds	r3, #8
 8007852:	2201      	movs	r2, #1
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f93c 	bl	8007ad4 <USBD_CtlSendData>
        break;
 800785c:	e00c      	b.n	8007878 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3304      	adds	r3, #4
 8007862:	2201      	movs	r2, #1
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f934 	bl	8007ad4 <USBD_CtlSendData>
        break;
 800786c:	e004      	b.n	8007878 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8be 	bl	80079f2 <USBD_CtlError>
        break;
 8007876:	bf00      	nop
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	2b02      	cmp	r3, #2
 8007896:	d81e      	bhi.n	80078d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	88db      	ldrh	r3, [r3, #6]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d004      	beq.n	80078aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8a5 	bl	80079f2 <USBD_CtlError>
        break;
 80078a8:	e01a      	b.n	80078e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f043 0202 	orr.w	r2, r3, #2
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	330c      	adds	r3, #12
 80078ca:	2202      	movs	r2, #2
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f900 	bl	8007ad4 <USBD_CtlSendData>
      break;
 80078d4:	e004      	b.n	80078e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f88a 	bl	80079f2 <USBD_CtlError>
      break;
 80078de:	bf00      	nop
  }
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d107      	bne.n	800790a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f940 	bl	8007b88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007908:	e013      	b.n	8007932 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d10b      	bne.n	800792a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	889b      	ldrh	r3, [r3, #4]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	b29b      	uxth	r3, r3
 800791a:	b2da      	uxtb	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f930 	bl	8007b88 <USBD_CtlSendStatus>
}
 8007928:	e003      	b.n	8007932 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f860 	bl	80079f2 <USBD_CtlError>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794a:	b2db      	uxtb	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	2b02      	cmp	r3, #2
 8007950:	d80b      	bhi.n	800796a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d10c      	bne.n	8007974 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f910 	bl	8007b88 <USBD_CtlSendStatus>
      }
      break;
 8007968:	e004      	b.n	8007974 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f840 	bl	80079f2 <USBD_CtlError>
      break;
 8007972:	e000      	b.n	8007976 <USBD_ClrFeature+0x3c>
      break;
 8007974:	bf00      	nop
  }
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff fa41 	bl	8006e30 <SWAPBYTE>
 80079ae:	4603      	mov	r3, r0
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3301      	adds	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fa34 	bl	8006e30 <SWAPBYTE>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fa27 	bl	8006e30 <SWAPBYTE>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	80da      	strh	r2, [r3, #6]
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fc:	2180      	movs	r1, #128	; 0x80
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f003 fecc 	bl	800b79c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a04:	2100      	movs	r1, #0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f003 fec8 	bl	800b79c <USBD_LL_StallEP>
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d036      	beq.n	8007a98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f000 f836 	bl	8007aa0 <USBD_GetLen>
 8007a34:	4603      	mov	r3, r0
 8007a36:	3301      	adds	r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	4413      	add	r3, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	3301      	adds	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	4413      	add	r3, r2
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	3301      	adds	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a64:	e013      	b.n	8007a8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]
    idx++;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	4413      	add	r3, r2
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e7      	bne.n	8007a66 <USBD_GetString+0x52>
 8007a96:	e000      	b.n	8007a9a <USBD_GetString+0x86>
    return;
 8007a98:	bf00      	nop
  }
}
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ab0:	e005      	b.n	8007abe <USBD_GetLen+0x1e>
  {
    len++;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f5      	bne.n	8007ab2 <USBD_GetLen+0x12>
  }

  return len;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f003 fed7 	bl	800b8ae <USBD_LL_Transmit>

  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f003 fec6 	bl	800b8ae <USBD_LL_Transmit>

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	2100      	movs	r1, #0
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f003 feca 	bl	800b8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	2100      	movs	r1, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f003 feb9 	bl	800b8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2204      	movs	r2, #4
 8007b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f003 fe85 	bl	800b8ae <USBD_LL_Transmit>

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2205      	movs	r2, #5
 8007bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f003 fe93 	bl	800b8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <__NVIC_SetPriority>:
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	db0a      	blt.n	8007bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	490c      	ldr	r1, [pc, #48]	; (8007c20 <__NVIC_SetPriority+0x4c>)
 8007bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf2:	0112      	lsls	r2, r2, #4
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007bfc:	e00a      	b.n	8007c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <__NVIC_SetPriority+0x50>)
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	3b04      	subs	r3, #4
 8007c0c:	0112      	lsls	r2, r2, #4
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	440b      	add	r3, r1
 8007c12:	761a      	strb	r2, [r3, #24]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	e000e100 	.word	0xe000e100
 8007c24:	e000ed00 	.word	0xe000ed00

08007c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <SysTick_Handler+0x1c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c30:	f002 f85a 	bl	8009ce8 <xTaskGetSchedulerState>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d001      	beq.n	8007c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c3a:	f002 ff3d 	bl	800aab8 <xPortSysTickHandler>
  }
}
 8007c3e:	bf00      	nop
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	e000e010 	.word	0xe000e010

08007c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f06f 0004 	mvn.w	r0, #4
 8007c52:	f7ff ffbf 	bl	8007bd4 <__NVIC_SetPriority>
#endif
}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c62:	f3ef 8305 	mrs	r3, IPSR
 8007c66:	603b      	str	r3, [r7, #0]
  return(result);
 8007c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c6e:	f06f 0305 	mvn.w	r3, #5
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	e00c      	b.n	8007c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c76:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <osKernelInitialize+0x44>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d105      	bne.n	8007c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <osKernelInitialize+0x44>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	607b      	str	r3, [r7, #4]
 8007c88:	e002      	b.n	8007c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c90:	687b      	ldr	r3, [r7, #4]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000400 	.word	0x20000400

08007ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007caa:	f3ef 8305 	mrs	r3, IPSR
 8007cae:	603b      	str	r3, [r7, #0]
  return(result);
 8007cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cb6:	f06f 0305 	mvn.w	r3, #5
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	e010      	b.n	8007ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <osKernelStart+0x48>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d109      	bne.n	8007cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cc6:	f7ff ffbf 	bl	8007c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cca:	4b08      	ldr	r3, [pc, #32]	; (8007cec <osKernelStart+0x48>)
 8007ccc:	2202      	movs	r2, #2
 8007cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cd0:	f001 fb9e 	bl	8009410 <vTaskStartScheduler>
      stat = osOK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	e002      	b.n	8007ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
 8007cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ce0:	687b      	ldr	r3, [r7, #4]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000400 	.word	0x20000400

08007cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08e      	sub	sp, #56	; 0x38
 8007cf4:	af04      	add	r7, sp, #16
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d00:	f3ef 8305 	mrs	r3, IPSR
 8007d04:	617b      	str	r3, [r7, #20]
  return(result);
 8007d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d17e      	bne.n	8007e0a <osThreadNew+0x11a>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d07b      	beq.n	8007e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d16:	2318      	movs	r3, #24
 8007d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d045      	beq.n	8007db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <osThreadNew+0x48>
        name = attr->name;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <osThreadNew+0x6e>
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b38      	cmp	r3, #56	; 0x38
 8007d50:	d805      	bhi.n	8007d5e <osThreadNew+0x6e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <osThreadNew+0x72>
        return (NULL);
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e054      	b.n	8007e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00e      	beq.n	8007d98 <osThreadNew+0xa8>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2ba7      	cmp	r3, #167	; 0xa7
 8007d80:	d90a      	bls.n	8007d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d006      	beq.n	8007d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <osThreadNew+0xa8>
        mem = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e010      	b.n	8007dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10c      	bne.n	8007dba <osThreadNew+0xca>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <osThreadNew+0xca>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d104      	bne.n	8007dba <osThreadNew+0xca>
          mem = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e001      	b.n	8007dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d110      	bne.n	8007de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dc8:	9202      	str	r2, [sp, #8]
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	6a3a      	ldr	r2, [r7, #32]
 8007dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f001 f92e 	bl	8009038 <xTaskCreateStatic>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	e013      	b.n	8007e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d110      	bne.n	8007e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	f107 0310 	add.w	r3, r7, #16
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 f979 	bl	80090f2 <xTaskCreate>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d001      	beq.n	8007e0a <osThreadNew+0x11a>
            hTask = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e0a:	693b      	ldr	r3, [r7, #16]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3728      	adds	r7, #40	; 0x28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1c:	f3ef 8305 	mrs	r3, IPSR
 8007e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <osDelay+0x1c>
    stat = osErrorISR;
 8007e28:	f06f 0305 	mvn.w	r3, #5
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e007      	b.n	8007e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fab4 	bl	80093a8 <vTaskDelay>
    }
  }

  return (stat);
 8007e40:	68fb      	ldr	r3, [r7, #12]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b088      	sub	sp, #32
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e56:	f3ef 8305 	mrs	r3, IPSR
 8007e5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e5c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d174      	bne.n	8007f4c <osMutexNew+0x102>
    if (attr != NULL) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e001      	b.n	8007e74 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <osMutexNew+0x3a>
      rmtx = 1U;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e001      	b.n	8007e88 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d15c      	bne.n	8007f4c <osMutexNew+0x102>
      mem = -1;
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d015      	beq.n	8007eca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <osMutexNew+0x6a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	2b4f      	cmp	r3, #79	; 0x4f
 8007eac:	d902      	bls.n	8007eb4 <osMutexNew+0x6a>
          mem = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	e00c      	b.n	8007ece <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d108      	bne.n	8007ece <osMutexNew+0x84>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <osMutexNew+0x84>
            mem = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	e001      	b.n	8007ece <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d112      	bne.n	8007efa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	2004      	movs	r0, #4
 8007ee2:	f000 fb18 	bl	8008516 <xQueueCreateMutexStatic>
 8007ee6:	61f8      	str	r0, [r7, #28]
 8007ee8:	e016      	b.n	8007f18 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f000 fb10 	bl	8008516 <xQueueCreateMutexStatic>
 8007ef6:	61f8      	str	r0, [r7, #28]
 8007ef8:	e00e      	b.n	8007f18 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007f06:	2004      	movs	r0, #4
 8007f08:	f000 faed 	bl	80084e6 <xQueueCreateMutex>
 8007f0c:	61f8      	str	r0, [r7, #28]
 8007f0e:	e003      	b.n	8007f18 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007f10:	2001      	movs	r0, #1
 8007f12:	f000 fae8 	bl	80084e6 <xQueueCreateMutex>
 8007f16:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <osMutexNew+0xee>
        if (attr != NULL) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <osMutexNew+0xe2>
          name = attr->name;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e001      	b.n	8007f30 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007f30:	68f9      	ldr	r1, [r7, #12]
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f001 f822 	bl	8008f7c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d006      	beq.n	8007f4c <osMutexNew+0x102>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f74:	f3ef 8305 	mrs	r3, IPSR
 8007f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f7a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007f80:	f06f 0305 	mvn.w	r3, #5
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	e02c      	b.n	8007fe2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007f8e:	f06f 0303 	mvn.w	r3, #3
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	e025      	b.n	8007fe2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d011      	beq.n	8007fc0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6938      	ldr	r0, [r7, #16]
 8007fa0:	f000 fb08 	bl	80085b4 <xQueueTakeMutexRecursive>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d01b      	beq.n	8007fe2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007fb0:	f06f 0301 	mvn.w	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e014      	b.n	8007fe2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007fb8:	f06f 0302 	mvn.w	r3, #2
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e010      	b.n	8007fe2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6938      	ldr	r0, [r7, #16]
 8007fc4:	f000 fda6 	bl	8008b14 <xQueueSemaphoreTake>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d009      	beq.n	8007fe2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007fd4:	f06f 0301 	mvn.w	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e002      	b.n	8007fe2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007fdc:	f06f 0302 	mvn.w	r3, #2
 8007fe0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007fe2:	697b      	ldr	r3, [r7, #20]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008008:	f3ef 8305 	mrs	r3, IPSR
 800800c:	60bb      	str	r3, [r7, #8]
  return(result);
 800800e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <osMutexRelease+0x30>
    stat = osErrorISR;
 8008014:	f06f 0305 	mvn.w	r3, #5
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	e01f      	b.n	800805c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008022:	f06f 0303 	mvn.w	r3, #3
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e018      	b.n	800805c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008030:	6938      	ldr	r0, [r7, #16]
 8008032:	f000 fa8b 	bl	800854c <xQueueGiveMutexRecursive>
 8008036:	4603      	mov	r3, r0
 8008038:	2b01      	cmp	r3, #1
 800803a:	d00f      	beq.n	800805c <osMutexRelease+0x70>
        stat = osErrorResource;
 800803c:	f06f 0302 	mvn.w	r3, #2
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	e00b      	b.n	800805c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	6938      	ldr	r0, [r7, #16]
 800804c:	f000 fae8 	bl	8008620 <xQueueGenericSend>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d002      	beq.n	800805c <osMutexRelease+0x70>
        stat = osErrorResource;
 8008056:	f06f 0302 	mvn.w	r3, #2
 800805a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800805c:	697b      	ldr	r3, [r7, #20]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a07      	ldr	r2, [pc, #28]	; (8008094 <vApplicationGetIdleTaskMemory+0x2c>)
 8008078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4a06      	ldr	r2, [pc, #24]	; (8008098 <vApplicationGetIdleTaskMemory+0x30>)
 800807e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2280      	movs	r2, #128	; 0x80
 8008084:	601a      	str	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000404 	.word	0x20000404
 8008098:	200004ac 	.word	0x200004ac

0800809c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4a07      	ldr	r2, [pc, #28]	; (80080c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80080ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a06      	ldr	r2, [pc, #24]	; (80080cc <vApplicationGetTimerTaskMemory+0x30>)
 80080b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ba:	601a      	str	r2, [r3, #0]
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200006ac 	.word	0x200006ac
 80080cc:	20000754 	.word	0x20000754

080080d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0208 	add.w	r2, r3, #8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f103 0208 	add.w	r2, r3, #8
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f103 0208 	add.w	r2, r3, #8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d103      	bne.n	8008192 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e00c      	b.n	80081ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3308      	adds	r3, #8
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e002      	b.n	80081a0 <vListInsert+0x2e>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d2f6      	bcs.n	800819a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6892      	ldr	r2, [r2, #8]
 80081fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6852      	ldr	r2, [r2, #4]
 8008204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d103      	bne.n	8008218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1e5a      	subs	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008262:	f002 fb97 	bl	800a994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	441a      	add	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	3b01      	subs	r3, #1
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	441a      	add	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	22ff      	movs	r2, #255	; 0xff
 80082ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d114      	bne.n	80082e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01a      	beq.n	80082f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3310      	adds	r3, #16
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fb3d 	bl	8009944 <xTaskRemoveFromEventList>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d012      	beq.n	80082f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <xQueueGenericReset+0xcc>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	e009      	b.n	80082f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3310      	adds	r3, #16
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fef2 	bl	80080d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff feed 	bl	80080d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082f6:	f002 fb7d 	bl	800a9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082fa:	2301      	movs	r3, #1
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08e      	sub	sp, #56	; 0x38
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <xQueueGenericCreateStatic+0x52>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xQueueGenericCreateStatic+0x56>
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <xQueueGenericCreateStatic+0x58>
 800835e:	2300      	movs	r3, #0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	623b      	str	r3, [r7, #32]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <xQueueGenericCreateStatic+0x7e>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <xQueueGenericCreateStatic+0x82>
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <xQueueGenericCreateStatic+0x84>
 800838a:	2300      	movs	r3, #0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	61fb      	str	r3, [r7, #28]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083a6:	2350      	movs	r3, #80	; 0x50
 80083a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b50      	cmp	r3, #80	; 0x50
 80083ae:	d00a      	beq.n	80083c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	61bb      	str	r3, [r7, #24]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00d      	beq.n	80083ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f83f 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3730      	adds	r7, #48	; 0x30
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xQueueGenericCreate+0x2a>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	613b      	str	r3, [r7, #16]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	3350      	adds	r3, #80	; 0x50
 8008430:	4618      	mov	r0, r3
 8008432:	f002 fbd1 	bl	800abd8 <pvPortMalloc>
 8008436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3350      	adds	r3, #80	; 0x50
 8008446:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008450:	79fa      	ldrb	r2, [r7, #7]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f805 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008462:	69bb      	ldr	r3, [r7, #24]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800849a:	2101      	movs	r1, #1
 800849c:	69b8      	ldr	r0, [r7, #24]
 800849e:	f7ff fecb 	bl	8008238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00e      	beq.n	80084de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084d2:	2300      	movs	r3, #0
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f8a1 	bl	8008620 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	4603      	mov	r3, r0
 80084ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084f0:	2301      	movs	r3, #1
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6939      	ldr	r1, [r7, #16]
 80084fe:	6978      	ldr	r0, [r7, #20]
 8008500:	f7ff ff7a 	bl	80083f8 <xQueueGenericCreate>
 8008504:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff ffd3 	bl	80084b2 <prvInitialiseMutex>

		return xNewQueue;
 800850c:	68fb      	ldr	r3, [r7, #12]
	}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008516:	b580      	push	{r7, lr}
 8008518:	b088      	sub	sp, #32
 800851a:	af02      	add	r7, sp, #8
 800851c:	4603      	mov	r3, r0
 800851e:	6039      	str	r1, [r7, #0]
 8008520:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008522:	2301      	movs	r3, #1
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	6939      	ldr	r1, [r7, #16]
 8008534:	6978      	ldr	r0, [r7, #20]
 8008536:	f7ff fee7 	bl	8008308 <xQueueGenericCreateStatic>
 800853a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff ffb8 	bl	80084b2 <prvInitialiseMutex>

		return xNewQueue;
 8008542:	68fb      	ldr	r3, [r7, #12]
	}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	60fb      	str	r3, [r7, #12]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	689c      	ldr	r4, [r3, #8]
 8008578:	f001 fba6 	bl	8009cc8 <xTaskGetCurrentTaskHandle>
 800857c:	4603      	mov	r3, r0
 800857e:	429c      	cmp	r4, r3
 8008580:	d111      	bne.n	80085a6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	6938      	ldr	r0, [r7, #16]
 800859c:	f000 f840 	bl	8008620 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e001      	b.n	80085aa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80085aa:	697b      	ldr	r3, [r7, #20]
	}
 80085ac:	4618      	mov	r0, r3
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd90      	pop	{r4, r7, pc}

080085b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80085b4:	b590      	push	{r4, r7, lr}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	60fb      	str	r3, [r7, #12]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	689c      	ldr	r4, [r3, #8]
 80085e2:	f001 fb71 	bl	8009cc8 <xTaskGetCurrentTaskHandle>
 80085e6:	4603      	mov	r3, r0
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d107      	bne.n	80085fc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80085f6:	2301      	movs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e00c      	b.n	8008616 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f000 fa88 	bl	8008b14 <xQueueSemaphoreTake>
 8008604:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008616:	697b      	ldr	r3, [r7, #20]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	bd90      	pop	{r4, r7, pc}

08008620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	; 0x38
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800862e:	2300      	movs	r3, #0
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGenericSend+0x32>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <xQueueGenericSend+0x40>
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <xQueueGenericSend+0x44>
 8008660:	2301      	movs	r3, #1
 8008662:	e000      	b.n	8008666 <xQueueGenericSend+0x46>
 8008664:	2300      	movs	r3, #0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xQueueGenericSend+0x60>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b02      	cmp	r3, #2
 8008684:	d103      	bne.n	800868e <xQueueGenericSend+0x6e>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <xQueueGenericSend+0x72>
 800868e:	2301      	movs	r3, #1
 8008690:	e000      	b.n	8008694 <xQueueGenericSend+0x74>
 8008692:	2300      	movs	r3, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueGenericSend+0x8e>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	623b      	str	r3, [r7, #32]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ae:	f001 fb1b 	bl	8009ce8 <xTaskGetSchedulerState>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <xQueueGenericSend+0x9e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <xQueueGenericSend+0xa2>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueGenericSend+0xa4>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueGenericSend+0xbe>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61fb      	str	r3, [r7, #28]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086de:	f002 f959 	bl	800a994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d302      	bcc.n	80086f4 <xQueueGenericSend+0xd4>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d129      	bne.n	8008748 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086fa:	f000 fb2f 	bl	8008d5c <prvCopyDataToQueue>
 80086fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	d010      	beq.n	800872a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	3324      	adds	r3, #36	; 0x24
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f919 	bl	8009944 <xTaskRemoveFromEventList>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d013      	beq.n	8008740 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008718:	4b3f      	ldr	r3, [pc, #252]	; (8008818 <xQueueGenericSend+0x1f8>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	e00a      	b.n	8008740 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d007      	beq.n	8008740 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008730:	4b39      	ldr	r3, [pc, #228]	; (8008818 <xQueueGenericSend+0x1f8>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008740:	f002 f958 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 8008744:	2301      	movs	r3, #1
 8008746:	e063      	b.n	8008810 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d103      	bne.n	8008756 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800874e:	f002 f951 	bl	800a9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008752:	2300      	movs	r3, #0
 8008754:	e05c      	b.n	8008810 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800875c:	f107 0314 	add.w	r3, r7, #20
 8008760:	4618      	mov	r0, r3
 8008762:	f001 f953 	bl	8009a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008766:	2301      	movs	r3, #1
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800876a:	f002 f943 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800876e:	f000 febf 	bl	80094f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008772:	f002 f90f 	bl	800a994 <vPortEnterCritical>
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800877c:	b25b      	sxtb	r3, r3
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008782:	d103      	bne.n	800878c <xQueueGenericSend+0x16c>
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008792:	b25b      	sxtb	r3, r3
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d103      	bne.n	80087a2 <xQueueGenericSend+0x182>
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a2:	f002 f927 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087a6:	1d3a      	adds	r2, r7, #4
 80087a8:	f107 0314 	add.w	r3, r7, #20
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 f942 	bl	8009a38 <xTaskCheckForTimeOut>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d124      	bne.n	8008804 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087bc:	f000 fbc6 	bl	8008f4c <prvIsQueueFull>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d018      	beq.n	80087f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	3310      	adds	r3, #16
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4611      	mov	r1, r2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f868 	bl	80098a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d6:	f000 fb51 	bl	8008e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087da:	f000 fe97 	bl	800950c <xTaskResumeAll>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af7c 	bne.w	80086de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <xQueueGenericSend+0x1f8>)
 80087e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	e772      	b.n	80086de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087fa:	f000 fb3f 	bl	8008e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087fe:	f000 fe85 	bl	800950c <xTaskResumeAll>
 8008802:	e76c      	b.n	80086de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008806:	f000 fb39 	bl	8008e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800880a:	f000 fe7f 	bl	800950c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800880e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008810:	4618      	mov	r0, r3
 8008812:	3738      	adds	r7, #56	; 0x38
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b090      	sub	sp, #64	; 0x40
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <xQueueGenericSendFromISR+0x3c>
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <xQueueGenericSendFromISR+0x40>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <xQueueGenericSendFromISR+0x42>
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d103      	bne.n	8008886 <xQueueGenericSendFromISR+0x6a>
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008882:	2b01      	cmp	r3, #1
 8008884:	d101      	bne.n	800888a <xQueueGenericSendFromISR+0x6e>
 8008886:	2301      	movs	r3, #1
 8008888:	e000      	b.n	800888c <xQueueGenericSendFromISR+0x70>
 800888a:	2300      	movs	r3, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	623b      	str	r3, [r7, #32]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088a6:	f002 f957 	bl	800ab58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088aa:	f3ef 8211 	mrs	r2, BASEPRI
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	61fa      	str	r2, [r7, #28]
 80088c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d302      	bcc.n	80088d8 <xQueueGenericSendFromISR+0xbc>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d12f      	bne.n	8008938 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088ee:	f000 fa35 	bl	8008d5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d112      	bne.n	8008922 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b00      	cmp	r3, #0
 8008902:	d016      	beq.n	8008932 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	3324      	adds	r3, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f001 f81b 	bl	8009944 <xTaskRemoveFromEventList>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	e007      	b.n	8008932 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008926:	3301      	adds	r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	b25a      	sxtb	r2, r3
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008932:	2301      	movs	r3, #1
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008936:	e001      	b.n	800893c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008946:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800894a:	4618      	mov	r0, r3
 800894c:	3740      	adds	r7, #64	; 0x40
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08c      	sub	sp, #48	; 0x30
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008960:	2300      	movs	r3, #0
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <xQueueReceive+0x30>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	623b      	str	r3, [r7, #32]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <xQueueReceive+0x3e>
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <xQueueReceive+0x42>
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <xQueueReceive+0x44>
 8008996:	2300      	movs	r3, #0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <xQueueReceive+0x5e>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	61fb      	str	r3, [r7, #28]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089b2:	f001 f999 	bl	8009ce8 <xTaskGetSchedulerState>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <xQueueReceive+0x6e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <xQueueReceive+0x72>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueReceive+0x74>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xQueueReceive+0x8e>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	61bb      	str	r3, [r7, #24]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089e2:	f001 ffd7 	bl	800a994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01f      	beq.n	8008a32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f6:	f000 fa1b 	bl	8008e30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00f      	beq.n	8008a2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 ff98 	bl	8009944 <xTaskRemoveFromEventList>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a1a:	4b3d      	ldr	r3, [pc, #244]	; (8008b10 <xQueueReceive+0x1bc>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a2a:	f001 ffe3 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e069      	b.n	8008b06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d103      	bne.n	8008a40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a38:	f001 ffdc 	bl	800a9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e062      	b.n	8008b06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a46:	f107 0310 	add.w	r3, r7, #16
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ffde 	bl	8009a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a54:	f001 ffce 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a58:	f000 fd4a 	bl	80094f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a5c:	f001 ff9a 	bl	800a994 <vPortEnterCritical>
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d103      	bne.n	8008a76 <xQueueReceive+0x122>
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d103      	bne.n	8008a8c <xQueueReceive+0x138>
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8c:	f001 ffb2 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a90:	1d3a      	adds	r2, r7, #4
 8008a92:	f107 0310 	add.w	r3, r7, #16
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 ffcd 	bl	8009a38 <xTaskCheckForTimeOut>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d123      	bne.n	8008aec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa6:	f000 fa3b 	bl	8008f20 <prvIsQueueEmpty>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d017      	beq.n	8008ae0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fef3 	bl	80098a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac0:	f000 f9dc 	bl	8008e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ac4:	f000 fd22 	bl	800950c <xTaskResumeAll>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d189      	bne.n	80089e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ace:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <xQueueReceive+0x1bc>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e780      	b.n	80089e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae2:	f000 f9cb 	bl	8008e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae6:	f000 fd11 	bl	800950c <xTaskResumeAll>
 8008aea:	e77a      	b.n	80089e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aee:	f000 f9c5 	bl	8008e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af2:	f000 fd0b 	bl	800950c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af8:	f000 fa12 	bl	8008f20 <prvIsQueueEmpty>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f43f af6f 	beq.w	80089e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	; 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b26:	2300      	movs	r3, #0
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	623b      	str	r3, [r7, #32]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	61fb      	str	r3, [r7, #28]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b64:	f001 f8c0 	bl	8009ce8 <xTaskGetSchedulerState>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <xQueueSemaphoreTake+0x60>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <xQueueSemaphoreTake+0x64>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <xQueueSemaphoreTake+0x66>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61bb      	str	r3, [r7, #24]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b94:	f001 fefe 	bl	800a994 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d024      	beq.n	8008bee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	1e5a      	subs	r2, r3, #1
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bb4:	f001 fa0e 	bl	8009fd4 <pvTaskIncrementMutexHeldCount>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00f      	beq.n	8008be6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	3310      	adds	r3, #16
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 feba 	bl	8009944 <xTaskRemoveFromEventList>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d007      	beq.n	8008be6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bd6:	4b54      	ldr	r3, [pc, #336]	; (8008d28 <xQueueSemaphoreTake+0x214>)
 8008bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008be6:	f001 ff05 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e097      	b.n	8008d1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d111      	bne.n	8008c18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	617b      	str	r3, [r7, #20]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c10:	f001 fef0 	bl	800a9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e082      	b.n	8008d1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fef2 	bl	8009a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c2c:	f001 fee2 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c30:	f000 fc5e 	bl	80094f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c34:	f001 feae 	bl	800a994 <vPortEnterCritical>
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c3e:	b25b      	sxtb	r3, r3
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d103      	bne.n	8008c4e <xQueueSemaphoreTake+0x13a>
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c54:	b25b      	sxtb	r3, r3
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d103      	bne.n	8008c64 <xQueueSemaphoreTake+0x150>
 8008c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c64:	f001 fec6 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c68:	463a      	mov	r2, r7
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fee1 	bl	8009a38 <xTaskCheckForTimeOut>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d132      	bne.n	8008ce2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c7e:	f000 f94f 	bl	8008f20 <prvIsQueueEmpty>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d026      	beq.n	8008cd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008c90:	f001 fe80 	bl	800a994 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f843 	bl	8009d24 <xTaskPriorityInherit>
 8008c9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ca0:	f001 fea8 	bl	800a9f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	3324      	adds	r3, #36	; 0x24
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	4611      	mov	r1, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fdf9 	bl	80098a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cb4:	f000 f8e2 	bl	8008e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cb8:	f000 fc28 	bl	800950c <xTaskResumeAll>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f47f af68 	bne.w	8008b94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008cc4:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <xQueueSemaphoreTake+0x214>)
 8008cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	e75e      	b.n	8008b94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cd8:	f000 f8d0 	bl	8008e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cdc:	f000 fc16 	bl	800950c <xTaskResumeAll>
 8008ce0:	e758      	b.n	8008b94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ce4:	f000 f8ca 	bl	8008e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ce8:	f000 fc10 	bl	800950c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cee:	f000 f917 	bl	8008f20 <prvIsQueueEmpty>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f43f af4d 	beq.w	8008b94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d00:	f001 fe48 	bl	800a994 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d06:	f000 f811 	bl	8008d2c <prvGetDisinheritPriorityAfterTimeout>
 8008d0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 f8dc 	bl	8009ed0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d18:	f001 fe6c 	bl	800a9f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3738      	adds	r7, #56	; 0x38
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e001      	b.n	8008d4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d14d      	bne.n	8008e1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f834 	bl	8009df4 <xTaskPriorityDisinherit>
 8008d8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	609a      	str	r2, [r3, #8]
 8008d94:	e043      	b.n	8008e1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d119      	bne.n	8008dd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6858      	ldr	r0, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da4:	461a      	mov	r2, r3
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	f003 fc7b 	bl	800c6a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	441a      	add	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d32b      	bcc.n	8008e1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	605a      	str	r2, [r3, #4]
 8008dce:	e026      	b.n	8008e1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	68d8      	ldr	r0, [r3, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	f003 fc61 	bl	800c6a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de8:	425b      	negs	r3, r3
 8008dea:	441a      	add	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d207      	bcs.n	8008e0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	425b      	negs	r3, r3
 8008e06:	441a      	add	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d105      	bne.n	8008e1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e26:	697b      	ldr	r3, [r7, #20]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d018      	beq.n	8008e74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	441a      	add	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d303      	bcc.n	8008e64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68d9      	ldr	r1, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6838      	ldr	r0, [r7, #0]
 8008e70:	f003 fc17 	bl	800c6a2 <memcpy>
	}
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e84:	f001 fd86 	bl	800a994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e90:	e011      	b.n	8008eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d012      	beq.n	8008ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3324      	adds	r3, #36	; 0x24
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fd50 	bl	8009944 <xTaskRemoveFromEventList>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eaa:	f000 fe27 	bl	8009afc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dce9      	bgt.n	8008e92 <prvUnlockQueue+0x16>
 8008ebe:	e000      	b.n	8008ec2 <prvUnlockQueue+0x46>
					break;
 8008ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	22ff      	movs	r2, #255	; 0xff
 8008ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008eca:	f001 fd93 	bl	800a9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ece:	f001 fd61 	bl	800a994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eda:	e011      	b.n	8008f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d012      	beq.n	8008f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3310      	adds	r3, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fd2b 	bl	8009944 <xTaskRemoveFromEventList>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ef4:	f000 fe02 	bl	8009afc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dce9      	bgt.n	8008edc <prvUnlockQueue+0x60>
 8008f08:	e000      	b.n	8008f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	22ff      	movs	r2, #255	; 0xff
 8008f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f14:	f001 fd6e 	bl	800a9f4 <vPortExitCritical>
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f28:	f001 fd34 	bl	800a994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	e001      	b.n	8008f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f3e:	f001 fd59 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f54:	f001 fd1e 	bl	800a994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d102      	bne.n	8008f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e001      	b.n	8008f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f001 fd41 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8008f72:	68fb      	ldr	r3, [r7, #12]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e014      	b.n	8008fb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f8c:	4a0f      	ldr	r2, [pc, #60]	; (8008fcc <vQueueAddToRegistry+0x50>)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10b      	bne.n	8008fb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f98:	490c      	ldr	r1, [pc, #48]	; (8008fcc <vQueueAddToRegistry+0x50>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fa2:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <vQueueAddToRegistry+0x50>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	4413      	add	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fae:	e006      	b.n	8008fbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b07      	cmp	r3, #7
 8008fba:	d9e7      	bls.n	8008f8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000b54 	.word	0x20000b54

08008fd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fe0:	f001 fcd8 	bl	800a994 <vPortEnterCritical>
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fea:	b25b      	sxtb	r3, r3
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff0:	d103      	bne.n	8008ffa <vQueueWaitForMessageRestricted+0x2a>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009000:	b25b      	sxtb	r3, r3
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d103      	bne.n	8009010 <vQueueWaitForMessageRestricted+0x40>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009010:	f001 fcf0 	bl	800a9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fc61 	bl	80098ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800902a:	6978      	ldr	r0, [r7, #20]
 800902c:	f7ff ff26 	bl	8008e7c <prvUnlockQueue>
	}
 8009030:	bf00      	nop
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af04      	add	r7, sp, #16
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xTaskCreateStatic+0x2a>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	623b      	str	r3, [r7, #32]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xTaskCreateStatic+0x46>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	61fb      	str	r3, [r7, #28]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800907e:	23a8      	movs	r3, #168	; 0xa8
 8009080:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2ba8      	cmp	r3, #168	; 0xa8
 8009086:	d00a      	beq.n	800909e <xTaskCreateStatic+0x66>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	61bb      	str	r3, [r7, #24]
}
 800909a:	bf00      	nop
 800909c:	e7fe      	b.n	800909c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800909e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01e      	beq.n	80090e4 <xTaskCreateStatic+0xac>
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01b      	beq.n	80090e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	2202      	movs	r2, #2
 80090ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090be:	2300      	movs	r3, #0
 80090c0:	9303      	str	r3, [sp, #12]
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	9302      	str	r3, [sp, #8]
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f850 	bl	800917c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090de:	f000 f8f3 	bl	80092c8 <prvAddNewTaskToReadyList>
 80090e2:	e001      	b.n	80090e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090e8:	697b      	ldr	r3, [r7, #20]
	}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3728      	adds	r7, #40	; 0x28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b08c      	sub	sp, #48	; 0x30
 80090f6:	af04      	add	r7, sp, #16
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fd66 	bl	800abd8 <pvPortMalloc>
 800910c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00e      	beq.n	8009132 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009114:	20a8      	movs	r0, #168	; 0xa8
 8009116:	f001 fd5f 	bl	800abd8 <pvPortMalloc>
 800911a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
 8009128:	e005      	b.n	8009136 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f001 fe20 	bl	800ad70 <vPortFree>
 8009130:	e001      	b.n	8009136 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d017      	beq.n	800916c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	2300      	movs	r3, #0
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	9302      	str	r3, [sp, #8]
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f80e 	bl	800917c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009160:	69f8      	ldr	r0, [r7, #28]
 8009162:	f000 f8b1 	bl	80092c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e002      	b.n	8009172 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009172:	69bb      	ldr	r3, [r7, #24]
	}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	461a      	mov	r2, r3
 8009194:	21a5      	movs	r1, #165	; 0xa5
 8009196:	f003 f9ae 	bl	800c4f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091a4:	3b01      	subs	r3, #1
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f023 0307 	bic.w	r3, r3, #7
 80091b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	617b      	str	r3, [r7, #20]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01f      	beq.n	800921a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
 80091de:	e012      	b.n	8009206 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	7819      	ldrb	r1, [r3, #0]
 80091e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	3334      	adds	r3, #52	; 0x34
 80091f0:	460a      	mov	r2, r1
 80091f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d006      	beq.n	800920e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	2b0f      	cmp	r3, #15
 800920a:	d9e9      	bls.n	80091e0 <prvInitialiseNewTask+0x64>
 800920c:	e000      	b.n	8009210 <prvInitialiseNewTask+0x94>
			{
				break;
 800920e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009218:	e003      	b.n	8009222 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	2b37      	cmp	r3, #55	; 0x37
 8009226:	d901      	bls.n	800922c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009228:	2337      	movs	r3, #55	; 0x37
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009230:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009236:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	2200      	movs	r2, #0
 800923c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	3304      	adds	r3, #4
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe ff64 	bl	8008110 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	3318      	adds	r3, #24
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe ff5f 	bl	8008110 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009266:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	2200      	movs	r2, #0
 800926c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2200      	movs	r2, #0
 8009274:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	3354      	adds	r3, #84	; 0x54
 800927c:	224c      	movs	r2, #76	; 0x4c
 800927e:	2100      	movs	r1, #0
 8009280:	4618      	mov	r0, r3
 8009282:	f003 f938 	bl	800c4f6 <memset>
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	4a0c      	ldr	r2, [pc, #48]	; (80092bc <prvInitialiseNewTask+0x140>)
 800928a:	659a      	str	r2, [r3, #88]	; 0x58
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <prvInitialiseNewTask+0x144>)
 8009290:	65da      	str	r2, [r3, #92]	; 0x5c
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <prvInitialiseNewTask+0x148>)
 8009296:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	69b8      	ldr	r0, [r7, #24]
 800929e:	f001 fa4f 	bl	800a740 <pxPortInitialiseStack>
 80092a2:	4602      	mov	r2, r0
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b4:	bf00      	nop
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200069c8 	.word	0x200069c8
 80092c0:	20006a30 	.word	0x20006a30
 80092c4:	20006a98 	.word	0x20006a98

080092c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092d0:	f001 fb60 	bl	800a994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092d4:	4b2d      	ldr	r3, [pc, #180]	; (800938c <prvAddNewTaskToReadyList+0xc4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	4a2c      	ldr	r2, [pc, #176]	; (800938c <prvAddNewTaskToReadyList+0xc4>)
 80092dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092de:	4b2c      	ldr	r3, [pc, #176]	; (8009390 <prvAddNewTaskToReadyList+0xc8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092e6:	4a2a      	ldr	r2, [pc, #168]	; (8009390 <prvAddNewTaskToReadyList+0xc8>)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092ec:	4b27      	ldr	r3, [pc, #156]	; (800938c <prvAddNewTaskToReadyList+0xc4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d110      	bne.n	8009316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092f4:	f000 fc26 	bl	8009b44 <prvInitialiseTaskLists>
 80092f8:	e00d      	b.n	8009316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092fa:	4b26      	ldr	r3, [pc, #152]	; (8009394 <prvAddNewTaskToReadyList+0xcc>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <prvAddNewTaskToReadyList+0xc8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	429a      	cmp	r2, r3
 800930e:	d802      	bhi.n	8009316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009310:	4a1f      	ldr	r2, [pc, #124]	; (8009390 <prvAddNewTaskToReadyList+0xc8>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009316:	4b20      	ldr	r3, [pc, #128]	; (8009398 <prvAddNewTaskToReadyList+0xd0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3301      	adds	r3, #1
 800931c:	4a1e      	ldr	r2, [pc, #120]	; (8009398 <prvAddNewTaskToReadyList+0xd0>)
 800931e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009320:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <prvAddNewTaskToReadyList+0xd0>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <prvAddNewTaskToReadyList+0xd4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d903      	bls.n	800933c <prvAddNewTaskToReadyList+0x74>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	4a18      	ldr	r2, [pc, #96]	; (800939c <prvAddNewTaskToReadyList+0xd4>)
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <prvAddNewTaskToReadyList+0xd8>)
 800934a:	441a      	add	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fee9 	bl	800812a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009358:	f001 fb4c 	bl	800a9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <prvAddNewTaskToReadyList+0xcc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00e      	beq.n	8009382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009364:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <prvAddNewTaskToReadyList+0xc8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	429a      	cmp	r2, r3
 8009370:	d207      	bcs.n	8009382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <prvAddNewTaskToReadyList+0xdc>)
 8009374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20001068 	.word	0x20001068
 8009390:	20000b94 	.word	0x20000b94
 8009394:	20001074 	.word	0x20001074
 8009398:	20001084 	.word	0x20001084
 800939c:	20001070 	.word	0x20001070
 80093a0:	20000b98 	.word	0x20000b98
 80093a4:	e000ed04 	.word	0xe000ed04

080093a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d017      	beq.n	80093ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <vTaskDelay+0x60>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <vTaskDelay+0x30>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60bb      	str	r3, [r7, #8]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093d8:	f000 f88a 	bl	80094f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093dc:	2100      	movs	r1, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fe0c 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093e4:	f000 f892 	bl	800950c <xTaskResumeAll>
 80093e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d107      	bne.n	8009400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <vTaskDelay+0x64>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20001090 	.word	0x20001090
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800941e:	463a      	mov	r2, r7
 8009420:	1d39      	adds	r1, r7, #4
 8009422:	f107 0308 	add.w	r3, r7, #8
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fe1e 	bl	8008068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	9202      	str	r2, [sp, #8]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	2300      	movs	r3, #0
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	460a      	mov	r2, r1
 800943e:	4924      	ldr	r1, [pc, #144]	; (80094d0 <vTaskStartScheduler+0xc0>)
 8009440:	4824      	ldr	r0, [pc, #144]	; (80094d4 <vTaskStartScheduler+0xc4>)
 8009442:	f7ff fdf9 	bl	8009038 <xTaskCreateStatic>
 8009446:	4603      	mov	r3, r0
 8009448:	4a23      	ldr	r2, [pc, #140]	; (80094d8 <vTaskStartScheduler+0xc8>)
 800944a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800944c:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <vTaskStartScheduler+0xc8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009454:	2301      	movs	r3, #1
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e001      	b.n	800945e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d102      	bne.n	800946a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009464:	f000 fe1e 	bl	800a0a4 <xTimerCreateTimerTask>
 8009468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d11b      	bne.n	80094a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	613b      	str	r3, [r7, #16]
}
 8009482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009484:	4b15      	ldr	r3, [pc, #84]	; (80094dc <vTaskStartScheduler+0xcc>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3354      	adds	r3, #84	; 0x54
 800948a:	4a15      	ldr	r2, [pc, #84]	; (80094e0 <vTaskStartScheduler+0xd0>)
 800948c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800948e:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <vTaskStartScheduler+0xd4>)
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009496:	4b14      	ldr	r3, [pc, #80]	; (80094e8 <vTaskStartScheduler+0xd8>)
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800949c:	4b13      	ldr	r3, [pc, #76]	; (80094ec <vTaskStartScheduler+0xdc>)
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094a2:	f001 f9d5 	bl	800a850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094a6:	e00e      	b.n	80094c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d10a      	bne.n	80094c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	60fb      	str	r3, [r7, #12]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <vTaskStartScheduler+0xb4>
}
 80094c6:	bf00      	nop
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	0800e83c 	.word	0x0800e83c
 80094d4:	08009b15 	.word	0x08009b15
 80094d8:	2000108c 	.word	0x2000108c
 80094dc:	20000b94 	.word	0x20000b94
 80094e0:	20000158 	.word	0x20000158
 80094e4:	20001088 	.word	0x20001088
 80094e8:	20001074 	.word	0x20001074
 80094ec:	2000106c 	.word	0x2000106c

080094f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <vTaskSuspendAll+0x18>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	4a03      	ldr	r2, [pc, #12]	; (8009508 <vTaskSuspendAll+0x18>)
 80094fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094fe:	bf00      	nop
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20001090 	.word	0x20001090

0800950c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800951a:	4b42      	ldr	r3, [pc, #264]	; (8009624 <xTaskResumeAll+0x118>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <xTaskResumeAll+0x2c>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	603b      	str	r3, [r7, #0]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009538:	f001 fa2c 	bl	800a994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800953c:	4b39      	ldr	r3, [pc, #228]	; (8009624 <xTaskResumeAll+0x118>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3b01      	subs	r3, #1
 8009542:	4a38      	ldr	r2, [pc, #224]	; (8009624 <xTaskResumeAll+0x118>)
 8009544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009546:	4b37      	ldr	r3, [pc, #220]	; (8009624 <xTaskResumeAll+0x118>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d162      	bne.n	8009614 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800954e:	4b36      	ldr	r3, [pc, #216]	; (8009628 <xTaskResumeAll+0x11c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d05e      	beq.n	8009614 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009556:	e02f      	b.n	80095b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009558:	4b34      	ldr	r3, [pc, #208]	; (800962c <xTaskResumeAll+0x120>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3318      	adds	r3, #24
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fe3d 	bl	80081e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3304      	adds	r3, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fe38 	bl	80081e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009578:	4b2d      	ldr	r3, [pc, #180]	; (8009630 <xTaskResumeAll+0x124>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d903      	bls.n	8009588 <xTaskResumeAll+0x7c>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <xTaskResumeAll+0x124>)
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a27      	ldr	r2, [pc, #156]	; (8009634 <xTaskResumeAll+0x128>)
 8009596:	441a      	add	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7fe fdc3 	bl	800812a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a8:	4b23      	ldr	r3, [pc, #140]	; (8009638 <xTaskResumeAll+0x12c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d302      	bcc.n	80095b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80095b2:	4b22      	ldr	r3, [pc, #136]	; (800963c <xTaskResumeAll+0x130>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095b8:	4b1c      	ldr	r3, [pc, #112]	; (800962c <xTaskResumeAll+0x120>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1cb      	bne.n	8009558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095c6:	f000 fb5f 	bl	8009c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095ca:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <xTaskResumeAll+0x134>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d010      	beq.n	80095f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095d6:	f000 f847 	bl	8009668 <xTaskIncrementTick>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095e0:	4b16      	ldr	r3, [pc, #88]	; (800963c <xTaskResumeAll+0x130>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f1      	bne.n	80095d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095f2:	4b13      	ldr	r3, [pc, #76]	; (8009640 <xTaskResumeAll+0x134>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095f8:	4b10      	ldr	r3, [pc, #64]	; (800963c <xTaskResumeAll+0x130>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d009      	beq.n	8009614 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <xTaskResumeAll+0x138>)
 8009606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009614:	f001 f9ee 	bl	800a9f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009618:	68bb      	ldr	r3, [r7, #8]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20001090 	.word	0x20001090
 8009628:	20001068 	.word	0x20001068
 800962c:	20001028 	.word	0x20001028
 8009630:	20001070 	.word	0x20001070
 8009634:	20000b98 	.word	0x20000b98
 8009638:	20000b94 	.word	0x20000b94
 800963c:	2000107c 	.word	0x2000107c
 8009640:	20001078 	.word	0x20001078
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <xTaskGetTickCount+0x1c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009654:	687b      	ldr	r3, [r7, #4]
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	2000106c 	.word	0x2000106c

08009668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009672:	4b4f      	ldr	r3, [pc, #316]	; (80097b0 <xTaskIncrementTick+0x148>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f040 808f 	bne.w	800979a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800967c:	4b4d      	ldr	r3, [pc, #308]	; (80097b4 <xTaskIncrementTick+0x14c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009684:	4a4b      	ldr	r2, [pc, #300]	; (80097b4 <xTaskIncrementTick+0x14c>)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d120      	bne.n	80096d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009690:	4b49      	ldr	r3, [pc, #292]	; (80097b8 <xTaskIncrementTick+0x150>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	603b      	str	r3, [r7, #0]
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <xTaskIncrementTick+0x46>
 80096b0:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <xTaskIncrementTick+0x150>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	4b41      	ldr	r3, [pc, #260]	; (80097bc <xTaskIncrementTick+0x154>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a3f      	ldr	r2, [pc, #252]	; (80097b8 <xTaskIncrementTick+0x150>)
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	4a3f      	ldr	r2, [pc, #252]	; (80097bc <xTaskIncrementTick+0x154>)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	4b3e      	ldr	r3, [pc, #248]	; (80097c0 <xTaskIncrementTick+0x158>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3301      	adds	r3, #1
 80096ca:	4a3d      	ldr	r2, [pc, #244]	; (80097c0 <xTaskIncrementTick+0x158>)
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	f000 fadb 	bl	8009c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096d2:	4b3c      	ldr	r3, [pc, #240]	; (80097c4 <xTaskIncrementTick+0x15c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d349      	bcc.n	8009770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096dc:	4b36      	ldr	r3, [pc, #216]	; (80097b8 <xTaskIncrementTick+0x150>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e6:	4b37      	ldr	r3, [pc, #220]	; (80097c4 <xTaskIncrementTick+0x15c>)
 80096e8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ec:	601a      	str	r2, [r3, #0]
					break;
 80096ee:	e03f      	b.n	8009770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f0:	4b31      	ldr	r3, [pc, #196]	; (80097b8 <xTaskIncrementTick+0x150>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d203      	bcs.n	8009710 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009708:	4a2e      	ldr	r2, [pc, #184]	; (80097c4 <xTaskIncrementTick+0x15c>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800970e:	e02f      	b.n	8009770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fd65 	bl	80081e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3318      	adds	r3, #24
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fd5c 	bl	80081e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4b25      	ldr	r3, [pc, #148]	; (80097c8 <xTaskIncrementTick+0x160>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d903      	bls.n	8009740 <xTaskIncrementTick+0xd8>
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a22      	ldr	r2, [pc, #136]	; (80097c8 <xTaskIncrementTick+0x160>)
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a1f      	ldr	r2, [pc, #124]	; (80097cc <xTaskIncrementTick+0x164>)
 800974e:	441a      	add	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe fce7 	bl	800812a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b1b      	ldr	r3, [pc, #108]	; (80097d0 <xTaskIncrementTick+0x168>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d3b8      	bcc.n	80096dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800976a:	2301      	movs	r3, #1
 800976c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800976e:	e7b5      	b.n	80096dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009770:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <xTaskIncrementTick+0x168>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009776:	4915      	ldr	r1, [pc, #84]	; (80097cc <xTaskIncrementTick+0x164>)
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d901      	bls.n	800978c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800978c:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <xTaskIncrementTick+0x16c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e004      	b.n	80097a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800979a:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <xTaskIncrementTick+0x170>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	4a0d      	ldr	r2, [pc, #52]	; (80097d8 <xTaskIncrementTick+0x170>)
 80097a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097a4:	697b      	ldr	r3, [r7, #20]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20001090 	.word	0x20001090
 80097b4:	2000106c 	.word	0x2000106c
 80097b8:	20001020 	.word	0x20001020
 80097bc:	20001024 	.word	0x20001024
 80097c0:	20001080 	.word	0x20001080
 80097c4:	20001088 	.word	0x20001088
 80097c8:	20001070 	.word	0x20001070
 80097cc:	20000b98 	.word	0x20000b98
 80097d0:	20000b94 	.word	0x20000b94
 80097d4:	2000107c 	.word	0x2000107c
 80097d8:	20001078 	.word	0x20001078

080097dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097e2:	4b2a      	ldr	r3, [pc, #168]	; (800988c <vTaskSwitchContext+0xb0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ea:	4b29      	ldr	r3, [pc, #164]	; (8009890 <vTaskSwitchContext+0xb4>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097f0:	e046      	b.n	8009880 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80097f2:	4b27      	ldr	r3, [pc, #156]	; (8009890 <vTaskSwitchContext+0xb4>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f8:	4b26      	ldr	r3, [pc, #152]	; (8009894 <vTaskSwitchContext+0xb8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e010      	b.n	8009822 <vTaskSwitchContext+0x46>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <vTaskSwitchContext+0x40>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	607b      	str	r3, [r7, #4]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <vTaskSwitchContext+0x3e>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3b01      	subs	r3, #1
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	491d      	ldr	r1, [pc, #116]	; (8009898 <vTaskSwitchContext+0xbc>)
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0e4      	beq.n	8009800 <vTaskSwitchContext+0x24>
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a15      	ldr	r2, [pc, #84]	; (8009898 <vTaskSwitchContext+0xbc>)
 8009842:	4413      	add	r3, r2
 8009844:	60bb      	str	r3, [r7, #8]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	605a      	str	r2, [r3, #4]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	3308      	adds	r3, #8
 8009858:	429a      	cmp	r2, r3
 800985a:	d104      	bne.n	8009866 <vTaskSwitchContext+0x8a>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	605a      	str	r2, [r3, #4]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	4a0b      	ldr	r2, [pc, #44]	; (800989c <vTaskSwitchContext+0xc0>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	4a08      	ldr	r2, [pc, #32]	; (8009894 <vTaskSwitchContext+0xb8>)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009876:	4b09      	ldr	r3, [pc, #36]	; (800989c <vTaskSwitchContext+0xc0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3354      	adds	r3, #84	; 0x54
 800987c:	4a08      	ldr	r2, [pc, #32]	; (80098a0 <vTaskSwitchContext+0xc4>)
 800987e:	6013      	str	r3, [r2, #0]
}
 8009880:	bf00      	nop
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20001090 	.word	0x20001090
 8009890:	2000107c 	.word	0x2000107c
 8009894:	20001070 	.word	0x20001070
 8009898:	20000b98 	.word	0x20000b98
 800989c:	20000b94 	.word	0x20000b94
 80098a0:	20000158 	.word	0x20000158

080098a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60fb      	str	r3, [r7, #12]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098ca:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <vTaskPlaceOnEventList+0x44>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3318      	adds	r3, #24
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fe fc4d 	bl	8008172 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098d8:	2101      	movs	r1, #1
 80098da:	6838      	ldr	r0, [r7, #0]
 80098dc:	f000 fb8e 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
}
 80098e0:	bf00      	nop
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000b94 	.word	0x20000b94

080098ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10a      	bne.n	8009914 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	617b      	str	r3, [r7, #20]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009914:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <vTaskPlaceOnEventListRestricted+0x54>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3318      	adds	r3, #24
 800991a:	4619      	mov	r1, r3
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7fe fc04 	bl	800812a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	68b8      	ldr	r0, [r7, #8]
 8009932:	f000 fb63 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
	}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000b94 	.word	0x20000b94

08009944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	60fb      	str	r3, [r7, #12]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fc35 	bl	80081e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <xTaskRemoveFromEventList+0xb0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d11d      	bne.n	80099be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3304      	adds	r3, #4
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe fc2c 	bl	80081e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <xTaskRemoveFromEventList+0xb4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d903      	bls.n	80099a0 <xTaskRemoveFromEventList+0x5c>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4a16      	ldr	r2, [pc, #88]	; (80099f8 <xTaskRemoveFromEventList+0xb4>)
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4a13      	ldr	r2, [pc, #76]	; (80099fc <xTaskRemoveFromEventList+0xb8>)
 80099ae:	441a      	add	r2, r3
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fe fbb7 	bl	800812a <vListInsertEnd>
 80099bc:	e005      	b.n	80099ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	3318      	adds	r3, #24
 80099c2:	4619      	mov	r1, r3
 80099c4:	480e      	ldr	r0, [pc, #56]	; (8009a00 <xTaskRemoveFromEventList+0xbc>)
 80099c6:	f7fe fbb0 	bl	800812a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <xTaskRemoveFromEventList+0xc0>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d905      	bls.n	80099e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <xTaskRemoveFromEventList+0xc4>)
 80099de:	2201      	movs	r2, #1
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e001      	b.n	80099e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099e8:	697b      	ldr	r3, [r7, #20]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20001090 	.word	0x20001090
 80099f8:	20001070 	.word	0x20001070
 80099fc:	20000b98 	.word	0x20000b98
 8009a00:	20001028 	.word	0x20001028
 8009a04:	20000b94 	.word	0x20000b94
 8009a08:	2000107c 	.word	0x2000107c

08009a0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <vTaskInternalSetTimeOutState+0x24>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a1c:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <vTaskInternalSetTimeOutState+0x28>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	605a      	str	r2, [r3, #4]
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20001080 	.word	0x20001080
 8009a34:	2000106c 	.word	0x2000106c

08009a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	613b      	str	r3, [r7, #16]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	60fb      	str	r3, [r7, #12]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a7a:	f000 ff8b 	bl	800a994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a7e:	4b1d      	ldr	r3, [pc, #116]	; (8009af4 <xTaskCheckForTimeOut+0xbc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	69ba      	ldr	r2, [r7, #24]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a96:	d102      	bne.n	8009a9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61fb      	str	r3, [r7, #28]
 8009a9c:	e023      	b.n	8009ae6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <xTaskCheckForTimeOut+0xc0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d007      	beq.n	8009aba <xTaskCheckForTimeOut+0x82>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d302      	bcc.n	8009aba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e015      	b.n	8009ae6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d20b      	bcs.n	8009adc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff ff9b 	bl	8009a0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	e004      	b.n	8009ae6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ae6:	f000 ff85 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8009aea:	69fb      	ldr	r3, [r7, #28]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3720      	adds	r7, #32
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	2000106c 	.word	0x2000106c
 8009af8:	20001080 	.word	0x20001080

08009afc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b00:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <vTaskMissedYield+0x14>)
 8009b02:	2201      	movs	r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
}
 8009b06:	bf00      	nop
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	2000107c 	.word	0x2000107c

08009b14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b1c:	f000 f852 	bl	8009bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <prvIdleTask+0x28>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d9f9      	bls.n	8009b1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <prvIdleTask+0x2c>)
 8009b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b38:	e7f0      	b.n	8009b1c <prvIdleTask+0x8>
 8009b3a:	bf00      	nop
 8009b3c:	20000b98 	.word	0x20000b98
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
 8009b4e:	e00c      	b.n	8009b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4a12      	ldr	r2, [pc, #72]	; (8009ba4 <prvInitialiseTaskLists+0x60>)
 8009b5c:	4413      	add	r3, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fab6 	bl	80080d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3301      	adds	r3, #1
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b37      	cmp	r3, #55	; 0x37
 8009b6e:	d9ef      	bls.n	8009b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b70:	480d      	ldr	r0, [pc, #52]	; (8009ba8 <prvInitialiseTaskLists+0x64>)
 8009b72:	f7fe faad 	bl	80080d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b76:	480d      	ldr	r0, [pc, #52]	; (8009bac <prvInitialiseTaskLists+0x68>)
 8009b78:	f7fe faaa 	bl	80080d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b7c:	480c      	ldr	r0, [pc, #48]	; (8009bb0 <prvInitialiseTaskLists+0x6c>)
 8009b7e:	f7fe faa7 	bl	80080d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b82:	480c      	ldr	r0, [pc, #48]	; (8009bb4 <prvInitialiseTaskLists+0x70>)
 8009b84:	f7fe faa4 	bl	80080d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b88:	480b      	ldr	r0, [pc, #44]	; (8009bb8 <prvInitialiseTaskLists+0x74>)
 8009b8a:	f7fe faa1 	bl	80080d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b8e:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <prvInitialiseTaskLists+0x78>)
 8009b90:	4a05      	ldr	r2, [pc, #20]	; (8009ba8 <prvInitialiseTaskLists+0x64>)
 8009b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <prvInitialiseTaskLists+0x7c>)
 8009b96:	4a05      	ldr	r2, [pc, #20]	; (8009bac <prvInitialiseTaskLists+0x68>)
 8009b98:	601a      	str	r2, [r3, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000b98 	.word	0x20000b98
 8009ba8:	20000ff8 	.word	0x20000ff8
 8009bac:	2000100c 	.word	0x2000100c
 8009bb0:	20001028 	.word	0x20001028
 8009bb4:	2000103c 	.word	0x2000103c
 8009bb8:	20001054 	.word	0x20001054
 8009bbc:	20001020 	.word	0x20001020
 8009bc0:	20001024 	.word	0x20001024

08009bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bca:	e019      	b.n	8009c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bcc:	f000 fee2 	bl	800a994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd0:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <prvCheckTasksWaitingTermination+0x50>)
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fe fb01 	bl	80081e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009be2:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <prvCheckTasksWaitingTermination+0x54>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	4a0b      	ldr	r2, [pc, #44]	; (8009c18 <prvCheckTasksWaitingTermination+0x54>)
 8009bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <prvCheckTasksWaitingTermination+0x58>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <prvCheckTasksWaitingTermination+0x58>)
 8009bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bf6:	f000 fefd 	bl	800a9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f810 	bl	8009c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c00:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <prvCheckTasksWaitingTermination+0x58>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e1      	bne.n	8009bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	2000103c 	.word	0x2000103c
 8009c18:	20001068 	.word	0x20001068
 8009c1c:	20001050 	.word	0x20001050

08009c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3354      	adds	r3, #84	; 0x54
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fc7f 	bl	800c530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d108      	bne.n	8009c4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 f895 	bl	800ad70 <vPortFree>
				vPortFree( pxTCB );
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f892 	bl	800ad70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c4c:	e018      	b.n	8009c80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d103      	bne.n	8009c60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 f889 	bl	800ad70 <vPortFree>
	}
 8009c5e:	e00f      	b.n	8009c80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d00a      	beq.n	8009c80 <prvDeleteTCB+0x60>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	60fb      	str	r3, [r7, #12]
}
 8009c7c:	bf00      	nop
 8009c7e:	e7fe      	b.n	8009c7e <prvDeleteTCB+0x5e>
	}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <prvResetNextTaskUnblockTime+0x38>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d104      	bne.n	8009ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ca0:	e008      	b.n	8009cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <prvResetNextTaskUnblockTime+0x38>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	4a04      	ldr	r2, [pc, #16]	; (8009cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8009cb2:	6013      	str	r3, [r2, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	20001020 	.word	0x20001020
 8009cc4:	20001088 	.word	0x20001088

08009cc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009cd4:	687b      	ldr	r3, [r7, #4]
	}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000b94 	.word	0x20000b94

08009ce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009cee:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <xTaskGetSchedulerState+0x34>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d102      	bne.n	8009cfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	607b      	str	r3, [r7, #4]
 8009cfa:	e008      	b.n	8009d0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfc:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <xTaskGetSchedulerState+0x38>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d04:	2302      	movs	r3, #2
 8009d06:	607b      	str	r3, [r7, #4]
 8009d08:	e001      	b.n	8009d0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d0e:	687b      	ldr	r3, [r7, #4]
	}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20001074 	.word	0x20001074
 8009d20:	20001090 	.word	0x20001090

08009d24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d051      	beq.n	8009dde <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3e:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <xTaskPriorityInherit+0xc4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d241      	bcs.n	8009dcc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	db06      	blt.n	8009d5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <xTaskPriorityInherit+0xc4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	6959      	ldr	r1, [r3, #20]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4a1f      	ldr	r2, [pc, #124]	; (8009dec <xTaskPriorityInherit+0xc8>)
 8009d70:	4413      	add	r3, r2
 8009d72:	4299      	cmp	r1, r3
 8009d74:	d122      	bne.n	8009dbc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fa32 	bl	80081e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <xTaskPriorityInherit+0xc4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8e:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <xTaskPriorityInherit+0xcc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d903      	bls.n	8009d9e <xTaskPriorityInherit+0x7a>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	4a15      	ldr	r2, [pc, #84]	; (8009df0 <xTaskPriorityInherit+0xcc>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4a10      	ldr	r2, [pc, #64]	; (8009dec <xTaskPriorityInherit+0xc8>)
 8009dac:	441a      	add	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fe f9b8 	bl	800812a <vListInsertEnd>
 8009dba:	e004      	b.n	8009dc6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <xTaskPriorityInherit+0xc4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	e008      	b.n	8009dde <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <xTaskPriorityInherit+0xc4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d201      	bcs.n	8009dde <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dde:	68fb      	ldr	r3, [r7, #12]
	}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000b94 	.word	0x20000b94
 8009dec:	20000b98 	.word	0x20000b98
 8009df0:	20001070 	.word	0x20001070

08009df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d056      	beq.n	8009eb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ec4 <xTaskPriorityDisinherit+0xd0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d00a      	beq.n	8009e2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60fb      	str	r3, [r7, #12]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4c:	1e5a      	subs	r2, r3, #1
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d02c      	beq.n	8009eb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d128      	bne.n	8009eb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe f9ba 	bl	80081e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <xTaskPriorityDisinherit+0xd4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d903      	bls.n	8009e98 <xTaskPriorityDisinherit+0xa4>
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a0c      	ldr	r2, [pc, #48]	; (8009ec8 <xTaskPriorityDisinherit+0xd4>)
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <xTaskPriorityDisinherit+0xd8>)
 8009ea6:	441a      	add	r2, r3
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7fe f93b 	bl	800812a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eb8:	697b      	ldr	r3, [r7, #20]
	}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000b94 	.word	0x20000b94
 8009ec8:	20001070 	.word	0x20001070
 8009ecc:	20000b98 	.word	0x20000b98

08009ed0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d06a      	beq.n	8009fbe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	60fb      	str	r3, [r7, #12]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d902      	bls.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	e002      	b.n	8009f1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d04b      	beq.n	8009fbe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d146      	bne.n	8009fbe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d10a      	bne.n	8009f50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	60bb      	str	r3, [r7, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db04      	blt.n	8009f6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	6959      	ldr	r1, [r3, #20]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f7e:	4413      	add	r3, r2
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d11c      	bne.n	8009fbe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f92b 	bl	80081e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4a07      	ldr	r2, [pc, #28]	; (8009fcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009fb0:	441a      	add	r2, r3
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe f8b6 	bl	800812a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fbe:	bf00      	nop
 8009fc0:	3720      	adds	r7, #32
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000b94 	.word	0x20000b94
 8009fcc:	20000b98 	.word	0x20000b98
 8009fd0:	20001070 	.word	0x20001070

08009fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fd8:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fe6:	3201      	adds	r2, #1
 8009fe8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009fea:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fec:	681b      	ldr	r3, [r3, #0]
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20000b94 	.word	0x20000b94

08009ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a006:	4b21      	ldr	r3, [pc, #132]	; (800a08c <prvAddCurrentTaskToDelayedList+0x90>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00c:	4b20      	ldr	r3, [pc, #128]	; (800a090 <prvAddCurrentTaskToDelayedList+0x94>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3304      	adds	r3, #4
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe f8e6 	bl	80081e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d10a      	bne.n	800a036 <prvAddCurrentTaskToDelayedList+0x3a>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a026:	4b1a      	ldr	r3, [pc, #104]	; (800a090 <prvAddCurrentTaskToDelayedList+0x94>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4819      	ldr	r0, [pc, #100]	; (800a094 <prvAddCurrentTaskToDelayedList+0x98>)
 800a030:	f7fe f87b 	bl	800812a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a034:	e026      	b.n	800a084 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a03e:	4b14      	ldr	r3, [pc, #80]	; (800a090 <prvAddCurrentTaskToDelayedList+0x94>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d209      	bcs.n	800a062 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a04e:	4b12      	ldr	r3, [pc, #72]	; (800a098 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <prvAddCurrentTaskToDelayedList+0x94>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3304      	adds	r3, #4
 800a058:	4619      	mov	r1, r3
 800a05a:	4610      	mov	r0, r2
 800a05c:	f7fe f889 	bl	8008172 <vListInsert>
}
 800a060:	e010      	b.n	800a084 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a062:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <prvAddCurrentTaskToDelayedList+0x94>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7fe f87f 	bl	8008172 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d202      	bcs.n	800a084 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a07e:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	6013      	str	r3, [r2, #0]
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	2000106c 	.word	0x2000106c
 800a090:	20000b94 	.word	0x20000b94
 800a094:	20001054 	.word	0x20001054
 800a098:	20001024 	.word	0x20001024
 800a09c:	20001020 	.word	0x20001020
 800a0a0:	20001088 	.word	0x20001088

0800a0a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0ae:	f000 fb07 	bl	800a6c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0b2:	4b1c      	ldr	r3, [pc, #112]	; (800a124 <xTimerCreateTimerTask+0x80>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d021      	beq.n	800a0fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0c2:	1d3a      	adds	r2, r7, #4
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	f107 030c 	add.w	r3, r7, #12
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd ffe5 	bl	800809c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	9202      	str	r2, [sp, #8]
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	2302      	movs	r3, #2
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	4910      	ldr	r1, [pc, #64]	; (800a128 <xTimerCreateTimerTask+0x84>)
 800a0e6:	4811      	ldr	r0, [pc, #68]	; (800a12c <xTimerCreateTimerTask+0x88>)
 800a0e8:	f7fe ffa6 	bl	8009038 <xTaskCreateStatic>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4a10      	ldr	r2, [pc, #64]	; (800a130 <xTimerCreateTimerTask+0x8c>)
 800a0f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <xTimerCreateTimerTask+0x8c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a11a:	697b      	ldr	r3, [r7, #20]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200010c4 	.word	0x200010c4
 800a128:	0800e844 	.word	0x0800e844
 800a12c:	0800a269 	.word	0x0800a269
 800a130:	200010c8 	.word	0x200010c8

0800a134 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	; 0x28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a142:	2300      	movs	r3, #0
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	623b      	str	r3, [r7, #32]
}
 800a15e:	bf00      	nop
 800a160:	e7fe      	b.n	800a160 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a162:	4b1a      	ldr	r3, [pc, #104]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d02a      	beq.n	800a1c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b05      	cmp	r3, #5
 800a17a:	dc18      	bgt.n	800a1ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a17c:	f7ff fdb4 	bl	8009ce8 <xTaskGetSchedulerState>
 800a180:	4603      	mov	r3, r0
 800a182:	2b02      	cmp	r3, #2
 800a184:	d109      	bne.n	800a19a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f107 0110 	add.w	r1, r7, #16
 800a18e:	2300      	movs	r3, #0
 800a190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a192:	f7fe fa45 	bl	8008620 <xQueueGenericSend>
 800a196:	6278      	str	r0, [r7, #36]	; 0x24
 800a198:	e012      	b.n	800a1c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a19a:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	f107 0110 	add.w	r1, r7, #16
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f7fe fa3b 	bl	8008620 <xQueueGenericSend>
 800a1aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a1ac:	e008      	b.n	800a1c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1ae:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	f107 0110 	add.w	r1, r7, #16
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	f7fe fb2f 	bl	800881c <xQueueGenericSendFromISR>
 800a1be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3728      	adds	r7, #40	; 0x28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200010c4 	.word	0x200010c4

0800a1d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1da:	4b22      	ldr	r3, [pc, #136]	; (800a264 <prvProcessExpiredTimer+0x94>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fd fffb 	bl	80081e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d022      	beq.n	800a242 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	18d1      	adds	r1, r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	6978      	ldr	r0, [r7, #20]
 800a20a:	f000 f8d1 	bl	800a3b0 <prvInsertTimerInActiveList>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01f      	beq.n	800a254 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	2100      	movs	r1, #0
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f7ff ff88 	bl	800a134 <xTimerGenericCommand>
 800a224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d113      	bne.n	800a254 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	60fb      	str	r3, [r7, #12]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	6978      	ldr	r0, [r7, #20]
 800a25a:	4798      	blx	r3
}
 800a25c:	bf00      	nop
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	200010bc 	.word	0x200010bc

0800a268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	4618      	mov	r0, r3
 800a276:	f000 f857 	bl	800a328 <prvGetNextExpireTime>
 800a27a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4619      	mov	r1, r3
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f803 	bl	800a28c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a286:	f000 f8d5 	bl	800a434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a28a:	e7f1      	b.n	800a270 <prvTimerTask+0x8>

0800a28c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a296:	f7ff f92b 	bl	80094f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f866 	bl	800a370 <prvSampleTimeNow>
 800a2a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d130      	bne.n	800a30e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <prvProcessTimerOrBlockTask+0x3c>
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d806      	bhi.n	800a2c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2ba:	f7ff f927 	bl	800950c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff ff85 	bl	800a1d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2c6:	e024      	b.n	800a312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d008      	beq.n	800a2e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2ce:	4b13      	ldr	r3, [pc, #76]	; (800a31c <prvProcessTimerOrBlockTask+0x90>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <prvProcessTimerOrBlockTask+0x50>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <prvProcessTimerOrBlockTask+0x52>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2e0:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <prvProcessTimerOrBlockTask+0x94>)
 800a2e2:	6818      	ldr	r0, [r3, #0]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	f7fe fe6f 	bl	8008fd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2f2:	f7ff f90b 	bl	800950c <xTaskResumeAll>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10a      	bne.n	800a312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <prvProcessTimerOrBlockTask+0x98>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	f3bf 8f6f 	isb	sy
}
 800a30c:	e001      	b.n	800a312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a30e:	f7ff f8fd 	bl	800950c <xTaskResumeAll>
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200010c0 	.word	0x200010c0
 800a320:	200010c4 	.word	0x200010c4
 800a324:	e000ed04 	.word	0xe000ed04

0800a328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a330:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <prvGetNextExpireTime+0x44>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <prvGetNextExpireTime+0x16>
 800a33a:	2201      	movs	r2, #1
 800a33c:	e000      	b.n	800a340 <prvGetNextExpireTime+0x18>
 800a33e:	2200      	movs	r2, #0
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d105      	bne.n	800a358 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a34c:	4b07      	ldr	r3, [pc, #28]	; (800a36c <prvGetNextExpireTime+0x44>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	e001      	b.n	800a35c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a35c:	68fb      	ldr	r3, [r7, #12]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	200010bc 	.word	0x200010bc

0800a370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a378:	f7ff f966 	bl	8009648 <xTaskGetTickCount>
 800a37c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <prvSampleTimeNow+0x3c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d205      	bcs.n	800a394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a388:	f000 f936 	bl	800a5f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	e002      	b.n	800a39a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a39a:	4a04      	ldr	r2, [pc, #16]	; (800a3ac <prvSampleTimeNow+0x3c>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200010cc 	.word	0x200010cc

0800a3b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d812      	bhi.n	800a3fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d302      	bcc.n	800a3ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e01b      	b.n	800a422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ea:	4b10      	ldr	r3, [pc, #64]	; (800a42c <prvInsertTimerInActiveList+0x7c>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7fd febc 	bl	8008172 <vListInsert>
 800a3fa:	e012      	b.n	800a422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d206      	bcs.n	800a412 <prvInsertTimerInActiveList+0x62>
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d302      	bcc.n	800a412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	e007      	b.n	800a422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a412:	4b07      	ldr	r3, [pc, #28]	; (800a430 <prvInsertTimerInActiveList+0x80>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3304      	adds	r3, #4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7fd fea8 	bl	8008172 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a422:	697b      	ldr	r3, [r7, #20]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	200010c0 	.word	0x200010c0
 800a430:	200010bc 	.word	0x200010bc

0800a434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08e      	sub	sp, #56	; 0x38
 800a438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a43a:	e0ca      	b.n	800a5d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	da18      	bge.n	800a474 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a442:	1d3b      	adds	r3, r7, #4
 800a444:	3304      	adds	r3, #4
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	61fb      	str	r3, [r7, #28]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46a:	6850      	ldr	r0, [r2, #4]
 800a46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46e:	6892      	ldr	r2, [r2, #8]
 800a470:	4611      	mov	r1, r2
 800a472:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f2c0 80ab 	blt.w	800a5d2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	3304      	adds	r3, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fd fea9 	bl	80081e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a492:	463b      	mov	r3, r7
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff ff6b 	bl	800a370 <prvSampleTimeNow>
 800a49a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b09      	cmp	r3, #9
 800a4a0:	f200 8096 	bhi.w	800a5d0 <prvProcessReceivedCommands+0x19c>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <prvProcessReceivedCommands+0x78>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a4d5 	.word	0x0800a4d5
 800a4b0:	0800a4d5 	.word	0x0800a4d5
 800a4b4:	0800a4d5 	.word	0x0800a4d5
 800a4b8:	0800a549 	.word	0x0800a549
 800a4bc:	0800a55d 	.word	0x0800a55d
 800a4c0:	0800a5a7 	.word	0x0800a5a7
 800a4c4:	0800a4d5 	.word	0x0800a4d5
 800a4c8:	0800a4d5 	.word	0x0800a4d5
 800a4cc:	0800a549 	.word	0x0800a549
 800a4d0:	0800a55d 	.word	0x0800a55d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4da:	f043 0301 	orr.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	18d1      	adds	r1, r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f4:	f7ff ff5c 	bl	800a3b0 <prvInsertTimerInActiveList>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d069      	beq.n	800a5d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d05e      	beq.n	800a5d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	441a      	add	r2, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	2300      	movs	r3, #0
 800a522:	2100      	movs	r1, #0
 800a524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a526:	f7ff fe05 	bl	800a134 <xTimerGenericCommand>
 800a52a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d14f      	bne.n	800a5d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	61bb      	str	r3, [r7, #24]
}
 800a544:	bf00      	nop
 800a546:	e7fe      	b.n	800a546 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a55a:	e03a      	b.n	800a5d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a572:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	617b      	str	r3, [r7, #20]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	699a      	ldr	r2, [r3, #24]
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	18d1      	adds	r1, r2, r3
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a0:	f7ff ff06 	bl	800a3b0 <prvInsertTimerInActiveList>
					break;
 800a5a4:	e015      	b.n	800a5d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d103      	bne.n	800a5bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b6:	f000 fbdb 	bl	800ad70 <vPortFree>
 800a5ba:	e00a      	b.n	800a5d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5ce:	e000      	b.n	800a5d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a5d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5d2:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <prvProcessReceivedCommands+0x1c0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	1d39      	adds	r1, r7, #4
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe f9ba 	bl	8008954 <xQueueReceive>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f47f af2a 	bne.w	800a43c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	3730      	adds	r7, #48	; 0x30
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200010c4 	.word	0x200010c4

0800a5f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5fe:	e048      	b.n	800a692 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a600:	4b2d      	ldr	r3, [pc, #180]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a60a:	4b2b      	ldr	r3, [pc, #172]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3304      	adds	r3, #4
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fd fde3 	bl	80081e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d02e      	beq.n	800a692 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	4413      	add	r3, r2
 800a63c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	429a      	cmp	r2, r3
 800a644:	d90e      	bls.n	800a664 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a652:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3304      	adds	r3, #4
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7fd fd88 	bl	8008172 <vListInsert>
 800a662:	e016      	b.n	800a692 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a664:	2300      	movs	r3, #0
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	2100      	movs	r1, #0
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff fd60 	bl	800a134 <xTimerGenericCommand>
 800a674:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	603b      	str	r3, [r7, #0]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a692:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1b1      	bne.n	800a600 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a69c:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6a2:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <prvSwitchTimerLists+0xc4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a04      	ldr	r2, [pc, #16]	; (800a6b8 <prvSwitchTimerLists+0xc0>)
 800a6a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6aa:	4a04      	ldr	r2, [pc, #16]	; (800a6bc <prvSwitchTimerLists+0xc4>)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	6013      	str	r3, [r2, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	200010bc 	.word	0x200010bc
 800a6bc:	200010c0 	.word	0x200010c0

0800a6c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6c6:	f000 f965 	bl	800a994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6ca:	4b15      	ldr	r3, [pc, #84]	; (800a720 <prvCheckForValidListAndQueue+0x60>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d120      	bne.n	800a714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6d2:	4814      	ldr	r0, [pc, #80]	; (800a724 <prvCheckForValidListAndQueue+0x64>)
 800a6d4:	f7fd fcfc 	bl	80080d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6d8:	4813      	ldr	r0, [pc, #76]	; (800a728 <prvCheckForValidListAndQueue+0x68>)
 800a6da:	f7fd fcf9 	bl	80080d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6de:	4b13      	ldr	r3, [pc, #76]	; (800a72c <prvCheckForValidListAndQueue+0x6c>)
 800a6e0:	4a10      	ldr	r2, [pc, #64]	; (800a724 <prvCheckForValidListAndQueue+0x64>)
 800a6e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6e4:	4b12      	ldr	r3, [pc, #72]	; (800a730 <prvCheckForValidListAndQueue+0x70>)
 800a6e6:	4a10      	ldr	r2, [pc, #64]	; (800a728 <prvCheckForValidListAndQueue+0x68>)
 800a6e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	4b11      	ldr	r3, [pc, #68]	; (800a734 <prvCheckForValidListAndQueue+0x74>)
 800a6f0:	4a11      	ldr	r2, [pc, #68]	; (800a738 <prvCheckForValidListAndQueue+0x78>)
 800a6f2:	2110      	movs	r1, #16
 800a6f4:	200a      	movs	r0, #10
 800a6f6:	f7fd fe07 	bl	8008308 <xQueueGenericCreateStatic>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4a08      	ldr	r2, [pc, #32]	; (800a720 <prvCheckForValidListAndQueue+0x60>)
 800a6fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <prvCheckForValidListAndQueue+0x60>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a708:	4b05      	ldr	r3, [pc, #20]	; (800a720 <prvCheckForValidListAndQueue+0x60>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	490b      	ldr	r1, [pc, #44]	; (800a73c <prvCheckForValidListAndQueue+0x7c>)
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fc34 	bl	8008f7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a714:	f000 f96e 	bl	800a9f4 <vPortExitCritical>
}
 800a718:	bf00      	nop
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	200010c4 	.word	0x200010c4
 800a724:	20001094 	.word	0x20001094
 800a728:	200010a8 	.word	0x200010a8
 800a72c:	200010bc 	.word	0x200010bc
 800a730:	200010c0 	.word	0x200010c0
 800a734:	20001170 	.word	0x20001170
 800a738:	200010d0 	.word	0x200010d0
 800a73c:	0800e84c 	.word	0x0800e84c

0800a740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3b04      	subs	r3, #4
 800a750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3b04      	subs	r3, #4
 800a75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f023 0201 	bic.w	r2, r3, #1
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3b04      	subs	r3, #4
 800a76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a770:	4a0c      	ldr	r2, [pc, #48]	; (800a7a4 <pxPortInitialiseStack+0x64>)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3b14      	subs	r3, #20
 800a77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3b04      	subs	r3, #4
 800a786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f06f 0202 	mvn.w	r2, #2
 800a78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3b20      	subs	r3, #32
 800a794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	0800a7a9 	.word	0x0800a7a9

0800a7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <prvTaskExitError+0x54>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d00a      	beq.n	800a7d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	60fb      	str	r3, [r7, #12]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <prvTaskExitError+0x28>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	60bb      	str	r3, [r7, #8]
}
 800a7e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7e6:	bf00      	nop
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0fc      	beq.n	800a7e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7ee:	bf00      	nop
 800a7f0:	bf00      	nop
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	20000098 	.word	0x20000098

0800a800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <pxCurrentTCBConst2>)
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	6808      	ldr	r0, [r1, #0]
 800a806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80a:	f380 8809 	msr	PSP, r0
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f380 8811 	msr	BASEPRI, r0
 800a81a:	4770      	bx	lr
 800a81c:	f3af 8000 	nop.w

0800a820 <pxCurrentTCBConst2>:
 800a820:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop

0800a828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a828:	4808      	ldr	r0, [pc, #32]	; (800a84c <prvPortStartFirstTask+0x24>)
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	6800      	ldr	r0, [r0, #0]
 800a82e:	f380 8808 	msr	MSP, r0
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8814 	msr	CONTROL, r0
 800a83a:	b662      	cpsie	i
 800a83c:	b661      	cpsie	f
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	df00      	svc	0
 800a848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a84a:	bf00      	nop
 800a84c:	e000ed08 	.word	0xe000ed08

0800a850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a856:	4b46      	ldr	r3, [pc, #280]	; (800a970 <xPortStartScheduler+0x120>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a46      	ldr	r2, [pc, #280]	; (800a974 <xPortStartScheduler+0x124>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10a      	bne.n	800a876 <xPortStartScheduler+0x26>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a876:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <xPortStartScheduler+0x120>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a3f      	ldr	r2, [pc, #252]	; (800a978 <xPortStartScheduler+0x128>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10a      	bne.n	800a896 <xPortStartScheduler+0x46>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a896:	4b39      	ldr	r3, [pc, #228]	; (800a97c <xPortStartScheduler+0x12c>)
 800a898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	22ff      	movs	r2, #255	; 0xff
 800a8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	4b31      	ldr	r3, [pc, #196]	; (800a980 <xPortStartScheduler+0x130>)
 800a8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8be:	4b31      	ldr	r3, [pc, #196]	; (800a984 <xPortStartScheduler+0x134>)
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8c4:	e009      	b.n	800a8da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8c6:	4b2f      	ldr	r3, [pc, #188]	; (800a984 <xPortStartScheduler+0x134>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	4a2d      	ldr	r2, [pc, #180]	; (800a984 <xPortStartScheduler+0x134>)
 800a8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e2:	2b80      	cmp	r3, #128	; 0x80
 800a8e4:	d0ef      	beq.n	800a8c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8e6:	4b27      	ldr	r3, [pc, #156]	; (800a984 <xPortStartScheduler+0x134>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1c3 0307 	rsb	r3, r3, #7
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d00a      	beq.n	800a908 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60bb      	str	r3, [r7, #8]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a908:	4b1e      	ldr	r3, [pc, #120]	; (800a984 <xPortStartScheduler+0x134>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	4a1d      	ldr	r2, [pc, #116]	; (800a984 <xPortStartScheduler+0x134>)
 800a910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a912:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <xPortStartScheduler+0x134>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a91a:	4a1a      	ldr	r2, [pc, #104]	; (800a984 <xPortStartScheduler+0x134>)
 800a91c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	b2da      	uxtb	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a926:	4b18      	ldr	r3, [pc, #96]	; (800a988 <xPortStartScheduler+0x138>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <xPortStartScheduler+0x138>)
 800a92c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a932:	4b15      	ldr	r3, [pc, #84]	; (800a988 <xPortStartScheduler+0x138>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a14      	ldr	r2, [pc, #80]	; (800a988 <xPortStartScheduler+0x138>)
 800a938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a93c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a93e:	f000 f8dd 	bl	800aafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a942:	4b12      	ldr	r3, [pc, #72]	; (800a98c <xPortStartScheduler+0x13c>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a948:	f000 f8fc 	bl	800ab44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <xPortStartScheduler+0x140>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a0f      	ldr	r2, [pc, #60]	; (800a990 <xPortStartScheduler+0x140>)
 800a952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a958:	f7ff ff66 	bl	800a828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a95c:	f7fe ff3e 	bl	80097dc <vTaskSwitchContext>
	prvTaskExitError();
 800a960:	f7ff ff22 	bl	800a7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	e000ed00 	.word	0xe000ed00
 800a974:	410fc271 	.word	0x410fc271
 800a978:	410fc270 	.word	0x410fc270
 800a97c:	e000e400 	.word	0xe000e400
 800a980:	200011c0 	.word	0x200011c0
 800a984:	200011c4 	.word	0x200011c4
 800a988:	e000ed20 	.word	0xe000ed20
 800a98c:	20000098 	.word	0x20000098
 800a990:	e000ef34 	.word	0xe000ef34

0800a994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	607b      	str	r3, [r7, #4]
}
 800a9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ae:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	4a0d      	ldr	r2, [pc, #52]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d10f      	bne.n	800a9e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <vPortEnterCritical+0x5c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	603b      	str	r3, [r7, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <vPortEnterCritical+0x4a>
	}
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000098 	.word	0x20000098
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9fa:	4b12      	ldr	r3, [pc, #72]	; (800aa44 <vPortExitCritical+0x50>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <vPortExitCritical+0x24>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	607b      	str	r3, [r7, #4]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <vPortExitCritical+0x50>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	4a09      	ldr	r2, [pc, #36]	; (800aa44 <vPortExitCritical+0x50>)
 800aa20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <vPortExitCritical+0x50>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <vPortExitCritical+0x42>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f383 8811 	msr	BASEPRI, r3
}
 800aa34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20000098 	.word	0x20000098
	...

0800aa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa50:	f3ef 8009 	mrs	r0, PSP
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <pxCurrentTCBConst>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f01e 0f10 	tst.w	lr, #16
 800aa60:	bf08      	it	eq
 800aa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa74:	f380 8811 	msr	BASEPRI, r0
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f7fe feac 	bl	80097dc <vTaskSwitchContext>
 800aa84:	f04f 0000 	mov.w	r0, #0
 800aa88:	f380 8811 	msr	BASEPRI, r0
 800aa8c:	bc09      	pop	{r0, r3}
 800aa8e:	6819      	ldr	r1, [r3, #0]
 800aa90:	6808      	ldr	r0, [r1, #0]
 800aa92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa96:	f01e 0f10 	tst.w	lr, #16
 800aa9a:	bf08      	it	eq
 800aa9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aaa0:	f380 8809 	msr	PSP, r0
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst>:
 800aab0:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aad2:	f7fe fdc9 	bl	8009668 <xTaskIncrementTick>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <xPortSysTickHandler+0x40>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	2300      	movs	r3, #0
 800aae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	f383 8811 	msr	BASEPRI, r3
}
 800aaee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <vPortSetupTimerInterrupt+0x38>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <vPortSetupTimerInterrupt+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <vPortSetupTimerInterrupt+0x40>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	099b      	lsrs	r3, r3, #6
 800ab18:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <vPortSetupTimerInterrupt+0x44>)
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	e000e010 	.word	0xe000e010
 800ab34:	e000e018 	.word	0xe000e018
 800ab38:	20000000 	.word	0x20000000
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	e000e014 	.word	0xe000e014

0800ab44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab54 <vPortEnableVFP+0x10>
 800ab48:	6801      	ldr	r1, [r0, #0]
 800ab4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab4e:	6001      	str	r1, [r0, #0]
 800ab50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab52:	bf00      	nop
 800ab54:	e000ed88 	.word	0xe000ed88

0800ab58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab5e:	f3ef 8305 	mrs	r3, IPSR
 800ab62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d914      	bls.n	800ab94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab6a:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <vPortValidateInterruptPriority+0x70>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab74:	4b15      	ldr	r3, [pc, #84]	; (800abcc <vPortValidateInterruptPriority+0x74>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	7afa      	ldrb	r2, [r7, #11]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d20a      	bcs.n	800ab94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab94:	4b0e      	ldr	r3, [pc, #56]	; (800abd0 <vPortValidateInterruptPriority+0x78>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <vPortValidateInterruptPriority+0x7c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d90a      	bls.n	800abba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	603b      	str	r3, [r7, #0]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <vPortValidateInterruptPriority+0x60>
	}
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	e000e3f0 	.word	0xe000e3f0
 800abcc:	200011c0 	.word	0x200011c0
 800abd0:	e000ed0c 	.word	0xe000ed0c
 800abd4:	200011c4 	.word	0x200011c4

0800abd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abe4:	f7fe fc84 	bl	80094f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abe8:	4b5b      	ldr	r3, [pc, #364]	; (800ad58 <pvPortMalloc+0x180>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abf0:	f000 f920 	bl	800ae34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abf4:	4b59      	ldr	r3, [pc, #356]	; (800ad5c <pvPortMalloc+0x184>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4013      	ands	r3, r2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8093 	bne.w	800ad28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01d      	beq.n	800ac44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac08:	2208      	movs	r2, #8
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d014      	beq.n	800ac44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f023 0307 	bic.w	r3, r3, #7
 800ac20:	3308      	adds	r3, #8
 800ac22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <pvPortMalloc+0x6c>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	617b      	str	r3, [r7, #20]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d06e      	beq.n	800ad28 <pvPortMalloc+0x150>
 800ac4a:	4b45      	ldr	r3, [pc, #276]	; (800ad60 <pvPortMalloc+0x188>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d869      	bhi.n	800ad28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac54:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <pvPortMalloc+0x18c>)
 800ac56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <pvPortMalloc+0x18c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac5e:	e004      	b.n	800ac6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d903      	bls.n	800ac7c <pvPortMalloc+0xa4>
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f1      	bne.n	800ac60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac7c:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <pvPortMalloc+0x180>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d050      	beq.n	800ad28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	4413      	add	r3, r2
 800ac8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	2308      	movs	r3, #8
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d91f      	bls.n	800ace8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <pvPortMalloc+0xf8>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	613b      	str	r3, [r7, #16]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1ad2      	subs	r2, r2, r3
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ace2:	69b8      	ldr	r0, [r7, #24]
 800ace4:	f000 f908 	bl	800aef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ace8:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <pvPortMalloc+0x188>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	4a1b      	ldr	r2, [pc, #108]	; (800ad60 <pvPortMalloc+0x188>)
 800acf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <pvPortMalloc+0x188>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <pvPortMalloc+0x190>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d203      	bcs.n	800ad0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <pvPortMalloc+0x188>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <pvPortMalloc+0x190>)
 800ad08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <pvPortMalloc+0x184>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <pvPortMalloc+0x194>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <pvPortMalloc+0x194>)
 800ad26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad28:	f7fe fbf0 	bl	800950c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <pvPortMalloc+0x174>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60fb      	str	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <pvPortMalloc+0x172>
	return pvReturn;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20004dd0 	.word	0x20004dd0
 800ad5c:	20004de4 	.word	0x20004de4
 800ad60:	20004dd4 	.word	0x20004dd4
 800ad64:	20004dc8 	.word	0x20004dc8
 800ad68:	20004dd8 	.word	0x20004dd8
 800ad6c:	20004ddc 	.word	0x20004ddc

0800ad70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d04d      	beq.n	800ae1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad82:	2308      	movs	r3, #8
 800ad84:	425b      	negs	r3, r3
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4413      	add	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <vPortFree+0xb8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <vPortFree+0x44>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <vPortFree+0x62>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	60bb      	str	r3, [r7, #8]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <vPortFree+0xb8>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4013      	ands	r3, r2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01e      	beq.n	800ae1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d11a      	bne.n	800ae1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <vPortFree+0xb8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	43db      	mvns	r3, r3
 800adf2:	401a      	ands	r2, r3
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adf8:	f7fe fb7a 	bl	80094f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <vPortFree+0xbc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4413      	add	r3, r2
 800ae06:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <vPortFree+0xbc>)
 800ae08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae0a:	6938      	ldr	r0, [r7, #16]
 800ae0c:	f000 f874 	bl	800aef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <vPortFree+0xc0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	4a06      	ldr	r2, [pc, #24]	; (800ae30 <vPortFree+0xc0>)
 800ae18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae1a:	f7fe fb77 	bl	800950c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae1e:	bf00      	nop
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20004de4 	.word	0x20004de4
 800ae2c:	20004dd4 	.word	0x20004dd4
 800ae30:	20004de0 	.word	0x20004de0

0800ae34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae40:	4b27      	ldr	r3, [pc, #156]	; (800aee0 <prvHeapInit+0xac>)
 800ae42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00c      	beq.n	800ae68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3307      	adds	r3, #7
 800ae52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f023 0307 	bic.w	r3, r3, #7
 800ae5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <prvHeapInit+0xac>)
 800ae64:	4413      	add	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae6c:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <prvHeapInit+0xb0>)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <prvHeapInit+0xb0>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae80:	2208      	movs	r2, #8
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1a9b      	subs	r3, r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0307 	bic.w	r3, r3, #7
 800ae8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4a15      	ldr	r2, [pc, #84]	; (800aee8 <prvHeapInit+0xb4>)
 800ae94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <prvHeapInit+0xb4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <prvHeapInit+0xb4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <prvHeapInit+0xb4>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <prvHeapInit+0xb8>)
 800aec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <prvHeapInit+0xbc>)
 800aeca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <prvHeapInit+0xc0>)
 800aece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aed2:	601a      	str	r2, [r3, #0]
}
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	200011c8 	.word	0x200011c8
 800aee4:	20004dc8 	.word	0x20004dc8
 800aee8:	20004dd0 	.word	0x20004dd0
 800aeec:	20004dd8 	.word	0x20004dd8
 800aef0:	20004dd4 	.word	0x20004dd4
 800aef4:	20004de4 	.word	0x20004de4

0800aef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af00:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <prvInsertBlockIntoFreeList+0xac>)
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e002      	b.n	800af0c <prvInsertBlockIntoFreeList+0x14>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	429a      	cmp	r2, r3
 800af14:	d8f7      	bhi.n	800af06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	4413      	add	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d108      	bne.n	800af3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	441a      	add	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	441a      	add	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d118      	bne.n	800af80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <prvInsertBlockIntoFreeList+0xb0>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d00d      	beq.n	800af76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	441a      	add	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	e008      	b.n	800af88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af76:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <prvInsertBlockIntoFreeList+0xb0>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	e003      	b.n	800af88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d002      	beq.n	800af96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20004dc8 	.word	0x20004dc8
 800afa8:	20004dd0 	.word	0x20004dd0

0800afac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afb0:	2200      	movs	r2, #0
 800afb2:	4912      	ldr	r1, [pc, #72]	; (800affc <MX_USB_DEVICE_Init+0x50>)
 800afb4:	4812      	ldr	r0, [pc, #72]	; (800b000 <MX_USB_DEVICE_Init+0x54>)
 800afb6:	f7fb fb15 	bl	80065e4 <USBD_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800afc0:	f7f6 f9fc 	bl	80013bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afc4:	490f      	ldr	r1, [pc, #60]	; (800b004 <MX_USB_DEVICE_Init+0x58>)
 800afc6:	480e      	ldr	r0, [pc, #56]	; (800b000 <MX_USB_DEVICE_Init+0x54>)
 800afc8:	f7fb fb3c 	bl	8006644 <USBD_RegisterClass>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afd2:	f7f6 f9f3 	bl	80013bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800afd6:	490c      	ldr	r1, [pc, #48]	; (800b008 <MX_USB_DEVICE_Init+0x5c>)
 800afd8:	4809      	ldr	r0, [pc, #36]	; (800b000 <MX_USB_DEVICE_Init+0x54>)
 800afda:	f7fb fa33 	bl	8006444 <USBD_CDC_RegisterInterface>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afe4:	f7f6 f9ea 	bl	80013bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afe8:	4805      	ldr	r0, [pc, #20]	; (800b000 <MX_USB_DEVICE_Init+0x54>)
 800afea:	f7fb fb61 	bl	80066b0 <USBD_Start>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aff4:	f7f6 f9e2 	bl	80013bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aff8:	bf00      	nop
 800affa:	bd80      	pop	{r7, pc}
 800affc:	200000b0 	.word	0x200000b0
 800b000:	20004de8 	.word	0x20004de8
 800b004:	20000018 	.word	0x20000018
 800b008:	2000009c 	.word	0x2000009c

0800b00c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b010:	2200      	movs	r2, #0
 800b012:	4905      	ldr	r1, [pc, #20]	; (800b028 <CDC_Init_FS+0x1c>)
 800b014:	4805      	ldr	r0, [pc, #20]	; (800b02c <CDC_Init_FS+0x20>)
 800b016:	f7fb fa2f 	bl	8006478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b01a:	4905      	ldr	r1, [pc, #20]	; (800b030 <CDC_Init_FS+0x24>)
 800b01c:	4803      	ldr	r0, [pc, #12]	; (800b02c <CDC_Init_FS+0x20>)
 800b01e:	f7fb fa4d 	bl	80064bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}
 800b028:	200058c4 	.word	0x200058c4
 800b02c:	20004de8 	.word	0x20004de8
 800b030:	200050c4 	.word	0x200050c4

0800b034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	6039      	str	r1, [r7, #0]
 800b04e:	71fb      	strb	r3, [r7, #7]
 800b050:	4613      	mov	r3, r2
 800b052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b23      	cmp	r3, #35	; 0x23
 800b058:	d84a      	bhi.n	800b0f0 <CDC_Control_FS+0xac>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <CDC_Control_FS+0x1c>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b0f1 	.word	0x0800b0f1
 800b064:	0800b0f1 	.word	0x0800b0f1
 800b068:	0800b0f1 	.word	0x0800b0f1
 800b06c:	0800b0f1 	.word	0x0800b0f1
 800b070:	0800b0f1 	.word	0x0800b0f1
 800b074:	0800b0f1 	.word	0x0800b0f1
 800b078:	0800b0f1 	.word	0x0800b0f1
 800b07c:	0800b0f1 	.word	0x0800b0f1
 800b080:	0800b0f1 	.word	0x0800b0f1
 800b084:	0800b0f1 	.word	0x0800b0f1
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b0f1 	.word	0x0800b0f1
 800b090:	0800b0f1 	.word	0x0800b0f1
 800b094:	0800b0f1 	.word	0x0800b0f1
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b0f1 	.word	0x0800b0f1
 800b0a4:	0800b0f1 	.word	0x0800b0f1
 800b0a8:	0800b0f1 	.word	0x0800b0f1
 800b0ac:	0800b0f1 	.word	0x0800b0f1
 800b0b0:	0800b0f1 	.word	0x0800b0f1
 800b0b4:	0800b0f1 	.word	0x0800b0f1
 800b0b8:	0800b0f1 	.word	0x0800b0f1
 800b0bc:	0800b0f1 	.word	0x0800b0f1
 800b0c0:	0800b0f1 	.word	0x0800b0f1
 800b0c4:	0800b0f1 	.word	0x0800b0f1
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b0f1 	.word	0x0800b0f1
 800b0d4:	0800b0f1 	.word	0x0800b0f1
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0f1 	.word	0x0800b0f1
 800b0e0:	0800b0f1 	.word	0x0800b0f1
 800b0e4:	0800b0f1 	.word	0x0800b0f1
 800b0e8:	0800b0f1 	.word	0x0800b0f1
 800b0ec:	0800b0f1 	.word	0x0800b0f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0f0:	bf00      	nop
  }

  return (USBD_OK);
 800b0f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	4805      	ldr	r0, [pc, #20]	; (800b124 <CDC_Receive_FS+0x24>)
 800b10e:	f7fb f9d5 	bl	80064bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b112:	4804      	ldr	r0, [pc, #16]	; (800b124 <CDC_Receive_FS+0x24>)
 800b114:	f7fb fa30 	bl	8006578 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b118:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20004de8 	.word	0x20004de8

0800b128 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <CDC_Transmit_FS+0x48>)
 800b13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b13e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e00b      	b.n	800b166 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b14e:	887b      	ldrh	r3, [r7, #2]
 800b150:	461a      	mov	r2, r3
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4806      	ldr	r0, [pc, #24]	; (800b170 <CDC_Transmit_FS+0x48>)
 800b156:	f7fb f98f 	bl	8006478 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b15a:	4805      	ldr	r0, [pc, #20]	; (800b170 <CDC_Transmit_FS+0x48>)
 800b15c:	f7fb f9cc 	bl	80064f8 <USBD_CDC_TransmitPacket>
 800b160:	4603      	mov	r3, r0
 800b162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20004de8 	.word	0x20004de8

0800b174 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
	...

0800b198 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	6039      	str	r1, [r7, #0]
 800b1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2212      	movs	r2, #18
 800b1a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1aa:	4b03      	ldr	r3, [pc, #12]	; (800b1b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	200000cc 	.word	0x200000cc

0800b1bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	6039      	str	r1, [r7, #0]
 800b1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1ce:	4b03      	ldr	r3, [pc, #12]	; (800b1dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	200000e0 	.word	0x200000e0

0800b1e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	6039      	str	r1, [r7, #0]
 800b1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d105      	bne.n	800b1fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	4907      	ldr	r1, [pc, #28]	; (800b214 <USBD_FS_ProductStrDescriptor+0x34>)
 800b1f6:	4808      	ldr	r0, [pc, #32]	; (800b218 <USBD_FS_ProductStrDescriptor+0x38>)
 800b1f8:	f7fc fc0c 	bl	8007a14 <USBD_GetString>
 800b1fc:	e004      	b.n	800b208 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	4904      	ldr	r1, [pc, #16]	; (800b214 <USBD_FS_ProductStrDescriptor+0x34>)
 800b202:	4805      	ldr	r0, [pc, #20]	; (800b218 <USBD_FS_ProductStrDescriptor+0x38>)
 800b204:	f7fc fc06 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b208:	4b02      	ldr	r3, [pc, #8]	; (800b214 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200060c4 	.word	0x200060c4
 800b218:	0800e854 	.word	0x0800e854

0800b21c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	6039      	str	r1, [r7, #0]
 800b226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	4904      	ldr	r1, [pc, #16]	; (800b23c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b22c:	4804      	ldr	r0, [pc, #16]	; (800b240 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b22e:	f7fc fbf1 	bl	8007a14 <USBD_GetString>
  return USBD_StrDesc;
 800b232:	4b02      	ldr	r3, [pc, #8]	; (800b23c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200060c4 	.word	0x200060c4
 800b240:	0800e86c 	.word	0x0800e86c

0800b244 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	221a      	movs	r2, #26
 800b254:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b256:	f000 f843 	bl	800b2e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b25a:	4b02      	ldr	r3, [pc, #8]	; (800b264 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200000e4 	.word	0x200000e4

0800b268 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4907      	ldr	r1, [pc, #28]	; (800b29c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b27e:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b280:	f7fc fbc8 	bl	8007a14 <USBD_GetString>
 800b284:	e004      	b.n	800b290 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4904      	ldr	r1, [pc, #16]	; (800b29c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b28a:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b28c:	f7fc fbc2 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200060c4 	.word	0x200060c4
 800b2a0:	0800e880 	.word	0x0800e880

0800b2a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	4907      	ldr	r1, [pc, #28]	; (800b2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2ba:	4808      	ldr	r0, [pc, #32]	; (800b2dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2bc:	f7fc fbaa 	bl	8007a14 <USBD_GetString>
 800b2c0:	e004      	b.n	800b2cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	4904      	ldr	r1, [pc, #16]	; (800b2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2c6:	4805      	ldr	r0, [pc, #20]	; (800b2dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2c8:	f7fc fba4 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2cc:	4b02      	ldr	r3, [pc, #8]	; (800b2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	200060c4 	.word	0x200060c4
 800b2dc:	0800e88c 	.word	0x0800e88c

0800b2e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <Get_SerialNum+0x44>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2ec:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <Get_SerialNum+0x48>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2f2:	4b0e      	ldr	r3, [pc, #56]	; (800b32c <Get_SerialNum+0x4c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d009      	beq.n	800b31a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b306:	2208      	movs	r2, #8
 800b308:	4909      	ldr	r1, [pc, #36]	; (800b330 <Get_SerialNum+0x50>)
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 f814 	bl	800b338 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b310:	2204      	movs	r2, #4
 800b312:	4908      	ldr	r1, [pc, #32]	; (800b334 <Get_SerialNum+0x54>)
 800b314:	68b8      	ldr	r0, [r7, #8]
 800b316:	f000 f80f 	bl	800b338 <IntToUnicode>
  }
}
 800b31a:	bf00      	nop
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	1fff7a10 	.word	0x1fff7a10
 800b328:	1fff7a14 	.word	0x1fff7a14
 800b32c:	1fff7a18 	.word	0x1fff7a18
 800b330:	200000e6 	.word	0x200000e6
 800b334:	200000f6 	.word	0x200000f6

0800b338 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b34a:	2300      	movs	r3, #0
 800b34c:	75fb      	strb	r3, [r7, #23]
 800b34e:	e027      	b.n	800b3a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	0f1b      	lsrs	r3, r3, #28
 800b354:	2b09      	cmp	r3, #9
 800b356:	d80b      	bhi.n	800b370 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	0f1b      	lsrs	r3, r3, #28
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	4619      	mov	r1, r3
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	440b      	add	r3, r1
 800b368:	3230      	adds	r2, #48	; 0x30
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	e00a      	b.n	800b386 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	0f1b      	lsrs	r3, r3, #28
 800b374:	b2da      	uxtb	r2, r3
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	4619      	mov	r1, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	440b      	add	r3, r1
 800b380:	3237      	adds	r2, #55	; 0x37
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	3301      	adds	r3, #1
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	4413      	add	r3, r2
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	3301      	adds	r3, #1
 800b39e:	75fb      	strb	r3, [r7, #23]
 800b3a0:	7dfa      	ldrb	r2, [r7, #23]
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d3d3      	bcc.n	800b350 <IntToUnicode+0x18>
  }
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08a      	sub	sp, #40	; 0x28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	605a      	str	r2, [r3, #4]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	60da      	str	r2, [r3, #12]
 800b3ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3d8:	d13a      	bne.n	800b450 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3da:	2300      	movs	r3, #0
 800b3dc:	613b      	str	r3, [r7, #16]
 800b3de:	4b1e      	ldr	r3, [pc, #120]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e2:	4a1d      	ldr	r2, [pc, #116]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b3e4:	f043 0301 	orr.w	r3, r3, #1
 800b3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ea:	4b1b      	ldr	r3, [pc, #108]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	613b      	str	r3, [r7, #16]
 800b3f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b404:	2303      	movs	r3, #3
 800b406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b408:	230a      	movs	r3, #10
 800b40a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b40c:	f107 0314 	add.w	r3, r7, #20
 800b410:	4619      	mov	r1, r3
 800b412:	4812      	ldr	r0, [pc, #72]	; (800b45c <HAL_PCD_MspInit+0xa4>)
 800b414:	f7f6 fb7c 	bl	8001b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b418:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41c:	4a0e      	ldr	r2, [pc, #56]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b422:	6353      	str	r3, [r2, #52]	; 0x34
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42c:	4a0a      	ldr	r2, [pc, #40]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b42e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b432:	6453      	str	r3, [r2, #68]	; 0x44
 800b434:	4b08      	ldr	r3, [pc, #32]	; (800b458 <HAL_PCD_MspInit+0xa0>)
 800b436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b440:	2200      	movs	r2, #0
 800b442:	2105      	movs	r1, #5
 800b444:	2043      	movs	r0, #67	; 0x43
 800b446:	f7f6 fb39 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b44a:	2043      	movs	r0, #67	; 0x43
 800b44c:	f7f6 fb52 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b450:	bf00      	nop
 800b452:	3728      	adds	r7, #40	; 0x28
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	40023800 	.word	0x40023800
 800b45c:	40020000 	.word	0x40020000

0800b460 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b474:	4619      	mov	r1, r3
 800b476:	4610      	mov	r0, r2
 800b478:	f7fb f967 	bl	800674a <USBD_LL_SetupStage>
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	4613      	mov	r3, r2
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	440b      	add	r3, r1
 800b4a4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f7fb f9a1 	bl	80067f4 <USBD_LL_DataOutStage>
}
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b4cc:	78fa      	ldrb	r2, [r7, #3]
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	440b      	add	r3, r1
 800b4da:	3320      	adds	r3, #32
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	78fb      	ldrb	r3, [r7, #3]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f7fb fa3a 	bl	800695a <USBD_LL_DataInStage>
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fb fb74 	bl	8006bea <USBD_LL_SOF>
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b512:	2301      	movs	r3, #1
 800b514:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	79db      	ldrb	r3, [r3, #7]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
 800b522:	e008      	b.n	800b536 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	79db      	ldrb	r3, [r3, #7]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d102      	bne.n	800b532 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b52c:	2301      	movs	r3, #1
 800b52e:	73fb      	strb	r3, [r7, #15]
 800b530:	e001      	b.n	800b536 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b532:	f7f5 ff43 	bl	80013bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b53c:	7bfa      	ldrb	r2, [r7, #15]
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f7fb fb0e 	bl	8006b62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fb fab6 	bl	8006abe <USBD_LL_Reset>
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fb fb09 	bl	8006b82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6812      	ldr	r2, [r2, #0]
 800b57e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	7adb      	ldrb	r3, [r3, #11]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <HAL_PCD_SuspendCallback+0x48>)
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	4a03      	ldr	r2, [pc, #12]	; (800b5a4 <HAL_PCD_SuspendCallback+0x48>)
 800b596:	f043 0306 	orr.w	r3, r3, #6
 800b59a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	e000ed00 	.word	0xe000ed00

0800b5a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fb faff 	bl	8006bba <USBD_LL_Resume>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5d6:	78fa      	ldrb	r2, [r7, #3]
 800b5d8:	4611      	mov	r1, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fb fb57 	bl	8006c8e <USBD_LL_IsoOUTIncomplete>
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5fa:	78fa      	ldrb	r2, [r7, #3]
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fb fb13 	bl	8006c2a <USBD_LL_IsoINIncomplete>
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fb fb69 	bl	8006cf2 <USBD_LL_DevConnected>
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b636:	4618      	mov	r0, r3
 800b638:	f7fb fb66 	bl	8006d08 <USBD_LL_DevDisconnected>
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d13c      	bne.n	800b6ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b654:	4a20      	ldr	r2, [pc, #128]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a1e      	ldr	r2, [pc, #120]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b660:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b664:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b66a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b66c:	4b1a      	ldr	r3, [pc, #104]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b66e:	2204      	movs	r2, #4
 800b670:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b672:	4b19      	ldr	r3, [pc, #100]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b674:	2202      	movs	r2, #2
 800b676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b678:	4b17      	ldr	r3, [pc, #92]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b67e:	4b16      	ldr	r3, [pc, #88]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b680:	2202      	movs	r2, #2
 800b682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b684:	4b14      	ldr	r3, [pc, #80]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b686:	2200      	movs	r2, #0
 800b688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b690:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b692:	2200      	movs	r2, #0
 800b694:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b696:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b698:	2200      	movs	r2, #0
 800b69a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b69c:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b6a2:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b6a4:	f7f6 fd48 	bl	8002138 <HAL_PCD_Init>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b6ae:	f7f5 fe85 	bl	80013bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b6b2:	2180      	movs	r1, #128	; 0x80
 800b6b4:	4808      	ldr	r0, [pc, #32]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b6b6:	f7f7 ff72 	bl	800359e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b6ba:	2240      	movs	r2, #64	; 0x40
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4806      	ldr	r0, [pc, #24]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b6c0:	f7f7 ff26 	bl	8003510 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b6c4:	2280      	movs	r2, #128	; 0x80
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4803      	ldr	r0, [pc, #12]	; (800b6d8 <USBD_LL_Init+0x94>)
 800b6ca:	f7f7 ff21 	bl	8003510 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	200062c4 	.word	0x200062c4

0800b6dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7f6 fe2f 	bl	8002356 <HAL_PCD_Start>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f942 	bl	800b988 <USBD_Get_USB_Status>
 800b704:	4603      	mov	r3, r0
 800b706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b708:	7bbb      	ldrb	r3, [r7, #14]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b084      	sub	sp, #16
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	4608      	mov	r0, r1
 800b71c:	4611      	mov	r1, r2
 800b71e:	461a      	mov	r2, r3
 800b720:	4603      	mov	r3, r0
 800b722:	70fb      	strb	r3, [r7, #3]
 800b724:	460b      	mov	r3, r1
 800b726:	70bb      	strb	r3, [r7, #2]
 800b728:	4613      	mov	r3, r2
 800b72a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b73a:	78bb      	ldrb	r3, [r7, #2]
 800b73c:	883a      	ldrh	r2, [r7, #0]
 800b73e:	78f9      	ldrb	r1, [r7, #3]
 800b740:	f7f7 fb03 	bl	8002d4a <HAL_PCD_EP_Open>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f91c 	bl	800b988 <USBD_Get_USB_Status>
 800b750:	4603      	mov	r3, r0
 800b752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b754:	7bbb      	ldrb	r3, [r7, #14]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b778:	78fa      	ldrb	r2, [r7, #3]
 800b77a:	4611      	mov	r1, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7f7 fb4c 	bl	8002e1a <HAL_PCD_EP_Close>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 f8fd 	bl	800b988 <USBD_Get_USB_Status>
 800b78e:	4603      	mov	r3, r0
 800b790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b792:	7bbb      	ldrb	r3, [r7, #14]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7b6:	78fa      	ldrb	r2, [r7, #3]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f7 fc04 	bl	8002fc8 <HAL_PCD_EP_SetStall>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f8de 	bl	800b988 <USBD_Get_USB_Status>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f7 fc48 	bl	800308e <HAL_PCD_EP_ClrStall>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f8bf 	bl	800b988 <USBD_Get_USB_Status>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b82a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b82c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b830:	2b00      	cmp	r3, #0
 800b832:	da0b      	bge.n	800b84c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b83a:	68f9      	ldr	r1, [r7, #12]
 800b83c:	4613      	mov	r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	3316      	adds	r3, #22
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	e00b      	b.n	800b864 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b84c:	78fb      	ldrb	r3, [r7, #3]
 800b84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	4613      	mov	r3, r2
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	440b      	add	r3, r1
 800b85e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b862:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b864:	4618      	mov	r0, r3
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7f7 fa37 	bl	8002d02 <HAL_PCD_SetAddress>
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f874 	bl	800b988 <USBD_Get_USB_Status>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8cc:	7af9      	ldrb	r1, [r7, #11]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	f7f7 fb3f 	bl	8002f54 <HAL_PCD_EP_Transmit>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 f853 	bl	800b988 <USBD_Get_USB_Status>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	607a      	str	r2, [r7, #4]
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b90e:	7af9      	ldrb	r1, [r7, #11]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	f7f7 facb 	bl	8002eae <HAL_PCD_EP_Receive>
 800b918:	4603      	mov	r3, r0
 800b91a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f832 	bl	800b988 <USBD_Get_USB_Status>
 800b924:	4603      	mov	r3, r0
 800b926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b928:	7dbb      	ldrb	r3, [r7, #22]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b944:	78fa      	ldrb	r2, [r7, #3]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7f7 faeb 	bl	8002f24 <HAL_PCD_EP_GetRxCount>
 800b94e:	4603      	mov	r3, r0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b960:	4b03      	ldr	r3, [pc, #12]	; (800b970 <USBD_static_malloc+0x18>)
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	200067a8 	.word	0x200067a8

0800b974 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]

}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d817      	bhi.n	800b9cc <USBD_Get_USB_Status+0x44>
 800b99c:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <USBD_Get_USB_Status+0x1c>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9bb 	.word	0x0800b9bb
 800b9ac:	0800b9c1 	.word	0x0800b9c1
 800b9b0:	0800b9c7 	.word	0x0800b9c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b8:	e00b      	b.n	800b9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9be:	e008      	b.n	800b9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c4:	e005      	b.n	800b9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ca:	e002      	b.n	800b9d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d0:	bf00      	nop
  }
  return usb_status;
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <__cvt>:
 800b9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	ec55 4b10 	vmov	r4, r5, d0
 800b9e8:	2d00      	cmp	r5, #0
 800b9ea:	460e      	mov	r6, r1
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	bfbb      	ittet	lt
 800b9f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b9f6:	461d      	movlt	r5, r3
 800b9f8:	2300      	movge	r3, #0
 800b9fa:	232d      	movlt	r3, #45	; 0x2d
 800b9fc:	700b      	strb	r3, [r1, #0]
 800b9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba04:	4691      	mov	r9, r2
 800ba06:	f023 0820 	bic.w	r8, r3, #32
 800ba0a:	bfbc      	itt	lt
 800ba0c:	4622      	movlt	r2, r4
 800ba0e:	4614      	movlt	r4, r2
 800ba10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba14:	d005      	beq.n	800ba22 <__cvt+0x42>
 800ba16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba1a:	d100      	bne.n	800ba1e <__cvt+0x3e>
 800ba1c:	3601      	adds	r6, #1
 800ba1e:	2102      	movs	r1, #2
 800ba20:	e000      	b.n	800ba24 <__cvt+0x44>
 800ba22:	2103      	movs	r1, #3
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	ab02      	add	r3, sp, #8
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	ec45 4b10 	vmov	d0, r4, r5
 800ba30:	4653      	mov	r3, sl
 800ba32:	4632      	mov	r2, r6
 800ba34:	f000 fecc 	bl	800c7d0 <_dtoa_r>
 800ba38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	d102      	bne.n	800ba46 <__cvt+0x66>
 800ba40:	f019 0f01 	tst.w	r9, #1
 800ba44:	d022      	beq.n	800ba8c <__cvt+0xac>
 800ba46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba4a:	eb07 0906 	add.w	r9, r7, r6
 800ba4e:	d110      	bne.n	800ba72 <__cvt+0x92>
 800ba50:	783b      	ldrb	r3, [r7, #0]
 800ba52:	2b30      	cmp	r3, #48	; 0x30
 800ba54:	d10a      	bne.n	800ba6c <__cvt+0x8c>
 800ba56:	2200      	movs	r2, #0
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f7f5 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba62:	b918      	cbnz	r0, 800ba6c <__cvt+0x8c>
 800ba64:	f1c6 0601 	rsb	r6, r6, #1
 800ba68:	f8ca 6000 	str.w	r6, [sl]
 800ba6c:	f8da 3000 	ldr.w	r3, [sl]
 800ba70:	4499      	add	r9, r3
 800ba72:	2200      	movs	r2, #0
 800ba74:	2300      	movs	r3, #0
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f5 f825 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba7e:	b108      	cbz	r0, 800ba84 <__cvt+0xa4>
 800ba80:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba84:	2230      	movs	r2, #48	; 0x30
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	454b      	cmp	r3, r9
 800ba8a:	d307      	bcc.n	800ba9c <__cvt+0xbc>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba90:	1bdb      	subs	r3, r3, r7
 800ba92:	4638      	mov	r0, r7
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	b004      	add	sp, #16
 800ba98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9c:	1c59      	adds	r1, r3, #1
 800ba9e:	9103      	str	r1, [sp, #12]
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	e7f0      	b.n	800ba86 <__cvt+0xa6>

0800baa4 <__exponent>:
 800baa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baa6:	4603      	mov	r3, r0
 800baa8:	2900      	cmp	r1, #0
 800baaa:	bfb8      	it	lt
 800baac:	4249      	neglt	r1, r1
 800baae:	f803 2b02 	strb.w	r2, [r3], #2
 800bab2:	bfb4      	ite	lt
 800bab4:	222d      	movlt	r2, #45	; 0x2d
 800bab6:	222b      	movge	r2, #43	; 0x2b
 800bab8:	2909      	cmp	r1, #9
 800baba:	7042      	strb	r2, [r0, #1]
 800babc:	dd2a      	ble.n	800bb14 <__exponent+0x70>
 800babe:	f10d 0207 	add.w	r2, sp, #7
 800bac2:	4617      	mov	r7, r2
 800bac4:	260a      	movs	r6, #10
 800bac6:	4694      	mov	ip, r2
 800bac8:	fb91 f5f6 	sdiv	r5, r1, r6
 800bacc:	fb06 1415 	mls	r4, r6, r5, r1
 800bad0:	3430      	adds	r4, #48	; 0x30
 800bad2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bad6:	460c      	mov	r4, r1
 800bad8:	2c63      	cmp	r4, #99	; 0x63
 800bada:	f102 32ff 	add.w	r2, r2, #4294967295
 800bade:	4629      	mov	r1, r5
 800bae0:	dcf1      	bgt.n	800bac6 <__exponent+0x22>
 800bae2:	3130      	adds	r1, #48	; 0x30
 800bae4:	f1ac 0402 	sub.w	r4, ip, #2
 800bae8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800baec:	1c41      	adds	r1, r0, #1
 800baee:	4622      	mov	r2, r4
 800baf0:	42ba      	cmp	r2, r7
 800baf2:	d30a      	bcc.n	800bb0a <__exponent+0x66>
 800baf4:	f10d 0209 	add.w	r2, sp, #9
 800baf8:	eba2 020c 	sub.w	r2, r2, ip
 800bafc:	42bc      	cmp	r4, r7
 800bafe:	bf88      	it	hi
 800bb00:	2200      	movhi	r2, #0
 800bb02:	4413      	add	r3, r2
 800bb04:	1a18      	subs	r0, r3, r0
 800bb06:	b003      	add	sp, #12
 800bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bb0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bb12:	e7ed      	b.n	800baf0 <__exponent+0x4c>
 800bb14:	2330      	movs	r3, #48	; 0x30
 800bb16:	3130      	adds	r1, #48	; 0x30
 800bb18:	7083      	strb	r3, [r0, #2]
 800bb1a:	70c1      	strb	r1, [r0, #3]
 800bb1c:	1d03      	adds	r3, r0, #4
 800bb1e:	e7f1      	b.n	800bb04 <__exponent+0x60>

0800bb20 <_printf_float>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	ed2d 8b02 	vpush	{d8}
 800bb28:	b08d      	sub	sp, #52	; 0x34
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb30:	4616      	mov	r6, r2
 800bb32:	461f      	mov	r7, r3
 800bb34:	4605      	mov	r5, r0
 800bb36:	f000 fce7 	bl	800c508 <_localeconv_r>
 800bb3a:	f8d0 a000 	ldr.w	sl, [r0]
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7f4 fb96 	bl	8000270 <strlen>
 800bb44:	2300      	movs	r3, #0
 800bb46:	930a      	str	r3, [sp, #40]	; 0x28
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb54:	3307      	adds	r3, #7
 800bb56:	f023 0307 	bic.w	r3, r3, #7
 800bb5a:	f103 0208 	add.w	r2, r3, #8
 800bb5e:	f8c8 2000 	str.w	r2, [r8]
 800bb62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb6a:	9307      	str	r3, [sp, #28]
 800bb6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb70:	ee08 0a10 	vmov	s16, r0
 800bb74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bb78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb7c:	4b9e      	ldr	r3, [pc, #632]	; (800bdf8 <_printf_float+0x2d8>)
 800bb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb82:	f7f4 ffd3 	bl	8000b2c <__aeabi_dcmpun>
 800bb86:	bb88      	cbnz	r0, 800bbec <_printf_float+0xcc>
 800bb88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb8c:	4b9a      	ldr	r3, [pc, #616]	; (800bdf8 <_printf_float+0x2d8>)
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb92:	f7f4 ffad 	bl	8000af0 <__aeabi_dcmple>
 800bb96:	bb48      	cbnz	r0, 800bbec <_printf_float+0xcc>
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	4649      	mov	r1, r9
 800bba0:	f7f4 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800bba4:	b110      	cbz	r0, 800bbac <_printf_float+0x8c>
 800bba6:	232d      	movs	r3, #45	; 0x2d
 800bba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbac:	4a93      	ldr	r2, [pc, #588]	; (800bdfc <_printf_float+0x2dc>)
 800bbae:	4b94      	ldr	r3, [pc, #592]	; (800be00 <_printf_float+0x2e0>)
 800bbb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbb4:	bf94      	ite	ls
 800bbb6:	4690      	movls	r8, r2
 800bbb8:	4698      	movhi	r8, r3
 800bbba:	2303      	movs	r3, #3
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	9b05      	ldr	r3, [sp, #20]
 800bbc0:	f023 0304 	bic.w	r3, r3, #4
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	f04f 0900 	mov.w	r9, #0
 800bbca:	9700      	str	r7, [sp, #0]
 800bbcc:	4633      	mov	r3, r6
 800bbce:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f9da 	bl	800bf8c <_printf_common>
 800bbd8:	3001      	adds	r0, #1
 800bbda:	f040 8090 	bne.w	800bcfe <_printf_float+0x1de>
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	b00d      	add	sp, #52	; 0x34
 800bbe4:	ecbd 8b02 	vpop	{d8}
 800bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbec:	4642      	mov	r2, r8
 800bbee:	464b      	mov	r3, r9
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	f7f4 ff9a 	bl	8000b2c <__aeabi_dcmpun>
 800bbf8:	b140      	cbz	r0, 800bc0c <_printf_float+0xec>
 800bbfa:	464b      	mov	r3, r9
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfbc      	itt	lt
 800bc00:	232d      	movlt	r3, #45	; 0x2d
 800bc02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc06:	4a7f      	ldr	r2, [pc, #508]	; (800be04 <_printf_float+0x2e4>)
 800bc08:	4b7f      	ldr	r3, [pc, #508]	; (800be08 <_printf_float+0x2e8>)
 800bc0a:	e7d1      	b.n	800bbb0 <_printf_float+0x90>
 800bc0c:	6863      	ldr	r3, [r4, #4]
 800bc0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc12:	9206      	str	r2, [sp, #24]
 800bc14:	1c5a      	adds	r2, r3, #1
 800bc16:	d13f      	bne.n	800bc98 <_printf_float+0x178>
 800bc18:	2306      	movs	r3, #6
 800bc1a:	6063      	str	r3, [r4, #4]
 800bc1c:	9b05      	ldr	r3, [sp, #20]
 800bc1e:	6861      	ldr	r1, [r4, #4]
 800bc20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc24:	2300      	movs	r3, #0
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	ab0a      	add	r3, sp, #40	; 0x28
 800bc2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc2e:	ab09      	add	r3, sp, #36	; 0x24
 800bc30:	ec49 8b10 	vmov	d0, r8, r9
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	6022      	str	r2, [r4, #0]
 800bc38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f7ff fecf 	bl	800b9e0 <__cvt>
 800bc42:	9b06      	ldr	r3, [sp, #24]
 800bc44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc46:	2b47      	cmp	r3, #71	; 0x47
 800bc48:	4680      	mov	r8, r0
 800bc4a:	d108      	bne.n	800bc5e <_printf_float+0x13e>
 800bc4c:	1cc8      	adds	r0, r1, #3
 800bc4e:	db02      	blt.n	800bc56 <_printf_float+0x136>
 800bc50:	6863      	ldr	r3, [r4, #4]
 800bc52:	4299      	cmp	r1, r3
 800bc54:	dd41      	ble.n	800bcda <_printf_float+0x1ba>
 800bc56:	f1ab 0302 	sub.w	r3, fp, #2
 800bc5a:	fa5f fb83 	uxtb.w	fp, r3
 800bc5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc62:	d820      	bhi.n	800bca6 <_printf_float+0x186>
 800bc64:	3901      	subs	r1, #1
 800bc66:	465a      	mov	r2, fp
 800bc68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc6c:	9109      	str	r1, [sp, #36]	; 0x24
 800bc6e:	f7ff ff19 	bl	800baa4 <__exponent>
 800bc72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc74:	1813      	adds	r3, r2, r0
 800bc76:	2a01      	cmp	r2, #1
 800bc78:	4681      	mov	r9, r0
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	dc02      	bgt.n	800bc84 <_printf_float+0x164>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	07d2      	lsls	r2, r2, #31
 800bc82:	d501      	bpl.n	800bc88 <_printf_float+0x168>
 800bc84:	3301      	adds	r3, #1
 800bc86:	6123      	str	r3, [r4, #16]
 800bc88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d09c      	beq.n	800bbca <_printf_float+0xaa>
 800bc90:	232d      	movs	r3, #45	; 0x2d
 800bc92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc96:	e798      	b.n	800bbca <_printf_float+0xaa>
 800bc98:	9a06      	ldr	r2, [sp, #24]
 800bc9a:	2a47      	cmp	r2, #71	; 0x47
 800bc9c:	d1be      	bne.n	800bc1c <_printf_float+0xfc>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1bc      	bne.n	800bc1c <_printf_float+0xfc>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e7b9      	b.n	800bc1a <_printf_float+0xfa>
 800bca6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcaa:	d118      	bne.n	800bcde <_printf_float+0x1be>
 800bcac:	2900      	cmp	r1, #0
 800bcae:	6863      	ldr	r3, [r4, #4]
 800bcb0:	dd0b      	ble.n	800bcca <_printf_float+0x1aa>
 800bcb2:	6121      	str	r1, [r4, #16]
 800bcb4:	b913      	cbnz	r3, 800bcbc <_printf_float+0x19c>
 800bcb6:	6822      	ldr	r2, [r4, #0]
 800bcb8:	07d0      	lsls	r0, r2, #31
 800bcba:	d502      	bpl.n	800bcc2 <_printf_float+0x1a2>
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	440b      	add	r3, r1
 800bcc0:	6123      	str	r3, [r4, #16]
 800bcc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bcc4:	f04f 0900 	mov.w	r9, #0
 800bcc8:	e7de      	b.n	800bc88 <_printf_float+0x168>
 800bcca:	b913      	cbnz	r3, 800bcd2 <_printf_float+0x1b2>
 800bccc:	6822      	ldr	r2, [r4, #0]
 800bcce:	07d2      	lsls	r2, r2, #31
 800bcd0:	d501      	bpl.n	800bcd6 <_printf_float+0x1b6>
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	e7f4      	b.n	800bcc0 <_printf_float+0x1a0>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e7f2      	b.n	800bcc0 <_printf_float+0x1a0>
 800bcda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bcde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce0:	4299      	cmp	r1, r3
 800bce2:	db05      	blt.n	800bcf0 <_printf_float+0x1d0>
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	6121      	str	r1, [r4, #16]
 800bce8:	07d8      	lsls	r0, r3, #31
 800bcea:	d5ea      	bpl.n	800bcc2 <_printf_float+0x1a2>
 800bcec:	1c4b      	adds	r3, r1, #1
 800bcee:	e7e7      	b.n	800bcc0 <_printf_float+0x1a0>
 800bcf0:	2900      	cmp	r1, #0
 800bcf2:	bfd4      	ite	le
 800bcf4:	f1c1 0202 	rsble	r2, r1, #2
 800bcf8:	2201      	movgt	r2, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	e7e0      	b.n	800bcc0 <_printf_float+0x1a0>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	055a      	lsls	r2, r3, #21
 800bd02:	d407      	bmi.n	800bd14 <_printf_float+0x1f4>
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	4642      	mov	r2, r8
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b8      	blx	r7
 800bd0e:	3001      	adds	r0, #1
 800bd10:	d12c      	bne.n	800bd6c <_printf_float+0x24c>
 800bd12:	e764      	b.n	800bbde <_printf_float+0xbe>
 800bd14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd18:	f240 80e0 	bls.w	800bedc <_printf_float+0x3bc>
 800bd1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd20:	2200      	movs	r2, #0
 800bd22:	2300      	movs	r3, #0
 800bd24:	f7f4 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d034      	beq.n	800bd96 <_printf_float+0x276>
 800bd2c:	4a37      	ldr	r2, [pc, #220]	; (800be0c <_printf_float+0x2ec>)
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4631      	mov	r1, r6
 800bd32:	4628      	mov	r0, r5
 800bd34:	47b8      	blx	r7
 800bd36:	3001      	adds	r0, #1
 800bd38:	f43f af51 	beq.w	800bbde <_printf_float+0xbe>
 800bd3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd40:	429a      	cmp	r2, r3
 800bd42:	db02      	blt.n	800bd4a <_printf_float+0x22a>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	07d8      	lsls	r0, r3, #31
 800bd48:	d510      	bpl.n	800bd6c <_printf_float+0x24c>
 800bd4a:	ee18 3a10 	vmov	r3, s16
 800bd4e:	4652      	mov	r2, sl
 800bd50:	4631      	mov	r1, r6
 800bd52:	4628      	mov	r0, r5
 800bd54:	47b8      	blx	r7
 800bd56:	3001      	adds	r0, #1
 800bd58:	f43f af41 	beq.w	800bbde <_printf_float+0xbe>
 800bd5c:	f04f 0800 	mov.w	r8, #0
 800bd60:	f104 091a 	add.w	r9, r4, #26
 800bd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd66:	3b01      	subs	r3, #1
 800bd68:	4543      	cmp	r3, r8
 800bd6a:	dc09      	bgt.n	800bd80 <_printf_float+0x260>
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	079b      	lsls	r3, r3, #30
 800bd70:	f100 8107 	bmi.w	800bf82 <_printf_float+0x462>
 800bd74:	68e0      	ldr	r0, [r4, #12]
 800bd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd78:	4298      	cmp	r0, r3
 800bd7a:	bfb8      	it	lt
 800bd7c:	4618      	movlt	r0, r3
 800bd7e:	e730      	b.n	800bbe2 <_printf_float+0xc2>
 800bd80:	2301      	movs	r3, #1
 800bd82:	464a      	mov	r2, r9
 800bd84:	4631      	mov	r1, r6
 800bd86:	4628      	mov	r0, r5
 800bd88:	47b8      	blx	r7
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	f43f af27 	beq.w	800bbde <_printf_float+0xbe>
 800bd90:	f108 0801 	add.w	r8, r8, #1
 800bd94:	e7e6      	b.n	800bd64 <_printf_float+0x244>
 800bd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	dc39      	bgt.n	800be10 <_printf_float+0x2f0>
 800bd9c:	4a1b      	ldr	r2, [pc, #108]	; (800be0c <_printf_float+0x2ec>)
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4631      	mov	r1, r6
 800bda2:	4628      	mov	r0, r5
 800bda4:	47b8      	blx	r7
 800bda6:	3001      	adds	r0, #1
 800bda8:	f43f af19 	beq.w	800bbde <_printf_float+0xbe>
 800bdac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	d102      	bne.n	800bdba <_printf_float+0x29a>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	07d9      	lsls	r1, r3, #31
 800bdb8:	d5d8      	bpl.n	800bd6c <_printf_float+0x24c>
 800bdba:	ee18 3a10 	vmov	r3, s16
 800bdbe:	4652      	mov	r2, sl
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	47b8      	blx	r7
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	f43f af09 	beq.w	800bbde <_printf_float+0xbe>
 800bdcc:	f04f 0900 	mov.w	r9, #0
 800bdd0:	f104 0a1a 	add.w	sl, r4, #26
 800bdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd6:	425b      	negs	r3, r3
 800bdd8:	454b      	cmp	r3, r9
 800bdda:	dc01      	bgt.n	800bde0 <_printf_float+0x2c0>
 800bddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdde:	e792      	b.n	800bd06 <_printf_float+0x1e6>
 800bde0:	2301      	movs	r3, #1
 800bde2:	4652      	mov	r2, sl
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	f43f aef7 	beq.w	800bbde <_printf_float+0xbe>
 800bdf0:	f109 0901 	add.w	r9, r9, #1
 800bdf4:	e7ee      	b.n	800bdd4 <_printf_float+0x2b4>
 800bdf6:	bf00      	nop
 800bdf8:	7fefffff 	.word	0x7fefffff
 800bdfc:	0800e99c 	.word	0x0800e99c
 800be00:	0800e9a0 	.word	0x0800e9a0
 800be04:	0800e9a4 	.word	0x0800e9a4
 800be08:	0800e9a8 	.word	0x0800e9a8
 800be0c:	0800e9ac 	.word	0x0800e9ac
 800be10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be14:	429a      	cmp	r2, r3
 800be16:	bfa8      	it	ge
 800be18:	461a      	movge	r2, r3
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	4691      	mov	r9, r2
 800be1e:	dc37      	bgt.n	800be90 <_printf_float+0x370>
 800be20:	f04f 0b00 	mov.w	fp, #0
 800be24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be28:	f104 021a 	add.w	r2, r4, #26
 800be2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be2e:	9305      	str	r3, [sp, #20]
 800be30:	eba3 0309 	sub.w	r3, r3, r9
 800be34:	455b      	cmp	r3, fp
 800be36:	dc33      	bgt.n	800bea0 <_printf_float+0x380>
 800be38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be3c:	429a      	cmp	r2, r3
 800be3e:	db3b      	blt.n	800beb8 <_printf_float+0x398>
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	07da      	lsls	r2, r3, #31
 800be44:	d438      	bmi.n	800beb8 <_printf_float+0x398>
 800be46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be4a:	eba2 0903 	sub.w	r9, r2, r3
 800be4e:	9b05      	ldr	r3, [sp, #20]
 800be50:	1ad2      	subs	r2, r2, r3
 800be52:	4591      	cmp	r9, r2
 800be54:	bfa8      	it	ge
 800be56:	4691      	movge	r9, r2
 800be58:	f1b9 0f00 	cmp.w	r9, #0
 800be5c:	dc35      	bgt.n	800beca <_printf_float+0x3aa>
 800be5e:	f04f 0800 	mov.w	r8, #0
 800be62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be66:	f104 0a1a 	add.w	sl, r4, #26
 800be6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be6e:	1a9b      	subs	r3, r3, r2
 800be70:	eba3 0309 	sub.w	r3, r3, r9
 800be74:	4543      	cmp	r3, r8
 800be76:	f77f af79 	ble.w	800bd6c <_printf_float+0x24c>
 800be7a:	2301      	movs	r3, #1
 800be7c:	4652      	mov	r2, sl
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	f43f aeaa 	beq.w	800bbde <_printf_float+0xbe>
 800be8a:	f108 0801 	add.w	r8, r8, #1
 800be8e:	e7ec      	b.n	800be6a <_printf_float+0x34a>
 800be90:	4613      	mov	r3, r2
 800be92:	4631      	mov	r1, r6
 800be94:	4642      	mov	r2, r8
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	d1c0      	bne.n	800be20 <_printf_float+0x300>
 800be9e:	e69e      	b.n	800bbde <_printf_float+0xbe>
 800bea0:	2301      	movs	r3, #1
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	9205      	str	r2, [sp, #20]
 800bea8:	47b8      	blx	r7
 800beaa:	3001      	adds	r0, #1
 800beac:	f43f ae97 	beq.w	800bbde <_printf_float+0xbe>
 800beb0:	9a05      	ldr	r2, [sp, #20]
 800beb2:	f10b 0b01 	add.w	fp, fp, #1
 800beb6:	e7b9      	b.n	800be2c <_printf_float+0x30c>
 800beb8:	ee18 3a10 	vmov	r3, s16
 800bebc:	4652      	mov	r2, sl
 800bebe:	4631      	mov	r1, r6
 800bec0:	4628      	mov	r0, r5
 800bec2:	47b8      	blx	r7
 800bec4:	3001      	adds	r0, #1
 800bec6:	d1be      	bne.n	800be46 <_printf_float+0x326>
 800bec8:	e689      	b.n	800bbde <_printf_float+0xbe>
 800beca:	9a05      	ldr	r2, [sp, #20]
 800becc:	464b      	mov	r3, r9
 800bece:	4442      	add	r2, r8
 800bed0:	4631      	mov	r1, r6
 800bed2:	4628      	mov	r0, r5
 800bed4:	47b8      	blx	r7
 800bed6:	3001      	adds	r0, #1
 800bed8:	d1c1      	bne.n	800be5e <_printf_float+0x33e>
 800beda:	e680      	b.n	800bbde <_printf_float+0xbe>
 800bedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bede:	2a01      	cmp	r2, #1
 800bee0:	dc01      	bgt.n	800bee6 <_printf_float+0x3c6>
 800bee2:	07db      	lsls	r3, r3, #31
 800bee4:	d53a      	bpl.n	800bf5c <_printf_float+0x43c>
 800bee6:	2301      	movs	r3, #1
 800bee8:	4642      	mov	r2, r8
 800beea:	4631      	mov	r1, r6
 800beec:	4628      	mov	r0, r5
 800beee:	47b8      	blx	r7
 800bef0:	3001      	adds	r0, #1
 800bef2:	f43f ae74 	beq.w	800bbde <_printf_float+0xbe>
 800bef6:	ee18 3a10 	vmov	r3, s16
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f ae6b 	beq.w	800bbde <_printf_float+0xbe>
 800bf08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bf14:	f7f4 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf18:	b9d8      	cbnz	r0, 800bf52 <_printf_float+0x432>
 800bf1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bf1e:	f108 0201 	add.w	r2, r8, #1
 800bf22:	4631      	mov	r1, r6
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b8      	blx	r7
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d10e      	bne.n	800bf4a <_printf_float+0x42a>
 800bf2c:	e657      	b.n	800bbde <_printf_float+0xbe>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4652      	mov	r2, sl
 800bf32:	4631      	mov	r1, r6
 800bf34:	4628      	mov	r0, r5
 800bf36:	47b8      	blx	r7
 800bf38:	3001      	adds	r0, #1
 800bf3a:	f43f ae50 	beq.w	800bbde <_printf_float+0xbe>
 800bf3e:	f108 0801 	add.w	r8, r8, #1
 800bf42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf44:	3b01      	subs	r3, #1
 800bf46:	4543      	cmp	r3, r8
 800bf48:	dcf1      	bgt.n	800bf2e <_printf_float+0x40e>
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf50:	e6da      	b.n	800bd08 <_printf_float+0x1e8>
 800bf52:	f04f 0800 	mov.w	r8, #0
 800bf56:	f104 0a1a 	add.w	sl, r4, #26
 800bf5a:	e7f2      	b.n	800bf42 <_printf_float+0x422>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	4642      	mov	r2, r8
 800bf60:	e7df      	b.n	800bf22 <_printf_float+0x402>
 800bf62:	2301      	movs	r3, #1
 800bf64:	464a      	mov	r2, r9
 800bf66:	4631      	mov	r1, r6
 800bf68:	4628      	mov	r0, r5
 800bf6a:	47b8      	blx	r7
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	f43f ae36 	beq.w	800bbde <_printf_float+0xbe>
 800bf72:	f108 0801 	add.w	r8, r8, #1
 800bf76:	68e3      	ldr	r3, [r4, #12]
 800bf78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf7a:	1a5b      	subs	r3, r3, r1
 800bf7c:	4543      	cmp	r3, r8
 800bf7e:	dcf0      	bgt.n	800bf62 <_printf_float+0x442>
 800bf80:	e6f8      	b.n	800bd74 <_printf_float+0x254>
 800bf82:	f04f 0800 	mov.w	r8, #0
 800bf86:	f104 0919 	add.w	r9, r4, #25
 800bf8a:	e7f4      	b.n	800bf76 <_printf_float+0x456>

0800bf8c <_printf_common>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	4616      	mov	r6, r2
 800bf92:	4699      	mov	r9, r3
 800bf94:	688a      	ldr	r2, [r1, #8]
 800bf96:	690b      	ldr	r3, [r1, #16]
 800bf98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	bfb8      	it	lt
 800bfa0:	4613      	movlt	r3, r2
 800bfa2:	6033      	str	r3, [r6, #0]
 800bfa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfa8:	4607      	mov	r7, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	b10a      	cbz	r2, 800bfb2 <_printf_common+0x26>
 800bfae:	3301      	adds	r3, #1
 800bfb0:	6033      	str	r3, [r6, #0]
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	0699      	lsls	r1, r3, #26
 800bfb6:	bf42      	ittt	mi
 800bfb8:	6833      	ldrmi	r3, [r6, #0]
 800bfba:	3302      	addmi	r3, #2
 800bfbc:	6033      	strmi	r3, [r6, #0]
 800bfbe:	6825      	ldr	r5, [r4, #0]
 800bfc0:	f015 0506 	ands.w	r5, r5, #6
 800bfc4:	d106      	bne.n	800bfd4 <_printf_common+0x48>
 800bfc6:	f104 0a19 	add.w	sl, r4, #25
 800bfca:	68e3      	ldr	r3, [r4, #12]
 800bfcc:	6832      	ldr	r2, [r6, #0]
 800bfce:	1a9b      	subs	r3, r3, r2
 800bfd0:	42ab      	cmp	r3, r5
 800bfd2:	dc26      	bgt.n	800c022 <_printf_common+0x96>
 800bfd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfd8:	1e13      	subs	r3, r2, #0
 800bfda:	6822      	ldr	r2, [r4, #0]
 800bfdc:	bf18      	it	ne
 800bfde:	2301      	movne	r3, #1
 800bfe0:	0692      	lsls	r2, r2, #26
 800bfe2:	d42b      	bmi.n	800c03c <_printf_common+0xb0>
 800bfe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfe8:	4649      	mov	r1, r9
 800bfea:	4638      	mov	r0, r7
 800bfec:	47c0      	blx	r8
 800bfee:	3001      	adds	r0, #1
 800bff0:	d01e      	beq.n	800c030 <_printf_common+0xa4>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	6922      	ldr	r2, [r4, #16]
 800bff6:	f003 0306 	and.w	r3, r3, #6
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	bf02      	ittt	eq
 800bffe:	68e5      	ldreq	r5, [r4, #12]
 800c000:	6833      	ldreq	r3, [r6, #0]
 800c002:	1aed      	subeq	r5, r5, r3
 800c004:	68a3      	ldr	r3, [r4, #8]
 800c006:	bf0c      	ite	eq
 800c008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c00c:	2500      	movne	r5, #0
 800c00e:	4293      	cmp	r3, r2
 800c010:	bfc4      	itt	gt
 800c012:	1a9b      	subgt	r3, r3, r2
 800c014:	18ed      	addgt	r5, r5, r3
 800c016:	2600      	movs	r6, #0
 800c018:	341a      	adds	r4, #26
 800c01a:	42b5      	cmp	r5, r6
 800c01c:	d11a      	bne.n	800c054 <_printf_common+0xc8>
 800c01e:	2000      	movs	r0, #0
 800c020:	e008      	b.n	800c034 <_printf_common+0xa8>
 800c022:	2301      	movs	r3, #1
 800c024:	4652      	mov	r2, sl
 800c026:	4649      	mov	r1, r9
 800c028:	4638      	mov	r0, r7
 800c02a:	47c0      	blx	r8
 800c02c:	3001      	adds	r0, #1
 800c02e:	d103      	bne.n	800c038 <_printf_common+0xac>
 800c030:	f04f 30ff 	mov.w	r0, #4294967295
 800c034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c038:	3501      	adds	r5, #1
 800c03a:	e7c6      	b.n	800bfca <_printf_common+0x3e>
 800c03c:	18e1      	adds	r1, r4, r3
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	2030      	movs	r0, #48	; 0x30
 800c042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c046:	4422      	add	r2, r4
 800c048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c04c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c050:	3302      	adds	r3, #2
 800c052:	e7c7      	b.n	800bfe4 <_printf_common+0x58>
 800c054:	2301      	movs	r3, #1
 800c056:	4622      	mov	r2, r4
 800c058:	4649      	mov	r1, r9
 800c05a:	4638      	mov	r0, r7
 800c05c:	47c0      	blx	r8
 800c05e:	3001      	adds	r0, #1
 800c060:	d0e6      	beq.n	800c030 <_printf_common+0xa4>
 800c062:	3601      	adds	r6, #1
 800c064:	e7d9      	b.n	800c01a <_printf_common+0x8e>
	...

0800c068 <_printf_i>:
 800c068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c06c:	7e0f      	ldrb	r7, [r1, #24]
 800c06e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c070:	2f78      	cmp	r7, #120	; 0x78
 800c072:	4691      	mov	r9, r2
 800c074:	4680      	mov	r8, r0
 800c076:	460c      	mov	r4, r1
 800c078:	469a      	mov	sl, r3
 800c07a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c07e:	d807      	bhi.n	800c090 <_printf_i+0x28>
 800c080:	2f62      	cmp	r7, #98	; 0x62
 800c082:	d80a      	bhi.n	800c09a <_printf_i+0x32>
 800c084:	2f00      	cmp	r7, #0
 800c086:	f000 80d4 	beq.w	800c232 <_printf_i+0x1ca>
 800c08a:	2f58      	cmp	r7, #88	; 0x58
 800c08c:	f000 80c0 	beq.w	800c210 <_printf_i+0x1a8>
 800c090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c098:	e03a      	b.n	800c110 <_printf_i+0xa8>
 800c09a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c09e:	2b15      	cmp	r3, #21
 800c0a0:	d8f6      	bhi.n	800c090 <_printf_i+0x28>
 800c0a2:	a101      	add	r1, pc, #4	; (adr r1, 800c0a8 <_printf_i+0x40>)
 800c0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0a8:	0800c101 	.word	0x0800c101
 800c0ac:	0800c115 	.word	0x0800c115
 800c0b0:	0800c091 	.word	0x0800c091
 800c0b4:	0800c091 	.word	0x0800c091
 800c0b8:	0800c091 	.word	0x0800c091
 800c0bc:	0800c091 	.word	0x0800c091
 800c0c0:	0800c115 	.word	0x0800c115
 800c0c4:	0800c091 	.word	0x0800c091
 800c0c8:	0800c091 	.word	0x0800c091
 800c0cc:	0800c091 	.word	0x0800c091
 800c0d0:	0800c091 	.word	0x0800c091
 800c0d4:	0800c219 	.word	0x0800c219
 800c0d8:	0800c141 	.word	0x0800c141
 800c0dc:	0800c1d3 	.word	0x0800c1d3
 800c0e0:	0800c091 	.word	0x0800c091
 800c0e4:	0800c091 	.word	0x0800c091
 800c0e8:	0800c23b 	.word	0x0800c23b
 800c0ec:	0800c091 	.word	0x0800c091
 800c0f0:	0800c141 	.word	0x0800c141
 800c0f4:	0800c091 	.word	0x0800c091
 800c0f8:	0800c091 	.word	0x0800c091
 800c0fc:	0800c1db 	.word	0x0800c1db
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	1d1a      	adds	r2, r3, #4
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	602a      	str	r2, [r5, #0]
 800c108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c110:	2301      	movs	r3, #1
 800c112:	e09f      	b.n	800c254 <_printf_i+0x1ec>
 800c114:	6820      	ldr	r0, [r4, #0]
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	0607      	lsls	r7, r0, #24
 800c11a:	f103 0104 	add.w	r1, r3, #4
 800c11e:	6029      	str	r1, [r5, #0]
 800c120:	d501      	bpl.n	800c126 <_printf_i+0xbe>
 800c122:	681e      	ldr	r6, [r3, #0]
 800c124:	e003      	b.n	800c12e <_printf_i+0xc6>
 800c126:	0646      	lsls	r6, r0, #25
 800c128:	d5fb      	bpl.n	800c122 <_printf_i+0xba>
 800c12a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c12e:	2e00      	cmp	r6, #0
 800c130:	da03      	bge.n	800c13a <_printf_i+0xd2>
 800c132:	232d      	movs	r3, #45	; 0x2d
 800c134:	4276      	negs	r6, r6
 800c136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c13a:	485a      	ldr	r0, [pc, #360]	; (800c2a4 <_printf_i+0x23c>)
 800c13c:	230a      	movs	r3, #10
 800c13e:	e012      	b.n	800c166 <_printf_i+0xfe>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	6820      	ldr	r0, [r4, #0]
 800c144:	1d19      	adds	r1, r3, #4
 800c146:	6029      	str	r1, [r5, #0]
 800c148:	0605      	lsls	r5, r0, #24
 800c14a:	d501      	bpl.n	800c150 <_printf_i+0xe8>
 800c14c:	681e      	ldr	r6, [r3, #0]
 800c14e:	e002      	b.n	800c156 <_printf_i+0xee>
 800c150:	0641      	lsls	r1, r0, #25
 800c152:	d5fb      	bpl.n	800c14c <_printf_i+0xe4>
 800c154:	881e      	ldrh	r6, [r3, #0]
 800c156:	4853      	ldr	r0, [pc, #332]	; (800c2a4 <_printf_i+0x23c>)
 800c158:	2f6f      	cmp	r7, #111	; 0x6f
 800c15a:	bf0c      	ite	eq
 800c15c:	2308      	moveq	r3, #8
 800c15e:	230a      	movne	r3, #10
 800c160:	2100      	movs	r1, #0
 800c162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c166:	6865      	ldr	r5, [r4, #4]
 800c168:	60a5      	str	r5, [r4, #8]
 800c16a:	2d00      	cmp	r5, #0
 800c16c:	bfa2      	ittt	ge
 800c16e:	6821      	ldrge	r1, [r4, #0]
 800c170:	f021 0104 	bicge.w	r1, r1, #4
 800c174:	6021      	strge	r1, [r4, #0]
 800c176:	b90e      	cbnz	r6, 800c17c <_printf_i+0x114>
 800c178:	2d00      	cmp	r5, #0
 800c17a:	d04b      	beq.n	800c214 <_printf_i+0x1ac>
 800c17c:	4615      	mov	r5, r2
 800c17e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c182:	fb03 6711 	mls	r7, r3, r1, r6
 800c186:	5dc7      	ldrb	r7, [r0, r7]
 800c188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c18c:	4637      	mov	r7, r6
 800c18e:	42bb      	cmp	r3, r7
 800c190:	460e      	mov	r6, r1
 800c192:	d9f4      	bls.n	800c17e <_printf_i+0x116>
 800c194:	2b08      	cmp	r3, #8
 800c196:	d10b      	bne.n	800c1b0 <_printf_i+0x148>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	07de      	lsls	r6, r3, #31
 800c19c:	d508      	bpl.n	800c1b0 <_printf_i+0x148>
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	6861      	ldr	r1, [r4, #4]
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	bfde      	ittt	le
 800c1a6:	2330      	movle	r3, #48	; 0x30
 800c1a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1b0:	1b52      	subs	r2, r2, r5
 800c1b2:	6122      	str	r2, [r4, #16]
 800c1b4:	f8cd a000 	str.w	sl, [sp]
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	aa03      	add	r2, sp, #12
 800c1bc:	4621      	mov	r1, r4
 800c1be:	4640      	mov	r0, r8
 800c1c0:	f7ff fee4 	bl	800bf8c <_printf_common>
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d14a      	bne.n	800c25e <_printf_i+0x1f6>
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1cc:	b004      	add	sp, #16
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	f043 0320 	orr.w	r3, r3, #32
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	4833      	ldr	r0, [pc, #204]	; (800c2a8 <_printf_i+0x240>)
 800c1dc:	2778      	movs	r7, #120	; 0x78
 800c1de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	6829      	ldr	r1, [r5, #0]
 800c1e6:	061f      	lsls	r7, r3, #24
 800c1e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1ec:	d402      	bmi.n	800c1f4 <_printf_i+0x18c>
 800c1ee:	065f      	lsls	r7, r3, #25
 800c1f0:	bf48      	it	mi
 800c1f2:	b2b6      	uxthmi	r6, r6
 800c1f4:	07df      	lsls	r7, r3, #31
 800c1f6:	bf48      	it	mi
 800c1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800c1fc:	6029      	str	r1, [r5, #0]
 800c1fe:	bf48      	it	mi
 800c200:	6023      	strmi	r3, [r4, #0]
 800c202:	b91e      	cbnz	r6, 800c20c <_printf_i+0x1a4>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	f023 0320 	bic.w	r3, r3, #32
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	2310      	movs	r3, #16
 800c20e:	e7a7      	b.n	800c160 <_printf_i+0xf8>
 800c210:	4824      	ldr	r0, [pc, #144]	; (800c2a4 <_printf_i+0x23c>)
 800c212:	e7e4      	b.n	800c1de <_printf_i+0x176>
 800c214:	4615      	mov	r5, r2
 800c216:	e7bd      	b.n	800c194 <_printf_i+0x12c>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	6826      	ldr	r6, [r4, #0]
 800c21c:	6961      	ldr	r1, [r4, #20]
 800c21e:	1d18      	adds	r0, r3, #4
 800c220:	6028      	str	r0, [r5, #0]
 800c222:	0635      	lsls	r5, r6, #24
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	d501      	bpl.n	800c22c <_printf_i+0x1c4>
 800c228:	6019      	str	r1, [r3, #0]
 800c22a:	e002      	b.n	800c232 <_printf_i+0x1ca>
 800c22c:	0670      	lsls	r0, r6, #25
 800c22e:	d5fb      	bpl.n	800c228 <_printf_i+0x1c0>
 800c230:	8019      	strh	r1, [r3, #0]
 800c232:	2300      	movs	r3, #0
 800c234:	6123      	str	r3, [r4, #16]
 800c236:	4615      	mov	r5, r2
 800c238:	e7bc      	b.n	800c1b4 <_printf_i+0x14c>
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	1d1a      	adds	r2, r3, #4
 800c23e:	602a      	str	r2, [r5, #0]
 800c240:	681d      	ldr	r5, [r3, #0]
 800c242:	6862      	ldr	r2, [r4, #4]
 800c244:	2100      	movs	r1, #0
 800c246:	4628      	mov	r0, r5
 800c248:	f7f3 ffc2 	bl	80001d0 <memchr>
 800c24c:	b108      	cbz	r0, 800c252 <_printf_i+0x1ea>
 800c24e:	1b40      	subs	r0, r0, r5
 800c250:	6060      	str	r0, [r4, #4]
 800c252:	6863      	ldr	r3, [r4, #4]
 800c254:	6123      	str	r3, [r4, #16]
 800c256:	2300      	movs	r3, #0
 800c258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c25c:	e7aa      	b.n	800c1b4 <_printf_i+0x14c>
 800c25e:	6923      	ldr	r3, [r4, #16]
 800c260:	462a      	mov	r2, r5
 800c262:	4649      	mov	r1, r9
 800c264:	4640      	mov	r0, r8
 800c266:	47d0      	blx	sl
 800c268:	3001      	adds	r0, #1
 800c26a:	d0ad      	beq.n	800c1c8 <_printf_i+0x160>
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	079b      	lsls	r3, r3, #30
 800c270:	d413      	bmi.n	800c29a <_printf_i+0x232>
 800c272:	68e0      	ldr	r0, [r4, #12]
 800c274:	9b03      	ldr	r3, [sp, #12]
 800c276:	4298      	cmp	r0, r3
 800c278:	bfb8      	it	lt
 800c27a:	4618      	movlt	r0, r3
 800c27c:	e7a6      	b.n	800c1cc <_printf_i+0x164>
 800c27e:	2301      	movs	r3, #1
 800c280:	4632      	mov	r2, r6
 800c282:	4649      	mov	r1, r9
 800c284:	4640      	mov	r0, r8
 800c286:	47d0      	blx	sl
 800c288:	3001      	adds	r0, #1
 800c28a:	d09d      	beq.n	800c1c8 <_printf_i+0x160>
 800c28c:	3501      	adds	r5, #1
 800c28e:	68e3      	ldr	r3, [r4, #12]
 800c290:	9903      	ldr	r1, [sp, #12]
 800c292:	1a5b      	subs	r3, r3, r1
 800c294:	42ab      	cmp	r3, r5
 800c296:	dcf2      	bgt.n	800c27e <_printf_i+0x216>
 800c298:	e7eb      	b.n	800c272 <_printf_i+0x20a>
 800c29a:	2500      	movs	r5, #0
 800c29c:	f104 0619 	add.w	r6, r4, #25
 800c2a0:	e7f5      	b.n	800c28e <_printf_i+0x226>
 800c2a2:	bf00      	nop
 800c2a4:	0800e9ae 	.word	0x0800e9ae
 800c2a8:	0800e9bf 	.word	0x0800e9bf

0800c2ac <std>:
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2ba:	6083      	str	r3, [r0, #8]
 800c2bc:	8181      	strh	r1, [r0, #12]
 800c2be:	6643      	str	r3, [r0, #100]	; 0x64
 800c2c0:	81c2      	strh	r2, [r0, #14]
 800c2c2:	6183      	str	r3, [r0, #24]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	2208      	movs	r2, #8
 800c2c8:	305c      	adds	r0, #92	; 0x5c
 800c2ca:	f000 f914 	bl	800c4f6 <memset>
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <std+0x58>)
 800c2d0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <std+0x5c>)
 800c2d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <std+0x60>)
 800c2d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2da:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <std+0x64>)
 800c2dc:	6323      	str	r3, [r4, #48]	; 0x30
 800c2de:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <std+0x68>)
 800c2e0:	6224      	str	r4, [r4, #32]
 800c2e2:	429c      	cmp	r4, r3
 800c2e4:	d006      	beq.n	800c2f4 <std+0x48>
 800c2e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c2ea:	4294      	cmp	r4, r2
 800c2ec:	d002      	beq.n	800c2f4 <std+0x48>
 800c2ee:	33d0      	adds	r3, #208	; 0xd0
 800c2f0:	429c      	cmp	r4, r3
 800c2f2:	d105      	bne.n	800c300 <std+0x54>
 800c2f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fc:	f000 b9ce 	b.w	800c69c <__retarget_lock_init_recursive>
 800c300:	bd10      	pop	{r4, pc}
 800c302:	bf00      	nop
 800c304:	0800c471 	.word	0x0800c471
 800c308:	0800c493 	.word	0x0800c493
 800c30c:	0800c4cb 	.word	0x0800c4cb
 800c310:	0800c4ef 	.word	0x0800c4ef
 800c314:	200069c8 	.word	0x200069c8

0800c318 <stdio_exit_handler>:
 800c318:	4a02      	ldr	r2, [pc, #8]	; (800c324 <stdio_exit_handler+0xc>)
 800c31a:	4903      	ldr	r1, [pc, #12]	; (800c328 <stdio_exit_handler+0x10>)
 800c31c:	4803      	ldr	r0, [pc, #12]	; (800c32c <stdio_exit_handler+0x14>)
 800c31e:	f000 b869 	b.w	800c3f4 <_fwalk_sglue>
 800c322:	bf00      	nop
 800c324:	20000100 	.word	0x20000100
 800c328:	0800e069 	.word	0x0800e069
 800c32c:	2000010c 	.word	0x2000010c

0800c330 <cleanup_stdio>:
 800c330:	6841      	ldr	r1, [r0, #4]
 800c332:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <cleanup_stdio+0x34>)
 800c334:	4299      	cmp	r1, r3
 800c336:	b510      	push	{r4, lr}
 800c338:	4604      	mov	r4, r0
 800c33a:	d001      	beq.n	800c340 <cleanup_stdio+0x10>
 800c33c:	f001 fe94 	bl	800e068 <_fflush_r>
 800c340:	68a1      	ldr	r1, [r4, #8]
 800c342:	4b09      	ldr	r3, [pc, #36]	; (800c368 <cleanup_stdio+0x38>)
 800c344:	4299      	cmp	r1, r3
 800c346:	d002      	beq.n	800c34e <cleanup_stdio+0x1e>
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 fe8d 	bl	800e068 <_fflush_r>
 800c34e:	68e1      	ldr	r1, [r4, #12]
 800c350:	4b06      	ldr	r3, [pc, #24]	; (800c36c <cleanup_stdio+0x3c>)
 800c352:	4299      	cmp	r1, r3
 800c354:	d004      	beq.n	800c360 <cleanup_stdio+0x30>
 800c356:	4620      	mov	r0, r4
 800c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c35c:	f001 be84 	b.w	800e068 <_fflush_r>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	bf00      	nop
 800c364:	200069c8 	.word	0x200069c8
 800c368:	20006a30 	.word	0x20006a30
 800c36c:	20006a98 	.word	0x20006a98

0800c370 <global_stdio_init.part.0>:
 800c370:	b510      	push	{r4, lr}
 800c372:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <global_stdio_init.part.0+0x30>)
 800c374:	4c0b      	ldr	r4, [pc, #44]	; (800c3a4 <global_stdio_init.part.0+0x34>)
 800c376:	4a0c      	ldr	r2, [pc, #48]	; (800c3a8 <global_stdio_init.part.0+0x38>)
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	4620      	mov	r0, r4
 800c37c:	2200      	movs	r2, #0
 800c37e:	2104      	movs	r1, #4
 800c380:	f7ff ff94 	bl	800c2ac <std>
 800c384:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c388:	2201      	movs	r2, #1
 800c38a:	2109      	movs	r1, #9
 800c38c:	f7ff ff8e 	bl	800c2ac <std>
 800c390:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c394:	2202      	movs	r2, #2
 800c396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c39a:	2112      	movs	r1, #18
 800c39c:	f7ff bf86 	b.w	800c2ac <std>
 800c3a0:	20006b00 	.word	0x20006b00
 800c3a4:	200069c8 	.word	0x200069c8
 800c3a8:	0800c319 	.word	0x0800c319

0800c3ac <__sfp_lock_acquire>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	; (800c3b4 <__sfp_lock_acquire+0x8>)
 800c3ae:	f000 b976 	b.w	800c69e <__retarget_lock_acquire_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	20006b09 	.word	0x20006b09

0800c3b8 <__sfp_lock_release>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	; (800c3c0 <__sfp_lock_release+0x8>)
 800c3ba:	f000 b971 	b.w	800c6a0 <__retarget_lock_release_recursive>
 800c3be:	bf00      	nop
 800c3c0:	20006b09 	.word	0x20006b09

0800c3c4 <__sinit>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	f7ff fff0 	bl	800c3ac <__sfp_lock_acquire>
 800c3cc:	6a23      	ldr	r3, [r4, #32]
 800c3ce:	b11b      	cbz	r3, 800c3d8 <__sinit+0x14>
 800c3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d4:	f7ff bff0 	b.w	800c3b8 <__sfp_lock_release>
 800c3d8:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <__sinit+0x28>)
 800c3da:	6223      	str	r3, [r4, #32]
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <__sinit+0x2c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1f5      	bne.n	800c3d0 <__sinit+0xc>
 800c3e4:	f7ff ffc4 	bl	800c370 <global_stdio_init.part.0>
 800c3e8:	e7f2      	b.n	800c3d0 <__sinit+0xc>
 800c3ea:	bf00      	nop
 800c3ec:	0800c331 	.word	0x0800c331
 800c3f0:	20006b00 	.word	0x20006b00

0800c3f4 <_fwalk_sglue>:
 800c3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	4688      	mov	r8, r1
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	2600      	movs	r6, #0
 800c400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c404:	f1b9 0901 	subs.w	r9, r9, #1
 800c408:	d505      	bpl.n	800c416 <_fwalk_sglue+0x22>
 800c40a:	6824      	ldr	r4, [r4, #0]
 800c40c:	2c00      	cmp	r4, #0
 800c40e:	d1f7      	bne.n	800c400 <_fwalk_sglue+0xc>
 800c410:	4630      	mov	r0, r6
 800c412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d907      	bls.n	800c42c <_fwalk_sglue+0x38>
 800c41c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c420:	3301      	adds	r3, #1
 800c422:	d003      	beq.n	800c42c <_fwalk_sglue+0x38>
 800c424:	4629      	mov	r1, r5
 800c426:	4638      	mov	r0, r7
 800c428:	47c0      	blx	r8
 800c42a:	4306      	orrs	r6, r0
 800c42c:	3568      	adds	r5, #104	; 0x68
 800c42e:	e7e9      	b.n	800c404 <_fwalk_sglue+0x10>

0800c430 <siprintf>:
 800c430:	b40e      	push	{r1, r2, r3}
 800c432:	b500      	push	{lr}
 800c434:	b09c      	sub	sp, #112	; 0x70
 800c436:	ab1d      	add	r3, sp, #116	; 0x74
 800c438:	9002      	str	r0, [sp, #8]
 800c43a:	9006      	str	r0, [sp, #24]
 800c43c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c440:	4809      	ldr	r0, [pc, #36]	; (800c468 <siprintf+0x38>)
 800c442:	9107      	str	r1, [sp, #28]
 800c444:	9104      	str	r1, [sp, #16]
 800c446:	4909      	ldr	r1, [pc, #36]	; (800c46c <siprintf+0x3c>)
 800c448:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44c:	9105      	str	r1, [sp, #20]
 800c44e:	6800      	ldr	r0, [r0, #0]
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	a902      	add	r1, sp, #8
 800c454:	f001 fc84 	bl	800dd60 <_svfiprintf_r>
 800c458:	9b02      	ldr	r3, [sp, #8]
 800c45a:	2200      	movs	r2, #0
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	b01c      	add	sp, #112	; 0x70
 800c460:	f85d eb04 	ldr.w	lr, [sp], #4
 800c464:	b003      	add	sp, #12
 800c466:	4770      	bx	lr
 800c468:	20000158 	.word	0x20000158
 800c46c:	ffff0208 	.word	0xffff0208

0800c470 <__sread>:
 800c470:	b510      	push	{r4, lr}
 800c472:	460c      	mov	r4, r1
 800c474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c478:	f000 f8c2 	bl	800c600 <_read_r>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	bfab      	itete	ge
 800c480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c482:	89a3      	ldrhlt	r3, [r4, #12]
 800c484:	181b      	addge	r3, r3, r0
 800c486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c48a:	bfac      	ite	ge
 800c48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c48e:	81a3      	strhlt	r3, [r4, #12]
 800c490:	bd10      	pop	{r4, pc}

0800c492 <__swrite>:
 800c492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c496:	461f      	mov	r7, r3
 800c498:	898b      	ldrh	r3, [r1, #12]
 800c49a:	05db      	lsls	r3, r3, #23
 800c49c:	4605      	mov	r5, r0
 800c49e:	460c      	mov	r4, r1
 800c4a0:	4616      	mov	r6, r2
 800c4a2:	d505      	bpl.n	800c4b0 <__swrite+0x1e>
 800c4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f000 f896 	bl	800c5dc <_lseek_r>
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	4632      	mov	r2, r6
 800c4be:	463b      	mov	r3, r7
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c6:	f000 b8ad 	b.w	800c624 <_write_r>

0800c4ca <__sseek>:
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d2:	f000 f883 	bl	800c5dc <_lseek_r>
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	bf15      	itete	ne
 800c4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4e6:	81a3      	strheq	r3, [r4, #12]
 800c4e8:	bf18      	it	ne
 800c4ea:	81a3      	strhne	r3, [r4, #12]
 800c4ec:	bd10      	pop	{r4, pc}

0800c4ee <__sclose>:
 800c4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f2:	f000 b80d 	b.w	800c510 <_close_r>

0800c4f6 <memset>:
 800c4f6:	4402      	add	r2, r0
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d100      	bne.n	800c500 <memset+0xa>
 800c4fe:	4770      	bx	lr
 800c500:	f803 1b01 	strb.w	r1, [r3], #1
 800c504:	e7f9      	b.n	800c4fa <memset+0x4>
	...

0800c508 <_localeconv_r>:
 800c508:	4800      	ldr	r0, [pc, #0]	; (800c50c <_localeconv_r+0x4>)
 800c50a:	4770      	bx	lr
 800c50c:	2000024c 	.word	0x2000024c

0800c510 <_close_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_close_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 f909 	bl	8001732 <_close>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_close_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_close_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20006b04 	.word	0x20006b04

0800c530 <_reclaim_reent>:
 800c530:	4b29      	ldr	r3, [pc, #164]	; (800c5d8 <_reclaim_reent+0xa8>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4283      	cmp	r3, r0
 800c536:	b570      	push	{r4, r5, r6, lr}
 800c538:	4604      	mov	r4, r0
 800c53a:	d04b      	beq.n	800c5d4 <_reclaim_reent+0xa4>
 800c53c:	69c3      	ldr	r3, [r0, #28]
 800c53e:	b143      	cbz	r3, 800c552 <_reclaim_reent+0x22>
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d144      	bne.n	800c5d0 <_reclaim_reent+0xa0>
 800c546:	69e3      	ldr	r3, [r4, #28]
 800c548:	6819      	ldr	r1, [r3, #0]
 800c54a:	b111      	cbz	r1, 800c552 <_reclaim_reent+0x22>
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 ff31 	bl	800d3b4 <_free_r>
 800c552:	6961      	ldr	r1, [r4, #20]
 800c554:	b111      	cbz	r1, 800c55c <_reclaim_reent+0x2c>
 800c556:	4620      	mov	r0, r4
 800c558:	f000 ff2c 	bl	800d3b4 <_free_r>
 800c55c:	69e1      	ldr	r1, [r4, #28]
 800c55e:	b111      	cbz	r1, 800c566 <_reclaim_reent+0x36>
 800c560:	4620      	mov	r0, r4
 800c562:	f000 ff27 	bl	800d3b4 <_free_r>
 800c566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c568:	b111      	cbz	r1, 800c570 <_reclaim_reent+0x40>
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 ff22 	bl	800d3b4 <_free_r>
 800c570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c572:	b111      	cbz	r1, 800c57a <_reclaim_reent+0x4a>
 800c574:	4620      	mov	r0, r4
 800c576:	f000 ff1d 	bl	800d3b4 <_free_r>
 800c57a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c57c:	b111      	cbz	r1, 800c584 <_reclaim_reent+0x54>
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 ff18 	bl	800d3b4 <_free_r>
 800c584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c586:	b111      	cbz	r1, 800c58e <_reclaim_reent+0x5e>
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 ff13 	bl	800d3b4 <_free_r>
 800c58e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c590:	b111      	cbz	r1, 800c598 <_reclaim_reent+0x68>
 800c592:	4620      	mov	r0, r4
 800c594:	f000 ff0e 	bl	800d3b4 <_free_r>
 800c598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c59a:	b111      	cbz	r1, 800c5a2 <_reclaim_reent+0x72>
 800c59c:	4620      	mov	r0, r4
 800c59e:	f000 ff09 	bl	800d3b4 <_free_r>
 800c5a2:	6a23      	ldr	r3, [r4, #32]
 800c5a4:	b1b3      	cbz	r3, 800c5d4 <_reclaim_reent+0xa4>
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5ac:	4718      	bx	r3
 800c5ae:	5949      	ldr	r1, [r1, r5]
 800c5b0:	b941      	cbnz	r1, 800c5c4 <_reclaim_reent+0x94>
 800c5b2:	3504      	adds	r5, #4
 800c5b4:	69e3      	ldr	r3, [r4, #28]
 800c5b6:	2d80      	cmp	r5, #128	; 0x80
 800c5b8:	68d9      	ldr	r1, [r3, #12]
 800c5ba:	d1f8      	bne.n	800c5ae <_reclaim_reent+0x7e>
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fef9 	bl	800d3b4 <_free_r>
 800c5c2:	e7c0      	b.n	800c546 <_reclaim_reent+0x16>
 800c5c4:	680e      	ldr	r6, [r1, #0]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 fef4 	bl	800d3b4 <_free_r>
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	e7ef      	b.n	800c5b0 <_reclaim_reent+0x80>
 800c5d0:	2500      	movs	r5, #0
 800c5d2:	e7ef      	b.n	800c5b4 <_reclaim_reent+0x84>
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000158 	.word	0x20000158

0800c5dc <_lseek_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_lseek_r+0x20>)
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f5 f8c8 	bl	8001780 <_lseek>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_lseek_r+0x1e>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_lseek_r+0x1e>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	20006b04 	.word	0x20006b04

0800c600 <_read_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d07      	ldr	r5, [pc, #28]	; (800c620 <_read_r+0x20>)
 800c604:	4604      	mov	r4, r0
 800c606:	4608      	mov	r0, r1
 800c608:	4611      	mov	r1, r2
 800c60a:	2200      	movs	r2, #0
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	f7f5 f856 	bl	80016c0 <_read>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_read_r+0x1e>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_read_r+0x1e>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	20006b04 	.word	0x20006b04

0800c624 <_write_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d07      	ldr	r5, [pc, #28]	; (800c644 <_write_r+0x20>)
 800c628:	4604      	mov	r4, r0
 800c62a:	4608      	mov	r0, r1
 800c62c:	4611      	mov	r1, r2
 800c62e:	2200      	movs	r2, #0
 800c630:	602a      	str	r2, [r5, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	f7f5 f861 	bl	80016fa <_write>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_write_r+0x1e>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_write_r+0x1e>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	20006b04 	.word	0x20006b04

0800c648 <__errno>:
 800c648:	4b01      	ldr	r3, [pc, #4]	; (800c650 <__errno+0x8>)
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	20000158 	.word	0x20000158

0800c654 <__libc_init_array>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4d0d      	ldr	r5, [pc, #52]	; (800c68c <__libc_init_array+0x38>)
 800c658:	4c0d      	ldr	r4, [pc, #52]	; (800c690 <__libc_init_array+0x3c>)
 800c65a:	1b64      	subs	r4, r4, r5
 800c65c:	10a4      	asrs	r4, r4, #2
 800c65e:	2600      	movs	r6, #0
 800c660:	42a6      	cmp	r6, r4
 800c662:	d109      	bne.n	800c678 <__libc_init_array+0x24>
 800c664:	4d0b      	ldr	r5, [pc, #44]	; (800c694 <__libc_init_array+0x40>)
 800c666:	4c0c      	ldr	r4, [pc, #48]	; (800c698 <__libc_init_array+0x44>)
 800c668:	f002 f894 	bl	800e794 <_init>
 800c66c:	1b64      	subs	r4, r4, r5
 800c66e:	10a4      	asrs	r4, r4, #2
 800c670:	2600      	movs	r6, #0
 800c672:	42a6      	cmp	r6, r4
 800c674:	d105      	bne.n	800c682 <__libc_init_array+0x2e>
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67c:	4798      	blx	r3
 800c67e:	3601      	adds	r6, #1
 800c680:	e7ee      	b.n	800c660 <__libc_init_array+0xc>
 800c682:	f855 3b04 	ldr.w	r3, [r5], #4
 800c686:	4798      	blx	r3
 800c688:	3601      	adds	r6, #1
 800c68a:	e7f2      	b.n	800c672 <__libc_init_array+0x1e>
 800c68c:	0800ed14 	.word	0x0800ed14
 800c690:	0800ed14 	.word	0x0800ed14
 800c694:	0800ed14 	.word	0x0800ed14
 800c698:	0800ed18 	.word	0x0800ed18

0800c69c <__retarget_lock_init_recursive>:
 800c69c:	4770      	bx	lr

0800c69e <__retarget_lock_acquire_recursive>:
 800c69e:	4770      	bx	lr

0800c6a0 <__retarget_lock_release_recursive>:
 800c6a0:	4770      	bx	lr

0800c6a2 <memcpy>:
 800c6a2:	440a      	add	r2, r1
 800c6a4:	4291      	cmp	r1, r2
 800c6a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6aa:	d100      	bne.n	800c6ae <memcpy+0xc>
 800c6ac:	4770      	bx	lr
 800c6ae:	b510      	push	{r4, lr}
 800c6b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6b8:	4291      	cmp	r1, r2
 800c6ba:	d1f9      	bne.n	800c6b0 <memcpy+0xe>
 800c6bc:	bd10      	pop	{r4, pc}

0800c6be <quorem>:
 800c6be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c2:	6903      	ldr	r3, [r0, #16]
 800c6c4:	690c      	ldr	r4, [r1, #16]
 800c6c6:	42a3      	cmp	r3, r4
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	db7e      	blt.n	800c7ca <quorem+0x10c>
 800c6cc:	3c01      	subs	r4, #1
 800c6ce:	f101 0814 	add.w	r8, r1, #20
 800c6d2:	f100 0514 	add.w	r5, r0, #20
 800c6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6f4:	d331      	bcc.n	800c75a <quorem+0x9c>
 800c6f6:	f04f 0e00 	mov.w	lr, #0
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	46ac      	mov	ip, r5
 800c6fe:	46f2      	mov	sl, lr
 800c700:	f850 2b04 	ldr.w	r2, [r0], #4
 800c704:	b293      	uxth	r3, r2
 800c706:	fb06 e303 	mla	r3, r6, r3, lr
 800c70a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c70e:	0c1a      	lsrs	r2, r3, #16
 800c710:	b29b      	uxth	r3, r3
 800c712:	ebaa 0303 	sub.w	r3, sl, r3
 800c716:	f8dc a000 	ldr.w	sl, [ip]
 800c71a:	fa13 f38a 	uxtah	r3, r3, sl
 800c71e:	fb06 220e 	mla	r2, r6, lr, r2
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	9b00      	ldr	r3, [sp, #0]
 800c726:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c72a:	b292      	uxth	r2, r2
 800c72c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c734:	f8bd 3000 	ldrh.w	r3, [sp]
 800c738:	4581      	cmp	r9, r0
 800c73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c73e:	f84c 3b04 	str.w	r3, [ip], #4
 800c742:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c746:	d2db      	bcs.n	800c700 <quorem+0x42>
 800c748:	f855 300b 	ldr.w	r3, [r5, fp]
 800c74c:	b92b      	cbnz	r3, 800c75a <quorem+0x9c>
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	3b04      	subs	r3, #4
 800c752:	429d      	cmp	r5, r3
 800c754:	461a      	mov	r2, r3
 800c756:	d32c      	bcc.n	800c7b2 <quorem+0xf4>
 800c758:	613c      	str	r4, [r7, #16]
 800c75a:	4638      	mov	r0, r7
 800c75c:	f001 f9a6 	bl	800daac <__mcmp>
 800c760:	2800      	cmp	r0, #0
 800c762:	db22      	blt.n	800c7aa <quorem+0xec>
 800c764:	3601      	adds	r6, #1
 800c766:	4629      	mov	r1, r5
 800c768:	2000      	movs	r0, #0
 800c76a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c76e:	f8d1 c000 	ldr.w	ip, [r1]
 800c772:	b293      	uxth	r3, r2
 800c774:	1ac3      	subs	r3, r0, r3
 800c776:	0c12      	lsrs	r2, r2, #16
 800c778:	fa13 f38c 	uxtah	r3, r3, ip
 800c77c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c784:	b29b      	uxth	r3, r3
 800c786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c78a:	45c1      	cmp	r9, r8
 800c78c:	f841 3b04 	str.w	r3, [r1], #4
 800c790:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c794:	d2e9      	bcs.n	800c76a <quorem+0xac>
 800c796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c79e:	b922      	cbnz	r2, 800c7aa <quorem+0xec>
 800c7a0:	3b04      	subs	r3, #4
 800c7a2:	429d      	cmp	r5, r3
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	d30a      	bcc.n	800c7be <quorem+0x100>
 800c7a8:	613c      	str	r4, [r7, #16]
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	b003      	add	sp, #12
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	6812      	ldr	r2, [r2, #0]
 800c7b4:	3b04      	subs	r3, #4
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	d1ce      	bne.n	800c758 <quorem+0x9a>
 800c7ba:	3c01      	subs	r4, #1
 800c7bc:	e7c9      	b.n	800c752 <quorem+0x94>
 800c7be:	6812      	ldr	r2, [r2, #0]
 800c7c0:	3b04      	subs	r3, #4
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	d1f0      	bne.n	800c7a8 <quorem+0xea>
 800c7c6:	3c01      	subs	r4, #1
 800c7c8:	e7eb      	b.n	800c7a2 <quorem+0xe4>
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e7ee      	b.n	800c7ac <quorem+0xee>
	...

0800c7d0 <_dtoa_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	ed2d 8b04 	vpush	{d8-d9}
 800c7d8:	69c5      	ldr	r5, [r0, #28]
 800c7da:	b093      	sub	sp, #76	; 0x4c
 800c7dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c7e0:	ec57 6b10 	vmov	r6, r7, d0
 800c7e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7e8:	9107      	str	r1, [sp, #28]
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	920a      	str	r2, [sp, #40]	; 0x28
 800c7ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c7f0:	b975      	cbnz	r5, 800c810 <_dtoa_r+0x40>
 800c7f2:	2010      	movs	r0, #16
 800c7f4:	f000 fe2a 	bl	800d44c <malloc>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	61e0      	str	r0, [r4, #28]
 800c7fc:	b920      	cbnz	r0, 800c808 <_dtoa_r+0x38>
 800c7fe:	4bae      	ldr	r3, [pc, #696]	; (800cab8 <_dtoa_r+0x2e8>)
 800c800:	21ef      	movs	r1, #239	; 0xef
 800c802:	48ae      	ldr	r0, [pc, #696]	; (800cabc <_dtoa_r+0x2ec>)
 800c804:	f001 fc82 	bl	800e10c <__assert_func>
 800c808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c80c:	6005      	str	r5, [r0, #0]
 800c80e:	60c5      	str	r5, [r0, #12]
 800c810:	69e3      	ldr	r3, [r4, #28]
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	b151      	cbz	r1, 800c82c <_dtoa_r+0x5c>
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	604a      	str	r2, [r1, #4]
 800c81a:	2301      	movs	r3, #1
 800c81c:	4093      	lsls	r3, r2
 800c81e:	608b      	str	r3, [r1, #8]
 800c820:	4620      	mov	r0, r4
 800c822:	f000 ff07 	bl	800d634 <_Bfree>
 800c826:	69e3      	ldr	r3, [r4, #28]
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	1e3b      	subs	r3, r7, #0
 800c82e:	bfbb      	ittet	lt
 800c830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c834:	9303      	strlt	r3, [sp, #12]
 800c836:	2300      	movge	r3, #0
 800c838:	2201      	movlt	r2, #1
 800c83a:	bfac      	ite	ge
 800c83c:	f8c8 3000 	strge.w	r3, [r8]
 800c840:	f8c8 2000 	strlt.w	r2, [r8]
 800c844:	4b9e      	ldr	r3, [pc, #632]	; (800cac0 <_dtoa_r+0x2f0>)
 800c846:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c84a:	ea33 0308 	bics.w	r3, r3, r8
 800c84e:	d11b      	bne.n	800c888 <_dtoa_r+0xb8>
 800c850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c852:	f242 730f 	movw	r3, #9999	; 0x270f
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c85c:	4333      	orrs	r3, r6
 800c85e:	f000 8593 	beq.w	800d388 <_dtoa_r+0xbb8>
 800c862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c864:	b963      	cbnz	r3, 800c880 <_dtoa_r+0xb0>
 800c866:	4b97      	ldr	r3, [pc, #604]	; (800cac4 <_dtoa_r+0x2f4>)
 800c868:	e027      	b.n	800c8ba <_dtoa_r+0xea>
 800c86a:	4b97      	ldr	r3, [pc, #604]	; (800cac8 <_dtoa_r+0x2f8>)
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	3308      	adds	r3, #8
 800c870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c872:	6013      	str	r3, [r2, #0]
 800c874:	9800      	ldr	r0, [sp, #0]
 800c876:	b013      	add	sp, #76	; 0x4c
 800c878:	ecbd 8b04 	vpop	{d8-d9}
 800c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c880:	4b90      	ldr	r3, [pc, #576]	; (800cac4 <_dtoa_r+0x2f4>)
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	3303      	adds	r3, #3
 800c886:	e7f3      	b.n	800c870 <_dtoa_r+0xa0>
 800c888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c88c:	2200      	movs	r2, #0
 800c88e:	ec51 0b17 	vmov	r0, r1, d7
 800c892:	eeb0 8a47 	vmov.f32	s16, s14
 800c896:	eef0 8a67 	vmov.f32	s17, s15
 800c89a:	2300      	movs	r3, #0
 800c89c:	f7f4 f914 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8a0:	4681      	mov	r9, r0
 800c8a2:	b160      	cbz	r0, 800c8be <_dtoa_r+0xee>
 800c8a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 8568 	beq.w	800d382 <_dtoa_r+0xbb2>
 800c8b2:	4b86      	ldr	r3, [pc, #536]	; (800cacc <_dtoa_r+0x2fc>)
 800c8b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	e7da      	b.n	800c874 <_dtoa_r+0xa4>
 800c8be:	aa10      	add	r2, sp, #64	; 0x40
 800c8c0:	a911      	add	r1, sp, #68	; 0x44
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c8c8:	eef0 0a68 	vmov.f32	s1, s17
 800c8cc:	f001 f994 	bl	800dbf8 <__d2b>
 800c8d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	d07f      	beq.n	800c9da <_dtoa_r+0x20a>
 800c8da:	ee18 3a90 	vmov	r3, s17
 800c8de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c8e6:	ec51 0b18 	vmov	r0, r1, d8
 800c8ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4b75      	ldr	r3, [pc, #468]	; (800cad0 <_dtoa_r+0x300>)
 800c8fc:	f7f3 fcc4 	bl	8000288 <__aeabi_dsub>
 800c900:	a367      	add	r3, pc, #412	; (adr r3, 800caa0 <_dtoa_r+0x2d0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	a367      	add	r3, pc, #412	; (adr r3, 800caa8 <_dtoa_r+0x2d8>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f7f3 fcbc 	bl	800028c <__adddf3>
 800c914:	4606      	mov	r6, r0
 800c916:	4628      	mov	r0, r5
 800c918:	460f      	mov	r7, r1
 800c91a:	f7f3 fe03 	bl	8000524 <__aeabi_i2d>
 800c91e:	a364      	add	r3, pc, #400	; (adr r3, 800cab0 <_dtoa_r+0x2e0>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f7f3 fe68 	bl	80005f8 <__aeabi_dmul>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4630      	mov	r0, r6
 800c92e:	4639      	mov	r1, r7
 800c930:	f7f3 fcac 	bl	800028c <__adddf3>
 800c934:	4606      	mov	r6, r0
 800c936:	460f      	mov	r7, r1
 800c938:	f7f4 f90e 	bl	8000b58 <__aeabi_d2iz>
 800c93c:	2200      	movs	r2, #0
 800c93e:	4683      	mov	fp, r0
 800c940:	2300      	movs	r3, #0
 800c942:	4630      	mov	r0, r6
 800c944:	4639      	mov	r1, r7
 800c946:	f7f4 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800c94a:	b148      	cbz	r0, 800c960 <_dtoa_r+0x190>
 800c94c:	4658      	mov	r0, fp
 800c94e:	f7f3 fde9 	bl	8000524 <__aeabi_i2d>
 800c952:	4632      	mov	r2, r6
 800c954:	463b      	mov	r3, r7
 800c956:	f7f4 f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c95a:	b908      	cbnz	r0, 800c960 <_dtoa_r+0x190>
 800c95c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c960:	f1bb 0f16 	cmp.w	fp, #22
 800c964:	d857      	bhi.n	800ca16 <_dtoa_r+0x246>
 800c966:	4b5b      	ldr	r3, [pc, #364]	; (800cad4 <_dtoa_r+0x304>)
 800c968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	ec51 0b18 	vmov	r0, r1, d8
 800c974:	f7f4 f8b2 	bl	8000adc <__aeabi_dcmplt>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d04e      	beq.n	800ca1a <_dtoa_r+0x24a>
 800c97c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c980:	2300      	movs	r3, #0
 800c982:	930c      	str	r3, [sp, #48]	; 0x30
 800c984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c986:	1b5b      	subs	r3, r3, r5
 800c988:	1e5a      	subs	r2, r3, #1
 800c98a:	bf45      	ittet	mi
 800c98c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c990:	9305      	strmi	r3, [sp, #20]
 800c992:	2300      	movpl	r3, #0
 800c994:	2300      	movmi	r3, #0
 800c996:	9206      	str	r2, [sp, #24]
 800c998:	bf54      	ite	pl
 800c99a:	9305      	strpl	r3, [sp, #20]
 800c99c:	9306      	strmi	r3, [sp, #24]
 800c99e:	f1bb 0f00 	cmp.w	fp, #0
 800c9a2:	db3c      	blt.n	800ca1e <_dtoa_r+0x24e>
 800c9a4:	9b06      	ldr	r3, [sp, #24]
 800c9a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c9aa:	445b      	add	r3, fp
 800c9ac:	9306      	str	r3, [sp, #24]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	9308      	str	r3, [sp, #32]
 800c9b2:	9b07      	ldr	r3, [sp, #28]
 800c9b4:	2b09      	cmp	r3, #9
 800c9b6:	d868      	bhi.n	800ca8a <_dtoa_r+0x2ba>
 800c9b8:	2b05      	cmp	r3, #5
 800c9ba:	bfc4      	itt	gt
 800c9bc:	3b04      	subgt	r3, #4
 800c9be:	9307      	strgt	r3, [sp, #28]
 800c9c0:	9b07      	ldr	r3, [sp, #28]
 800c9c2:	f1a3 0302 	sub.w	r3, r3, #2
 800c9c6:	bfcc      	ite	gt
 800c9c8:	2500      	movgt	r5, #0
 800c9ca:	2501      	movle	r5, #1
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	f200 8085 	bhi.w	800cadc <_dtoa_r+0x30c>
 800c9d2:	e8df f003 	tbb	[pc, r3]
 800c9d6:	3b2e      	.short	0x3b2e
 800c9d8:	5839      	.short	0x5839
 800c9da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c9de:	441d      	add	r5, r3
 800c9e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	bfc1      	itttt	gt
 800c9e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800c9f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c9f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c9f8:	bfd6      	itet	le
 800c9fa:	f1c3 0320 	rsble	r3, r3, #32
 800c9fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800ca02:	fa06 f003 	lslle.w	r0, r6, r3
 800ca06:	f7f3 fd7d 	bl	8000504 <__aeabi_ui2d>
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ca10:	3d01      	subs	r5, #1
 800ca12:	920e      	str	r2, [sp, #56]	; 0x38
 800ca14:	e76f      	b.n	800c8f6 <_dtoa_r+0x126>
 800ca16:	2301      	movs	r3, #1
 800ca18:	e7b3      	b.n	800c982 <_dtoa_r+0x1b2>
 800ca1a:	900c      	str	r0, [sp, #48]	; 0x30
 800ca1c:	e7b2      	b.n	800c984 <_dtoa_r+0x1b4>
 800ca1e:	9b05      	ldr	r3, [sp, #20]
 800ca20:	eba3 030b 	sub.w	r3, r3, fp
 800ca24:	9305      	str	r3, [sp, #20]
 800ca26:	f1cb 0300 	rsb	r3, fp, #0
 800ca2a:	9308      	str	r3, [sp, #32]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca30:	e7bf      	b.n	800c9b2 <_dtoa_r+0x1e2>
 800ca32:	2300      	movs	r3, #0
 800ca34:	9309      	str	r3, [sp, #36]	; 0x24
 800ca36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc52      	bgt.n	800cae2 <_dtoa_r+0x312>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	9304      	str	r3, [sp, #16]
 800ca42:	461a      	mov	r2, r3
 800ca44:	920a      	str	r2, [sp, #40]	; 0x28
 800ca46:	e00b      	b.n	800ca60 <_dtoa_r+0x290>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e7f3      	b.n	800ca34 <_dtoa_r+0x264>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca52:	445b      	add	r3, fp
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	3301      	adds	r3, #1
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	bfb8      	it	lt
 800ca5e:	2301      	movlt	r3, #1
 800ca60:	69e0      	ldr	r0, [r4, #28]
 800ca62:	2100      	movs	r1, #0
 800ca64:	2204      	movs	r2, #4
 800ca66:	f102 0614 	add.w	r6, r2, #20
 800ca6a:	429e      	cmp	r6, r3
 800ca6c:	d93d      	bls.n	800caea <_dtoa_r+0x31a>
 800ca6e:	6041      	str	r1, [r0, #4]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fd9f 	bl	800d5b4 <_Balloc>
 800ca76:	9000      	str	r0, [sp, #0]
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d139      	bne.n	800caf0 <_dtoa_r+0x320>
 800ca7c:	4b16      	ldr	r3, [pc, #88]	; (800cad8 <_dtoa_r+0x308>)
 800ca7e:	4602      	mov	r2, r0
 800ca80:	f240 11af 	movw	r1, #431	; 0x1af
 800ca84:	e6bd      	b.n	800c802 <_dtoa_r+0x32>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e7e1      	b.n	800ca4e <_dtoa_r+0x27e>
 800ca8a:	2501      	movs	r5, #1
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	9509      	str	r5, [sp, #36]	; 0x24
 800ca92:	f04f 33ff 	mov.w	r3, #4294967295
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2312      	movs	r3, #18
 800ca9e:	e7d1      	b.n	800ca44 <_dtoa_r+0x274>
 800caa0:	636f4361 	.word	0x636f4361
 800caa4:	3fd287a7 	.word	0x3fd287a7
 800caa8:	8b60c8b3 	.word	0x8b60c8b3
 800caac:	3fc68a28 	.word	0x3fc68a28
 800cab0:	509f79fb 	.word	0x509f79fb
 800cab4:	3fd34413 	.word	0x3fd34413
 800cab8:	0800e9dd 	.word	0x0800e9dd
 800cabc:	0800e9f4 	.word	0x0800e9f4
 800cac0:	7ff00000 	.word	0x7ff00000
 800cac4:	0800e9d9 	.word	0x0800e9d9
 800cac8:	0800e9d0 	.word	0x0800e9d0
 800cacc:	0800e9ad 	.word	0x0800e9ad
 800cad0:	3ff80000 	.word	0x3ff80000
 800cad4:	0800eae0 	.word	0x0800eae0
 800cad8:	0800ea4c 	.word	0x0800ea4c
 800cadc:	2301      	movs	r3, #1
 800cade:	9309      	str	r3, [sp, #36]	; 0x24
 800cae0:	e7d7      	b.n	800ca92 <_dtoa_r+0x2c2>
 800cae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	9304      	str	r3, [sp, #16]
 800cae8:	e7ba      	b.n	800ca60 <_dtoa_r+0x290>
 800caea:	3101      	adds	r1, #1
 800caec:	0052      	lsls	r2, r2, #1
 800caee:	e7ba      	b.n	800ca66 <_dtoa_r+0x296>
 800caf0:	69e3      	ldr	r3, [r4, #28]
 800caf2:	9a00      	ldr	r2, [sp, #0]
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	9b04      	ldr	r3, [sp, #16]
 800caf8:	2b0e      	cmp	r3, #14
 800cafa:	f200 80a8 	bhi.w	800cc4e <_dtoa_r+0x47e>
 800cafe:	2d00      	cmp	r5, #0
 800cb00:	f000 80a5 	beq.w	800cc4e <_dtoa_r+0x47e>
 800cb04:	f1bb 0f00 	cmp.w	fp, #0
 800cb08:	dd38      	ble.n	800cb7c <_dtoa_r+0x3ac>
 800cb0a:	4bc0      	ldr	r3, [pc, #768]	; (800ce0c <_dtoa_r+0x63c>)
 800cb0c:	f00b 020f 	and.w	r2, fp, #15
 800cb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cb18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cb1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cb20:	d019      	beq.n	800cb56 <_dtoa_r+0x386>
 800cb22:	4bbb      	ldr	r3, [pc, #748]	; (800ce10 <_dtoa_r+0x640>)
 800cb24:	ec51 0b18 	vmov	r0, r1, d8
 800cb28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb2c:	f7f3 fe8e 	bl	800084c <__aeabi_ddiv>
 800cb30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb34:	f008 080f 	and.w	r8, r8, #15
 800cb38:	2503      	movs	r5, #3
 800cb3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ce10 <_dtoa_r+0x640>
 800cb3e:	f1b8 0f00 	cmp.w	r8, #0
 800cb42:	d10a      	bne.n	800cb5a <_dtoa_r+0x38a>
 800cb44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb48:	4632      	mov	r2, r6
 800cb4a:	463b      	mov	r3, r7
 800cb4c:	f7f3 fe7e 	bl	800084c <__aeabi_ddiv>
 800cb50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb54:	e02b      	b.n	800cbae <_dtoa_r+0x3de>
 800cb56:	2502      	movs	r5, #2
 800cb58:	e7ef      	b.n	800cb3a <_dtoa_r+0x36a>
 800cb5a:	f018 0f01 	tst.w	r8, #1
 800cb5e:	d008      	beq.n	800cb72 <_dtoa_r+0x3a2>
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cb68:	f7f3 fd46 	bl	80005f8 <__aeabi_dmul>
 800cb6c:	3501      	adds	r5, #1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	460f      	mov	r7, r1
 800cb72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb76:	f109 0908 	add.w	r9, r9, #8
 800cb7a:	e7e0      	b.n	800cb3e <_dtoa_r+0x36e>
 800cb7c:	f000 809f 	beq.w	800ccbe <_dtoa_r+0x4ee>
 800cb80:	f1cb 0600 	rsb	r6, fp, #0
 800cb84:	4ba1      	ldr	r3, [pc, #644]	; (800ce0c <_dtoa_r+0x63c>)
 800cb86:	4fa2      	ldr	r7, [pc, #648]	; (800ce10 <_dtoa_r+0x640>)
 800cb88:	f006 020f 	and.w	r2, r6, #15
 800cb8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	ec51 0b18 	vmov	r0, r1, d8
 800cb98:	f7f3 fd2e 	bl	80005f8 <__aeabi_dmul>
 800cb9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cba0:	1136      	asrs	r6, r6, #4
 800cba2:	2300      	movs	r3, #0
 800cba4:	2502      	movs	r5, #2
 800cba6:	2e00      	cmp	r6, #0
 800cba8:	d17e      	bne.n	800cca8 <_dtoa_r+0x4d8>
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1d0      	bne.n	800cb50 <_dtoa_r+0x380>
 800cbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 8084 	beq.w	800ccc2 <_dtoa_r+0x4f2>
 800cbba:	4b96      	ldr	r3, [pc, #600]	; (800ce14 <_dtoa_r+0x644>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	f7f3 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d07b      	beq.n	800ccc2 <_dtoa_r+0x4f2>
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d078      	beq.n	800ccc2 <_dtoa_r+0x4f2>
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dd39      	ble.n	800cc4a <_dtoa_r+0x47a>
 800cbd6:	4b90      	ldr	r3, [pc, #576]	; (800ce18 <_dtoa_r+0x648>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4649      	mov	r1, r9
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbe6:	9e01      	ldr	r6, [sp, #4]
 800cbe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cbec:	3501      	adds	r5, #1
 800cbee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7f3 fc96 	bl	8000524 <__aeabi_i2d>
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	f7f3 fcfc 	bl	80005f8 <__aeabi_dmul>
 800cc00:	4b86      	ldr	r3, [pc, #536]	; (800ce1c <_dtoa_r+0x64c>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	f7f3 fb42 	bl	800028c <__adddf3>
 800cc08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc10:	9303      	str	r3, [sp, #12]
 800cc12:	2e00      	cmp	r6, #0
 800cc14:	d158      	bne.n	800ccc8 <_dtoa_r+0x4f8>
 800cc16:	4b82      	ldr	r3, [pc, #520]	; (800ce20 <_dtoa_r+0x650>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	f7f3 fb33 	bl	8000288 <__aeabi_dsub>
 800cc22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc26:	4680      	mov	r8, r0
 800cc28:	4689      	mov	r9, r1
 800cc2a:	f7f3 ff75 	bl	8000b18 <__aeabi_dcmpgt>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f040 8296 	bne.w	800d160 <_dtoa_r+0x990>
 800cc34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc38:	4640      	mov	r0, r8
 800cc3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f040 8289 	bne.w	800d15c <_dtoa_r+0x98c>
 800cc4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cc4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f2c0 814e 	blt.w	800cef2 <_dtoa_r+0x722>
 800cc56:	f1bb 0f0e 	cmp.w	fp, #14
 800cc5a:	f300 814a 	bgt.w	800cef2 <_dtoa_r+0x722>
 800cc5e:	4b6b      	ldr	r3, [pc, #428]	; (800ce0c <_dtoa_r+0x63c>)
 800cc60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f280 80dc 	bge.w	800ce28 <_dtoa_r+0x658>
 800cc70:	9b04      	ldr	r3, [sp, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f300 80d8 	bgt.w	800ce28 <_dtoa_r+0x658>
 800cc78:	f040 826f 	bne.w	800d15a <_dtoa_r+0x98a>
 800cc7c:	4b68      	ldr	r3, [pc, #416]	; (800ce20 <_dtoa_r+0x650>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4640      	mov	r0, r8
 800cc82:	4649      	mov	r1, r9
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc8c:	f7f3 ff3a 	bl	8000b04 <__aeabi_dcmpge>
 800cc90:	9e04      	ldr	r6, [sp, #16]
 800cc92:	4637      	mov	r7, r6
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f040 8245 	bne.w	800d124 <_dtoa_r+0x954>
 800cc9a:	9d00      	ldr	r5, [sp, #0]
 800cc9c:	2331      	movs	r3, #49	; 0x31
 800cc9e:	f805 3b01 	strb.w	r3, [r5], #1
 800cca2:	f10b 0b01 	add.w	fp, fp, #1
 800cca6:	e241      	b.n	800d12c <_dtoa_r+0x95c>
 800cca8:	07f2      	lsls	r2, r6, #31
 800ccaa:	d505      	bpl.n	800ccb8 <_dtoa_r+0x4e8>
 800ccac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccb0:	f7f3 fca2 	bl	80005f8 <__aeabi_dmul>
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	1076      	asrs	r6, r6, #1
 800ccba:	3708      	adds	r7, #8
 800ccbc:	e773      	b.n	800cba6 <_dtoa_r+0x3d6>
 800ccbe:	2502      	movs	r5, #2
 800ccc0:	e775      	b.n	800cbae <_dtoa_r+0x3de>
 800ccc2:	9e04      	ldr	r6, [sp, #16]
 800ccc4:	465f      	mov	r7, fp
 800ccc6:	e792      	b.n	800cbee <_dtoa_r+0x41e>
 800ccc8:	9900      	ldr	r1, [sp, #0]
 800ccca:	4b50      	ldr	r3, [pc, #320]	; (800ce0c <_dtoa_r+0x63c>)
 800cccc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccd0:	4431      	add	r1, r6
 800ccd2:	9102      	str	r1, [sp, #8]
 800ccd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccd6:	eeb0 9a47 	vmov.f32	s18, s14
 800ccda:	eef0 9a67 	vmov.f32	s19, s15
 800ccde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cce6:	2900      	cmp	r1, #0
 800cce8:	d044      	beq.n	800cd74 <_dtoa_r+0x5a4>
 800ccea:	494e      	ldr	r1, [pc, #312]	; (800ce24 <_dtoa_r+0x654>)
 800ccec:	2000      	movs	r0, #0
 800ccee:	f7f3 fdad 	bl	800084c <__aeabi_ddiv>
 800ccf2:	ec53 2b19 	vmov	r2, r3, d9
 800ccf6:	f7f3 fac7 	bl	8000288 <__aeabi_dsub>
 800ccfa:	9d00      	ldr	r5, [sp, #0]
 800ccfc:	ec41 0b19 	vmov	d9, r0, r1
 800cd00:	4649      	mov	r1, r9
 800cd02:	4640      	mov	r0, r8
 800cd04:	f7f3 ff28 	bl	8000b58 <__aeabi_d2iz>
 800cd08:	4606      	mov	r6, r0
 800cd0a:	f7f3 fc0b 	bl	8000524 <__aeabi_i2d>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4640      	mov	r0, r8
 800cd14:	4649      	mov	r1, r9
 800cd16:	f7f3 fab7 	bl	8000288 <__aeabi_dsub>
 800cd1a:	3630      	adds	r6, #48	; 0x30
 800cd1c:	f805 6b01 	strb.w	r6, [r5], #1
 800cd20:	ec53 2b19 	vmov	r2, r3, d9
 800cd24:	4680      	mov	r8, r0
 800cd26:	4689      	mov	r9, r1
 800cd28:	f7f3 fed8 	bl	8000adc <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d164      	bne.n	800cdfa <_dtoa_r+0x62a>
 800cd30:	4642      	mov	r2, r8
 800cd32:	464b      	mov	r3, r9
 800cd34:	4937      	ldr	r1, [pc, #220]	; (800ce14 <_dtoa_r+0x644>)
 800cd36:	2000      	movs	r0, #0
 800cd38:	f7f3 faa6 	bl	8000288 <__aeabi_dsub>
 800cd3c:	ec53 2b19 	vmov	r2, r3, d9
 800cd40:	f7f3 fecc 	bl	8000adc <__aeabi_dcmplt>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f040 80b6 	bne.w	800ceb6 <_dtoa_r+0x6e6>
 800cd4a:	9b02      	ldr	r3, [sp, #8]
 800cd4c:	429d      	cmp	r5, r3
 800cd4e:	f43f af7c 	beq.w	800cc4a <_dtoa_r+0x47a>
 800cd52:	4b31      	ldr	r3, [pc, #196]	; (800ce18 <_dtoa_r+0x648>)
 800cd54:	ec51 0b19 	vmov	r0, r1, d9
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f7f3 fc4d 	bl	80005f8 <__aeabi_dmul>
 800cd5e:	4b2e      	ldr	r3, [pc, #184]	; (800ce18 <_dtoa_r+0x648>)
 800cd60:	ec41 0b19 	vmov	d9, r0, r1
 800cd64:	2200      	movs	r2, #0
 800cd66:	4640      	mov	r0, r8
 800cd68:	4649      	mov	r1, r9
 800cd6a:	f7f3 fc45 	bl	80005f8 <__aeabi_dmul>
 800cd6e:	4680      	mov	r8, r0
 800cd70:	4689      	mov	r9, r1
 800cd72:	e7c5      	b.n	800cd00 <_dtoa_r+0x530>
 800cd74:	ec51 0b17 	vmov	r0, r1, d7
 800cd78:	f7f3 fc3e 	bl	80005f8 <__aeabi_dmul>
 800cd7c:	9b02      	ldr	r3, [sp, #8]
 800cd7e:	9d00      	ldr	r5, [sp, #0]
 800cd80:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd82:	ec41 0b19 	vmov	d9, r0, r1
 800cd86:	4649      	mov	r1, r9
 800cd88:	4640      	mov	r0, r8
 800cd8a:	f7f3 fee5 	bl	8000b58 <__aeabi_d2iz>
 800cd8e:	4606      	mov	r6, r0
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	3630      	adds	r6, #48	; 0x30
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	4649      	mov	r1, r9
 800cd9e:	f7f3 fa73 	bl	8000288 <__aeabi_dsub>
 800cda2:	f805 6b01 	strb.w	r6, [r5], #1
 800cda6:	9b02      	ldr	r3, [sp, #8]
 800cda8:	429d      	cmp	r5, r3
 800cdaa:	4680      	mov	r8, r0
 800cdac:	4689      	mov	r9, r1
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	d124      	bne.n	800cdfe <_dtoa_r+0x62e>
 800cdb4:	4b1b      	ldr	r3, [pc, #108]	; (800ce24 <_dtoa_r+0x654>)
 800cdb6:	ec51 0b19 	vmov	r0, r1, d9
 800cdba:	f7f3 fa67 	bl	800028c <__adddf3>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d173      	bne.n	800ceb6 <_dtoa_r+0x6e6>
 800cdce:	ec53 2b19 	vmov	r2, r3, d9
 800cdd2:	4914      	ldr	r1, [pc, #80]	; (800ce24 <_dtoa_r+0x654>)
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f7f3 fa57 	bl	8000288 <__aeabi_dsub>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	4640      	mov	r0, r8
 800cde0:	4649      	mov	r1, r9
 800cde2:	f7f3 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f43f af2f 	beq.w	800cc4a <_dtoa_r+0x47a>
 800cdec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cdee:	1e6b      	subs	r3, r5, #1
 800cdf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdf6:	2b30      	cmp	r3, #48	; 0x30
 800cdf8:	d0f8      	beq.n	800cdec <_dtoa_r+0x61c>
 800cdfa:	46bb      	mov	fp, r7
 800cdfc:	e04a      	b.n	800ce94 <_dtoa_r+0x6c4>
 800cdfe:	4b06      	ldr	r3, [pc, #24]	; (800ce18 <_dtoa_r+0x648>)
 800ce00:	f7f3 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ce04:	4680      	mov	r8, r0
 800ce06:	4689      	mov	r9, r1
 800ce08:	e7bd      	b.n	800cd86 <_dtoa_r+0x5b6>
 800ce0a:	bf00      	nop
 800ce0c:	0800eae0 	.word	0x0800eae0
 800ce10:	0800eab8 	.word	0x0800eab8
 800ce14:	3ff00000 	.word	0x3ff00000
 800ce18:	40240000 	.word	0x40240000
 800ce1c:	401c0000 	.word	0x401c0000
 800ce20:	40140000 	.word	0x40140000
 800ce24:	3fe00000 	.word	0x3fe00000
 800ce28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce2c:	9d00      	ldr	r5, [sp, #0]
 800ce2e:	4642      	mov	r2, r8
 800ce30:	464b      	mov	r3, r9
 800ce32:	4630      	mov	r0, r6
 800ce34:	4639      	mov	r1, r7
 800ce36:	f7f3 fd09 	bl	800084c <__aeabi_ddiv>
 800ce3a:	f7f3 fe8d 	bl	8000b58 <__aeabi_d2iz>
 800ce3e:	9001      	str	r0, [sp, #4]
 800ce40:	f7f3 fb70 	bl	8000524 <__aeabi_i2d>
 800ce44:	4642      	mov	r2, r8
 800ce46:	464b      	mov	r3, r9
 800ce48:	f7f3 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	4630      	mov	r0, r6
 800ce52:	4639      	mov	r1, r7
 800ce54:	f7f3 fa18 	bl	8000288 <__aeabi_dsub>
 800ce58:	9e01      	ldr	r6, [sp, #4]
 800ce5a:	9f04      	ldr	r7, [sp, #16]
 800ce5c:	3630      	adds	r6, #48	; 0x30
 800ce5e:	f805 6b01 	strb.w	r6, [r5], #1
 800ce62:	9e00      	ldr	r6, [sp, #0]
 800ce64:	1bae      	subs	r6, r5, r6
 800ce66:	42b7      	cmp	r7, r6
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	d134      	bne.n	800ced8 <_dtoa_r+0x708>
 800ce6e:	f7f3 fa0d 	bl	800028c <__adddf3>
 800ce72:	4642      	mov	r2, r8
 800ce74:	464b      	mov	r3, r9
 800ce76:	4606      	mov	r6, r0
 800ce78:	460f      	mov	r7, r1
 800ce7a:	f7f3 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 800ce7e:	b9c8      	cbnz	r0, 800ceb4 <_dtoa_r+0x6e4>
 800ce80:	4642      	mov	r2, r8
 800ce82:	464b      	mov	r3, r9
 800ce84:	4630      	mov	r0, r6
 800ce86:	4639      	mov	r1, r7
 800ce88:	f7f3 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce8c:	b110      	cbz	r0, 800ce94 <_dtoa_r+0x6c4>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	07db      	lsls	r3, r3, #31
 800ce92:	d40f      	bmi.n	800ceb4 <_dtoa_r+0x6e4>
 800ce94:	4651      	mov	r1, sl
 800ce96:	4620      	mov	r0, r4
 800ce98:	f000 fbcc 	bl	800d634 <_Bfree>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cea0:	702b      	strb	r3, [r5, #0]
 800cea2:	f10b 0301 	add.w	r3, fp, #1
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f43f ace2 	beq.w	800c874 <_dtoa_r+0xa4>
 800ceb0:	601d      	str	r5, [r3, #0]
 800ceb2:	e4df      	b.n	800c874 <_dtoa_r+0xa4>
 800ceb4:	465f      	mov	r7, fp
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	461d      	mov	r5, r3
 800ceba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cebe:	2a39      	cmp	r2, #57	; 0x39
 800cec0:	d106      	bne.n	800ced0 <_dtoa_r+0x700>
 800cec2:	9a00      	ldr	r2, [sp, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d1f7      	bne.n	800ceb8 <_dtoa_r+0x6e8>
 800cec8:	9900      	ldr	r1, [sp, #0]
 800ceca:	2230      	movs	r2, #48	; 0x30
 800cecc:	3701      	adds	r7, #1
 800cece:	700a      	strb	r2, [r1, #0]
 800ced0:	781a      	ldrb	r2, [r3, #0]
 800ced2:	3201      	adds	r2, #1
 800ced4:	701a      	strb	r2, [r3, #0]
 800ced6:	e790      	b.n	800cdfa <_dtoa_r+0x62a>
 800ced8:	4ba3      	ldr	r3, [pc, #652]	; (800d168 <_dtoa_r+0x998>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f3 fb8c 	bl	80005f8 <__aeabi_dmul>
 800cee0:	2200      	movs	r2, #0
 800cee2:	2300      	movs	r3, #0
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	f7f3 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d09e      	beq.n	800ce2e <_dtoa_r+0x65e>
 800cef0:	e7d0      	b.n	800ce94 <_dtoa_r+0x6c4>
 800cef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	f000 80ca 	beq.w	800d08e <_dtoa_r+0x8be>
 800cefa:	9a07      	ldr	r2, [sp, #28]
 800cefc:	2a01      	cmp	r2, #1
 800cefe:	f300 80ad 	bgt.w	800d05c <_dtoa_r+0x88c>
 800cf02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf04:	2a00      	cmp	r2, #0
 800cf06:	f000 80a5 	beq.w	800d054 <_dtoa_r+0x884>
 800cf0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf0e:	9e08      	ldr	r6, [sp, #32]
 800cf10:	9d05      	ldr	r5, [sp, #20]
 800cf12:	9a05      	ldr	r2, [sp, #20]
 800cf14:	441a      	add	r2, r3
 800cf16:	9205      	str	r2, [sp, #20]
 800cf18:	9a06      	ldr	r2, [sp, #24]
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	441a      	add	r2, r3
 800cf1e:	4620      	mov	r0, r4
 800cf20:	9206      	str	r2, [sp, #24]
 800cf22:	f000 fc3d 	bl	800d7a0 <__i2b>
 800cf26:	4607      	mov	r7, r0
 800cf28:	b165      	cbz	r5, 800cf44 <_dtoa_r+0x774>
 800cf2a:	9b06      	ldr	r3, [sp, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dd09      	ble.n	800cf44 <_dtoa_r+0x774>
 800cf30:	42ab      	cmp	r3, r5
 800cf32:	9a05      	ldr	r2, [sp, #20]
 800cf34:	bfa8      	it	ge
 800cf36:	462b      	movge	r3, r5
 800cf38:	1ad2      	subs	r2, r2, r3
 800cf3a:	9205      	str	r2, [sp, #20]
 800cf3c:	9a06      	ldr	r2, [sp, #24]
 800cf3e:	1aed      	subs	r5, r5, r3
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	9306      	str	r3, [sp, #24]
 800cf44:	9b08      	ldr	r3, [sp, #32]
 800cf46:	b1f3      	cbz	r3, 800cf86 <_dtoa_r+0x7b6>
 800cf48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f000 80a3 	beq.w	800d096 <_dtoa_r+0x8c6>
 800cf50:	2e00      	cmp	r6, #0
 800cf52:	dd10      	ble.n	800cf76 <_dtoa_r+0x7a6>
 800cf54:	4639      	mov	r1, r7
 800cf56:	4632      	mov	r2, r6
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 fce1 	bl	800d920 <__pow5mult>
 800cf5e:	4652      	mov	r2, sl
 800cf60:	4601      	mov	r1, r0
 800cf62:	4607      	mov	r7, r0
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 fc31 	bl	800d7cc <__multiply>
 800cf6a:	4651      	mov	r1, sl
 800cf6c:	4680      	mov	r8, r0
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 fb60 	bl	800d634 <_Bfree>
 800cf74:	46c2      	mov	sl, r8
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	1b9a      	subs	r2, r3, r6
 800cf7a:	d004      	beq.n	800cf86 <_dtoa_r+0x7b6>
 800cf7c:	4651      	mov	r1, sl
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 fcce 	bl	800d920 <__pow5mult>
 800cf84:	4682      	mov	sl, r0
 800cf86:	2101      	movs	r1, #1
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 fc09 	bl	800d7a0 <__i2b>
 800cf8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	4606      	mov	r6, r0
 800cf94:	f340 8081 	ble.w	800d09a <_dtoa_r+0x8ca>
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fcbf 	bl	800d920 <__pow5mult>
 800cfa2:	9b07      	ldr	r3, [sp, #28]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	dd7a      	ble.n	800d0a0 <_dtoa_r+0x8d0>
 800cfaa:	f04f 0800 	mov.w	r8, #0
 800cfae:	6933      	ldr	r3, [r6, #16]
 800cfb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfb4:	6918      	ldr	r0, [r3, #16]
 800cfb6:	f000 fba5 	bl	800d704 <__hi0bits>
 800cfba:	f1c0 0020 	rsb	r0, r0, #32
 800cfbe:	9b06      	ldr	r3, [sp, #24]
 800cfc0:	4418      	add	r0, r3
 800cfc2:	f010 001f 	ands.w	r0, r0, #31
 800cfc6:	f000 8094 	beq.w	800d0f2 <_dtoa_r+0x922>
 800cfca:	f1c0 0320 	rsb	r3, r0, #32
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	f340 8085 	ble.w	800d0de <_dtoa_r+0x90e>
 800cfd4:	9b05      	ldr	r3, [sp, #20]
 800cfd6:	f1c0 001c 	rsb	r0, r0, #28
 800cfda:	4403      	add	r3, r0
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	9b06      	ldr	r3, [sp, #24]
 800cfe0:	4403      	add	r3, r0
 800cfe2:	4405      	add	r5, r0
 800cfe4:	9306      	str	r3, [sp, #24]
 800cfe6:	9b05      	ldr	r3, [sp, #20]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	dd05      	ble.n	800cff8 <_dtoa_r+0x828>
 800cfec:	4651      	mov	r1, sl
 800cfee:	461a      	mov	r2, r3
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 fcef 	bl	800d9d4 <__lshift>
 800cff6:	4682      	mov	sl, r0
 800cff8:	9b06      	ldr	r3, [sp, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dd05      	ble.n	800d00a <_dtoa_r+0x83a>
 800cffe:	4631      	mov	r1, r6
 800d000:	461a      	mov	r2, r3
 800d002:	4620      	mov	r0, r4
 800d004:	f000 fce6 	bl	800d9d4 <__lshift>
 800d008:	4606      	mov	r6, r0
 800d00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d072      	beq.n	800d0f6 <_dtoa_r+0x926>
 800d010:	4631      	mov	r1, r6
 800d012:	4650      	mov	r0, sl
 800d014:	f000 fd4a 	bl	800daac <__mcmp>
 800d018:	2800      	cmp	r0, #0
 800d01a:	da6c      	bge.n	800d0f6 <_dtoa_r+0x926>
 800d01c:	2300      	movs	r3, #0
 800d01e:	4651      	mov	r1, sl
 800d020:	220a      	movs	r2, #10
 800d022:	4620      	mov	r0, r4
 800d024:	f000 fb28 	bl	800d678 <__multadd>
 800d028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d02e:	4682      	mov	sl, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 81b0 	beq.w	800d396 <_dtoa_r+0xbc6>
 800d036:	2300      	movs	r3, #0
 800d038:	4639      	mov	r1, r7
 800d03a:	220a      	movs	r2, #10
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fb1b 	bl	800d678 <__multadd>
 800d042:	9b01      	ldr	r3, [sp, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	4607      	mov	r7, r0
 800d048:	f300 8096 	bgt.w	800d178 <_dtoa_r+0x9a8>
 800d04c:	9b07      	ldr	r3, [sp, #28]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	dc59      	bgt.n	800d106 <_dtoa_r+0x936>
 800d052:	e091      	b.n	800d178 <_dtoa_r+0x9a8>
 800d054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d05a:	e758      	b.n	800cf0e <_dtoa_r+0x73e>
 800d05c:	9b04      	ldr	r3, [sp, #16]
 800d05e:	1e5e      	subs	r6, r3, #1
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	42b3      	cmp	r3, r6
 800d064:	bfbf      	itttt	lt
 800d066:	9b08      	ldrlt	r3, [sp, #32]
 800d068:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d06a:	9608      	strlt	r6, [sp, #32]
 800d06c:	1af3      	sublt	r3, r6, r3
 800d06e:	bfb4      	ite	lt
 800d070:	18d2      	addlt	r2, r2, r3
 800d072:	1b9e      	subge	r6, r3, r6
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	bfbc      	itt	lt
 800d078:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d07a:	2600      	movlt	r6, #0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	bfb7      	itett	lt
 800d080:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d084:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d088:	1a9d      	sublt	r5, r3, r2
 800d08a:	2300      	movlt	r3, #0
 800d08c:	e741      	b.n	800cf12 <_dtoa_r+0x742>
 800d08e:	9e08      	ldr	r6, [sp, #32]
 800d090:	9d05      	ldr	r5, [sp, #20]
 800d092:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d094:	e748      	b.n	800cf28 <_dtoa_r+0x758>
 800d096:	9a08      	ldr	r2, [sp, #32]
 800d098:	e770      	b.n	800cf7c <_dtoa_r+0x7ac>
 800d09a:	9b07      	ldr	r3, [sp, #28]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	dc19      	bgt.n	800d0d4 <_dtoa_r+0x904>
 800d0a0:	9b02      	ldr	r3, [sp, #8]
 800d0a2:	b9bb      	cbnz	r3, 800d0d4 <_dtoa_r+0x904>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0aa:	b99b      	cbnz	r3, 800d0d4 <_dtoa_r+0x904>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0b2:	0d1b      	lsrs	r3, r3, #20
 800d0b4:	051b      	lsls	r3, r3, #20
 800d0b6:	b183      	cbz	r3, 800d0da <_dtoa_r+0x90a>
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	9305      	str	r3, [sp, #20]
 800d0be:	9b06      	ldr	r3, [sp, #24]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	9306      	str	r3, [sp, #24]
 800d0c4:	f04f 0801 	mov.w	r8, #1
 800d0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f47f af6f 	bne.w	800cfae <_dtoa_r+0x7de>
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	e774      	b.n	800cfbe <_dtoa_r+0x7ee>
 800d0d4:	f04f 0800 	mov.w	r8, #0
 800d0d8:	e7f6      	b.n	800d0c8 <_dtoa_r+0x8f8>
 800d0da:	4698      	mov	r8, r3
 800d0dc:	e7f4      	b.n	800d0c8 <_dtoa_r+0x8f8>
 800d0de:	d082      	beq.n	800cfe6 <_dtoa_r+0x816>
 800d0e0:	9a05      	ldr	r2, [sp, #20]
 800d0e2:	331c      	adds	r3, #28
 800d0e4:	441a      	add	r2, r3
 800d0e6:	9205      	str	r2, [sp, #20]
 800d0e8:	9a06      	ldr	r2, [sp, #24]
 800d0ea:	441a      	add	r2, r3
 800d0ec:	441d      	add	r5, r3
 800d0ee:	9206      	str	r2, [sp, #24]
 800d0f0:	e779      	b.n	800cfe6 <_dtoa_r+0x816>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	e7f4      	b.n	800d0e0 <_dtoa_r+0x910>
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	dc37      	bgt.n	800d16c <_dtoa_r+0x99c>
 800d0fc:	9b07      	ldr	r3, [sp, #28]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	dd34      	ble.n	800d16c <_dtoa_r+0x99c>
 800d102:	9b04      	ldr	r3, [sp, #16]
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	9b01      	ldr	r3, [sp, #4]
 800d108:	b963      	cbnz	r3, 800d124 <_dtoa_r+0x954>
 800d10a:	4631      	mov	r1, r6
 800d10c:	2205      	movs	r2, #5
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 fab2 	bl	800d678 <__multadd>
 800d114:	4601      	mov	r1, r0
 800d116:	4606      	mov	r6, r0
 800d118:	4650      	mov	r0, sl
 800d11a:	f000 fcc7 	bl	800daac <__mcmp>
 800d11e:	2800      	cmp	r0, #0
 800d120:	f73f adbb 	bgt.w	800cc9a <_dtoa_r+0x4ca>
 800d124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d126:	9d00      	ldr	r5, [sp, #0]
 800d128:	ea6f 0b03 	mvn.w	fp, r3
 800d12c:	f04f 0800 	mov.w	r8, #0
 800d130:	4631      	mov	r1, r6
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fa7e 	bl	800d634 <_Bfree>
 800d138:	2f00      	cmp	r7, #0
 800d13a:	f43f aeab 	beq.w	800ce94 <_dtoa_r+0x6c4>
 800d13e:	f1b8 0f00 	cmp.w	r8, #0
 800d142:	d005      	beq.n	800d150 <_dtoa_r+0x980>
 800d144:	45b8      	cmp	r8, r7
 800d146:	d003      	beq.n	800d150 <_dtoa_r+0x980>
 800d148:	4641      	mov	r1, r8
 800d14a:	4620      	mov	r0, r4
 800d14c:	f000 fa72 	bl	800d634 <_Bfree>
 800d150:	4639      	mov	r1, r7
 800d152:	4620      	mov	r0, r4
 800d154:	f000 fa6e 	bl	800d634 <_Bfree>
 800d158:	e69c      	b.n	800ce94 <_dtoa_r+0x6c4>
 800d15a:	2600      	movs	r6, #0
 800d15c:	4637      	mov	r7, r6
 800d15e:	e7e1      	b.n	800d124 <_dtoa_r+0x954>
 800d160:	46bb      	mov	fp, r7
 800d162:	4637      	mov	r7, r6
 800d164:	e599      	b.n	800cc9a <_dtoa_r+0x4ca>
 800d166:	bf00      	nop
 800d168:	40240000 	.word	0x40240000
 800d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 80c8 	beq.w	800d304 <_dtoa_r+0xb34>
 800d174:	9b04      	ldr	r3, [sp, #16]
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	2d00      	cmp	r5, #0
 800d17a:	dd05      	ble.n	800d188 <_dtoa_r+0x9b8>
 800d17c:	4639      	mov	r1, r7
 800d17e:	462a      	mov	r2, r5
 800d180:	4620      	mov	r0, r4
 800d182:	f000 fc27 	bl	800d9d4 <__lshift>
 800d186:	4607      	mov	r7, r0
 800d188:	f1b8 0f00 	cmp.w	r8, #0
 800d18c:	d05b      	beq.n	800d246 <_dtoa_r+0xa76>
 800d18e:	6879      	ldr	r1, [r7, #4]
 800d190:	4620      	mov	r0, r4
 800d192:	f000 fa0f 	bl	800d5b4 <_Balloc>
 800d196:	4605      	mov	r5, r0
 800d198:	b928      	cbnz	r0, 800d1a6 <_dtoa_r+0x9d6>
 800d19a:	4b83      	ldr	r3, [pc, #524]	; (800d3a8 <_dtoa_r+0xbd8>)
 800d19c:	4602      	mov	r2, r0
 800d19e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d1a2:	f7ff bb2e 	b.w	800c802 <_dtoa_r+0x32>
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	3202      	adds	r2, #2
 800d1aa:	0092      	lsls	r2, r2, #2
 800d1ac:	f107 010c 	add.w	r1, r7, #12
 800d1b0:	300c      	adds	r0, #12
 800d1b2:	f7ff fa76 	bl	800c6a2 <memcpy>
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f000 fc0a 	bl	800d9d4 <__lshift>
 800d1c0:	9b00      	ldr	r3, [sp, #0]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	9308      	str	r3, [sp, #32]
 800d1ce:	9b02      	ldr	r3, [sp, #8]
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	46b8      	mov	r8, r7
 800d1d6:	9306      	str	r3, [sp, #24]
 800d1d8:	4607      	mov	r7, r0
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	4631      	mov	r1, r6
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	4650      	mov	r0, sl
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	f7ff fa6b 	bl	800c6be <quorem>
 800d1e8:	4641      	mov	r1, r8
 800d1ea:	9002      	str	r0, [sp, #8]
 800d1ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	f000 fc5b 	bl	800daac <__mcmp>
 800d1f6:	463a      	mov	r2, r7
 800d1f8:	9005      	str	r0, [sp, #20]
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fc71 	bl	800dae4 <__mdiff>
 800d202:	68c2      	ldr	r2, [r0, #12]
 800d204:	4605      	mov	r5, r0
 800d206:	bb02      	cbnz	r2, 800d24a <_dtoa_r+0xa7a>
 800d208:	4601      	mov	r1, r0
 800d20a:	4650      	mov	r0, sl
 800d20c:	f000 fc4e 	bl	800daac <__mcmp>
 800d210:	4602      	mov	r2, r0
 800d212:	4629      	mov	r1, r5
 800d214:	4620      	mov	r0, r4
 800d216:	9209      	str	r2, [sp, #36]	; 0x24
 800d218:	f000 fa0c 	bl	800d634 <_Bfree>
 800d21c:	9b07      	ldr	r3, [sp, #28]
 800d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d220:	9d04      	ldr	r5, [sp, #16]
 800d222:	ea43 0102 	orr.w	r1, r3, r2
 800d226:	9b06      	ldr	r3, [sp, #24]
 800d228:	4319      	orrs	r1, r3
 800d22a:	d110      	bne.n	800d24e <_dtoa_r+0xa7e>
 800d22c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d230:	d029      	beq.n	800d286 <_dtoa_r+0xab6>
 800d232:	9b05      	ldr	r3, [sp, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	dd02      	ble.n	800d23e <_dtoa_r+0xa6e>
 800d238:	9b02      	ldr	r3, [sp, #8]
 800d23a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d23e:	9b01      	ldr	r3, [sp, #4]
 800d240:	f883 9000 	strb.w	r9, [r3]
 800d244:	e774      	b.n	800d130 <_dtoa_r+0x960>
 800d246:	4638      	mov	r0, r7
 800d248:	e7ba      	b.n	800d1c0 <_dtoa_r+0x9f0>
 800d24a:	2201      	movs	r2, #1
 800d24c:	e7e1      	b.n	800d212 <_dtoa_r+0xa42>
 800d24e:	9b05      	ldr	r3, [sp, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	db04      	blt.n	800d25e <_dtoa_r+0xa8e>
 800d254:	9907      	ldr	r1, [sp, #28]
 800d256:	430b      	orrs	r3, r1
 800d258:	9906      	ldr	r1, [sp, #24]
 800d25a:	430b      	orrs	r3, r1
 800d25c:	d120      	bne.n	800d2a0 <_dtoa_r+0xad0>
 800d25e:	2a00      	cmp	r2, #0
 800d260:	dded      	ble.n	800d23e <_dtoa_r+0xa6e>
 800d262:	4651      	mov	r1, sl
 800d264:	2201      	movs	r2, #1
 800d266:	4620      	mov	r0, r4
 800d268:	f000 fbb4 	bl	800d9d4 <__lshift>
 800d26c:	4631      	mov	r1, r6
 800d26e:	4682      	mov	sl, r0
 800d270:	f000 fc1c 	bl	800daac <__mcmp>
 800d274:	2800      	cmp	r0, #0
 800d276:	dc03      	bgt.n	800d280 <_dtoa_r+0xab0>
 800d278:	d1e1      	bne.n	800d23e <_dtoa_r+0xa6e>
 800d27a:	f019 0f01 	tst.w	r9, #1
 800d27e:	d0de      	beq.n	800d23e <_dtoa_r+0xa6e>
 800d280:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d284:	d1d8      	bne.n	800d238 <_dtoa_r+0xa68>
 800d286:	9a01      	ldr	r2, [sp, #4]
 800d288:	2339      	movs	r3, #57	; 0x39
 800d28a:	7013      	strb	r3, [r2, #0]
 800d28c:	462b      	mov	r3, r5
 800d28e:	461d      	mov	r5, r3
 800d290:	3b01      	subs	r3, #1
 800d292:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d296:	2a39      	cmp	r2, #57	; 0x39
 800d298:	d06c      	beq.n	800d374 <_dtoa_r+0xba4>
 800d29a:	3201      	adds	r2, #1
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	e747      	b.n	800d130 <_dtoa_r+0x960>
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	dd07      	ble.n	800d2b4 <_dtoa_r+0xae4>
 800d2a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d2a8:	d0ed      	beq.n	800d286 <_dtoa_r+0xab6>
 800d2aa:	9a01      	ldr	r2, [sp, #4]
 800d2ac:	f109 0301 	add.w	r3, r9, #1
 800d2b0:	7013      	strb	r3, [r2, #0]
 800d2b2:	e73d      	b.n	800d130 <_dtoa_r+0x960>
 800d2b4:	9b04      	ldr	r3, [sp, #16]
 800d2b6:	9a08      	ldr	r2, [sp, #32]
 800d2b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d043      	beq.n	800d348 <_dtoa_r+0xb78>
 800d2c0:	4651      	mov	r1, sl
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f000 f9d6 	bl	800d678 <__multadd>
 800d2cc:	45b8      	cmp	r8, r7
 800d2ce:	4682      	mov	sl, r0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	f04f 020a 	mov.w	r2, #10
 800d2d8:	4641      	mov	r1, r8
 800d2da:	4620      	mov	r0, r4
 800d2dc:	d107      	bne.n	800d2ee <_dtoa_r+0xb1e>
 800d2de:	f000 f9cb 	bl	800d678 <__multadd>
 800d2e2:	4680      	mov	r8, r0
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	9b04      	ldr	r3, [sp, #16]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	e775      	b.n	800d1da <_dtoa_r+0xa0a>
 800d2ee:	f000 f9c3 	bl	800d678 <__multadd>
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	220a      	movs	r2, #10
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 f9bc 	bl	800d678 <__multadd>
 800d300:	4607      	mov	r7, r0
 800d302:	e7f0      	b.n	800d2e6 <_dtoa_r+0xb16>
 800d304:	9b04      	ldr	r3, [sp, #16]
 800d306:	9301      	str	r3, [sp, #4]
 800d308:	9d00      	ldr	r5, [sp, #0]
 800d30a:	4631      	mov	r1, r6
 800d30c:	4650      	mov	r0, sl
 800d30e:	f7ff f9d6 	bl	800c6be <quorem>
 800d312:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d316:	9b00      	ldr	r3, [sp, #0]
 800d318:	f805 9b01 	strb.w	r9, [r5], #1
 800d31c:	1aea      	subs	r2, r5, r3
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	4293      	cmp	r3, r2
 800d322:	dd07      	ble.n	800d334 <_dtoa_r+0xb64>
 800d324:	4651      	mov	r1, sl
 800d326:	2300      	movs	r3, #0
 800d328:	220a      	movs	r2, #10
 800d32a:	4620      	mov	r0, r4
 800d32c:	f000 f9a4 	bl	800d678 <__multadd>
 800d330:	4682      	mov	sl, r0
 800d332:	e7ea      	b.n	800d30a <_dtoa_r+0xb3a>
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	bfc8      	it	gt
 800d33a:	461d      	movgt	r5, r3
 800d33c:	9b00      	ldr	r3, [sp, #0]
 800d33e:	bfd8      	it	le
 800d340:	2501      	movle	r5, #1
 800d342:	441d      	add	r5, r3
 800d344:	f04f 0800 	mov.w	r8, #0
 800d348:	4651      	mov	r1, sl
 800d34a:	2201      	movs	r2, #1
 800d34c:	4620      	mov	r0, r4
 800d34e:	f000 fb41 	bl	800d9d4 <__lshift>
 800d352:	4631      	mov	r1, r6
 800d354:	4682      	mov	sl, r0
 800d356:	f000 fba9 	bl	800daac <__mcmp>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	dc96      	bgt.n	800d28c <_dtoa_r+0xabc>
 800d35e:	d102      	bne.n	800d366 <_dtoa_r+0xb96>
 800d360:	f019 0f01 	tst.w	r9, #1
 800d364:	d192      	bne.n	800d28c <_dtoa_r+0xabc>
 800d366:	462b      	mov	r3, r5
 800d368:	461d      	mov	r5, r3
 800d36a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d36e:	2a30      	cmp	r2, #48	; 0x30
 800d370:	d0fa      	beq.n	800d368 <_dtoa_r+0xb98>
 800d372:	e6dd      	b.n	800d130 <_dtoa_r+0x960>
 800d374:	9a00      	ldr	r2, [sp, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d189      	bne.n	800d28e <_dtoa_r+0xabe>
 800d37a:	f10b 0b01 	add.w	fp, fp, #1
 800d37e:	2331      	movs	r3, #49	; 0x31
 800d380:	e796      	b.n	800d2b0 <_dtoa_r+0xae0>
 800d382:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <_dtoa_r+0xbdc>)
 800d384:	f7ff ba99 	b.w	800c8ba <_dtoa_r+0xea>
 800d388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f47f aa6d 	bne.w	800c86a <_dtoa_r+0x9a>
 800d390:	4b07      	ldr	r3, [pc, #28]	; (800d3b0 <_dtoa_r+0xbe0>)
 800d392:	f7ff ba92 	b.w	800c8ba <_dtoa_r+0xea>
 800d396:	9b01      	ldr	r3, [sp, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dcb5      	bgt.n	800d308 <_dtoa_r+0xb38>
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	f73f aeb1 	bgt.w	800d106 <_dtoa_r+0x936>
 800d3a4:	e7b0      	b.n	800d308 <_dtoa_r+0xb38>
 800d3a6:	bf00      	nop
 800d3a8:	0800ea4c 	.word	0x0800ea4c
 800d3ac:	0800e9ac 	.word	0x0800e9ac
 800d3b0:	0800e9d0 	.word	0x0800e9d0

0800d3b4 <_free_r>:
 800d3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3b6:	2900      	cmp	r1, #0
 800d3b8:	d044      	beq.n	800d444 <_free_r+0x90>
 800d3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3be:	9001      	str	r0, [sp, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d3c6:	bfb8      	it	lt
 800d3c8:	18e4      	addlt	r4, r4, r3
 800d3ca:	f000 f8e7 	bl	800d59c <__malloc_lock>
 800d3ce:	4a1e      	ldr	r2, [pc, #120]	; (800d448 <_free_r+0x94>)
 800d3d0:	9801      	ldr	r0, [sp, #4]
 800d3d2:	6813      	ldr	r3, [r2, #0]
 800d3d4:	b933      	cbnz	r3, 800d3e4 <_free_r+0x30>
 800d3d6:	6063      	str	r3, [r4, #4]
 800d3d8:	6014      	str	r4, [r2, #0]
 800d3da:	b003      	add	sp, #12
 800d3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3e0:	f000 b8e2 	b.w	800d5a8 <__malloc_unlock>
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	d908      	bls.n	800d3fa <_free_r+0x46>
 800d3e8:	6825      	ldr	r5, [r4, #0]
 800d3ea:	1961      	adds	r1, r4, r5
 800d3ec:	428b      	cmp	r3, r1
 800d3ee:	bf01      	itttt	eq
 800d3f0:	6819      	ldreq	r1, [r3, #0]
 800d3f2:	685b      	ldreq	r3, [r3, #4]
 800d3f4:	1949      	addeq	r1, r1, r5
 800d3f6:	6021      	streq	r1, [r4, #0]
 800d3f8:	e7ed      	b.n	800d3d6 <_free_r+0x22>
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	b10b      	cbz	r3, 800d404 <_free_r+0x50>
 800d400:	42a3      	cmp	r3, r4
 800d402:	d9fa      	bls.n	800d3fa <_free_r+0x46>
 800d404:	6811      	ldr	r1, [r2, #0]
 800d406:	1855      	adds	r5, r2, r1
 800d408:	42a5      	cmp	r5, r4
 800d40a:	d10b      	bne.n	800d424 <_free_r+0x70>
 800d40c:	6824      	ldr	r4, [r4, #0]
 800d40e:	4421      	add	r1, r4
 800d410:	1854      	adds	r4, r2, r1
 800d412:	42a3      	cmp	r3, r4
 800d414:	6011      	str	r1, [r2, #0]
 800d416:	d1e0      	bne.n	800d3da <_free_r+0x26>
 800d418:	681c      	ldr	r4, [r3, #0]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	6053      	str	r3, [r2, #4]
 800d41e:	440c      	add	r4, r1
 800d420:	6014      	str	r4, [r2, #0]
 800d422:	e7da      	b.n	800d3da <_free_r+0x26>
 800d424:	d902      	bls.n	800d42c <_free_r+0x78>
 800d426:	230c      	movs	r3, #12
 800d428:	6003      	str	r3, [r0, #0]
 800d42a:	e7d6      	b.n	800d3da <_free_r+0x26>
 800d42c:	6825      	ldr	r5, [r4, #0]
 800d42e:	1961      	adds	r1, r4, r5
 800d430:	428b      	cmp	r3, r1
 800d432:	bf04      	itt	eq
 800d434:	6819      	ldreq	r1, [r3, #0]
 800d436:	685b      	ldreq	r3, [r3, #4]
 800d438:	6063      	str	r3, [r4, #4]
 800d43a:	bf04      	itt	eq
 800d43c:	1949      	addeq	r1, r1, r5
 800d43e:	6021      	streq	r1, [r4, #0]
 800d440:	6054      	str	r4, [r2, #4]
 800d442:	e7ca      	b.n	800d3da <_free_r+0x26>
 800d444:	b003      	add	sp, #12
 800d446:	bd30      	pop	{r4, r5, pc}
 800d448:	20006b0c 	.word	0x20006b0c

0800d44c <malloc>:
 800d44c:	4b02      	ldr	r3, [pc, #8]	; (800d458 <malloc+0xc>)
 800d44e:	4601      	mov	r1, r0
 800d450:	6818      	ldr	r0, [r3, #0]
 800d452:	f000 b823 	b.w	800d49c <_malloc_r>
 800d456:	bf00      	nop
 800d458:	20000158 	.word	0x20000158

0800d45c <sbrk_aligned>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	4e0e      	ldr	r6, [pc, #56]	; (800d498 <sbrk_aligned+0x3c>)
 800d460:	460c      	mov	r4, r1
 800d462:	6831      	ldr	r1, [r6, #0]
 800d464:	4605      	mov	r5, r0
 800d466:	b911      	cbnz	r1, 800d46e <sbrk_aligned+0x12>
 800d468:	f000 fe40 	bl	800e0ec <_sbrk_r>
 800d46c:	6030      	str	r0, [r6, #0]
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	f000 fe3b 	bl	800e0ec <_sbrk_r>
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	d00a      	beq.n	800d490 <sbrk_aligned+0x34>
 800d47a:	1cc4      	adds	r4, r0, #3
 800d47c:	f024 0403 	bic.w	r4, r4, #3
 800d480:	42a0      	cmp	r0, r4
 800d482:	d007      	beq.n	800d494 <sbrk_aligned+0x38>
 800d484:	1a21      	subs	r1, r4, r0
 800d486:	4628      	mov	r0, r5
 800d488:	f000 fe30 	bl	800e0ec <_sbrk_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	d101      	bne.n	800d494 <sbrk_aligned+0x38>
 800d490:	f04f 34ff 	mov.w	r4, #4294967295
 800d494:	4620      	mov	r0, r4
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	20006b10 	.word	0x20006b10

0800d49c <_malloc_r>:
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	1ccd      	adds	r5, r1, #3
 800d4a2:	f025 0503 	bic.w	r5, r5, #3
 800d4a6:	3508      	adds	r5, #8
 800d4a8:	2d0c      	cmp	r5, #12
 800d4aa:	bf38      	it	cc
 800d4ac:	250c      	movcc	r5, #12
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	db01      	blt.n	800d4b8 <_malloc_r+0x1c>
 800d4b4:	42a9      	cmp	r1, r5
 800d4b6:	d905      	bls.n	800d4c4 <_malloc_r+0x28>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	2600      	movs	r6, #0
 800d4be:	4630      	mov	r0, r6
 800d4c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d598 <_malloc_r+0xfc>
 800d4c8:	f000 f868 	bl	800d59c <__malloc_lock>
 800d4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d0:	461c      	mov	r4, r3
 800d4d2:	bb5c      	cbnz	r4, 800d52c <_malloc_r+0x90>
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	f7ff ffc0 	bl	800d45c <sbrk_aligned>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	4604      	mov	r4, r0
 800d4e0:	d155      	bne.n	800d58e <_malloc_r+0xf2>
 800d4e2:	f8d8 4000 	ldr.w	r4, [r8]
 800d4e6:	4626      	mov	r6, r4
 800d4e8:	2e00      	cmp	r6, #0
 800d4ea:	d145      	bne.n	800d578 <_malloc_r+0xdc>
 800d4ec:	2c00      	cmp	r4, #0
 800d4ee:	d048      	beq.n	800d582 <_malloc_r+0xe6>
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	eb04 0903 	add.w	r9, r4, r3
 800d4fa:	f000 fdf7 	bl	800e0ec <_sbrk_r>
 800d4fe:	4581      	cmp	r9, r0
 800d500:	d13f      	bne.n	800d582 <_malloc_r+0xe6>
 800d502:	6821      	ldr	r1, [r4, #0]
 800d504:	1a6d      	subs	r5, r5, r1
 800d506:	4629      	mov	r1, r5
 800d508:	4638      	mov	r0, r7
 800d50a:	f7ff ffa7 	bl	800d45c <sbrk_aligned>
 800d50e:	3001      	adds	r0, #1
 800d510:	d037      	beq.n	800d582 <_malloc_r+0xe6>
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	442b      	add	r3, r5
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	f8d8 3000 	ldr.w	r3, [r8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d038      	beq.n	800d592 <_malloc_r+0xf6>
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	42a2      	cmp	r2, r4
 800d524:	d12b      	bne.n	800d57e <_malloc_r+0xe2>
 800d526:	2200      	movs	r2, #0
 800d528:	605a      	str	r2, [r3, #4]
 800d52a:	e00f      	b.n	800d54c <_malloc_r+0xb0>
 800d52c:	6822      	ldr	r2, [r4, #0]
 800d52e:	1b52      	subs	r2, r2, r5
 800d530:	d41f      	bmi.n	800d572 <_malloc_r+0xd6>
 800d532:	2a0b      	cmp	r2, #11
 800d534:	d917      	bls.n	800d566 <_malloc_r+0xca>
 800d536:	1961      	adds	r1, r4, r5
 800d538:	42a3      	cmp	r3, r4
 800d53a:	6025      	str	r5, [r4, #0]
 800d53c:	bf18      	it	ne
 800d53e:	6059      	strne	r1, [r3, #4]
 800d540:	6863      	ldr	r3, [r4, #4]
 800d542:	bf08      	it	eq
 800d544:	f8c8 1000 	streq.w	r1, [r8]
 800d548:	5162      	str	r2, [r4, r5]
 800d54a:	604b      	str	r3, [r1, #4]
 800d54c:	4638      	mov	r0, r7
 800d54e:	f104 060b 	add.w	r6, r4, #11
 800d552:	f000 f829 	bl	800d5a8 <__malloc_unlock>
 800d556:	f026 0607 	bic.w	r6, r6, #7
 800d55a:	1d23      	adds	r3, r4, #4
 800d55c:	1af2      	subs	r2, r6, r3
 800d55e:	d0ae      	beq.n	800d4be <_malloc_r+0x22>
 800d560:	1b9b      	subs	r3, r3, r6
 800d562:	50a3      	str	r3, [r4, r2]
 800d564:	e7ab      	b.n	800d4be <_malloc_r+0x22>
 800d566:	42a3      	cmp	r3, r4
 800d568:	6862      	ldr	r2, [r4, #4]
 800d56a:	d1dd      	bne.n	800d528 <_malloc_r+0x8c>
 800d56c:	f8c8 2000 	str.w	r2, [r8]
 800d570:	e7ec      	b.n	800d54c <_malloc_r+0xb0>
 800d572:	4623      	mov	r3, r4
 800d574:	6864      	ldr	r4, [r4, #4]
 800d576:	e7ac      	b.n	800d4d2 <_malloc_r+0x36>
 800d578:	4634      	mov	r4, r6
 800d57a:	6876      	ldr	r6, [r6, #4]
 800d57c:	e7b4      	b.n	800d4e8 <_malloc_r+0x4c>
 800d57e:	4613      	mov	r3, r2
 800d580:	e7cc      	b.n	800d51c <_malloc_r+0x80>
 800d582:	230c      	movs	r3, #12
 800d584:	603b      	str	r3, [r7, #0]
 800d586:	4638      	mov	r0, r7
 800d588:	f000 f80e 	bl	800d5a8 <__malloc_unlock>
 800d58c:	e797      	b.n	800d4be <_malloc_r+0x22>
 800d58e:	6025      	str	r5, [r4, #0]
 800d590:	e7dc      	b.n	800d54c <_malloc_r+0xb0>
 800d592:	605b      	str	r3, [r3, #4]
 800d594:	deff      	udf	#255	; 0xff
 800d596:	bf00      	nop
 800d598:	20006b0c 	.word	0x20006b0c

0800d59c <__malloc_lock>:
 800d59c:	4801      	ldr	r0, [pc, #4]	; (800d5a4 <__malloc_lock+0x8>)
 800d59e:	f7ff b87e 	b.w	800c69e <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	20006b08 	.word	0x20006b08

0800d5a8 <__malloc_unlock>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	; (800d5b0 <__malloc_unlock+0x8>)
 800d5aa:	f7ff b879 	b.w	800c6a0 <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	20006b08 	.word	0x20006b08

0800d5b4 <_Balloc>:
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	69c6      	ldr	r6, [r0, #28]
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	460d      	mov	r5, r1
 800d5bc:	b976      	cbnz	r6, 800d5dc <_Balloc+0x28>
 800d5be:	2010      	movs	r0, #16
 800d5c0:	f7ff ff44 	bl	800d44c <malloc>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	61e0      	str	r0, [r4, #28]
 800d5c8:	b920      	cbnz	r0, 800d5d4 <_Balloc+0x20>
 800d5ca:	4b18      	ldr	r3, [pc, #96]	; (800d62c <_Balloc+0x78>)
 800d5cc:	4818      	ldr	r0, [pc, #96]	; (800d630 <_Balloc+0x7c>)
 800d5ce:	216b      	movs	r1, #107	; 0x6b
 800d5d0:	f000 fd9c 	bl	800e10c <__assert_func>
 800d5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5d8:	6006      	str	r6, [r0, #0]
 800d5da:	60c6      	str	r6, [r0, #12]
 800d5dc:	69e6      	ldr	r6, [r4, #28]
 800d5de:	68f3      	ldr	r3, [r6, #12]
 800d5e0:	b183      	cbz	r3, 800d604 <_Balloc+0x50>
 800d5e2:	69e3      	ldr	r3, [r4, #28]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ea:	b9b8      	cbnz	r0, 800d61c <_Balloc+0x68>
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	fa01 f605 	lsl.w	r6, r1, r5
 800d5f2:	1d72      	adds	r2, r6, #5
 800d5f4:	0092      	lsls	r2, r2, #2
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 fda6 	bl	800e148 <_calloc_r>
 800d5fc:	b160      	cbz	r0, 800d618 <_Balloc+0x64>
 800d5fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d602:	e00e      	b.n	800d622 <_Balloc+0x6e>
 800d604:	2221      	movs	r2, #33	; 0x21
 800d606:	2104      	movs	r1, #4
 800d608:	4620      	mov	r0, r4
 800d60a:	f000 fd9d 	bl	800e148 <_calloc_r>
 800d60e:	69e3      	ldr	r3, [r4, #28]
 800d610:	60f0      	str	r0, [r6, #12]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1e4      	bne.n	800d5e2 <_Balloc+0x2e>
 800d618:	2000      	movs	r0, #0
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	6802      	ldr	r2, [r0, #0]
 800d61e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d622:	2300      	movs	r3, #0
 800d624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d628:	e7f7      	b.n	800d61a <_Balloc+0x66>
 800d62a:	bf00      	nop
 800d62c:	0800e9dd 	.word	0x0800e9dd
 800d630:	0800ea5d 	.word	0x0800ea5d

0800d634 <_Bfree>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	69c6      	ldr	r6, [r0, #28]
 800d638:	4605      	mov	r5, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	b976      	cbnz	r6, 800d65c <_Bfree+0x28>
 800d63e:	2010      	movs	r0, #16
 800d640:	f7ff ff04 	bl	800d44c <malloc>
 800d644:	4602      	mov	r2, r0
 800d646:	61e8      	str	r0, [r5, #28]
 800d648:	b920      	cbnz	r0, 800d654 <_Bfree+0x20>
 800d64a:	4b09      	ldr	r3, [pc, #36]	; (800d670 <_Bfree+0x3c>)
 800d64c:	4809      	ldr	r0, [pc, #36]	; (800d674 <_Bfree+0x40>)
 800d64e:	218f      	movs	r1, #143	; 0x8f
 800d650:	f000 fd5c 	bl	800e10c <__assert_func>
 800d654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d658:	6006      	str	r6, [r0, #0]
 800d65a:	60c6      	str	r6, [r0, #12]
 800d65c:	b13c      	cbz	r4, 800d66e <_Bfree+0x3a>
 800d65e:	69eb      	ldr	r3, [r5, #28]
 800d660:	6862      	ldr	r2, [r4, #4]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d668:	6021      	str	r1, [r4, #0]
 800d66a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d66e:	bd70      	pop	{r4, r5, r6, pc}
 800d670:	0800e9dd 	.word	0x0800e9dd
 800d674:	0800ea5d 	.word	0x0800ea5d

0800d678 <__multadd>:
 800d678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67c:	690d      	ldr	r5, [r1, #16]
 800d67e:	4607      	mov	r7, r0
 800d680:	460c      	mov	r4, r1
 800d682:	461e      	mov	r6, r3
 800d684:	f101 0c14 	add.w	ip, r1, #20
 800d688:	2000      	movs	r0, #0
 800d68a:	f8dc 3000 	ldr.w	r3, [ip]
 800d68e:	b299      	uxth	r1, r3
 800d690:	fb02 6101 	mla	r1, r2, r1, r6
 800d694:	0c1e      	lsrs	r6, r3, #16
 800d696:	0c0b      	lsrs	r3, r1, #16
 800d698:	fb02 3306 	mla	r3, r2, r6, r3
 800d69c:	b289      	uxth	r1, r1
 800d69e:	3001      	adds	r0, #1
 800d6a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6a4:	4285      	cmp	r5, r0
 800d6a6:	f84c 1b04 	str.w	r1, [ip], #4
 800d6aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ae:	dcec      	bgt.n	800d68a <__multadd+0x12>
 800d6b0:	b30e      	cbz	r6, 800d6f6 <__multadd+0x7e>
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dc19      	bgt.n	800d6ec <__multadd+0x74>
 800d6b8:	6861      	ldr	r1, [r4, #4]
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	3101      	adds	r1, #1
 800d6be:	f7ff ff79 	bl	800d5b4 <_Balloc>
 800d6c2:	4680      	mov	r8, r0
 800d6c4:	b928      	cbnz	r0, 800d6d2 <__multadd+0x5a>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <__multadd+0x84>)
 800d6ca:	480d      	ldr	r0, [pc, #52]	; (800d700 <__multadd+0x88>)
 800d6cc:	21ba      	movs	r1, #186	; 0xba
 800d6ce:	f000 fd1d 	bl	800e10c <__assert_func>
 800d6d2:	6922      	ldr	r2, [r4, #16]
 800d6d4:	3202      	adds	r2, #2
 800d6d6:	f104 010c 	add.w	r1, r4, #12
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	300c      	adds	r0, #12
 800d6de:	f7fe ffe0 	bl	800c6a2 <memcpy>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f7ff ffa5 	bl	800d634 <_Bfree>
 800d6ea:	4644      	mov	r4, r8
 800d6ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6f0:	3501      	adds	r5, #1
 800d6f2:	615e      	str	r6, [r3, #20]
 800d6f4:	6125      	str	r5, [r4, #16]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	0800ea4c 	.word	0x0800ea4c
 800d700:	0800ea5d 	.word	0x0800ea5d

0800d704 <__hi0bits>:
 800d704:	0c03      	lsrs	r3, r0, #16
 800d706:	041b      	lsls	r3, r3, #16
 800d708:	b9d3      	cbnz	r3, 800d740 <__hi0bits+0x3c>
 800d70a:	0400      	lsls	r0, r0, #16
 800d70c:	2310      	movs	r3, #16
 800d70e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d712:	bf04      	itt	eq
 800d714:	0200      	lsleq	r0, r0, #8
 800d716:	3308      	addeq	r3, #8
 800d718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d71c:	bf04      	itt	eq
 800d71e:	0100      	lsleq	r0, r0, #4
 800d720:	3304      	addeq	r3, #4
 800d722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d726:	bf04      	itt	eq
 800d728:	0080      	lsleq	r0, r0, #2
 800d72a:	3302      	addeq	r3, #2
 800d72c:	2800      	cmp	r0, #0
 800d72e:	db05      	blt.n	800d73c <__hi0bits+0x38>
 800d730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d734:	f103 0301 	add.w	r3, r3, #1
 800d738:	bf08      	it	eq
 800d73a:	2320      	moveq	r3, #32
 800d73c:	4618      	mov	r0, r3
 800d73e:	4770      	bx	lr
 800d740:	2300      	movs	r3, #0
 800d742:	e7e4      	b.n	800d70e <__hi0bits+0xa>

0800d744 <__lo0bits>:
 800d744:	6803      	ldr	r3, [r0, #0]
 800d746:	f013 0207 	ands.w	r2, r3, #7
 800d74a:	d00c      	beq.n	800d766 <__lo0bits+0x22>
 800d74c:	07d9      	lsls	r1, r3, #31
 800d74e:	d422      	bmi.n	800d796 <__lo0bits+0x52>
 800d750:	079a      	lsls	r2, r3, #30
 800d752:	bf49      	itett	mi
 800d754:	085b      	lsrmi	r3, r3, #1
 800d756:	089b      	lsrpl	r3, r3, #2
 800d758:	6003      	strmi	r3, [r0, #0]
 800d75a:	2201      	movmi	r2, #1
 800d75c:	bf5c      	itt	pl
 800d75e:	6003      	strpl	r3, [r0, #0]
 800d760:	2202      	movpl	r2, #2
 800d762:	4610      	mov	r0, r2
 800d764:	4770      	bx	lr
 800d766:	b299      	uxth	r1, r3
 800d768:	b909      	cbnz	r1, 800d76e <__lo0bits+0x2a>
 800d76a:	0c1b      	lsrs	r3, r3, #16
 800d76c:	2210      	movs	r2, #16
 800d76e:	b2d9      	uxtb	r1, r3
 800d770:	b909      	cbnz	r1, 800d776 <__lo0bits+0x32>
 800d772:	3208      	adds	r2, #8
 800d774:	0a1b      	lsrs	r3, r3, #8
 800d776:	0719      	lsls	r1, r3, #28
 800d778:	bf04      	itt	eq
 800d77a:	091b      	lsreq	r3, r3, #4
 800d77c:	3204      	addeq	r2, #4
 800d77e:	0799      	lsls	r1, r3, #30
 800d780:	bf04      	itt	eq
 800d782:	089b      	lsreq	r3, r3, #2
 800d784:	3202      	addeq	r2, #2
 800d786:	07d9      	lsls	r1, r3, #31
 800d788:	d403      	bmi.n	800d792 <__lo0bits+0x4e>
 800d78a:	085b      	lsrs	r3, r3, #1
 800d78c:	f102 0201 	add.w	r2, r2, #1
 800d790:	d003      	beq.n	800d79a <__lo0bits+0x56>
 800d792:	6003      	str	r3, [r0, #0]
 800d794:	e7e5      	b.n	800d762 <__lo0bits+0x1e>
 800d796:	2200      	movs	r2, #0
 800d798:	e7e3      	b.n	800d762 <__lo0bits+0x1e>
 800d79a:	2220      	movs	r2, #32
 800d79c:	e7e1      	b.n	800d762 <__lo0bits+0x1e>
	...

0800d7a0 <__i2b>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	2101      	movs	r1, #1
 800d7a6:	f7ff ff05 	bl	800d5b4 <_Balloc>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	b928      	cbnz	r0, 800d7ba <__i2b+0x1a>
 800d7ae:	4b05      	ldr	r3, [pc, #20]	; (800d7c4 <__i2b+0x24>)
 800d7b0:	4805      	ldr	r0, [pc, #20]	; (800d7c8 <__i2b+0x28>)
 800d7b2:	f240 1145 	movw	r1, #325	; 0x145
 800d7b6:	f000 fca9 	bl	800e10c <__assert_func>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	6144      	str	r4, [r0, #20]
 800d7be:	6103      	str	r3, [r0, #16]
 800d7c0:	bd10      	pop	{r4, pc}
 800d7c2:	bf00      	nop
 800d7c4:	0800ea4c 	.word	0x0800ea4c
 800d7c8:	0800ea5d 	.word	0x0800ea5d

0800d7cc <__multiply>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	4691      	mov	r9, r2
 800d7d2:	690a      	ldr	r2, [r1, #16]
 800d7d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	bfb8      	it	lt
 800d7dc:	460b      	movlt	r3, r1
 800d7de:	460c      	mov	r4, r1
 800d7e0:	bfbc      	itt	lt
 800d7e2:	464c      	movlt	r4, r9
 800d7e4:	4699      	movlt	r9, r3
 800d7e6:	6927      	ldr	r7, [r4, #16]
 800d7e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7ec:	68a3      	ldr	r3, [r4, #8]
 800d7ee:	6861      	ldr	r1, [r4, #4]
 800d7f0:	eb07 060a 	add.w	r6, r7, sl
 800d7f4:	42b3      	cmp	r3, r6
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	bfb8      	it	lt
 800d7fa:	3101      	addlt	r1, #1
 800d7fc:	f7ff feda 	bl	800d5b4 <_Balloc>
 800d800:	b930      	cbnz	r0, 800d810 <__multiply+0x44>
 800d802:	4602      	mov	r2, r0
 800d804:	4b44      	ldr	r3, [pc, #272]	; (800d918 <__multiply+0x14c>)
 800d806:	4845      	ldr	r0, [pc, #276]	; (800d91c <__multiply+0x150>)
 800d808:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d80c:	f000 fc7e 	bl	800e10c <__assert_func>
 800d810:	f100 0514 	add.w	r5, r0, #20
 800d814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d818:	462b      	mov	r3, r5
 800d81a:	2200      	movs	r2, #0
 800d81c:	4543      	cmp	r3, r8
 800d81e:	d321      	bcc.n	800d864 <__multiply+0x98>
 800d820:	f104 0314 	add.w	r3, r4, #20
 800d824:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d828:	f109 0314 	add.w	r3, r9, #20
 800d82c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d830:	9202      	str	r2, [sp, #8]
 800d832:	1b3a      	subs	r2, r7, r4
 800d834:	3a15      	subs	r2, #21
 800d836:	f022 0203 	bic.w	r2, r2, #3
 800d83a:	3204      	adds	r2, #4
 800d83c:	f104 0115 	add.w	r1, r4, #21
 800d840:	428f      	cmp	r7, r1
 800d842:	bf38      	it	cc
 800d844:	2204      	movcc	r2, #4
 800d846:	9201      	str	r2, [sp, #4]
 800d848:	9a02      	ldr	r2, [sp, #8]
 800d84a:	9303      	str	r3, [sp, #12]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d80c      	bhi.n	800d86a <__multiply+0x9e>
 800d850:	2e00      	cmp	r6, #0
 800d852:	dd03      	ble.n	800d85c <__multiply+0x90>
 800d854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d05b      	beq.n	800d914 <__multiply+0x148>
 800d85c:	6106      	str	r6, [r0, #16]
 800d85e:	b005      	add	sp, #20
 800d860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d864:	f843 2b04 	str.w	r2, [r3], #4
 800d868:	e7d8      	b.n	800d81c <__multiply+0x50>
 800d86a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d86e:	f1ba 0f00 	cmp.w	sl, #0
 800d872:	d024      	beq.n	800d8be <__multiply+0xf2>
 800d874:	f104 0e14 	add.w	lr, r4, #20
 800d878:	46a9      	mov	r9, r5
 800d87a:	f04f 0c00 	mov.w	ip, #0
 800d87e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d882:	f8d9 1000 	ldr.w	r1, [r9]
 800d886:	fa1f fb82 	uxth.w	fp, r2
 800d88a:	b289      	uxth	r1, r1
 800d88c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d890:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d894:	f8d9 2000 	ldr.w	r2, [r9]
 800d898:	4461      	add	r1, ip
 800d89a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d89e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d8a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d8a6:	b289      	uxth	r1, r1
 800d8a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8ac:	4577      	cmp	r7, lr
 800d8ae:	f849 1b04 	str.w	r1, [r9], #4
 800d8b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8b6:	d8e2      	bhi.n	800d87e <__multiply+0xb2>
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	f845 c002 	str.w	ip, [r5, r2]
 800d8be:	9a03      	ldr	r2, [sp, #12]
 800d8c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ca:	d021      	beq.n	800d910 <__multiply+0x144>
 800d8cc:	6829      	ldr	r1, [r5, #0]
 800d8ce:	f104 0c14 	add.w	ip, r4, #20
 800d8d2:	46ae      	mov	lr, r5
 800d8d4:	f04f 0a00 	mov.w	sl, #0
 800d8d8:	f8bc b000 	ldrh.w	fp, [ip]
 800d8dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8e0:	fb09 220b 	mla	r2, r9, fp, r2
 800d8e4:	4452      	add	r2, sl
 800d8e6:	b289      	uxth	r1, r1
 800d8e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8ec:	f84e 1b04 	str.w	r1, [lr], #4
 800d8f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d8fc:	fb09 110a 	mla	r1, r9, sl, r1
 800d900:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d904:	4567      	cmp	r7, ip
 800d906:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d90a:	d8e5      	bhi.n	800d8d8 <__multiply+0x10c>
 800d90c:	9a01      	ldr	r2, [sp, #4]
 800d90e:	50a9      	str	r1, [r5, r2]
 800d910:	3504      	adds	r5, #4
 800d912:	e799      	b.n	800d848 <__multiply+0x7c>
 800d914:	3e01      	subs	r6, #1
 800d916:	e79b      	b.n	800d850 <__multiply+0x84>
 800d918:	0800ea4c 	.word	0x0800ea4c
 800d91c:	0800ea5d 	.word	0x0800ea5d

0800d920 <__pow5mult>:
 800d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d924:	4615      	mov	r5, r2
 800d926:	f012 0203 	ands.w	r2, r2, #3
 800d92a:	4606      	mov	r6, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	d007      	beq.n	800d940 <__pow5mult+0x20>
 800d930:	4c25      	ldr	r4, [pc, #148]	; (800d9c8 <__pow5mult+0xa8>)
 800d932:	3a01      	subs	r2, #1
 800d934:	2300      	movs	r3, #0
 800d936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d93a:	f7ff fe9d 	bl	800d678 <__multadd>
 800d93e:	4607      	mov	r7, r0
 800d940:	10ad      	asrs	r5, r5, #2
 800d942:	d03d      	beq.n	800d9c0 <__pow5mult+0xa0>
 800d944:	69f4      	ldr	r4, [r6, #28]
 800d946:	b97c      	cbnz	r4, 800d968 <__pow5mult+0x48>
 800d948:	2010      	movs	r0, #16
 800d94a:	f7ff fd7f 	bl	800d44c <malloc>
 800d94e:	4602      	mov	r2, r0
 800d950:	61f0      	str	r0, [r6, #28]
 800d952:	b928      	cbnz	r0, 800d960 <__pow5mult+0x40>
 800d954:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <__pow5mult+0xac>)
 800d956:	481e      	ldr	r0, [pc, #120]	; (800d9d0 <__pow5mult+0xb0>)
 800d958:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d95c:	f000 fbd6 	bl	800e10c <__assert_func>
 800d960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d964:	6004      	str	r4, [r0, #0]
 800d966:	60c4      	str	r4, [r0, #12]
 800d968:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d970:	b94c      	cbnz	r4, 800d986 <__pow5mult+0x66>
 800d972:	f240 2171 	movw	r1, #625	; 0x271
 800d976:	4630      	mov	r0, r6
 800d978:	f7ff ff12 	bl	800d7a0 <__i2b>
 800d97c:	2300      	movs	r3, #0
 800d97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d982:	4604      	mov	r4, r0
 800d984:	6003      	str	r3, [r0, #0]
 800d986:	f04f 0900 	mov.w	r9, #0
 800d98a:	07eb      	lsls	r3, r5, #31
 800d98c:	d50a      	bpl.n	800d9a4 <__pow5mult+0x84>
 800d98e:	4639      	mov	r1, r7
 800d990:	4622      	mov	r2, r4
 800d992:	4630      	mov	r0, r6
 800d994:	f7ff ff1a 	bl	800d7cc <__multiply>
 800d998:	4639      	mov	r1, r7
 800d99a:	4680      	mov	r8, r0
 800d99c:	4630      	mov	r0, r6
 800d99e:	f7ff fe49 	bl	800d634 <_Bfree>
 800d9a2:	4647      	mov	r7, r8
 800d9a4:	106d      	asrs	r5, r5, #1
 800d9a6:	d00b      	beq.n	800d9c0 <__pow5mult+0xa0>
 800d9a8:	6820      	ldr	r0, [r4, #0]
 800d9aa:	b938      	cbnz	r0, 800d9bc <__pow5mult+0x9c>
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f7ff ff0b 	bl	800d7cc <__multiply>
 800d9b6:	6020      	str	r0, [r4, #0]
 800d9b8:	f8c0 9000 	str.w	r9, [r0]
 800d9bc:	4604      	mov	r4, r0
 800d9be:	e7e4      	b.n	800d98a <__pow5mult+0x6a>
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0800eba8 	.word	0x0800eba8
 800d9cc:	0800e9dd 	.word	0x0800e9dd
 800d9d0:	0800ea5d 	.word	0x0800ea5d

0800d9d4 <__lshift>:
 800d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d8:	460c      	mov	r4, r1
 800d9da:	6849      	ldr	r1, [r1, #4]
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	4691      	mov	r9, r2
 800d9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9ec:	f108 0601 	add.w	r6, r8, #1
 800d9f0:	42b3      	cmp	r3, r6
 800d9f2:	db0b      	blt.n	800da0c <__lshift+0x38>
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	f7ff fddd 	bl	800d5b4 <_Balloc>
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	b948      	cbnz	r0, 800da12 <__lshift+0x3e>
 800d9fe:	4602      	mov	r2, r0
 800da00:	4b28      	ldr	r3, [pc, #160]	; (800daa4 <__lshift+0xd0>)
 800da02:	4829      	ldr	r0, [pc, #164]	; (800daa8 <__lshift+0xd4>)
 800da04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800da08:	f000 fb80 	bl	800e10c <__assert_func>
 800da0c:	3101      	adds	r1, #1
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	e7ee      	b.n	800d9f0 <__lshift+0x1c>
 800da12:	2300      	movs	r3, #0
 800da14:	f100 0114 	add.w	r1, r0, #20
 800da18:	f100 0210 	add.w	r2, r0, #16
 800da1c:	4618      	mov	r0, r3
 800da1e:	4553      	cmp	r3, sl
 800da20:	db33      	blt.n	800da8a <__lshift+0xb6>
 800da22:	6920      	ldr	r0, [r4, #16]
 800da24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da28:	f104 0314 	add.w	r3, r4, #20
 800da2c:	f019 091f 	ands.w	r9, r9, #31
 800da30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da38:	d02b      	beq.n	800da92 <__lshift+0xbe>
 800da3a:	f1c9 0e20 	rsb	lr, r9, #32
 800da3e:	468a      	mov	sl, r1
 800da40:	2200      	movs	r2, #0
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	fa00 f009 	lsl.w	r0, r0, r9
 800da48:	4310      	orrs	r0, r2
 800da4a:	f84a 0b04 	str.w	r0, [sl], #4
 800da4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da52:	459c      	cmp	ip, r3
 800da54:	fa22 f20e 	lsr.w	r2, r2, lr
 800da58:	d8f3      	bhi.n	800da42 <__lshift+0x6e>
 800da5a:	ebac 0304 	sub.w	r3, ip, r4
 800da5e:	3b15      	subs	r3, #21
 800da60:	f023 0303 	bic.w	r3, r3, #3
 800da64:	3304      	adds	r3, #4
 800da66:	f104 0015 	add.w	r0, r4, #21
 800da6a:	4584      	cmp	ip, r0
 800da6c:	bf38      	it	cc
 800da6e:	2304      	movcc	r3, #4
 800da70:	50ca      	str	r2, [r1, r3]
 800da72:	b10a      	cbz	r2, 800da78 <__lshift+0xa4>
 800da74:	f108 0602 	add.w	r6, r8, #2
 800da78:	3e01      	subs	r6, #1
 800da7a:	4638      	mov	r0, r7
 800da7c:	612e      	str	r6, [r5, #16]
 800da7e:	4621      	mov	r1, r4
 800da80:	f7ff fdd8 	bl	800d634 <_Bfree>
 800da84:	4628      	mov	r0, r5
 800da86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800da8e:	3301      	adds	r3, #1
 800da90:	e7c5      	b.n	800da1e <__lshift+0x4a>
 800da92:	3904      	subs	r1, #4
 800da94:	f853 2b04 	ldr.w	r2, [r3], #4
 800da98:	f841 2f04 	str.w	r2, [r1, #4]!
 800da9c:	459c      	cmp	ip, r3
 800da9e:	d8f9      	bhi.n	800da94 <__lshift+0xc0>
 800daa0:	e7ea      	b.n	800da78 <__lshift+0xa4>
 800daa2:	bf00      	nop
 800daa4:	0800ea4c 	.word	0x0800ea4c
 800daa8:	0800ea5d 	.word	0x0800ea5d

0800daac <__mcmp>:
 800daac:	b530      	push	{r4, r5, lr}
 800daae:	6902      	ldr	r2, [r0, #16]
 800dab0:	690c      	ldr	r4, [r1, #16]
 800dab2:	1b12      	subs	r2, r2, r4
 800dab4:	d10e      	bne.n	800dad4 <__mcmp+0x28>
 800dab6:	f100 0314 	add.w	r3, r0, #20
 800daba:	3114      	adds	r1, #20
 800dabc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dacc:	42a5      	cmp	r5, r4
 800dace:	d003      	beq.n	800dad8 <__mcmp+0x2c>
 800dad0:	d305      	bcc.n	800dade <__mcmp+0x32>
 800dad2:	2201      	movs	r2, #1
 800dad4:	4610      	mov	r0, r2
 800dad6:	bd30      	pop	{r4, r5, pc}
 800dad8:	4283      	cmp	r3, r0
 800dada:	d3f3      	bcc.n	800dac4 <__mcmp+0x18>
 800dadc:	e7fa      	b.n	800dad4 <__mcmp+0x28>
 800dade:	f04f 32ff 	mov.w	r2, #4294967295
 800dae2:	e7f7      	b.n	800dad4 <__mcmp+0x28>

0800dae4 <__mdiff>:
 800dae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	460c      	mov	r4, r1
 800daea:	4606      	mov	r6, r0
 800daec:	4611      	mov	r1, r2
 800daee:	4620      	mov	r0, r4
 800daf0:	4690      	mov	r8, r2
 800daf2:	f7ff ffdb 	bl	800daac <__mcmp>
 800daf6:	1e05      	subs	r5, r0, #0
 800daf8:	d110      	bne.n	800db1c <__mdiff+0x38>
 800dafa:	4629      	mov	r1, r5
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7ff fd59 	bl	800d5b4 <_Balloc>
 800db02:	b930      	cbnz	r0, 800db12 <__mdiff+0x2e>
 800db04:	4b3a      	ldr	r3, [pc, #232]	; (800dbf0 <__mdiff+0x10c>)
 800db06:	4602      	mov	r2, r0
 800db08:	f240 2137 	movw	r1, #567	; 0x237
 800db0c:	4839      	ldr	r0, [pc, #228]	; (800dbf4 <__mdiff+0x110>)
 800db0e:	f000 fafd 	bl	800e10c <__assert_func>
 800db12:	2301      	movs	r3, #1
 800db14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1c:	bfa4      	itt	ge
 800db1e:	4643      	movge	r3, r8
 800db20:	46a0      	movge	r8, r4
 800db22:	4630      	mov	r0, r6
 800db24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db28:	bfa6      	itte	ge
 800db2a:	461c      	movge	r4, r3
 800db2c:	2500      	movge	r5, #0
 800db2e:	2501      	movlt	r5, #1
 800db30:	f7ff fd40 	bl	800d5b4 <_Balloc>
 800db34:	b920      	cbnz	r0, 800db40 <__mdiff+0x5c>
 800db36:	4b2e      	ldr	r3, [pc, #184]	; (800dbf0 <__mdiff+0x10c>)
 800db38:	4602      	mov	r2, r0
 800db3a:	f240 2145 	movw	r1, #581	; 0x245
 800db3e:	e7e5      	b.n	800db0c <__mdiff+0x28>
 800db40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db44:	6926      	ldr	r6, [r4, #16]
 800db46:	60c5      	str	r5, [r0, #12]
 800db48:	f104 0914 	add.w	r9, r4, #20
 800db4c:	f108 0514 	add.w	r5, r8, #20
 800db50:	f100 0e14 	add.w	lr, r0, #20
 800db54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db5c:	f108 0210 	add.w	r2, r8, #16
 800db60:	46f2      	mov	sl, lr
 800db62:	2100      	movs	r1, #0
 800db64:	f859 3b04 	ldr.w	r3, [r9], #4
 800db68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db6c:	fa11 f88b 	uxtah	r8, r1, fp
 800db70:	b299      	uxth	r1, r3
 800db72:	0c1b      	lsrs	r3, r3, #16
 800db74:	eba8 0801 	sub.w	r8, r8, r1
 800db78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db80:	fa1f f888 	uxth.w	r8, r8
 800db84:	1419      	asrs	r1, r3, #16
 800db86:	454e      	cmp	r6, r9
 800db88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db8c:	f84a 3b04 	str.w	r3, [sl], #4
 800db90:	d8e8      	bhi.n	800db64 <__mdiff+0x80>
 800db92:	1b33      	subs	r3, r6, r4
 800db94:	3b15      	subs	r3, #21
 800db96:	f023 0303 	bic.w	r3, r3, #3
 800db9a:	3304      	adds	r3, #4
 800db9c:	3415      	adds	r4, #21
 800db9e:	42a6      	cmp	r6, r4
 800dba0:	bf38      	it	cc
 800dba2:	2304      	movcc	r3, #4
 800dba4:	441d      	add	r5, r3
 800dba6:	4473      	add	r3, lr
 800dba8:	469e      	mov	lr, r3
 800dbaa:	462e      	mov	r6, r5
 800dbac:	4566      	cmp	r6, ip
 800dbae:	d30e      	bcc.n	800dbce <__mdiff+0xea>
 800dbb0:	f10c 0203 	add.w	r2, ip, #3
 800dbb4:	1b52      	subs	r2, r2, r5
 800dbb6:	f022 0203 	bic.w	r2, r2, #3
 800dbba:	3d03      	subs	r5, #3
 800dbbc:	45ac      	cmp	ip, r5
 800dbbe:	bf38      	it	cc
 800dbc0:	2200      	movcc	r2, #0
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dbc8:	b17a      	cbz	r2, 800dbea <__mdiff+0x106>
 800dbca:	6107      	str	r7, [r0, #16]
 800dbcc:	e7a4      	b.n	800db18 <__mdiff+0x34>
 800dbce:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbd2:	fa11 f288 	uxtah	r2, r1, r8
 800dbd6:	1414      	asrs	r4, r2, #16
 800dbd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbdc:	b292      	uxth	r2, r2
 800dbde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbe2:	f84e 2b04 	str.w	r2, [lr], #4
 800dbe6:	1421      	asrs	r1, r4, #16
 800dbe8:	e7e0      	b.n	800dbac <__mdiff+0xc8>
 800dbea:	3f01      	subs	r7, #1
 800dbec:	e7ea      	b.n	800dbc4 <__mdiff+0xe0>
 800dbee:	bf00      	nop
 800dbf0:	0800ea4c 	.word	0x0800ea4c
 800dbf4:	0800ea5d 	.word	0x0800ea5d

0800dbf8 <__d2b>:
 800dbf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	460f      	mov	r7, r1
 800dbfe:	2101      	movs	r1, #1
 800dc00:	ec59 8b10 	vmov	r8, r9, d0
 800dc04:	4616      	mov	r6, r2
 800dc06:	f7ff fcd5 	bl	800d5b4 <_Balloc>
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	b930      	cbnz	r0, 800dc1c <__d2b+0x24>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	4b24      	ldr	r3, [pc, #144]	; (800dca4 <__d2b+0xac>)
 800dc12:	4825      	ldr	r0, [pc, #148]	; (800dca8 <__d2b+0xb0>)
 800dc14:	f240 310f 	movw	r1, #783	; 0x30f
 800dc18:	f000 fa78 	bl	800e10c <__assert_func>
 800dc1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc24:	bb2d      	cbnz	r5, 800dc72 <__d2b+0x7a>
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	f1b8 0300 	subs.w	r3, r8, #0
 800dc2c:	d026      	beq.n	800dc7c <__d2b+0x84>
 800dc2e:	4668      	mov	r0, sp
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	f7ff fd87 	bl	800d744 <__lo0bits>
 800dc36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc3a:	b1e8      	cbz	r0, 800dc78 <__d2b+0x80>
 800dc3c:	f1c0 0320 	rsb	r3, r0, #32
 800dc40:	fa02 f303 	lsl.w	r3, r2, r3
 800dc44:	430b      	orrs	r3, r1
 800dc46:	40c2      	lsrs	r2, r0
 800dc48:	6163      	str	r3, [r4, #20]
 800dc4a:	9201      	str	r2, [sp, #4]
 800dc4c:	9b01      	ldr	r3, [sp, #4]
 800dc4e:	61a3      	str	r3, [r4, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bf14      	ite	ne
 800dc54:	2202      	movne	r2, #2
 800dc56:	2201      	moveq	r2, #1
 800dc58:	6122      	str	r2, [r4, #16]
 800dc5a:	b1bd      	cbz	r5, 800dc8c <__d2b+0x94>
 800dc5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc60:	4405      	add	r5, r0
 800dc62:	603d      	str	r5, [r7, #0]
 800dc64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc68:	6030      	str	r0, [r6, #0]
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	b003      	add	sp, #12
 800dc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc76:	e7d6      	b.n	800dc26 <__d2b+0x2e>
 800dc78:	6161      	str	r1, [r4, #20]
 800dc7a:	e7e7      	b.n	800dc4c <__d2b+0x54>
 800dc7c:	a801      	add	r0, sp, #4
 800dc7e:	f7ff fd61 	bl	800d744 <__lo0bits>
 800dc82:	9b01      	ldr	r3, [sp, #4]
 800dc84:	6163      	str	r3, [r4, #20]
 800dc86:	3020      	adds	r0, #32
 800dc88:	2201      	movs	r2, #1
 800dc8a:	e7e5      	b.n	800dc58 <__d2b+0x60>
 800dc8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc94:	6038      	str	r0, [r7, #0]
 800dc96:	6918      	ldr	r0, [r3, #16]
 800dc98:	f7ff fd34 	bl	800d704 <__hi0bits>
 800dc9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dca0:	e7e2      	b.n	800dc68 <__d2b+0x70>
 800dca2:	bf00      	nop
 800dca4:	0800ea4c 	.word	0x0800ea4c
 800dca8:	0800ea5d 	.word	0x0800ea5d

0800dcac <__ssputs_r>:
 800dcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb0:	688e      	ldr	r6, [r1, #8]
 800dcb2:	461f      	mov	r7, r3
 800dcb4:	42be      	cmp	r6, r7
 800dcb6:	680b      	ldr	r3, [r1, #0]
 800dcb8:	4682      	mov	sl, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	4690      	mov	r8, r2
 800dcbe:	d82c      	bhi.n	800dd1a <__ssputs_r+0x6e>
 800dcc0:	898a      	ldrh	r2, [r1, #12]
 800dcc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcc6:	d026      	beq.n	800dd16 <__ssputs_r+0x6a>
 800dcc8:	6965      	ldr	r5, [r4, #20]
 800dcca:	6909      	ldr	r1, [r1, #16]
 800dccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcd0:	eba3 0901 	sub.w	r9, r3, r1
 800dcd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcd8:	1c7b      	adds	r3, r7, #1
 800dcda:	444b      	add	r3, r9
 800dcdc:	106d      	asrs	r5, r5, #1
 800dcde:	429d      	cmp	r5, r3
 800dce0:	bf38      	it	cc
 800dce2:	461d      	movcc	r5, r3
 800dce4:	0553      	lsls	r3, r2, #21
 800dce6:	d527      	bpl.n	800dd38 <__ssputs_r+0x8c>
 800dce8:	4629      	mov	r1, r5
 800dcea:	f7ff fbd7 	bl	800d49c <_malloc_r>
 800dcee:	4606      	mov	r6, r0
 800dcf0:	b360      	cbz	r0, 800dd4c <__ssputs_r+0xa0>
 800dcf2:	6921      	ldr	r1, [r4, #16]
 800dcf4:	464a      	mov	r2, r9
 800dcf6:	f7fe fcd4 	bl	800c6a2 <memcpy>
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd04:	81a3      	strh	r3, [r4, #12]
 800dd06:	6126      	str	r6, [r4, #16]
 800dd08:	6165      	str	r5, [r4, #20]
 800dd0a:	444e      	add	r6, r9
 800dd0c:	eba5 0509 	sub.w	r5, r5, r9
 800dd10:	6026      	str	r6, [r4, #0]
 800dd12:	60a5      	str	r5, [r4, #8]
 800dd14:	463e      	mov	r6, r7
 800dd16:	42be      	cmp	r6, r7
 800dd18:	d900      	bls.n	800dd1c <__ssputs_r+0x70>
 800dd1a:	463e      	mov	r6, r7
 800dd1c:	6820      	ldr	r0, [r4, #0]
 800dd1e:	4632      	mov	r2, r6
 800dd20:	4641      	mov	r1, r8
 800dd22:	f000 f9c9 	bl	800e0b8 <memmove>
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	1b9b      	subs	r3, r3, r6
 800dd2a:	60a3      	str	r3, [r4, #8]
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	4433      	add	r3, r6
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	2000      	movs	r0, #0
 800dd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd38:	462a      	mov	r2, r5
 800dd3a:	f000 fa2d 	bl	800e198 <_realloc_r>
 800dd3e:	4606      	mov	r6, r0
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d1e0      	bne.n	800dd06 <__ssputs_r+0x5a>
 800dd44:	6921      	ldr	r1, [r4, #16]
 800dd46:	4650      	mov	r0, sl
 800dd48:	f7ff fb34 	bl	800d3b4 <_free_r>
 800dd4c:	230c      	movs	r3, #12
 800dd4e:	f8ca 3000 	str.w	r3, [sl]
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5e:	e7e9      	b.n	800dd34 <__ssputs_r+0x88>

0800dd60 <_svfiprintf_r>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	4698      	mov	r8, r3
 800dd66:	898b      	ldrh	r3, [r1, #12]
 800dd68:	061b      	lsls	r3, r3, #24
 800dd6a:	b09d      	sub	sp, #116	; 0x74
 800dd6c:	4607      	mov	r7, r0
 800dd6e:	460d      	mov	r5, r1
 800dd70:	4614      	mov	r4, r2
 800dd72:	d50e      	bpl.n	800dd92 <_svfiprintf_r+0x32>
 800dd74:	690b      	ldr	r3, [r1, #16]
 800dd76:	b963      	cbnz	r3, 800dd92 <_svfiprintf_r+0x32>
 800dd78:	2140      	movs	r1, #64	; 0x40
 800dd7a:	f7ff fb8f 	bl	800d49c <_malloc_r>
 800dd7e:	6028      	str	r0, [r5, #0]
 800dd80:	6128      	str	r0, [r5, #16]
 800dd82:	b920      	cbnz	r0, 800dd8e <_svfiprintf_r+0x2e>
 800dd84:	230c      	movs	r3, #12
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8c:	e0d0      	b.n	800df30 <_svfiprintf_r+0x1d0>
 800dd8e:	2340      	movs	r3, #64	; 0x40
 800dd90:	616b      	str	r3, [r5, #20]
 800dd92:	2300      	movs	r3, #0
 800dd94:	9309      	str	r3, [sp, #36]	; 0x24
 800dd96:	2320      	movs	r3, #32
 800dd98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dda0:	2330      	movs	r3, #48	; 0x30
 800dda2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800df48 <_svfiprintf_r+0x1e8>
 800dda6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddaa:	f04f 0901 	mov.w	r9, #1
 800ddae:	4623      	mov	r3, r4
 800ddb0:	469a      	mov	sl, r3
 800ddb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb6:	b10a      	cbz	r2, 800ddbc <_svfiprintf_r+0x5c>
 800ddb8:	2a25      	cmp	r2, #37	; 0x25
 800ddba:	d1f9      	bne.n	800ddb0 <_svfiprintf_r+0x50>
 800ddbc:	ebba 0b04 	subs.w	fp, sl, r4
 800ddc0:	d00b      	beq.n	800ddda <_svfiprintf_r+0x7a>
 800ddc2:	465b      	mov	r3, fp
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	4638      	mov	r0, r7
 800ddca:	f7ff ff6f 	bl	800dcac <__ssputs_r>
 800ddce:	3001      	adds	r0, #1
 800ddd0:	f000 80a9 	beq.w	800df26 <_svfiprintf_r+0x1c6>
 800ddd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd6:	445a      	add	r2, fp
 800ddd8:	9209      	str	r2, [sp, #36]	; 0x24
 800ddda:	f89a 3000 	ldrb.w	r3, [sl]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 80a1 	beq.w	800df26 <_svfiprintf_r+0x1c6>
 800dde4:	2300      	movs	r3, #0
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddee:	f10a 0a01 	add.w	sl, sl, #1
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	9307      	str	r3, [sp, #28]
 800ddf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddfa:	931a      	str	r3, [sp, #104]	; 0x68
 800ddfc:	4654      	mov	r4, sl
 800ddfe:	2205      	movs	r2, #5
 800de00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de04:	4850      	ldr	r0, [pc, #320]	; (800df48 <_svfiprintf_r+0x1e8>)
 800de06:	f7f2 f9e3 	bl	80001d0 <memchr>
 800de0a:	9a04      	ldr	r2, [sp, #16]
 800de0c:	b9d8      	cbnz	r0, 800de46 <_svfiprintf_r+0xe6>
 800de0e:	06d0      	lsls	r0, r2, #27
 800de10:	bf44      	itt	mi
 800de12:	2320      	movmi	r3, #32
 800de14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de18:	0711      	lsls	r1, r2, #28
 800de1a:	bf44      	itt	mi
 800de1c:	232b      	movmi	r3, #43	; 0x2b
 800de1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de22:	f89a 3000 	ldrb.w	r3, [sl]
 800de26:	2b2a      	cmp	r3, #42	; 0x2a
 800de28:	d015      	beq.n	800de56 <_svfiprintf_r+0xf6>
 800de2a:	9a07      	ldr	r2, [sp, #28]
 800de2c:	4654      	mov	r4, sl
 800de2e:	2000      	movs	r0, #0
 800de30:	f04f 0c0a 	mov.w	ip, #10
 800de34:	4621      	mov	r1, r4
 800de36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de3a:	3b30      	subs	r3, #48	; 0x30
 800de3c:	2b09      	cmp	r3, #9
 800de3e:	d94d      	bls.n	800dedc <_svfiprintf_r+0x17c>
 800de40:	b1b0      	cbz	r0, 800de70 <_svfiprintf_r+0x110>
 800de42:	9207      	str	r2, [sp, #28]
 800de44:	e014      	b.n	800de70 <_svfiprintf_r+0x110>
 800de46:	eba0 0308 	sub.w	r3, r0, r8
 800de4a:	fa09 f303 	lsl.w	r3, r9, r3
 800de4e:	4313      	orrs	r3, r2
 800de50:	9304      	str	r3, [sp, #16]
 800de52:	46a2      	mov	sl, r4
 800de54:	e7d2      	b.n	800ddfc <_svfiprintf_r+0x9c>
 800de56:	9b03      	ldr	r3, [sp, #12]
 800de58:	1d19      	adds	r1, r3, #4
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	9103      	str	r1, [sp, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	bfbb      	ittet	lt
 800de62:	425b      	neglt	r3, r3
 800de64:	f042 0202 	orrlt.w	r2, r2, #2
 800de68:	9307      	strge	r3, [sp, #28]
 800de6a:	9307      	strlt	r3, [sp, #28]
 800de6c:	bfb8      	it	lt
 800de6e:	9204      	strlt	r2, [sp, #16]
 800de70:	7823      	ldrb	r3, [r4, #0]
 800de72:	2b2e      	cmp	r3, #46	; 0x2e
 800de74:	d10c      	bne.n	800de90 <_svfiprintf_r+0x130>
 800de76:	7863      	ldrb	r3, [r4, #1]
 800de78:	2b2a      	cmp	r3, #42	; 0x2a
 800de7a:	d134      	bne.n	800dee6 <_svfiprintf_r+0x186>
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	1d1a      	adds	r2, r3, #4
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	9203      	str	r2, [sp, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfb8      	it	lt
 800de88:	f04f 33ff 	movlt.w	r3, #4294967295
 800de8c:	3402      	adds	r4, #2
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800df58 <_svfiprintf_r+0x1f8>
 800de94:	7821      	ldrb	r1, [r4, #0]
 800de96:	2203      	movs	r2, #3
 800de98:	4650      	mov	r0, sl
 800de9a:	f7f2 f999 	bl	80001d0 <memchr>
 800de9e:	b138      	cbz	r0, 800deb0 <_svfiprintf_r+0x150>
 800dea0:	9b04      	ldr	r3, [sp, #16]
 800dea2:	eba0 000a 	sub.w	r0, r0, sl
 800dea6:	2240      	movs	r2, #64	; 0x40
 800dea8:	4082      	lsls	r2, r0
 800deaa:	4313      	orrs	r3, r2
 800deac:	3401      	adds	r4, #1
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb4:	4825      	ldr	r0, [pc, #148]	; (800df4c <_svfiprintf_r+0x1ec>)
 800deb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deba:	2206      	movs	r2, #6
 800debc:	f7f2 f988 	bl	80001d0 <memchr>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d038      	beq.n	800df36 <_svfiprintf_r+0x1d6>
 800dec4:	4b22      	ldr	r3, [pc, #136]	; (800df50 <_svfiprintf_r+0x1f0>)
 800dec6:	bb1b      	cbnz	r3, 800df10 <_svfiprintf_r+0x1b0>
 800dec8:	9b03      	ldr	r3, [sp, #12]
 800deca:	3307      	adds	r3, #7
 800decc:	f023 0307 	bic.w	r3, r3, #7
 800ded0:	3308      	adds	r3, #8
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded6:	4433      	add	r3, r6
 800ded8:	9309      	str	r3, [sp, #36]	; 0x24
 800deda:	e768      	b.n	800ddae <_svfiprintf_r+0x4e>
 800dedc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee0:	460c      	mov	r4, r1
 800dee2:	2001      	movs	r0, #1
 800dee4:	e7a6      	b.n	800de34 <_svfiprintf_r+0xd4>
 800dee6:	2300      	movs	r3, #0
 800dee8:	3401      	adds	r4, #1
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	4619      	mov	r1, r3
 800deee:	f04f 0c0a 	mov.w	ip, #10
 800def2:	4620      	mov	r0, r4
 800def4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def8:	3a30      	subs	r2, #48	; 0x30
 800defa:	2a09      	cmp	r2, #9
 800defc:	d903      	bls.n	800df06 <_svfiprintf_r+0x1a6>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0c6      	beq.n	800de90 <_svfiprintf_r+0x130>
 800df02:	9105      	str	r1, [sp, #20]
 800df04:	e7c4      	b.n	800de90 <_svfiprintf_r+0x130>
 800df06:	fb0c 2101 	mla	r1, ip, r1, r2
 800df0a:	4604      	mov	r4, r0
 800df0c:	2301      	movs	r3, #1
 800df0e:	e7f0      	b.n	800def2 <_svfiprintf_r+0x192>
 800df10:	ab03      	add	r3, sp, #12
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	462a      	mov	r2, r5
 800df16:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <_svfiprintf_r+0x1f4>)
 800df18:	a904      	add	r1, sp, #16
 800df1a:	4638      	mov	r0, r7
 800df1c:	f7fd fe00 	bl	800bb20 <_printf_float>
 800df20:	1c42      	adds	r2, r0, #1
 800df22:	4606      	mov	r6, r0
 800df24:	d1d6      	bne.n	800ded4 <_svfiprintf_r+0x174>
 800df26:	89ab      	ldrh	r3, [r5, #12]
 800df28:	065b      	lsls	r3, r3, #25
 800df2a:	f53f af2d 	bmi.w	800dd88 <_svfiprintf_r+0x28>
 800df2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df30:	b01d      	add	sp, #116	; 0x74
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	ab03      	add	r3, sp, #12
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	462a      	mov	r2, r5
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <_svfiprintf_r+0x1f4>)
 800df3e:	a904      	add	r1, sp, #16
 800df40:	4638      	mov	r0, r7
 800df42:	f7fe f891 	bl	800c068 <_printf_i>
 800df46:	e7eb      	b.n	800df20 <_svfiprintf_r+0x1c0>
 800df48:	0800ebb4 	.word	0x0800ebb4
 800df4c:	0800ebbe 	.word	0x0800ebbe
 800df50:	0800bb21 	.word	0x0800bb21
 800df54:	0800dcad 	.word	0x0800dcad
 800df58:	0800ebba 	.word	0x0800ebba

0800df5c <__sflush_r>:
 800df5c:	898a      	ldrh	r2, [r1, #12]
 800df5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df62:	4605      	mov	r5, r0
 800df64:	0710      	lsls	r0, r2, #28
 800df66:	460c      	mov	r4, r1
 800df68:	d458      	bmi.n	800e01c <__sflush_r+0xc0>
 800df6a:	684b      	ldr	r3, [r1, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dc05      	bgt.n	800df7c <__sflush_r+0x20>
 800df70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df72:	2b00      	cmp	r3, #0
 800df74:	dc02      	bgt.n	800df7c <__sflush_r+0x20>
 800df76:	2000      	movs	r0, #0
 800df78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df7e:	2e00      	cmp	r6, #0
 800df80:	d0f9      	beq.n	800df76 <__sflush_r+0x1a>
 800df82:	2300      	movs	r3, #0
 800df84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df88:	682f      	ldr	r7, [r5, #0]
 800df8a:	6a21      	ldr	r1, [r4, #32]
 800df8c:	602b      	str	r3, [r5, #0]
 800df8e:	d032      	beq.n	800dff6 <__sflush_r+0x9a>
 800df90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df92:	89a3      	ldrh	r3, [r4, #12]
 800df94:	075a      	lsls	r2, r3, #29
 800df96:	d505      	bpl.n	800dfa4 <__sflush_r+0x48>
 800df98:	6863      	ldr	r3, [r4, #4]
 800df9a:	1ac0      	subs	r0, r0, r3
 800df9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df9e:	b10b      	cbz	r3, 800dfa4 <__sflush_r+0x48>
 800dfa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfa2:	1ac0      	subs	r0, r0, r3
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfaa:	6a21      	ldr	r1, [r4, #32]
 800dfac:	4628      	mov	r0, r5
 800dfae:	47b0      	blx	r6
 800dfb0:	1c43      	adds	r3, r0, #1
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	d106      	bne.n	800dfc4 <__sflush_r+0x68>
 800dfb6:	6829      	ldr	r1, [r5, #0]
 800dfb8:	291d      	cmp	r1, #29
 800dfba:	d82b      	bhi.n	800e014 <__sflush_r+0xb8>
 800dfbc:	4a29      	ldr	r2, [pc, #164]	; (800e064 <__sflush_r+0x108>)
 800dfbe:	410a      	asrs	r2, r1
 800dfc0:	07d6      	lsls	r6, r2, #31
 800dfc2:	d427      	bmi.n	800e014 <__sflush_r+0xb8>
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	6062      	str	r2, [r4, #4]
 800dfc8:	04d9      	lsls	r1, r3, #19
 800dfca:	6922      	ldr	r2, [r4, #16]
 800dfcc:	6022      	str	r2, [r4, #0]
 800dfce:	d504      	bpl.n	800dfda <__sflush_r+0x7e>
 800dfd0:	1c42      	adds	r2, r0, #1
 800dfd2:	d101      	bne.n	800dfd8 <__sflush_r+0x7c>
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	b903      	cbnz	r3, 800dfda <__sflush_r+0x7e>
 800dfd8:	6560      	str	r0, [r4, #84]	; 0x54
 800dfda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfdc:	602f      	str	r7, [r5, #0]
 800dfde:	2900      	cmp	r1, #0
 800dfe0:	d0c9      	beq.n	800df76 <__sflush_r+0x1a>
 800dfe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	d002      	beq.n	800dff0 <__sflush_r+0x94>
 800dfea:	4628      	mov	r0, r5
 800dfec:	f7ff f9e2 	bl	800d3b4 <_free_r>
 800dff0:	2000      	movs	r0, #0
 800dff2:	6360      	str	r0, [r4, #52]	; 0x34
 800dff4:	e7c0      	b.n	800df78 <__sflush_r+0x1c>
 800dff6:	2301      	movs	r3, #1
 800dff8:	4628      	mov	r0, r5
 800dffa:	47b0      	blx	r6
 800dffc:	1c41      	adds	r1, r0, #1
 800dffe:	d1c8      	bne.n	800df92 <__sflush_r+0x36>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0c5      	beq.n	800df92 <__sflush_r+0x36>
 800e006:	2b1d      	cmp	r3, #29
 800e008:	d001      	beq.n	800e00e <__sflush_r+0xb2>
 800e00a:	2b16      	cmp	r3, #22
 800e00c:	d101      	bne.n	800e012 <__sflush_r+0xb6>
 800e00e:	602f      	str	r7, [r5, #0]
 800e010:	e7b1      	b.n	800df76 <__sflush_r+0x1a>
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e018:	81a3      	strh	r3, [r4, #12]
 800e01a:	e7ad      	b.n	800df78 <__sflush_r+0x1c>
 800e01c:	690f      	ldr	r7, [r1, #16]
 800e01e:	2f00      	cmp	r7, #0
 800e020:	d0a9      	beq.n	800df76 <__sflush_r+0x1a>
 800e022:	0793      	lsls	r3, r2, #30
 800e024:	680e      	ldr	r6, [r1, #0]
 800e026:	bf08      	it	eq
 800e028:	694b      	ldreq	r3, [r1, #20]
 800e02a:	600f      	str	r7, [r1, #0]
 800e02c:	bf18      	it	ne
 800e02e:	2300      	movne	r3, #0
 800e030:	eba6 0807 	sub.w	r8, r6, r7
 800e034:	608b      	str	r3, [r1, #8]
 800e036:	f1b8 0f00 	cmp.w	r8, #0
 800e03a:	dd9c      	ble.n	800df76 <__sflush_r+0x1a>
 800e03c:	6a21      	ldr	r1, [r4, #32]
 800e03e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e040:	4643      	mov	r3, r8
 800e042:	463a      	mov	r2, r7
 800e044:	4628      	mov	r0, r5
 800e046:	47b0      	blx	r6
 800e048:	2800      	cmp	r0, #0
 800e04a:	dc06      	bgt.n	800e05a <__sflush_r+0xfe>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e052:	81a3      	strh	r3, [r4, #12]
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	e78e      	b.n	800df78 <__sflush_r+0x1c>
 800e05a:	4407      	add	r7, r0
 800e05c:	eba8 0800 	sub.w	r8, r8, r0
 800e060:	e7e9      	b.n	800e036 <__sflush_r+0xda>
 800e062:	bf00      	nop
 800e064:	dfbffffe 	.word	0xdfbffffe

0800e068 <_fflush_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	690b      	ldr	r3, [r1, #16]
 800e06c:	4605      	mov	r5, r0
 800e06e:	460c      	mov	r4, r1
 800e070:	b913      	cbnz	r3, 800e078 <_fflush_r+0x10>
 800e072:	2500      	movs	r5, #0
 800e074:	4628      	mov	r0, r5
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	b118      	cbz	r0, 800e082 <_fflush_r+0x1a>
 800e07a:	6a03      	ldr	r3, [r0, #32]
 800e07c:	b90b      	cbnz	r3, 800e082 <_fflush_r+0x1a>
 800e07e:	f7fe f9a1 	bl	800c3c4 <__sinit>
 800e082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0f3      	beq.n	800e072 <_fflush_r+0xa>
 800e08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e08c:	07d0      	lsls	r0, r2, #31
 800e08e:	d404      	bmi.n	800e09a <_fflush_r+0x32>
 800e090:	0599      	lsls	r1, r3, #22
 800e092:	d402      	bmi.n	800e09a <_fflush_r+0x32>
 800e094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e096:	f7fe fb02 	bl	800c69e <__retarget_lock_acquire_recursive>
 800e09a:	4628      	mov	r0, r5
 800e09c:	4621      	mov	r1, r4
 800e09e:	f7ff ff5d 	bl	800df5c <__sflush_r>
 800e0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a4:	07da      	lsls	r2, r3, #31
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	d4e4      	bmi.n	800e074 <_fflush_r+0xc>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	059b      	lsls	r3, r3, #22
 800e0ae:	d4e1      	bmi.n	800e074 <_fflush_r+0xc>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f7fe faf5 	bl	800c6a0 <__retarget_lock_release_recursive>
 800e0b6:	e7dd      	b.n	800e074 <_fflush_r+0xc>

0800e0b8 <memmove>:
 800e0b8:	4288      	cmp	r0, r1
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	eb01 0402 	add.w	r4, r1, r2
 800e0c0:	d902      	bls.n	800e0c8 <memmove+0x10>
 800e0c2:	4284      	cmp	r4, r0
 800e0c4:	4623      	mov	r3, r4
 800e0c6:	d807      	bhi.n	800e0d8 <memmove+0x20>
 800e0c8:	1e43      	subs	r3, r0, #1
 800e0ca:	42a1      	cmp	r1, r4
 800e0cc:	d008      	beq.n	800e0e0 <memmove+0x28>
 800e0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0d6:	e7f8      	b.n	800e0ca <memmove+0x12>
 800e0d8:	4402      	add	r2, r0
 800e0da:	4601      	mov	r1, r0
 800e0dc:	428a      	cmp	r2, r1
 800e0de:	d100      	bne.n	800e0e2 <memmove+0x2a>
 800e0e0:	bd10      	pop	{r4, pc}
 800e0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0ea:	e7f7      	b.n	800e0dc <memmove+0x24>

0800e0ec <_sbrk_r>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	4d06      	ldr	r5, [pc, #24]	; (800e108 <_sbrk_r+0x1c>)
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	4608      	mov	r0, r1
 800e0f6:	602b      	str	r3, [r5, #0]
 800e0f8:	f7f3 fb50 	bl	800179c <_sbrk>
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	d102      	bne.n	800e106 <_sbrk_r+0x1a>
 800e100:	682b      	ldr	r3, [r5, #0]
 800e102:	b103      	cbz	r3, 800e106 <_sbrk_r+0x1a>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	20006b04 	.word	0x20006b04

0800e10c <__assert_func>:
 800e10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e10e:	4614      	mov	r4, r2
 800e110:	461a      	mov	r2, r3
 800e112:	4b09      	ldr	r3, [pc, #36]	; (800e138 <__assert_func+0x2c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4605      	mov	r5, r0
 800e118:	68d8      	ldr	r0, [r3, #12]
 800e11a:	b14c      	cbz	r4, 800e130 <__assert_func+0x24>
 800e11c:	4b07      	ldr	r3, [pc, #28]	; (800e13c <__assert_func+0x30>)
 800e11e:	9100      	str	r1, [sp, #0]
 800e120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e124:	4906      	ldr	r1, [pc, #24]	; (800e140 <__assert_func+0x34>)
 800e126:	462b      	mov	r3, r5
 800e128:	f000 f872 	bl	800e210 <fiprintf>
 800e12c:	f000 f882 	bl	800e234 <abort>
 800e130:	4b04      	ldr	r3, [pc, #16]	; (800e144 <__assert_func+0x38>)
 800e132:	461c      	mov	r4, r3
 800e134:	e7f3      	b.n	800e11e <__assert_func+0x12>
 800e136:	bf00      	nop
 800e138:	20000158 	.word	0x20000158
 800e13c:	0800ebcf 	.word	0x0800ebcf
 800e140:	0800ebdc 	.word	0x0800ebdc
 800e144:	0800ec0a 	.word	0x0800ec0a

0800e148 <_calloc_r>:
 800e148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e14a:	fba1 2402 	umull	r2, r4, r1, r2
 800e14e:	b94c      	cbnz	r4, 800e164 <_calloc_r+0x1c>
 800e150:	4611      	mov	r1, r2
 800e152:	9201      	str	r2, [sp, #4]
 800e154:	f7ff f9a2 	bl	800d49c <_malloc_r>
 800e158:	9a01      	ldr	r2, [sp, #4]
 800e15a:	4605      	mov	r5, r0
 800e15c:	b930      	cbnz	r0, 800e16c <_calloc_r+0x24>
 800e15e:	4628      	mov	r0, r5
 800e160:	b003      	add	sp, #12
 800e162:	bd30      	pop	{r4, r5, pc}
 800e164:	220c      	movs	r2, #12
 800e166:	6002      	str	r2, [r0, #0]
 800e168:	2500      	movs	r5, #0
 800e16a:	e7f8      	b.n	800e15e <_calloc_r+0x16>
 800e16c:	4621      	mov	r1, r4
 800e16e:	f7fe f9c2 	bl	800c4f6 <memset>
 800e172:	e7f4      	b.n	800e15e <_calloc_r+0x16>

0800e174 <__ascii_mbtowc>:
 800e174:	b082      	sub	sp, #8
 800e176:	b901      	cbnz	r1, 800e17a <__ascii_mbtowc+0x6>
 800e178:	a901      	add	r1, sp, #4
 800e17a:	b142      	cbz	r2, 800e18e <__ascii_mbtowc+0x1a>
 800e17c:	b14b      	cbz	r3, 800e192 <__ascii_mbtowc+0x1e>
 800e17e:	7813      	ldrb	r3, [r2, #0]
 800e180:	600b      	str	r3, [r1, #0]
 800e182:	7812      	ldrb	r2, [r2, #0]
 800e184:	1e10      	subs	r0, r2, #0
 800e186:	bf18      	it	ne
 800e188:	2001      	movne	r0, #1
 800e18a:	b002      	add	sp, #8
 800e18c:	4770      	bx	lr
 800e18e:	4610      	mov	r0, r2
 800e190:	e7fb      	b.n	800e18a <__ascii_mbtowc+0x16>
 800e192:	f06f 0001 	mvn.w	r0, #1
 800e196:	e7f8      	b.n	800e18a <__ascii_mbtowc+0x16>

0800e198 <_realloc_r>:
 800e198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19c:	4680      	mov	r8, r0
 800e19e:	4614      	mov	r4, r2
 800e1a0:	460e      	mov	r6, r1
 800e1a2:	b921      	cbnz	r1, 800e1ae <_realloc_r+0x16>
 800e1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	f7ff b977 	b.w	800d49c <_malloc_r>
 800e1ae:	b92a      	cbnz	r2, 800e1bc <_realloc_r+0x24>
 800e1b0:	f7ff f900 	bl	800d3b4 <_free_r>
 800e1b4:	4625      	mov	r5, r4
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1bc:	f000 f841 	bl	800e242 <_malloc_usable_size_r>
 800e1c0:	4284      	cmp	r4, r0
 800e1c2:	4607      	mov	r7, r0
 800e1c4:	d802      	bhi.n	800e1cc <_realloc_r+0x34>
 800e1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1ca:	d812      	bhi.n	800e1f2 <_realloc_r+0x5a>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	f7ff f964 	bl	800d49c <_malloc_r>
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d0ed      	beq.n	800e1b6 <_realloc_r+0x1e>
 800e1da:	42bc      	cmp	r4, r7
 800e1dc:	4622      	mov	r2, r4
 800e1de:	4631      	mov	r1, r6
 800e1e0:	bf28      	it	cs
 800e1e2:	463a      	movcs	r2, r7
 800e1e4:	f7fe fa5d 	bl	800c6a2 <memcpy>
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	f7ff f8e2 	bl	800d3b4 <_free_r>
 800e1f0:	e7e1      	b.n	800e1b6 <_realloc_r+0x1e>
 800e1f2:	4635      	mov	r5, r6
 800e1f4:	e7df      	b.n	800e1b6 <_realloc_r+0x1e>

0800e1f6 <__ascii_wctomb>:
 800e1f6:	b149      	cbz	r1, 800e20c <__ascii_wctomb+0x16>
 800e1f8:	2aff      	cmp	r2, #255	; 0xff
 800e1fa:	bf85      	ittet	hi
 800e1fc:	238a      	movhi	r3, #138	; 0x8a
 800e1fe:	6003      	strhi	r3, [r0, #0]
 800e200:	700a      	strbls	r2, [r1, #0]
 800e202:	f04f 30ff 	movhi.w	r0, #4294967295
 800e206:	bf98      	it	ls
 800e208:	2001      	movls	r0, #1
 800e20a:	4770      	bx	lr
 800e20c:	4608      	mov	r0, r1
 800e20e:	4770      	bx	lr

0800e210 <fiprintf>:
 800e210:	b40e      	push	{r1, r2, r3}
 800e212:	b503      	push	{r0, r1, lr}
 800e214:	4601      	mov	r1, r0
 800e216:	ab03      	add	r3, sp, #12
 800e218:	4805      	ldr	r0, [pc, #20]	; (800e230 <fiprintf+0x20>)
 800e21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21e:	6800      	ldr	r0, [r0, #0]
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	f000 f83f 	bl	800e2a4 <_vfiprintf_r>
 800e226:	b002      	add	sp, #8
 800e228:	f85d eb04 	ldr.w	lr, [sp], #4
 800e22c:	b003      	add	sp, #12
 800e22e:	4770      	bx	lr
 800e230:	20000158 	.word	0x20000158

0800e234 <abort>:
 800e234:	b508      	push	{r3, lr}
 800e236:	2006      	movs	r0, #6
 800e238:	f000 fa0c 	bl	800e654 <raise>
 800e23c:	2001      	movs	r0, #1
 800e23e:	f7f3 fa35 	bl	80016ac <_exit>

0800e242 <_malloc_usable_size_r>:
 800e242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e246:	1f18      	subs	r0, r3, #4
 800e248:	2b00      	cmp	r3, #0
 800e24a:	bfbc      	itt	lt
 800e24c:	580b      	ldrlt	r3, [r1, r0]
 800e24e:	18c0      	addlt	r0, r0, r3
 800e250:	4770      	bx	lr

0800e252 <__sfputc_r>:
 800e252:	6893      	ldr	r3, [r2, #8]
 800e254:	3b01      	subs	r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	b410      	push	{r4}
 800e25a:	6093      	str	r3, [r2, #8]
 800e25c:	da08      	bge.n	800e270 <__sfputc_r+0x1e>
 800e25e:	6994      	ldr	r4, [r2, #24]
 800e260:	42a3      	cmp	r3, r4
 800e262:	db01      	blt.n	800e268 <__sfputc_r+0x16>
 800e264:	290a      	cmp	r1, #10
 800e266:	d103      	bne.n	800e270 <__sfputc_r+0x1e>
 800e268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e26c:	f000 b934 	b.w	800e4d8 <__swbuf_r>
 800e270:	6813      	ldr	r3, [r2, #0]
 800e272:	1c58      	adds	r0, r3, #1
 800e274:	6010      	str	r0, [r2, #0]
 800e276:	7019      	strb	r1, [r3, #0]
 800e278:	4608      	mov	r0, r1
 800e27a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <__sfputs_r>:
 800e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	4614      	mov	r4, r2
 800e288:	18d5      	adds	r5, r2, r3
 800e28a:	42ac      	cmp	r4, r5
 800e28c:	d101      	bne.n	800e292 <__sfputs_r+0x12>
 800e28e:	2000      	movs	r0, #0
 800e290:	e007      	b.n	800e2a2 <__sfputs_r+0x22>
 800e292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e296:	463a      	mov	r2, r7
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff ffda 	bl	800e252 <__sfputc_r>
 800e29e:	1c43      	adds	r3, r0, #1
 800e2a0:	d1f3      	bne.n	800e28a <__sfputs_r+0xa>
 800e2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2a4 <_vfiprintf_r>:
 800e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	b09d      	sub	sp, #116	; 0x74
 800e2ac:	4614      	mov	r4, r2
 800e2ae:	4698      	mov	r8, r3
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	b118      	cbz	r0, 800e2bc <_vfiprintf_r+0x18>
 800e2b4:	6a03      	ldr	r3, [r0, #32]
 800e2b6:	b90b      	cbnz	r3, 800e2bc <_vfiprintf_r+0x18>
 800e2b8:	f7fe f884 	bl	800c3c4 <__sinit>
 800e2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2be:	07d9      	lsls	r1, r3, #31
 800e2c0:	d405      	bmi.n	800e2ce <_vfiprintf_r+0x2a>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	059a      	lsls	r2, r3, #22
 800e2c6:	d402      	bmi.n	800e2ce <_vfiprintf_r+0x2a>
 800e2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ca:	f7fe f9e8 	bl	800c69e <__retarget_lock_acquire_recursive>
 800e2ce:	89ab      	ldrh	r3, [r5, #12]
 800e2d0:	071b      	lsls	r3, r3, #28
 800e2d2:	d501      	bpl.n	800e2d8 <_vfiprintf_r+0x34>
 800e2d4:	692b      	ldr	r3, [r5, #16]
 800e2d6:	b99b      	cbnz	r3, 800e300 <_vfiprintf_r+0x5c>
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f000 f93a 	bl	800e554 <__swsetup_r>
 800e2e0:	b170      	cbz	r0, 800e300 <_vfiprintf_r+0x5c>
 800e2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2e4:	07dc      	lsls	r4, r3, #31
 800e2e6:	d504      	bpl.n	800e2f2 <_vfiprintf_r+0x4e>
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	b01d      	add	sp, #116	; 0x74
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	0598      	lsls	r0, r3, #22
 800e2f6:	d4f7      	bmi.n	800e2e8 <_vfiprintf_r+0x44>
 800e2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2fa:	f7fe f9d1 	bl	800c6a0 <__retarget_lock_release_recursive>
 800e2fe:	e7f3      	b.n	800e2e8 <_vfiprintf_r+0x44>
 800e300:	2300      	movs	r3, #0
 800e302:	9309      	str	r3, [sp, #36]	; 0x24
 800e304:	2320      	movs	r3, #32
 800e306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e30e:	2330      	movs	r3, #48	; 0x30
 800e310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e4c4 <_vfiprintf_r+0x220>
 800e314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e318:	f04f 0901 	mov.w	r9, #1
 800e31c:	4623      	mov	r3, r4
 800e31e:	469a      	mov	sl, r3
 800e320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e324:	b10a      	cbz	r2, 800e32a <_vfiprintf_r+0x86>
 800e326:	2a25      	cmp	r2, #37	; 0x25
 800e328:	d1f9      	bne.n	800e31e <_vfiprintf_r+0x7a>
 800e32a:	ebba 0b04 	subs.w	fp, sl, r4
 800e32e:	d00b      	beq.n	800e348 <_vfiprintf_r+0xa4>
 800e330:	465b      	mov	r3, fp
 800e332:	4622      	mov	r2, r4
 800e334:	4629      	mov	r1, r5
 800e336:	4630      	mov	r0, r6
 800e338:	f7ff ffa2 	bl	800e280 <__sfputs_r>
 800e33c:	3001      	adds	r0, #1
 800e33e:	f000 80a9 	beq.w	800e494 <_vfiprintf_r+0x1f0>
 800e342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e344:	445a      	add	r2, fp
 800e346:	9209      	str	r2, [sp, #36]	; 0x24
 800e348:	f89a 3000 	ldrb.w	r3, [sl]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 80a1 	beq.w	800e494 <_vfiprintf_r+0x1f0>
 800e352:	2300      	movs	r3, #0
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35c:	f10a 0a01 	add.w	sl, sl, #1
 800e360:	9304      	str	r3, [sp, #16]
 800e362:	9307      	str	r3, [sp, #28]
 800e364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e368:	931a      	str	r3, [sp, #104]	; 0x68
 800e36a:	4654      	mov	r4, sl
 800e36c:	2205      	movs	r2, #5
 800e36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e372:	4854      	ldr	r0, [pc, #336]	; (800e4c4 <_vfiprintf_r+0x220>)
 800e374:	f7f1 ff2c 	bl	80001d0 <memchr>
 800e378:	9a04      	ldr	r2, [sp, #16]
 800e37a:	b9d8      	cbnz	r0, 800e3b4 <_vfiprintf_r+0x110>
 800e37c:	06d1      	lsls	r1, r2, #27
 800e37e:	bf44      	itt	mi
 800e380:	2320      	movmi	r3, #32
 800e382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e386:	0713      	lsls	r3, r2, #28
 800e388:	bf44      	itt	mi
 800e38a:	232b      	movmi	r3, #43	; 0x2b
 800e38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e390:	f89a 3000 	ldrb.w	r3, [sl]
 800e394:	2b2a      	cmp	r3, #42	; 0x2a
 800e396:	d015      	beq.n	800e3c4 <_vfiprintf_r+0x120>
 800e398:	9a07      	ldr	r2, [sp, #28]
 800e39a:	4654      	mov	r4, sl
 800e39c:	2000      	movs	r0, #0
 800e39e:	f04f 0c0a 	mov.w	ip, #10
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a8:	3b30      	subs	r3, #48	; 0x30
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d94d      	bls.n	800e44a <_vfiprintf_r+0x1a6>
 800e3ae:	b1b0      	cbz	r0, 800e3de <_vfiprintf_r+0x13a>
 800e3b0:	9207      	str	r2, [sp, #28]
 800e3b2:	e014      	b.n	800e3de <_vfiprintf_r+0x13a>
 800e3b4:	eba0 0308 	sub.w	r3, r0, r8
 800e3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	9304      	str	r3, [sp, #16]
 800e3c0:	46a2      	mov	sl, r4
 800e3c2:	e7d2      	b.n	800e36a <_vfiprintf_r+0xc6>
 800e3c4:	9b03      	ldr	r3, [sp, #12]
 800e3c6:	1d19      	adds	r1, r3, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	9103      	str	r1, [sp, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfbb      	ittet	lt
 800e3d0:	425b      	neglt	r3, r3
 800e3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d6:	9307      	strge	r3, [sp, #28]
 800e3d8:	9307      	strlt	r3, [sp, #28]
 800e3da:	bfb8      	it	lt
 800e3dc:	9204      	strlt	r2, [sp, #16]
 800e3de:	7823      	ldrb	r3, [r4, #0]
 800e3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e2:	d10c      	bne.n	800e3fe <_vfiprintf_r+0x15a>
 800e3e4:	7863      	ldrb	r3, [r4, #1]
 800e3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3e8:	d134      	bne.n	800e454 <_vfiprintf_r+0x1b0>
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	1d1a      	adds	r2, r3, #4
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	9203      	str	r2, [sp, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bfb8      	it	lt
 800e3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3fa:	3402      	adds	r4, #2
 800e3fc:	9305      	str	r3, [sp, #20]
 800e3fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e4d4 <_vfiprintf_r+0x230>
 800e402:	7821      	ldrb	r1, [r4, #0]
 800e404:	2203      	movs	r2, #3
 800e406:	4650      	mov	r0, sl
 800e408:	f7f1 fee2 	bl	80001d0 <memchr>
 800e40c:	b138      	cbz	r0, 800e41e <_vfiprintf_r+0x17a>
 800e40e:	9b04      	ldr	r3, [sp, #16]
 800e410:	eba0 000a 	sub.w	r0, r0, sl
 800e414:	2240      	movs	r2, #64	; 0x40
 800e416:	4082      	lsls	r2, r0
 800e418:	4313      	orrs	r3, r2
 800e41a:	3401      	adds	r4, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e422:	4829      	ldr	r0, [pc, #164]	; (800e4c8 <_vfiprintf_r+0x224>)
 800e424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e428:	2206      	movs	r2, #6
 800e42a:	f7f1 fed1 	bl	80001d0 <memchr>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d03f      	beq.n	800e4b2 <_vfiprintf_r+0x20e>
 800e432:	4b26      	ldr	r3, [pc, #152]	; (800e4cc <_vfiprintf_r+0x228>)
 800e434:	bb1b      	cbnz	r3, 800e47e <_vfiprintf_r+0x1da>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	3308      	adds	r3, #8
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	443b      	add	r3, r7
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	e768      	b.n	800e31c <_vfiprintf_r+0x78>
 800e44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e44e:	460c      	mov	r4, r1
 800e450:	2001      	movs	r0, #1
 800e452:	e7a6      	b.n	800e3a2 <_vfiprintf_r+0xfe>
 800e454:	2300      	movs	r3, #0
 800e456:	3401      	adds	r4, #1
 800e458:	9305      	str	r3, [sp, #20]
 800e45a:	4619      	mov	r1, r3
 800e45c:	f04f 0c0a 	mov.w	ip, #10
 800e460:	4620      	mov	r0, r4
 800e462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e466:	3a30      	subs	r2, #48	; 0x30
 800e468:	2a09      	cmp	r2, #9
 800e46a:	d903      	bls.n	800e474 <_vfiprintf_r+0x1d0>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0c6      	beq.n	800e3fe <_vfiprintf_r+0x15a>
 800e470:	9105      	str	r1, [sp, #20]
 800e472:	e7c4      	b.n	800e3fe <_vfiprintf_r+0x15a>
 800e474:	fb0c 2101 	mla	r1, ip, r1, r2
 800e478:	4604      	mov	r4, r0
 800e47a:	2301      	movs	r3, #1
 800e47c:	e7f0      	b.n	800e460 <_vfiprintf_r+0x1bc>
 800e47e:	ab03      	add	r3, sp, #12
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	462a      	mov	r2, r5
 800e484:	4b12      	ldr	r3, [pc, #72]	; (800e4d0 <_vfiprintf_r+0x22c>)
 800e486:	a904      	add	r1, sp, #16
 800e488:	4630      	mov	r0, r6
 800e48a:	f7fd fb49 	bl	800bb20 <_printf_float>
 800e48e:	4607      	mov	r7, r0
 800e490:	1c78      	adds	r0, r7, #1
 800e492:	d1d6      	bne.n	800e442 <_vfiprintf_r+0x19e>
 800e494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e496:	07d9      	lsls	r1, r3, #31
 800e498:	d405      	bmi.n	800e4a6 <_vfiprintf_r+0x202>
 800e49a:	89ab      	ldrh	r3, [r5, #12]
 800e49c:	059a      	lsls	r2, r3, #22
 800e49e:	d402      	bmi.n	800e4a6 <_vfiprintf_r+0x202>
 800e4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4a2:	f7fe f8fd 	bl	800c6a0 <__retarget_lock_release_recursive>
 800e4a6:	89ab      	ldrh	r3, [r5, #12]
 800e4a8:	065b      	lsls	r3, r3, #25
 800e4aa:	f53f af1d 	bmi.w	800e2e8 <_vfiprintf_r+0x44>
 800e4ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b0:	e71c      	b.n	800e2ec <_vfiprintf_r+0x48>
 800e4b2:	ab03      	add	r3, sp, #12
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	462a      	mov	r2, r5
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <_vfiprintf_r+0x22c>)
 800e4ba:	a904      	add	r1, sp, #16
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7fd fdd3 	bl	800c068 <_printf_i>
 800e4c2:	e7e4      	b.n	800e48e <_vfiprintf_r+0x1ea>
 800e4c4:	0800ebb4 	.word	0x0800ebb4
 800e4c8:	0800ebbe 	.word	0x0800ebbe
 800e4cc:	0800bb21 	.word	0x0800bb21
 800e4d0:	0800e281 	.word	0x0800e281
 800e4d4:	0800ebba 	.word	0x0800ebba

0800e4d8 <__swbuf_r>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	460e      	mov	r6, r1
 800e4dc:	4614      	mov	r4, r2
 800e4de:	4605      	mov	r5, r0
 800e4e0:	b118      	cbz	r0, 800e4ea <__swbuf_r+0x12>
 800e4e2:	6a03      	ldr	r3, [r0, #32]
 800e4e4:	b90b      	cbnz	r3, 800e4ea <__swbuf_r+0x12>
 800e4e6:	f7fd ff6d 	bl	800c3c4 <__sinit>
 800e4ea:	69a3      	ldr	r3, [r4, #24]
 800e4ec:	60a3      	str	r3, [r4, #8]
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	071a      	lsls	r2, r3, #28
 800e4f2:	d525      	bpl.n	800e540 <__swbuf_r+0x68>
 800e4f4:	6923      	ldr	r3, [r4, #16]
 800e4f6:	b31b      	cbz	r3, 800e540 <__swbuf_r+0x68>
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	6922      	ldr	r2, [r4, #16]
 800e4fc:	1a98      	subs	r0, r3, r2
 800e4fe:	6963      	ldr	r3, [r4, #20]
 800e500:	b2f6      	uxtb	r6, r6
 800e502:	4283      	cmp	r3, r0
 800e504:	4637      	mov	r7, r6
 800e506:	dc04      	bgt.n	800e512 <__swbuf_r+0x3a>
 800e508:	4621      	mov	r1, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	f7ff fdac 	bl	800e068 <_fflush_r>
 800e510:	b9e0      	cbnz	r0, 800e54c <__swbuf_r+0x74>
 800e512:	68a3      	ldr	r3, [r4, #8]
 800e514:	3b01      	subs	r3, #1
 800e516:	60a3      	str	r3, [r4, #8]
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	6022      	str	r2, [r4, #0]
 800e51e:	701e      	strb	r6, [r3, #0]
 800e520:	6962      	ldr	r2, [r4, #20]
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	429a      	cmp	r2, r3
 800e526:	d004      	beq.n	800e532 <__swbuf_r+0x5a>
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	07db      	lsls	r3, r3, #31
 800e52c:	d506      	bpl.n	800e53c <__swbuf_r+0x64>
 800e52e:	2e0a      	cmp	r6, #10
 800e530:	d104      	bne.n	800e53c <__swbuf_r+0x64>
 800e532:	4621      	mov	r1, r4
 800e534:	4628      	mov	r0, r5
 800e536:	f7ff fd97 	bl	800e068 <_fflush_r>
 800e53a:	b938      	cbnz	r0, 800e54c <__swbuf_r+0x74>
 800e53c:	4638      	mov	r0, r7
 800e53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e540:	4621      	mov	r1, r4
 800e542:	4628      	mov	r0, r5
 800e544:	f000 f806 	bl	800e554 <__swsetup_r>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d0d5      	beq.n	800e4f8 <__swbuf_r+0x20>
 800e54c:	f04f 37ff 	mov.w	r7, #4294967295
 800e550:	e7f4      	b.n	800e53c <__swbuf_r+0x64>
	...

0800e554 <__swsetup_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4b2a      	ldr	r3, [pc, #168]	; (800e600 <__swsetup_r+0xac>)
 800e558:	4605      	mov	r5, r0
 800e55a:	6818      	ldr	r0, [r3, #0]
 800e55c:	460c      	mov	r4, r1
 800e55e:	b118      	cbz	r0, 800e568 <__swsetup_r+0x14>
 800e560:	6a03      	ldr	r3, [r0, #32]
 800e562:	b90b      	cbnz	r3, 800e568 <__swsetup_r+0x14>
 800e564:	f7fd ff2e 	bl	800c3c4 <__sinit>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e56e:	0718      	lsls	r0, r3, #28
 800e570:	d422      	bmi.n	800e5b8 <__swsetup_r+0x64>
 800e572:	06d9      	lsls	r1, r3, #27
 800e574:	d407      	bmi.n	800e586 <__swsetup_r+0x32>
 800e576:	2309      	movs	r3, #9
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e57e:	81a3      	strh	r3, [r4, #12]
 800e580:	f04f 30ff 	mov.w	r0, #4294967295
 800e584:	e034      	b.n	800e5f0 <__swsetup_r+0x9c>
 800e586:	0758      	lsls	r0, r3, #29
 800e588:	d512      	bpl.n	800e5b0 <__swsetup_r+0x5c>
 800e58a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e58c:	b141      	cbz	r1, 800e5a0 <__swsetup_r+0x4c>
 800e58e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e592:	4299      	cmp	r1, r3
 800e594:	d002      	beq.n	800e59c <__swsetup_r+0x48>
 800e596:	4628      	mov	r0, r5
 800e598:	f7fe ff0c 	bl	800d3b4 <_free_r>
 800e59c:	2300      	movs	r3, #0
 800e59e:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5a6:	81a3      	strh	r3, [r4, #12]
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	6063      	str	r3, [r4, #4]
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	6023      	str	r3, [r4, #0]
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	f043 0308 	orr.w	r3, r3, #8
 800e5b6:	81a3      	strh	r3, [r4, #12]
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	b94b      	cbnz	r3, 800e5d0 <__swsetup_r+0x7c>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5c6:	d003      	beq.n	800e5d0 <__swsetup_r+0x7c>
 800e5c8:	4621      	mov	r1, r4
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f000 f884 	bl	800e6d8 <__smakebuf_r>
 800e5d0:	89a0      	ldrh	r0, [r4, #12]
 800e5d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5d6:	f010 0301 	ands.w	r3, r0, #1
 800e5da:	d00a      	beq.n	800e5f2 <__swsetup_r+0x9e>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	60a3      	str	r3, [r4, #8]
 800e5e0:	6963      	ldr	r3, [r4, #20]
 800e5e2:	425b      	negs	r3, r3
 800e5e4:	61a3      	str	r3, [r4, #24]
 800e5e6:	6923      	ldr	r3, [r4, #16]
 800e5e8:	b943      	cbnz	r3, 800e5fc <__swsetup_r+0xa8>
 800e5ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5ee:	d1c4      	bne.n	800e57a <__swsetup_r+0x26>
 800e5f0:	bd38      	pop	{r3, r4, r5, pc}
 800e5f2:	0781      	lsls	r1, r0, #30
 800e5f4:	bf58      	it	pl
 800e5f6:	6963      	ldrpl	r3, [r4, #20]
 800e5f8:	60a3      	str	r3, [r4, #8]
 800e5fa:	e7f4      	b.n	800e5e6 <__swsetup_r+0x92>
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e7f7      	b.n	800e5f0 <__swsetup_r+0x9c>
 800e600:	20000158 	.word	0x20000158

0800e604 <_raise_r>:
 800e604:	291f      	cmp	r1, #31
 800e606:	b538      	push	{r3, r4, r5, lr}
 800e608:	4604      	mov	r4, r0
 800e60a:	460d      	mov	r5, r1
 800e60c:	d904      	bls.n	800e618 <_raise_r+0x14>
 800e60e:	2316      	movs	r3, #22
 800e610:	6003      	str	r3, [r0, #0]
 800e612:	f04f 30ff 	mov.w	r0, #4294967295
 800e616:	bd38      	pop	{r3, r4, r5, pc}
 800e618:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e61a:	b112      	cbz	r2, 800e622 <_raise_r+0x1e>
 800e61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e620:	b94b      	cbnz	r3, 800e636 <_raise_r+0x32>
 800e622:	4620      	mov	r0, r4
 800e624:	f000 f830 	bl	800e688 <_getpid_r>
 800e628:	462a      	mov	r2, r5
 800e62a:	4601      	mov	r1, r0
 800e62c:	4620      	mov	r0, r4
 800e62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e632:	f000 b817 	b.w	800e664 <_kill_r>
 800e636:	2b01      	cmp	r3, #1
 800e638:	d00a      	beq.n	800e650 <_raise_r+0x4c>
 800e63a:	1c59      	adds	r1, r3, #1
 800e63c:	d103      	bne.n	800e646 <_raise_r+0x42>
 800e63e:	2316      	movs	r3, #22
 800e640:	6003      	str	r3, [r0, #0]
 800e642:	2001      	movs	r0, #1
 800e644:	e7e7      	b.n	800e616 <_raise_r+0x12>
 800e646:	2400      	movs	r4, #0
 800e648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e64c:	4628      	mov	r0, r5
 800e64e:	4798      	blx	r3
 800e650:	2000      	movs	r0, #0
 800e652:	e7e0      	b.n	800e616 <_raise_r+0x12>

0800e654 <raise>:
 800e654:	4b02      	ldr	r3, [pc, #8]	; (800e660 <raise+0xc>)
 800e656:	4601      	mov	r1, r0
 800e658:	6818      	ldr	r0, [r3, #0]
 800e65a:	f7ff bfd3 	b.w	800e604 <_raise_r>
 800e65e:	bf00      	nop
 800e660:	20000158 	.word	0x20000158

0800e664 <_kill_r>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4d07      	ldr	r5, [pc, #28]	; (800e684 <_kill_r+0x20>)
 800e668:	2300      	movs	r3, #0
 800e66a:	4604      	mov	r4, r0
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	602b      	str	r3, [r5, #0]
 800e672:	f7f3 f80b 	bl	800168c <_kill>
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	d102      	bne.n	800e680 <_kill_r+0x1c>
 800e67a:	682b      	ldr	r3, [r5, #0]
 800e67c:	b103      	cbz	r3, 800e680 <_kill_r+0x1c>
 800e67e:	6023      	str	r3, [r4, #0]
 800e680:	bd38      	pop	{r3, r4, r5, pc}
 800e682:	bf00      	nop
 800e684:	20006b04 	.word	0x20006b04

0800e688 <_getpid_r>:
 800e688:	f7f2 bff8 	b.w	800167c <_getpid>

0800e68c <__swhatbuf_r>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	460c      	mov	r4, r1
 800e690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e694:	2900      	cmp	r1, #0
 800e696:	b096      	sub	sp, #88	; 0x58
 800e698:	4615      	mov	r5, r2
 800e69a:	461e      	mov	r6, r3
 800e69c:	da0d      	bge.n	800e6ba <__swhatbuf_r+0x2e>
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e6a4:	f04f 0100 	mov.w	r1, #0
 800e6a8:	bf0c      	ite	eq
 800e6aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e6ae:	2340      	movne	r3, #64	; 0x40
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	6031      	str	r1, [r6, #0]
 800e6b4:	602b      	str	r3, [r5, #0]
 800e6b6:	b016      	add	sp, #88	; 0x58
 800e6b8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ba:	466a      	mov	r2, sp
 800e6bc:	f000 f848 	bl	800e750 <_fstat_r>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	dbec      	blt.n	800e69e <__swhatbuf_r+0x12>
 800e6c4:	9901      	ldr	r1, [sp, #4]
 800e6c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e6ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e6ce:	4259      	negs	r1, r3
 800e6d0:	4159      	adcs	r1, r3
 800e6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d6:	e7eb      	b.n	800e6b0 <__swhatbuf_r+0x24>

0800e6d8 <__smakebuf_r>:
 800e6d8:	898b      	ldrh	r3, [r1, #12]
 800e6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6dc:	079d      	lsls	r5, r3, #30
 800e6de:	4606      	mov	r6, r0
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	d507      	bpl.n	800e6f4 <__smakebuf_r+0x1c>
 800e6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	6123      	str	r3, [r4, #16]
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	6163      	str	r3, [r4, #20]
 800e6f0:	b002      	add	sp, #8
 800e6f2:	bd70      	pop	{r4, r5, r6, pc}
 800e6f4:	ab01      	add	r3, sp, #4
 800e6f6:	466a      	mov	r2, sp
 800e6f8:	f7ff ffc8 	bl	800e68c <__swhatbuf_r>
 800e6fc:	9900      	ldr	r1, [sp, #0]
 800e6fe:	4605      	mov	r5, r0
 800e700:	4630      	mov	r0, r6
 800e702:	f7fe fecb 	bl	800d49c <_malloc_r>
 800e706:	b948      	cbnz	r0, 800e71c <__smakebuf_r+0x44>
 800e708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70c:	059a      	lsls	r2, r3, #22
 800e70e:	d4ef      	bmi.n	800e6f0 <__smakebuf_r+0x18>
 800e710:	f023 0303 	bic.w	r3, r3, #3
 800e714:	f043 0302 	orr.w	r3, r3, #2
 800e718:	81a3      	strh	r3, [r4, #12]
 800e71a:	e7e3      	b.n	800e6e4 <__smakebuf_r+0xc>
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	6020      	str	r0, [r4, #0]
 800e720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	9b00      	ldr	r3, [sp, #0]
 800e728:	6163      	str	r3, [r4, #20]
 800e72a:	9b01      	ldr	r3, [sp, #4]
 800e72c:	6120      	str	r0, [r4, #16]
 800e72e:	b15b      	cbz	r3, 800e748 <__smakebuf_r+0x70>
 800e730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e734:	4630      	mov	r0, r6
 800e736:	f000 f81d 	bl	800e774 <_isatty_r>
 800e73a:	b128      	cbz	r0, 800e748 <__smakebuf_r+0x70>
 800e73c:	89a3      	ldrh	r3, [r4, #12]
 800e73e:	f023 0303 	bic.w	r3, r3, #3
 800e742:	f043 0301 	orr.w	r3, r3, #1
 800e746:	81a3      	strh	r3, [r4, #12]
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	431d      	orrs	r5, r3
 800e74c:	81a5      	strh	r5, [r4, #12]
 800e74e:	e7cf      	b.n	800e6f0 <__smakebuf_r+0x18>

0800e750 <_fstat_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4d07      	ldr	r5, [pc, #28]	; (800e770 <_fstat_r+0x20>)
 800e754:	2300      	movs	r3, #0
 800e756:	4604      	mov	r4, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	4611      	mov	r1, r2
 800e75c:	602b      	str	r3, [r5, #0]
 800e75e:	f7f2 fff4 	bl	800174a <_fstat>
 800e762:	1c43      	adds	r3, r0, #1
 800e764:	d102      	bne.n	800e76c <_fstat_r+0x1c>
 800e766:	682b      	ldr	r3, [r5, #0]
 800e768:	b103      	cbz	r3, 800e76c <_fstat_r+0x1c>
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
 800e76e:	bf00      	nop
 800e770:	20006b04 	.word	0x20006b04

0800e774 <_isatty_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d06      	ldr	r5, [pc, #24]	; (800e790 <_isatty_r+0x1c>)
 800e778:	2300      	movs	r3, #0
 800e77a:	4604      	mov	r4, r0
 800e77c:	4608      	mov	r0, r1
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	f7f2 fff3 	bl	800176a <_isatty>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	d102      	bne.n	800e78e <_isatty_r+0x1a>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	b103      	cbz	r3, 800e78e <_isatty_r+0x1a>
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	20006b04 	.word	0x20006b04

0800e794 <_init>:
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	bf00      	nop
 800e798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e79a:	bc08      	pop	{r3}
 800e79c:	469e      	mov	lr, r3
 800e79e:	4770      	bx	lr

0800e7a0 <_fini>:
 800e7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a2:	bf00      	nop
 800e7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7a6:	bc08      	pop	{r3}
 800e7a8:	469e      	mov	lr, r3
 800e7aa:	4770      	bx	lr

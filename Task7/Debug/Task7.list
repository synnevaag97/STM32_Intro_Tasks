
Task7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800f3f8  0800f3f8  0001f3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9b8  0800f9b8  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9b8  0800f9b8  0001f9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9c0  0800f9c0  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c0  0800f9c0  0001f9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800f9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00001f04  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200021c8  200021c8  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017122  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004026  00000000  00000000  00037459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013c8  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f01  00000000  00000000  0003c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000256ce  00000000  00000000  0003d749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bf43  00000000  00000000  00062e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd3af  00000000  00000000  0007ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064ac  00000000  00000000  0014c10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  001525b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3e0 	.word	0x0800f3e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800f3e0 	.word	0x0800f3e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b0ab      	sub	sp, #172	; 0xac
 8000eee:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f001 f932 	bl	8002158 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f960 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fa7a 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efc:	f000 fa58 	bl	80013b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000f00:	f009 fe8e 	bl	800ac20 <MX_USB_DEVICE_Init>
  MX_I2S3_Init();
 8000f04:	f000 f9f0 	bl	80012e8 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000f08:	f000 f9c0 	bl	800128c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f0c:	f000 fa1a 	bl	8001344 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initiate and start the Audio DAC.
  CS43_Init(hi2c1, MODE_I2S);
 8000f10:	4ea1      	ldr	r6, [pc, #644]	; (8001198 <main+0x2b0>)
 8000f12:	2300      	movs	r3, #0
 8000f14:	9311      	str	r3, [sp, #68]	; 0x44
 8000f16:	4668      	mov	r0, sp
 8000f18:	f106 0310 	add.w	r3, r6, #16
 8000f1c:	2244      	movs	r2, #68	; 0x44
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f00b f9a3 	bl	800c26a <memcpy>
 8000f24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f28:	f000 ff22 	bl	8001d70 <CS43_Init>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f001 f833 	bl	8001f98 <CS43_Enable_RightLeft>
  CS43_SetVolume(40);
 8000f32:	2028      	movs	r0, #40	; 0x28
 8000f34:	f001 f88c 	bl	8002050 <CS43_SetVolume>
  CS43_Start();
 8000f38:	f001 f8cc 	bl	80020d4 <CS43_Start>


  // Play a constant note through the DAC.
  double duration = 5; // 1 second
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b96      	ldr	r3, [pc, #600]	; (800119c <main+0x2b4>)
 8000f42:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  double frequency_hz = 20;
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b95      	ldr	r3, [pc, #596]	; (80011a0 <main+0x2b8>)
 8000f4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  double amplitude = 100.0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <main+0x2bc>)
 8000f56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int sample_frequency = 4000; // Normal sampling frequency is 44.1 kHz or 48 kHz.
 8000f5a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  size_t sample_N = (size_t)sample_frequency*duration;
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff face 	bl	8000504 <__aeabi_ui2d>
 8000f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000f6c:	f7ff fb44 	bl	80005f8 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fe16 	bl	8000ba8 <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  int16_t sinus_value[sample_N];
 8000f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f82:	460b      	mov	r3, r1
 8000f84:	3b01      	subs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4688      	mov	r8, r1
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000f9a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000f9e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	012b      	lsls	r3, r5, #4
 8000fb2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000fb6:	0122      	lsls	r2, r4, #4
 8000fb8:	004b      	lsls	r3, r1, #1
 8000fba:	3307      	adds	r3, #7
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc4:	ab12      	add	r3, sp, #72	; 0x48
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sinus_wave_generator(duration, sample_frequency, amplitude, frequency_hz,  sinus_value, sample_N);
 8000fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fd0:	f7ff faa8 	bl	8000524 <__aeabi_i2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fdc:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 8000fe0:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8000fe4:	ec43 2b11 	vmov	d1, r2, r3
 8000fe8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8000fec:	f000 fa90 	bl	8001510 <sinus_wave_generator>
  //my_sinus_wave_generator(frequency_hz, sinus_value, sample_N);
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *) sinus_value, sample_N);
 8000ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ff8:	486b      	ldr	r0, [pc, #428]	; (80011a8 <main+0x2c0>)
 8000ffa:	f003 f8b5 	bl	8004168 <HAL_I2S_Transmit_DMA>

  // Play note which is larger the large the acceleration on x and y axis.

  // Initiate Accelerometer.
  lis3dsh_config parameters;
  parameters.ctrl_reg4_config = CTRL_REG4_ODR0 | CTRL_REG4_Xen | CTRL_REG4_Yen;
 8000ffe:	2313      	movs	r3, #19
 8001000:	713b      	strb	r3, [r7, #4]
  parameters.ctrl_reg3_config = CTRL_REG3_INT1_EN | CTRL_REG3_DR_EN;
 8001002:	2388      	movs	r3, #136	; 0x88
 8001004:	717b      	strb	r3, [r7, #5]
  lis3dsh_init(&hspi1, &parameters);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4619      	mov	r1, r3
 800100a:	4868      	ldr	r0, [pc, #416]	; (80011ac <main+0x2c4>)
 800100c:	f000 fe32 	bl	8001c74 <lis3dsh_init>
	  //frequency_hz = 800;
	  //
	  //HAL_Delay(10000);

	  uint8_t buffer_rx[2];
	  lis3dsh_read(LIS3DSH_OUT_X_H_ADDR, buffer_rx, 1);
 8001010:	463b      	mov	r3, r7
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	2029      	movs	r0, #41	; 0x29
 8001018:	f000 fdf4 	bl	8001c04 <lis3dsh_read>
	  uint8_t x_val_h = (buffer_rx[0]);
 800101c:	783b      	ldrb	r3, [r7, #0]
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  lis3dsh_read(LIS3DSH_OUT_X_L_ADDR, buffer_rx, 1);
 8001022:	463b      	mov	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	2028      	movs	r0, #40	; 0x28
 800102a:	f000 fdeb 	bl	8001c04 <lis3dsh_read>
	  uint8_t x_val_l = (buffer_rx[0]);
 800102e:	783b      	ldrb	r3, [r7, #0]
 8001030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	  uint16_t acc_x = (x_val_h << 8) | x_val_l;
 8001034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	84bb      	strh	r3, [r7, #36]	; 0x24

	  // Compute acceleration in m/s^2 from raw data.
	  double acc_x_in_g = 0;
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  if ((acc_x & 0x8000) == 0x8000 ){
 8001054:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001058:	2b00      	cmp	r3, #0
 800105a:	da13      	bge.n	8001084 <main+0x19c>
		  // Acceleration is negative.  First compute the two's complement.
		  uint16_t acc_x_twos_complement = (~acc_x) + 1;
 800105c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105e:	425b      	negs	r3, r3
 8001060:	847b      	strh	r3, [r7, #34]	; 0x22
		  // Use conversion and set to negative
		  acc_x_in_g = -((double)acc_x_twos_complement*0.0006);
 8001062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa4d 	bl	8000504 <__aeabi_ui2d>
 800106a:	a349      	add	r3, pc, #292	; (adr r3, 8001190 <main+0x2a8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fac2 	bl	80005f8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4611      	mov	r1, r2
 800107a:	65b9      	str	r1, [r7, #88]	; 0x58
 800107c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001082:	e00c      	b.n	800109e <main+0x1b6>
	  } else{
		  // Acceleration is positive. Using simple conversion model to compute the acceleration in gravitational forces also noted m/s^2.
		  acc_x_in_g = (double)acc_x*0.0006;
 8001084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa3c 	bl	8000504 <__aeabi_ui2d>
 800108c:	a340      	add	r3, pc, #256	; (adr r3, 8001190 <main+0x2a8>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fab1 	bl	80005f8 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  }

	  // Convert acceleration to frequency.
	  int frequency_hz = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	657b      	str	r3, [r7, #84]	; 0x54
	  if (acc_x_in_g<0.5 && acc_x_in_g>-0.5){
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <main+0x2c8>)
 80010a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80010ac:	f7ff fd16 	bl	8000adc <__aeabi_dcmplt>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <main+0x1e8>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <main+0x2cc>)
 80010bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80010c0:	f7ff fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <main+0x1e8>
		  frequency_hz = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
 80010ce:	e043      	b.n	8001158 <main+0x270>
	  } else{
		  int min_frequency = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
		  int max_frequency = 800;
 80010d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80010d8:	61bb      	str	r3, [r7, #24]

		  // Map acceleration range to frequency range
		  int min_acceleration = -10;
 80010da:	f06f 0309 	mvn.w	r3, #9
 80010de:	617b      	str	r3, [r7, #20]
		  int max_acceleration = 10;
 80010e0:	230a      	movs	r3, #10
 80010e2:	613b      	str	r3, [r7, #16]

		  // Calculate the ratio of acceleration to the total range
		  double ratio = (acc_x_in_g - min_acceleration) / (max_acceleration - min_acceleration);
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff fa1d 	bl	8000524 <__aeabi_i2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80010f2:	f7ff f8c9 	bl	8000288 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa0d 	bl	8000524 <__aeabi_i2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff fb9b 	bl	800084c <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		  // Map the ratio to the frequency range
		  frequency_hz = (int)min_frequency + ratio * (max_frequency - min_frequency);
 800111e:	69f8      	ldr	r0, [r7, #28]
 8001120:	f7ff fa00 	bl	8000524 <__aeabi_i2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9f8 	bl	8000524 <__aeabi_i2d>
 8001134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f8a2 	bl	800028c <__adddf3>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd02 	bl	8000b58 <__aeabi_d2iz>
 8001154:	4603      	mov	r3, r0
 8001156:	657b      	str	r3, [r7, #84]	; 0x54
	  }

	  // Create new signal with new frequency.
	  sinus_wave_generator(duration, sample_frequency, amplitude, frequency_hz,  sinus_value, sample_N);
 8001158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800115a:	f7ff f9e3 	bl	8000524 <__aeabi_i2d>
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001164:	f7ff f9de 	bl	8000524 <__aeabi_i2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800116e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001170:	ec43 2b13 	vmov	d3, r2, r3
 8001174:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 8001178:	ec45 4b11 	vmov	d1, r4, r5
 800117c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001180:	f000 f9c6 	bl	8001510 <sinus_wave_generator>



	  HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001188:	f001 f858 	bl	800223c <HAL_Delay>
  {
 800118c:	e740      	b.n	8001010 <main+0x128>
 800118e:	bf00      	nop
 8001190:	30553261 	.word	0x30553261
 8001194:	3f43a92a 	.word	0x3f43a92a
 8001198:	200002e0 	.word	0x200002e0
 800119c:	40140000 	.word	0x40140000
 80011a0:	40340000 	.word	0x40340000
 80011a4:	40590000 	.word	0x40590000
 80011a8:	20000334 	.word	0x20000334
 80011ac:	200003dc 	.word	0x200003dc
 80011b0:	3fe00000 	.word	0x3fe00000
 80011b4:	bfe00000 	.word	0xbfe00000

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a ffcf 	bl	800c16a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <SystemClock_Config+0xcc>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <SystemClock_Config+0xd0>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800122c:	23a8      	movs	r3, #168	; 0xa8
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001234:	2307      	movs	r3, #7
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fe49 	bl	8005ed4 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001248:	f000 f9f8 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2105      	movs	r1, #5
 800126a:	4618      	mov	r0, r3
 800126c:	f005 f8aa 	bl	80063c4 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001276:	f000 f9e1 	bl	800163c <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	; 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_I2C1_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_I2C1_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2C1_Init+0x50>)
 80012ca:	f001 fe13 	bl	8002ef4 <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 f9b2 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002e0 	.word	0x200002e0
 80012e0:	40005400 	.word	0x40005400
 80012e4:	000186a0 	.word	0x000186a0

080012e8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_I2S3_Init+0x54>)
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <MX_I2S3_Init+0x58>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2S3_Init+0x54>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_I2S3_Init+0x54>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2S3_Init+0x54>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_I2S3_Init+0x54>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_I2S3_Init+0x54>)
 8001310:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001314:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2S3_Init+0x54>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2S3_Init+0x54>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2S3_Init+0x54>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2S3_Init+0x54>)
 800132a:	f002 fddd 	bl	8003ee8 <HAL_I2S_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001334:	f000 f982 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000334 	.word	0x20000334
 8001340:	40003c00 	.word	0x40003c00

08001344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_SPI1_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_SPI1_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001378:	2228      	movs	r2, #40	; 0x28
 800137a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_SPI1_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_SPI1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001390:	220a      	movs	r2, #10
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001396:	f005 fb63 	bl	8006a60 <HAL_SPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 f94c 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200003dc 	.word	0x200003dc
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_DMA_Init+0x3c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <MX_DMA_Init+0x3c>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_DMA_Init+0x3c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	202f      	movs	r0, #47	; 0x2f
 80013d8:	f001 f82f 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013dc:	202f      	movs	r0, #47	; 0x2f
 80013de:	f001 f848 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <MX_GPIO_Init+0x114>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <MX_GPIO_Init+0x114>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <MX_GPIO_Init+0x114>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <MX_GPIO_Init+0x114>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a36      	ldr	r2, [pc, #216]	; (8001504 <MX_GPIO_Init+0x114>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <MX_GPIO_Init+0x114>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <MX_GPIO_Init+0x114>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <MX_GPIO_Init+0x114>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_GPIO_Init+0x114>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_GPIO_Init+0x114>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a28      	ldr	r2, [pc, #160]	; (8001504 <MX_GPIO_Init+0x114>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_GPIO_Init+0x114>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_GPIO_Init+0x114>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <MX_GPIO_Init+0x114>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_GPIO_Init+0x114>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_GPIO_Init+0x114>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <MX_GPIO_Init+0x114>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_GPIO_Init+0x114>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2108      	movs	r1, #8
 80014b2:	4815      	ldr	r0, [pc, #84]	; (8001508 <MX_GPIO_Init+0x118>)
 80014b4:	f001 fd04 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_GPIO_Init+0x11c>)
 80014be:	f001 fcff 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c2:	2308      	movs	r3, #8
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_GPIO_Init+0x118>)
 80014da:	f001 fb55 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014de:	2310      	movs	r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_GPIO_Init+0x11c>)
 80014f6:	f001 fb47 	bl	8002b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	; 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40021000 	.word	0x40021000
 800150c:	40020c00 	.word	0x40020c00

08001510 <sinus_wave_generator>:

/* USER CODE BEGIN 4 */
void sinus_wave_generator(double duration, double sample_rate, double amplitude, double frequency, int16_t sinus_value[], size_t size){
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b0ab      	sub	sp, #172	; 0xac
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0b08 	vstr	d0, [r7, #32]
 800151a:	ed87 1b06 	vstr	d1, [r7, #24]
 800151e:	ed87 2b04 	vstr	d2, [r7, #16]
 8001522:	ed87 3b02 	vstr	d3, [r7, #8]
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
        sinus_value :
        size :

    */

	int sample_N = (int)sample_rate*duration; // Samples per period.
 800152a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800152e:	f7ff fb13 	bl	8000b58 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fff5 	bl	8000524 <__aeabi_i2d>
 800153a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800153e:	f7ff f85b 	bl	80005f8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb05 	bl	8000b58 <__aeabi_d2iz>
 800154e:	4603      	mov	r3, r0
 8001550:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	for(int i = 0; i < sample_N ; i++){
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800155a:	e05d      	b.n	8001618 <sinus_wave_generator+0x108>
		double timestep =  (double)i / sample_rate;
 800155c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001560:	f7fe ffe0 	bl	8000524 <__aeabi_i2d>
 8001564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001568:	f7ff f970 	bl	800084c <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		double temp = (amplitude*sin(2.0 * M_PI * frequency * timestep));
 8001574:	a32f      	add	r3, pc, #188	; (adr r3, 8001634 <sinus_wave_generator+0x124>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800158e:	f7ff f833 	bl	80005f8 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	ec43 2b17 	vmov	d7, r2, r3
 800159a:	eeb0 0a47 	vmov.f32	s0, s14
 800159e:	eef0 0a67 	vmov.f32	s1, s15
 80015a2:	f00c fedd 	bl	800e360 <sin>
 80015a6:	ec53 2b10 	vmov	r2, r3, d0
 80015aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ae:	f7ff f823 	bl	80005f8 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		sinus_value[i] = (int16_t)(temp);
 80015ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	18d4      	adds	r4, r2, r3
 80015c4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80015c8:	f7ff fac6 	bl	8000b58 <__aeabi_d2iz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	8023      	strh	r3, [r4, #0]

		uint8_t buffer[100];
		sprintf((char*) &buffer, "Data %d \r\n", sinus_value[i]); // Store string in buffer
 80015d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	461a      	mov	r2, r3
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	4912      	ldr	r1, [pc, #72]	; (8001630 <sinus_wave_generator+0x120>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00a fd5b 	bl	800c0a4 <siprintf>
		size_t length = strlen((char*) &buffer); // Extract size of string. Need \r\n to give proper length of string.
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fe3c 	bl	8000270 <strlen>
 80015f8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		CDC_Transmit_FS(buffer, length);
 80015fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001600:	b29a      	uxth	r2, r3
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f009 fbc7 	bl	800ad9c <CDC_Transmit_FS>
	for(int i = 0; i < sample_N ; i++){
 800160e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001612:	3301      	adds	r3, #1
 8001614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001618:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800161c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001620:	429a      	cmp	r2, r3
 8001622:	db9b      	blt.n	800155c <sinus_wave_generator+0x4c>
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	37ac      	adds	r7, #172	; 0xac
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	0800f3f8 	.word	0x0800f3f8
 8001634:	54442d18 	.word	0x54442d18
 8001638:	401921fb 	.word	0x401921fb

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_I2C_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12c      	bne.n	8001714 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_I2C_MspInit+0x88>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_I2C_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80016d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016dc:	2312      	movs	r3, #18
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e8:	2304      	movs	r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <HAL_I2C_MspInit+0x8c>)
 80016f4:	f001 fa48 	bl	8002b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_I2C_MspInit+0x88>)
 8001702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_I2C_MspInit+0x88>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40005400 	.word	0x40005400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_I2S_MspInit+0x160>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 8093 	bne.w	8001880 <HAL_I2S_MspInit+0x158>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800175e:	2332      	movs	r3, #50	; 0x32
 8001760:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f836 	bl	80067dc <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001776:	f7ff ff61 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a42      	ldr	r2, [pc, #264]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_I2S_MspInit+0x164>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_I2S_MspInit+0x164>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ce:	2310      	movs	r3, #16
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017de:	2306      	movs	r3, #6
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <HAL_I2S_MspInit+0x168>)
 80017ea:	f001 f9cd 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80017ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001800:	2306      	movs	r3, #6
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4822      	ldr	r0, [pc, #136]	; (8001894 <HAL_I2S_MspInit+0x16c>)
 800180c:	f001 f9bc 	bl	8002b88 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_I2S_MspInit+0x174>)
 8001814:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800182a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001844:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800184e:	2204      	movs	r2, #4
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001854:	2203      	movs	r2, #3
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001866:	f000 fe1f 	bl	80024a8 <HAL_DMA_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_I2S_MspInit+0x14c>
    {
      Error_Handler();
 8001870:	f7ff fee4 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_I2S_MspInit+0x170>)
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3738      	adds	r7, #56	; 0x38
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40003c00 	.word	0x40003c00
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020800 	.word	0x40020800
 8001898:	2000037c 	.word	0x2000037c
 800189c:	400260b8 	.word	0x400260b8

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_SPI_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_SPI_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018fa:	23e0      	movs	r3, #224	; 0xe0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_SPI_MspInit+0x8c>)
 8001916:	f001 f937 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 fc3e 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Stream7_IRQHandler+0x10>)
 800198a:	f000 fe93 	bl	80026b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000037c 	.word	0x2000037c

08001998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <OTG_FS_IRQHandler+0x10>)
 800199e:	f003 f98d 	bl	8004cbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20001978 	.word	0x20001978

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_kill>:

int _kill(int pid, int sig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c6:	f00a fc23 	bl	800c210 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2216      	movs	r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ee:	e7fe      	b.n	80019ee <_exit+0x12>

080019f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00a      	b.n	8001a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a02:	f3af 8000 	nop.w
 8001a06:	4601      	mov	r1, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf0      	blt.n	8001a02 <_read+0x12>
  }

  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e009      	b.n	8001a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf1      	blt.n	8001a3c <_write+0x12>
  }
  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_close>:

int _close(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_isatty>:

int _isatty(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f00a fb88 	bl	800c210 <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20020000 	.word	0x20020000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	20000434 	.word	0x20000434
 8001b34:	200021c8 	.word	0x200021c8

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b60:	f7ff ffea 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f00a fb47 	bl	800c21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff f9ab 	bl	8000ee8 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001ba0:	0800f9c8 	.word	0x0800f9c8
  ldr r2, =_sbss
 8001ba4:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001ba8:	200021c8 	.word	0x200021c8

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <lis3dsh_write>:
#include "lis3dsh_task5.h"

static SPI_HandleTypeDef *handle_spi1;

int lis3dsh_write(uint8_t reg_address, uint8_t data){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer_tx[2];
	buffer_tx[0] = (WRITE_CMD | reg_address);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	723b      	strb	r3, [r7, #8]
	buffer_tx[1] = data;
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	727b      	strb	r3, [r7, #9]


	SET_CS_PIN();
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2108      	movs	r1, #8
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <lis3dsh_write+0x4c>)
 8001bce:	f001 f977 	bl	8002ec0 <HAL_GPIO_WritePin>
	int ret = HAL_SPI_Transmit(handle_spi1, buffer_tx, 2, HAL_MAX_DELAY);
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <lis3dsh_write+0x50>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f107 0108 	add.w	r1, r7, #8
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	2202      	movs	r2, #2
 8001be0:	f004 ffc7 	bl	8006b72 <HAL_SPI_Transmit>
 8001be4:	4603      	mov	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]
	CLEAR_CS_PIN();
 8001be8:	2201      	movs	r2, #1
 8001bea:	2108      	movs	r1, #8
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <lis3dsh_write+0x4c>)
 8001bee:	f001 f967 	bl	8002ec0 <HAL_GPIO_WritePin>

	return ret;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	20000438 	.word	0x20000438

08001c04 <lis3dsh_read>:
int lis3dsh_read(uint8_t reg_address, uint8_t *buffer_rx, size_t length){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_tx[1];
	buffer_tx[0] = (READ_CMD | reg_address);
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	743b      	strb	r3, [r7, #16]

	SET_CS_PIN();
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2108      	movs	r1, #8
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <lis3dsh_read+0x68>)
 8001c22:	f001 f94d 	bl	8002ec0 <HAL_GPIO_WritePin>
	int ret = HAL_SPI_Transmit(handle_spi1, buffer_tx, 1, HAL_MAX_DELAY);
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <lis3dsh_read+0x6c>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f107 0110 	add.w	r1, r7, #16
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	2201      	movs	r2, #1
 8001c34:	f004 ff9d 	bl	8006b72 <HAL_SPI_Transmit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	617b      	str	r3, [r7, #20]
	ret += HAL_SPI_Receive(handle_spi1, buffer_rx, length, HAL_MAX_DELAY);
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <lis3dsh_read+0x6c>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	f005 f8d5 	bl	8006df8 <HAL_SPI_Receive>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4413      	add	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
	CLEAR_CS_PIN();
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <lis3dsh_read+0x68>)
 8001c5e:	f001 f92f 	bl	8002ec0 <HAL_GPIO_WritePin>

	return ret;
 8001c62:	697b      	ldr	r3, [r7, #20]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	20000438 	.word	0x20000438

08001c74 <lis3dsh_init>:

int lis3dsh_init(SPI_HandleTypeDef *hspi1, lis3dsh_config *parameters){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	handle_spi1 = hspi1;
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <lis3dsh_init+0x78>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6013      	str	r3, [r2, #0]
	int ret = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

	// Set CRTL_REG4
	ret += lis3dsh_write(LIS3DSH_CTRL_REG4_ADDR, parameters->ctrl_reg4_config);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2020      	movs	r0, #32
 8001c90:	f7ff ff8e 	bl	8001bb0 <lis3dsh_write>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

	// Set CTRL_REG3
	ret += lis3dsh_write(LIS3DSH_CTRL_REG3_ADDR, parameters->ctrl_reg3_config);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2023      	movs	r0, #35	; 0x23
 8001ca4:	f7ff ff84 	bl	8001bb0 <lis3dsh_write>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

	// Read and check ID
	uint8_t buffer_rx[1];
	ret += lis3dsh_read(LIS3DSH_WHO_AM_I_ADDR,buffer_rx,1);
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f7ff ffa3 	bl	8001c04 <lis3dsh_read>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
	uint8_t id = buffer_rx[0]; // ID Should be checked.
 8001cc6:	7a3b      	ldrb	r3, [r7, #8]
 8001cc8:	72fb      	strb	r3, [r7, #11]

	if (id != 0b00111111 ){
 8001cca:	7afb      	ldrb	r3, [r7, #11]
 8001ccc:	2b3f      	cmp	r3, #63	; 0x3f
 8001cce:	d002      	beq.n	8001cd6 <lis3dsh_init+0x62>
		// ID dosen't match.
		return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	e006      	b.n	8001ce4 <lis3dsh_init+0x70>
	}

	if (ret != HAL_OK){
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <lis3dsh_init+0x6e>
		// Initialization failed.
		return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e000      	b.n	8001ce4 <lis3dsh_init+0x70>
	}
	return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000438 	.word	0x20000438

08001cf0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8001cfc:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <write_register+0x34>)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <write_register+0x34>)
 8001d08:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8001d0a:	2364      	movs	r3, #100	; 0x64
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <write_register+0x34>)
 8001d12:	2194      	movs	r1, #148	; 0x94
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <write_register+0x38>)
 8001d16:	f001 fa31 	bl	800317c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000043c 	.word	0x2000043c
 8001d28:	20000440 	.word	0x20000440

08001d2c <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <read_register+0x3c>)
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <read_register+0x3c>)
 8001d46:	2194      	movs	r1, #148	; 0x94
 8001d48:	4808      	ldr	r0, [pc, #32]	; (8001d6c <read_register+0x40>)
 8001d4a:	f001 fa17 	bl	800317c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	2194      	movs	r1, #148	; 0x94
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <read_register+0x40>)
 8001d5a:	f001 fb0d 	bl	8003378 <HAL_I2C_Master_Receive>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000043c 	.word	0x2000043c
 8001d6c:	20000440 	.word	0x20000440

08001d70 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8001d70:	b084      	sub	sp, #16
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	f107 0c08 	add.w	ip, r7, #8
 8001d7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001d7e:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <CS43_Init+0x214>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001d86:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <CS43_Init+0x214>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <CS43_Init+0x214>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d94:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	2110      	movs	r1, #16
 8001d9a:	487b      	ldr	r0, [pc, #492]	; (8001f88 <CS43_Init+0x218>)
 8001d9c:	f001 f890 	bl	8002ec0 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8001da0:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <CS43_Init+0x21c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	2254      	movs	r2, #84	; 0x54
 8001daa:	4619      	mov	r1, r3
 8001dac:	f00a fa5d 	bl	800c26a <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8001db0:	4b77      	ldr	r3, [pc, #476]	; (8001f90 <CS43_Init+0x220>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8001db6:	4976      	ldr	r1, [pc, #472]	; (8001f90 <CS43_Init+0x220>)
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7ff ff99 	bl	8001cf0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001dbe:	4b74      	ldr	r3, [pc, #464]	; (8001f90 <CS43_Init+0x220>)
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001dc4:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <CS43_Init+0x220>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	f043 0320 	orr.w	r3, r3, #32
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <CS43_Init+0x220>)
 8001dd0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <CS43_Init+0x220>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	f043 030c 	orr.w	r3, r3, #12
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <CS43_Init+0x220>)
 8001dde:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8001de0:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <CS43_Init+0x220>)
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	f043 0303 	orr.w	r3, r3, #3
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <CS43_Init+0x220>)
 8001dec:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8001dee:	4969      	ldr	r1, [pc, #420]	; (8001f94 <CS43_Init+0x224>)
 8001df0:	2004      	movs	r0, #4
 8001df2:	f7ff ff7d 	bl	8001cf0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <CS43_Init+0x220>)
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8001dfc:	4965      	ldr	r1, [pc, #404]	; (8001f94 <CS43_Init+0x224>)
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f7ff ff76 	bl	8001cf0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8001e04:	4962      	ldr	r1, [pc, #392]	; (8001f90 <CS43_Init+0x220>)
 8001e06:	2006      	movs	r0, #6
 8001e08:	f7ff ff90 	bl	8001d2c <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001e0c:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <CS43_Init+0x220>)
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <CS43_Init+0x220>)
 8001e18:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <CS43_Init+0x220>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <CS43_Init+0x220>)
 8001e26:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <CS43_Init+0x220>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <CS43_Init+0x220>)
 8001e34:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8001e36:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <CS43_Init+0x220>)
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	f023 0310 	bic.w	r3, r3, #16
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <CS43_Init+0x220>)
 8001e42:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8001e44:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <CS43_Init+0x220>)
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <CS43_Init+0x220>)
 8001e50:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8001e52:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <CS43_Init+0x220>)
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <CS43_Init+0x220>)
 8001e5e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <CS43_Init+0x220>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	f043 0303 	orr.w	r3, r3, #3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <CS43_Init+0x220>)
 8001e6c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8001e6e:	4949      	ldr	r1, [pc, #292]	; (8001f94 <CS43_Init+0x224>)
 8001e70:	2006      	movs	r0, #6
 8001e72:	f7ff ff3d 	bl	8001cf0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8001e76:	4947      	ldr	r1, [pc, #284]	; (8001f94 <CS43_Init+0x224>)
 8001e78:	2008      	movs	r0, #8
 8001e7a:	f7ff ff57 	bl	8001d2c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <CS43_Init+0x220>)
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	f023 030f 	bic.w	r3, r3, #15
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <CS43_Init+0x220>)
 8001e8a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <CS43_Init+0x220>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <CS43_Init+0x220>)
 8001e98:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8001e9a:	493e      	ldr	r1, [pc, #248]	; (8001f94 <CS43_Init+0x224>)
 8001e9c:	2008      	movs	r0, #8
 8001e9e:	f7ff ff27 	bl	8001cf0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8001ea2:	493c      	ldr	r1, [pc, #240]	; (8001f94 <CS43_Init+0x224>)
 8001ea4:	2009      	movs	r0, #9
 8001ea6:	f7ff ff41 	bl	8001d2c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <CS43_Init+0x220>)
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <CS43_Init+0x220>)
 8001eb6:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <CS43_Init+0x220>)
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <CS43_Init+0x220>)
 8001ec4:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8001ec6:	4933      	ldr	r1, [pc, #204]	; (8001f94 <CS43_Init+0x224>)
 8001ec8:	2009      	movs	r0, #9
 8001eca:	f7ff ff11 	bl	8001cf0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8001ece:	4931      	ldr	r1, [pc, #196]	; (8001f94 <CS43_Init+0x224>)
 8001ed0:	200e      	movs	r0, #14
 8001ed2:	f7ff ff2b 	bl	8001d2c <read_register>
	if(outputMode == MODE_ANALOG1)
 8001ed6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d123      	bne.n	8001f26 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <CS43_Init+0x220>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <CS43_Init+0x220>)
 8001eea:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <CS43_Init+0x220>)
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <CS43_Init+0x220>)
 8001ef8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <CS43_Init+0x220>)
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	f023 0320 	bic.w	r3, r3, #32
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <CS43_Init+0x220>)
 8001f06:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <CS43_Init+0x220>)
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	f023 0310 	bic.w	r3, r3, #16
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <CS43_Init+0x220>)
 8001f14:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <CS43_Init+0x220>)
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	f023 0308 	bic.w	r3, r3, #8
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <CS43_Init+0x220>)
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e006      	b.n	8001f34 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8001f26:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <CS43_Init+0x220>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8001f34:	4917      	ldr	r1, [pc, #92]	; (8001f94 <CS43_Init+0x224>)
 8001f36:	200e      	movs	r0, #14
 8001f38:	f7ff feda 	bl	8001cf0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001f3c:	4915      	ldr	r1, [pc, #84]	; (8001f94 <CS43_Init+0x224>)
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f7ff fef4 	bl	8001d2c <read_register>
	iData[1] = 0x00;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <CS43_Init+0x220>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8001f4a:	4912      	ldr	r1, [pc, #72]	; (8001f94 <CS43_Init+0x224>)
 8001f4c:	200f      	movs	r0, #15
 8001f4e:	f7ff fecf 	bl	8001cf0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <CS43_Init+0x220>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <CS43_Init+0x224>)
 8001f5a:	2014      	movs	r0, #20
 8001f5c:	f7ff fec8 	bl	8001cf0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <CS43_Init+0x224>)
 8001f62:	2015      	movs	r0, #21
 8001f64:	f7ff fec4 	bl	8001cf0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8001f68:	490a      	ldr	r1, [pc, #40]	; (8001f94 <CS43_Init+0x224>)
 8001f6a:	201a      	movs	r0, #26
 8001f6c:	f7ff fec0 	bl	8001cf0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001f70:	4908      	ldr	r1, [pc, #32]	; (8001f94 <CS43_Init+0x224>)
 8001f72:	201b      	movs	r0, #27
 8001f74:	f7ff febc 	bl	8001cf0 <write_register>
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b004      	add	sp, #16
 8001f82:	4770      	bx	lr
 8001f84:	20000334 	.word	0x20000334
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	20000440 	.word	0x20000440
 8001f90:	2000043c 	.word	0x2000043c
 8001f94:	2000043d 	.word	0x2000043d

08001f98 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d837      	bhi.n	8002018 <CS43_Enable_RightLeft+0x80>
 8001fa8:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <CS43_Enable_RightLeft+0x18>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fd7 	.word	0x08001fd7
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	08002003 	.word	0x08002003
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fc2:	22c0      	movs	r2, #192	; 0xc0
 8001fc4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fd2:	705a      	strb	r2, [r3, #1]
			break;
 8001fd4:	e021      	b.n	800201a <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fe8:	705a      	strb	r2, [r3, #1]
			break;
 8001fea:	e016      	b.n	800201a <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001fee:	22c0      	movs	r2, #192	; 0xc0
 8001ff0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8001ffe:	705a      	strb	r2, [r3, #1]
			break;
 8002000:	e00b      	b.n	800201a <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8002014:	705a      	strb	r2, [r3, #1]
			break;
 8002016:	e000      	b.n	800201a <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8002018:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	f043 030c 	orr.w	r3, r3, #12
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8002026:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	f043 0303 	orr.w	r3, r3, #3
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <CS43_Enable_RightLeft+0xb0>)
 8002034:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <CS43_Enable_RightLeft+0xb4>)
 8002038:	2004      	movs	r0, #4
 800203a:	f7ff fe59 	bl	8001cf0 <write_register>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000043c 	.word	0x2000043c
 800204c:	2000043d 	.word	0x2000043d

08002050 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	3b32      	subs	r3, #50	; 0x32
 800205e:	b2db      	uxtb	r3, r3
 8002060:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <CS43_SetVolume+0x78>)
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8002074:	4915      	ldr	r1, [pc, #84]	; (80020cc <CS43_SetVolume+0x7c>)
 8002076:	2014      	movs	r0, #20
 8002078:	f7ff fe3a 	bl	8001cf0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800207c:	4913      	ldr	r1, [pc, #76]	; (80020cc <CS43_SetVolume+0x7c>)
 800207e:	2015      	movs	r0, #21
 8002080:	f7ff fe36 	bl	8001cf0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d80e      	bhi.n	80020a8 <CS43_SetVolume+0x58>
 800208a:	79fa      	ldrb	r2, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <CS43_SetVolume+0x80>)
 8002096:	fb82 1203 	smull	r1, r2, r2, r3
 800209a:	1152      	asrs	r2, r2, #5
 800209c:	17db      	asrs	r3, r3, #31
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3b18      	subs	r3, #24
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e000      	b.n	80020aa <CS43_SetVolume+0x5a>
 80020a8:	2318      	movs	r3, #24
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <CS43_SetVolume+0x78>)
 80020ac:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80020ae:	4907      	ldr	r1, [pc, #28]	; (80020cc <CS43_SetVolume+0x7c>)
 80020b0:	2020      	movs	r0, #32
 80020b2:	f7ff fe1d 	bl	8001cf0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80020b6:	4905      	ldr	r1, [pc, #20]	; (80020cc <CS43_SetVolume+0x7c>)
 80020b8:	2021      	movs	r0, #33	; 0x21
 80020ba:	f7ff fe19 	bl	8001cf0 <write_register>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000043c 	.word	0x2000043c
 80020cc:	2000043d 	.word	0x2000043d
 80020d0:	51eb851f 	.word	0x51eb851f

080020d4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <CS43_Start+0x7c>)
 80020da:	2299      	movs	r2, #153	; 0x99
 80020dc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80020de:	491d      	ldr	r1, [pc, #116]	; (8002154 <CS43_Start+0x80>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fe05 	bl	8001cf0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <CS43_Start+0x7c>)
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80020ec:	4919      	ldr	r1, [pc, #100]	; (8002154 <CS43_Start+0x80>)
 80020ee:	2047      	movs	r0, #71	; 0x47
 80020f0:	f7ff fdfe 	bl	8001cf0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80020f4:	4917      	ldr	r1, [pc, #92]	; (8002154 <CS43_Start+0x80>)
 80020f6:	2032      	movs	r0, #50	; 0x32
 80020f8:	f7ff fe18 	bl	8001d2c <read_register>
	iData[1] |= 0x80;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <CS43_Start+0x7c>)
 80020fe:	785b      	ldrb	r3, [r3, #1]
 8002100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <CS43_Start+0x7c>)
 8002108:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800210a:	4912      	ldr	r1, [pc, #72]	; (8002154 <CS43_Start+0x80>)
 800210c:	2032      	movs	r0, #50	; 0x32
 800210e:	f7ff fdef 	bl	8001cf0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8002112:	4910      	ldr	r1, [pc, #64]	; (8002154 <CS43_Start+0x80>)
 8002114:	2032      	movs	r0, #50	; 0x32
 8002116:	f7ff fe09 	bl	8001d2c <read_register>
	iData[1] &= ~(0x80);
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <CS43_Start+0x7c>)
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <CS43_Start+0x7c>)
 8002126:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8002128:	490a      	ldr	r1, [pc, #40]	; (8002154 <CS43_Start+0x80>)
 800212a:	2032      	movs	r0, #50	; 0x32
 800212c:	f7ff fde0 	bl	8001cf0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <CS43_Start+0x7c>)
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8002136:	4907      	ldr	r1, [pc, #28]	; (8002154 <CS43_Start+0x80>)
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff fdd9 	bl	8001cf0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <CS43_Start+0x7c>)
 8002140:	229e      	movs	r2, #158	; 0x9e
 8002142:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <CS43_Start+0x80>)
 8002146:	2002      	movs	r0, #2
 8002148:	f7ff fdd2 	bl	8001cf0 <write_register>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000043c 	.word	0x2000043c
 8002154:	2000043d 	.word	0x2000043d

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f94f 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	200f      	movs	r0, #15
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fa5c 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f967 	bl	800248e <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 f92f 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000008 	.word	0x20000008
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20000494 	.word	0x20000494

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000494 	.word	0x20000494

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff feb6 	bl	8002224 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e099      	b.n	80025f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	e00f      	b.n	8002506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff fe9d 	bl	8002224 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d908      	bls.n	8002506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e078      	b.n	80025f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e8      	bne.n	80024e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_DMA_Init+0x158>)
 8002520:	4013      	ands	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b04      	cmp	r3, #4
 800255e:	d107      	bne.n	8002570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4313      	orrs	r3, r2
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b04      	cmp	r3, #4
 8002598:	d117      	bne.n	80025ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fa6f 	bl	8002a90 <DMA_CheckFifoParam>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025c6:	2301      	movs	r3, #1
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa26 	bl	8002a24 <DMA_CalcBaseAndBitshift>
 80025d8:	4603      	mov	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	f010803f 	.word	0xf010803f

08002604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_DMA_Start_IT+0x26>
 8002626:	2302      	movs	r3, #2
 8002628:	e040      	b.n	80026ac <HAL_DMA_Start_IT+0xa8>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d12f      	bne.n	800269e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f9b8 	bl	80029c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0216 	orr.w	r2, r2, #22
 8002672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026c0:	4b8e      	ldr	r3, [pc, #568]	; (80028fc <HAL_DMA_IRQHandler+0x248>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a8e      	ldr	r2, [pc, #568]	; (8002900 <HAL_DMA_IRQHandler+0x24c>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0a9b      	lsrs	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2208      	movs	r2, #8
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2208      	movs	r2, #8
 800270e:	409a      	lsls	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2201      	movs	r2, #1
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2210      	movs	r2, #16
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d043      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03c      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2210      	movs	r2, #16
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d018      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e01f      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
 80027f4:	e016      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0208 	bic.w	r2, r2, #8
 8002812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2220      	movs	r2, #32
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 808f 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8087 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2220      	movs	r2, #32
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b05      	cmp	r3, #5
 800285c:	d136      	bne.n	80028cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0216 	bic.w	r2, r2, #22
 800286c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_DMA_IRQHandler+0x1da>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	223f      	movs	r2, #63	; 0x3f
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07e      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
        }
        return;
 80028ca:	e079      	b.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d031      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e02c      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000
 8002900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e01e      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	d032      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2205      	movs	r2, #5
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d307      	bcc.n	800299c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <HAL_DMA_IRQHandler+0x2cc>
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800299c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
 80029be:	e000      	b.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c0:	bf00      	nop
    }
  }
}
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d108      	bne.n	8002a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a06:	e007      	b.n	8002a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3b10      	subs	r3, #16
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <DMA_CalcBaseAndBitshift+0x64>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <DMA_CalcBaseAndBitshift+0x68>)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d909      	bls.n	8002a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58
 8002a64:	e007      	b.n	8002a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	aaaaaaab 	.word	0xaaaaaaab
 8002a8c:	0800f464 	.word	0x0800f464

08002a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d856      	bhi.n	8002b5e <DMA_CheckFifoParam+0xce>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <DMA_CheckFifoParam+0x28>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002adb 	.word	0x08002adb
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002b5f 	.word	0x08002b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d046      	beq.n	8002b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e043      	b.n	8002b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae2:	d140      	bne.n	8002b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e03d      	b.n	8002b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af2:	d121      	bne.n	8002b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d837      	bhi.n	8002b6a <DMA_CheckFifoParam+0xda>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x70>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b17 	.word	0x08002b17
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002b29 	.word	0x08002b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e030      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d025      	beq.n	8002b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e022      	b.n	8002b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b36:	e01c      	b.n	8002b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d903      	bls.n	8002b46 <DMA_CheckFifoParam+0xb6>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d003      	beq.n	8002b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b44:	e018      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4a:	e015      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e00b      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e00a      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e008      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e006      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e004      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e002      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
    }
  } 
  
  return status; 
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e16b      	b.n	8002e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 815a 	bne.w	8002e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d005      	beq.n	8002bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d130      	bne.n	8002c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 0201 	and.w	r2, r3, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d017      	beq.n	8002c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d123      	bne.n	8002ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80b4 	beq.w	8002e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_GPIO_Init+0x314>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <HAL_GPIO_Init+0x226>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <HAL_GPIO_Init+0x318>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x222>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_GPIO_Init+0x31c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x21e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <HAL_GPIO_Init+0x320>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x21a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_GPIO_Init+0x324>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x328>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x212>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x32c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <HAL_GPIO_Init+0x330>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x20a>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00e      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d92:	2308      	movs	r3, #8
 8002d94:	e00c      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00a      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	e008      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002dae:	2300      	movs	r3, #0
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc0:	4935      	ldr	r1, [pc, #212]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e46:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	f67f ae90 	bls.w	8002ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40021400 	.word	0x40021400
 8002eb4:	40021800 	.word	0x40021800
 8002eb8:	40021c00 	.word	0x40021c00
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002edc:	e003      	b.n	8002ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e12b      	b.n	800315e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fbbc 	bl	8001698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f58:	f003 fc2c 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a81      	ldr	r2, [pc, #516]	; (8003168 <HAL_I2C_Init+0x274>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d807      	bhi.n	8002f78 <HAL_I2C_Init+0x84>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_I2C_Init+0x278>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e006      	b.n	8002f86 <HAL_I2C_Init+0x92>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a7d      	ldr	r2, [pc, #500]	; (8003170 <HAL_I2C_Init+0x27c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0e7      	b.n	800315e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a78      	ldr	r2, [pc, #480]	; (8003174 <HAL_I2C_Init+0x280>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_I2C_Init+0x274>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_I2C_Init+0xd4>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	e009      	b.n	8002fdc <HAL_I2C_Init+0xe8>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_I2C_Init+0x284>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	3301      	adds	r3, #1
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	495c      	ldr	r1, [pc, #368]	; (8003168 <HAL_I2C_Init+0x274>)
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d819      	bhi.n	8003030 <HAL_I2C_Init+0x13c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e59      	subs	r1, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb1 f3f3 	udiv	r3, r1, r3
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003010:	400b      	ands	r3, r1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_I2C_Init+0x138>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e59      	subs	r1, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb1 f3f3 	udiv	r3, r1, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	e051      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800302c:	2304      	movs	r3, #4
 800302e:	e04f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d111      	bne.n	800305c <HAL_I2C_Init+0x168>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e012      	b.n	8003082 <HAL_I2C_Init+0x18e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x196>
 8003086:	2301      	movs	r3, #1
 8003088:	e022      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10e      	bne.n	80030b0 <HAL_I2C_Init+0x1bc>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1e58      	subs	r0, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6809      	ldr	r1, [r1, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6911      	ldr	r1, [r2, #16]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	000186a0 	.word	0x000186a0
 800316c:	001e847f 	.word	0x001e847f
 8003170:	003d08ff 	.word	0x003d08ff
 8003174:	431bde83 	.word	0x431bde83
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff f848 	bl	8002224 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 80e0 	bne.w	8003364 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2319      	movs	r3, #25
 80031aa:	2201      	movs	r2, #1
 80031ac:	4970      	ldr	r1, [pc, #448]	; (8003370 <HAL_I2C_Master_Transmit+0x1f4>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fc64 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0d3      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_I2C_Master_Transmit+0x50>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0cc      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d007      	beq.n	80031f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003200:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2210      	movs	r2, #16
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a50      	ldr	r2, [pc, #320]	; (8003374 <HAL_I2C_Master_Transmit+0x1f8>)
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003234:	8979      	ldrh	r1, [r7, #10]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 face 	bl	80037dc <I2C_MasterRequestWrite>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e08d      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003260:	e066      	b.n	8003330 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	6a39      	ldr	r1, [r7, #32]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fd22 	bl	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b04      	cmp	r3, #4
 8003278:	d107      	bne.n	800328a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06b      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x188>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	6a39      	ldr	r1, [r7, #32]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fd19 	bl	8003d40 <I2C_WaitOnBTFFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2b04      	cmp	r3, #4
 800331a:	d107      	bne.n	800332c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e01a      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d194      	bne.n	8003262 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00100002 	.word	0x00100002
 8003374:	ffff0000 	.word	0xffff0000

08003378 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
 8003388:	4613      	mov	r3, r2
 800338a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800338c:	f7fe ff4a 	bl	8002224 <HAL_GetTick>
 8003390:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	f040 8217 	bne.w	80037ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2319      	movs	r3, #25
 80033a6:	2201      	movs	r2, #1
 80033a8:	497c      	ldr	r1, [pc, #496]	; (800359c <HAL_I2C_Master_Receive+0x224>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fb66 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	e20a      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_I2C_Master_Receive+0x50>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e203      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d007      	beq.n	80033ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2222      	movs	r2, #34	; 0x22
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2210      	movs	r2, #16
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	893a      	ldrh	r2, [r7, #8]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_I2C_Master_Receive+0x228>)
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fa52 	bl	80038e0 <I2C_MasterRequestRead>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c4      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	623b      	str	r3, [r7, #32]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e198      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	2b01      	cmp	r3, #1
 800347c:	d11b      	bne.n	80034b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e178      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d11b      	bne.n	80034f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	e158      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800351c:	e144      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	2b03      	cmp	r3, #3
 8003524:	f200 80f1 	bhi.w	800370a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b01      	cmp	r3, #1
 800352e:	d123      	bne.n	8003578 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc4b 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e145      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003576:	e117      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	2b02      	cmp	r3, #2
 800357e:	d14e      	bne.n	800361e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	4906      	ldr	r1, [pc, #24]	; (80035a4 <HAL_I2C_Master_Receive+0x22c>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa76 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e11a      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
 800359a:	bf00      	nop
 800359c:	00100002 	.word	0x00100002
 80035a0:	ffff0000 	.word	0xffff0000
 80035a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800361c:	e0c4      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	496c      	ldr	r1, [pc, #432]	; (80037d8 <HAL_I2C_Master_Receive+0x460>)
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa27 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cb      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	2200      	movs	r2, #0
 8003682:	4955      	ldr	r1, [pc, #340]	; (80037d8 <HAL_I2C_Master_Receive+0x460>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f9f9 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e09d      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003708:	e04e      	b.n	80037a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fb5e 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e058      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b04      	cmp	r3, #4
 800375c:	d124      	bne.n	80037a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003774:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f aeb6 	bne.w	800351e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	00010004 	.word	0x00010004

080037dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d006      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d003      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003804:	d108      	bne.n	8003818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e00b      	b.n	8003830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	2b12      	cmp	r3, #18
 800381e:	d107      	bne.n	8003830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f91d 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d103      	bne.n	8003860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e035      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386c:	d108      	bne.n	8003880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e01b      	b.n	80038b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	11db      	asrs	r3, r3, #7
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f063 030f 	orn	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <I2C_MasterRequestWrite+0xfc>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f966 	bl	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e010      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4907      	ldr	r1, [pc, #28]	; (80038dc <I2C_MasterRequestWrite+0x100>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f956 	bl	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010008 	.word	0x00010008
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003904:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d006      	beq.n	800391a <I2C_MasterRequestRead+0x3a>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d003      	beq.n	800391a <I2C_MasterRequestRead+0x3a>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d108      	bne.n	800392c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e00b      	b.n	8003944 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	2b11      	cmp	r3, #17
 8003932:	d107      	bne.n	8003944 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f893 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396a:	d103      	bne.n	8003974 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e079      	b.n	8003a6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003980:	d108      	bne.n	8003994 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	e05f      	b.n	8003a54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003994:	897b      	ldrh	r3, [r7, #10]
 8003996:	11db      	asrs	r3, r3, #7
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f003 0306 	and.w	r3, r3, #6
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f063 030f 	orn	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4930      	ldr	r1, [pc, #192]	; (8003a74 <I2C_MasterRequestRead+0x194>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f8dc 	bl	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e054      	b.n	8003a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4929      	ldr	r1, [pc, #164]	; (8003a78 <I2C_MasterRequestRead+0x198>)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8cc 	bl	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e044      	b.n	8003a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f831 	bl	8003a7c <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2e:	d103      	bne.n	8003a38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e017      	b.n	8003a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a3c:	897b      	ldrh	r3, [r7, #10]
 8003a3e:	11db      	asrs	r3, r3, #7
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0306 	and.w	r3, r3, #6
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f063 030e 	orn	r3, r3, #14
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4907      	ldr	r1, [pc, #28]	; (8003a78 <I2C_MasterRequestRead+0x198>)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f888 	bl	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	00010008 	.word	0x00010008
 8003a78:	00010002 	.word	0x00010002

08003a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8c:	e048      	b.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d044      	beq.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe fbc5 	bl	8002224 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d139      	bne.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10d      	bne.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	e00c      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d116      	bne.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e023      	b.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d093      	beq.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7e:	e071      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d123      	bne.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e067      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d041      	beq.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be0:	f7fe fb20 	bl	8002224 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d302      	bcc.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d136      	bne.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10c      	bne.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e00b      	b.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	43da      	mvns	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e021      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10c      	bne.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e00b      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f47f af6d 	bne.w	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cbc:	e034      	b.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f8e3 	bl	8003e8a <I2C_IsAcknowledgeFailed>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d028      	beq.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fe faa5 	bl	8002224 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11d      	bne.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d016      	beq.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d1c3      	bne.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d4c:	e034      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f89b 	bl	8003e8a <I2C_IsAcknowledgeFailed>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e034      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d028      	beq.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fe fa5d 	bl	8002224 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11d      	bne.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d016      	beq.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d1c3      	bne.n	8003d4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ddc:	e049      	b.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d119      	bne.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0210 	mvn.w	r2, #16
 8003df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e030      	b.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fe fa00 	bl	8002224 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d016      	beq.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e007      	b.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d1ae      	bne.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d11b      	bne.n	8003eda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eaa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e128      	b.n	800414c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a90      	ldr	r2, [pc, #576]	; (8004154 <HAL_I2S_Init+0x26c>)
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fd fc07 	bl	8001728 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f30:	f023 030f 	bic.w	r3, r3, #15
 8003f34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d060      	beq.n	8004008 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f4e:	2310      	movs	r3, #16
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e001      	b.n	8003f58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d802      	bhi.n	8003f66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f002 fd1a 	bl	80069a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d125      	bne.n	8003fc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e01f      	b.n	8003fe2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	3305      	adds	r3, #5
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	e00e      	b.n	8003fe2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	3305      	adds	r3, #5
 8003fe0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4a5c      	ldr	r2, [pc, #368]	; (8004158 <HAL_I2S_Init+0x270>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e003      	b.n	8004010 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004008:	2302      	movs	r3, #2
 800400a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d902      	bls.n	800401c <HAL_I2S_Init+0x134>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2bff      	cmp	r3, #255	; 0xff
 800401a:	d907      	bls.n	800402c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	f043 0210 	orr.w	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e08f      	b.n	800414c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	ea42 0103 	orr.w	r1, r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	430a      	orrs	r2, r1
 800403e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800404a:	f023 030f 	bic.w	r3, r3, #15
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6851      	ldr	r1, [r2, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	4311      	orrs	r1, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68d2      	ldr	r2, [r2, #12]
 800405c:	4311      	orrs	r1, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6992      	ldr	r2, [r2, #24]
 8004062:	430a      	orrs	r2, r1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d161      	bne.n	800413c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a38      	ldr	r2, [pc, #224]	; (800415c <HAL_I2S_Init+0x274>)
 800407c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a37      	ldr	r2, [pc, #220]	; (8004160 <HAL_I2S_Init+0x278>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_I2S_Init+0x1a4>
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_I2S_Init+0x27c>)
 800408a:	e001      	b.n	8004090 <HAL_I2S_Init+0x1a8>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4932      	ldr	r1, [pc, #200]	; (8004160 <HAL_I2S_Init+0x278>)
 8004098:	428a      	cmp	r2, r1
 800409a:	d101      	bne.n	80040a0 <HAL_I2S_Init+0x1b8>
 800409c:	4a31      	ldr	r2, [pc, #196]	; (8004164 <HAL_I2S_Init+0x27c>)
 800409e:	e001      	b.n	80040a4 <HAL_I2S_Init+0x1bc>
 80040a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040a8:	f023 030f 	bic.w	r3, r3, #15
 80040ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <HAL_I2S_Init+0x278>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_I2S_Init+0x1d4>
 80040b8:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_I2S_Init+0x27c>)
 80040ba:	e001      	b.n	80040c0 <HAL_I2S_Init+0x1d8>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	2202      	movs	r2, #2
 80040c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <HAL_I2S_Init+0x278>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_I2S_Init+0x1ea>
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_I2S_Init+0x27c>)
 80040d0:	e001      	b.n	80040d6 <HAL_I2S_Init+0x1ee>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e2:	d003      	beq.n	80040ec <HAL_I2S_Init+0x204>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e001      	b.n	80040f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004102:	4313      	orrs	r3, r2
 8004104:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800410c:	4313      	orrs	r3, r2
 800410e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004116:	4313      	orrs	r3, r2
 8004118:	b29a      	uxth	r2, r3
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	4313      	orrs	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004124:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <HAL_I2S_Init+0x278>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_I2S_Init+0x24c>
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_I2S_Init+0x27c>)
 8004132:	e001      	b.n	8004138 <HAL_I2S_Init+0x250>
 8004134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004138:	897a      	ldrh	r2, [r7, #10]
 800413a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	0800446d 	.word	0x0800446d
 8004158:	cccccccd 	.word	0xcccccccd
 800415c:	08004581 	.word	0x08004581
 8004160:	40003800 	.word	0x40003800
 8004164:	40003400 	.word	0x40003400

08004168 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_I2S_Transmit_DMA+0x1a>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e08e      	b.n	80042a4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_I2S_Transmit_DMA+0x2e>
 8004192:	2302      	movs	r3, #2
 8004194:	e086      	b.n	80042a4 <HAL_I2S_Transmit_DMA+0x13c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d005      	beq.n	80041b6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
 80041b4:	e076      	b.n	80042a4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d002      	beq.n	80041e2 <HAL_I2S_Transmit_DMA+0x7a>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d10a      	bne.n	80041f8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f6:	e005      	b.n	8004204 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	4a28      	ldr	r2, [pc, #160]	; (80042ac <HAL_I2S_Transmit_DMA+0x144>)
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_I2S_Transmit_DMA+0x148>)
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <HAL_I2S_Transmit_DMA+0x14c>)
 800421a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004224:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800422c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004234:	f7fe f9e6 	bl	8002604 <HAL_DMA_Start_IT>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0208 	orr.w	r2, r3, #8
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e022      	b.n	80042a4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800427a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0202 	orr.w	r2, r2, #2
 8004298:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0800434b 	.word	0x0800434b
 80042b0:	08004309 	.word	0x08004309
 80042b4:	08004367 	.word	0x08004367

080042b8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10e      	bne.n	800433c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0202 	bic.w	r2, r2, #2
 800432c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff ffc5 	bl	80042cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff ffad 	bl	80042b8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0203 	bic.w	r2, r2, #3
 8004382:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f043 0208 	orr.w	r2, r3, #8
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff ffa5 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c9a      	adds	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10e      	bne.n	8004406 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff63 	bl	80042cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	b292      	uxth	r2, r2
 8004422:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	1c9a      	adds	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10e      	bne.n	8004464 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004454:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ff3e 	bl	80042e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b04      	cmp	r3, #4
 8004486:	d13a      	bne.n	80044fe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d109      	bne.n	80044a6 <I2S_IRQHandler+0x3a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d102      	bne.n	80044a6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ffb4 	bl	800440e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d126      	bne.n	80044fe <I2S_IRQHandler+0x92>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d11f      	bne.n	80044fe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044cc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f043 0202 	orr.w	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fefb 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d136      	bne.n	8004578 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d109      	bne.n	8004528 <I2S_IRQHandler+0xbc>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d102      	bne.n	8004528 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff45 	bl	80043b2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b08      	cmp	r3, #8
 8004530:	d122      	bne.n	8004578 <I2S_IRQHandler+0x10c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d11b      	bne.n	8004578 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800454e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0204 	orr.w	r2, r3, #4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff febe 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a92      	ldr	r2, [pc, #584]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800459a:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800459c:	e001      	b.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800459e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a8b      	ldr	r2, [pc, #556]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045b8:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ba:	e001      	b.n	80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	d004      	beq.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 8099 	bne.w	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d107      	bne.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f925 	bl	800483c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d107      	bne.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9c8 	bl	800499c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d13a      	bne.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d035      	beq.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800462a:	4b6e      	ldr	r3, [pc, #440]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800462c:	e001      	b.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800462e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4969      	ldr	r1, [pc, #420]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463a:	428b      	cmp	r3, r1
 800463c:	d101      	bne.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800463e:	4b69      	ldr	r3, [pc, #420]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004640:	e001      	b.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800464a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800465a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	f043 0202 	orr.w	r2, r3, #2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fe34 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	f040 80c3 	bne.w	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80bd 	beq.w	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4944      	ldr	r1, [pc, #272]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ce:	428b      	cmp	r3, r1
 80046d0:	d101      	bne.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046d2:	4b44      	ldr	r3, [pc, #272]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046d4:	e001      	b.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fdf6 	bl	80042f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004708:	e089      	b.n	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d107      	bne.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8be 	bl	80048a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8fd 	bl	8004938 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d12f      	bne.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02a      	beq.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004760:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800476e:	e001      	b.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4919      	ldr	r1, [pc, #100]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800477c:	428b      	cmp	r3, r1
 800477e:	d101      	bne.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004780:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004782:	e001      	b.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800478c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fda6 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d136      	bne.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d031      	beq.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c8:	e001      	b.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4902      	ldr	r1, [pc, #8]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047d6:	428b      	cmp	r3, r1
 80047d8:	d106      	bne.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047da:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047dc:	e006      	b.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047de:	bf00      	nop
 80047e0:	40003800 	.word	0x40003800
 80047e4:	40003400 	.word	0x40003400
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004800:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f043 0204 	orr.w	r2, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fd6c 	bl	80042f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800481c:	e000      	b.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800481e:	bf00      	nop
}
 8004820:	bf00      	nop
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c99      	adds	r1, r3, #2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6251      	str	r1, [r2, #36]	; 0x24
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d113      	bne.n	8004896 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800487c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffc9 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c99      	adds	r1, r3, #2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6251      	str	r1, [r2, #36]	; 0x24
 80048b2:	8819      	ldrh	r1, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <I2SEx_TxISR_I2SExt+0x22>
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 80048c0:	e001      	b.n	80048c6 <I2SEx_TxISR_I2SExt+0x26>
 80048c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c6:	460a      	mov	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <I2SEx_TxISR_I2SExt+0x50>
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 80048ee:	e001      	b.n	80048f4 <I2SEx_TxISR_I2SExt+0x54>
 80048f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	490d      	ldr	r1, [pc, #52]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048fc:	428b      	cmp	r3, r1
 80048fe:	d101      	bne.n	8004904 <I2SEx_TxISR_I2SExt+0x64>
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 8004902:	e001      	b.n	8004908 <I2SEx_TxISR_I2SExt+0x68>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800490c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff81 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40003800 	.word	0x40003800
 8004934:	40003400 	.word	0x40003400

08004938 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68d8      	ldr	r0, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	1c99      	adds	r1, r3, #2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004950:	b282      	uxth	r2, r0
 8004952:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d113      	bne.n	8004994 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800497a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff ff4a 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <I2SEx_RxISR_I2SExt+0x16>
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049b0:	e001      	b.n	80049b6 <I2SEx_RxISR_I2SExt+0x1a>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b6:	68d8      	ldr	r0, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	1c99      	adds	r1, r3, #2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049c2:	b282      	uxth	r2, r0
 80049c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d121      	bne.n	8004a22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <I2SEx_RxISR_I2SExt+0x50>
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049ea:	e001      	b.n	80049f0 <I2SEx_RxISR_I2SExt+0x54>
 80049ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049f8:	428b      	cmp	r3, r1
 80049fa:	d101      	bne.n	8004a00 <I2SEx_RxISR_I2SExt+0x64>
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049fe:	e001      	b.n	8004a04 <I2SEx_RxISR_I2SExt+0x68>
 8004a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff03 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40003400 	.word	0x40003400

08004a34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e101      	b.n	8004c4a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f006 fae3 	bl	800b02c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2203      	movs	r2, #3
 8004a6a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a74:	d102      	bne.n	8004a7c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f002 feda 	bl	800783a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7c1a      	ldrb	r2, [r3, #16]
 8004a8e:	f88d 2000 	strb.w	r2, [sp]
 8004a92:	3304      	adds	r3, #4
 8004a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a96:	f002 fdb9 	bl	800760c <USB_CoreInit>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0ce      	b.n	8004c4a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 fed2 	bl	800785c <USB_SetCurrentMode>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0bf      	b.n	8004c4a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
 8004ace:	e04a      	b.n	8004b66 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ad0:	7bfa      	ldrb	r2, [r7, #15]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	3315      	adds	r3, #21
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3314      	adds	r3, #20
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	b298      	uxth	r0, r3
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	332e      	adds	r3, #46	; 0x2e
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3318      	adds	r3, #24
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	331c      	adds	r3, #28
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3320      	adds	r3, #32
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	3301      	adds	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	791b      	ldrb	r3, [r3, #4]
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3af      	bcc.n	8004ad0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e044      	b.n	8004c00 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	791b      	ldrb	r3, [r3, #4]
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d3b5      	bcc.n	8004b76 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7c1a      	ldrb	r2, [r3, #16]
 8004c12:	f88d 2000 	strb.w	r2, [sp]
 8004c16:	3304      	adds	r3, #4
 8004c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1a:	f002 fe6b 	bl	80078f4 <USB_DevInit>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e00c      	b.n	8004c4a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f003 feaf 	bl	80089a6 <USB_DevDisconnect>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_PCD_Start+0x1c>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e022      	b.n	8004cb4 <HAL_PCD_Start+0x62>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 fdbc 	bl	8007818 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f003 fe5d 	bl	8008964 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b08d      	sub	sp, #52	; 0x34
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f003 ff1b 	bl	8008b0e <USB_GetMode>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 848c 	bne.w	80055f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f003 fe7f 	bl	80089e8 <USB_ReadInterrupts>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8482 	beq.w	80055f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 fe6c 	bl	80089e8 <USB_ReadInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d107      	bne.n	8004d2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f002 0202 	and.w	r2, r2, #2
 8004d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 fe5a 	bl	80089e8 <USB_ReadInterrupts>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d161      	bne.n	8004e02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0210 	bic.w	r2, r2, #16
 8004d4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	0c5b      	lsrs	r3, r3, #17
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d124      	bne.n	8004dc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d035      	beq.n	8004df2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a38      	ldr	r0, [r7, #32]
 8004d9a:	f003 fc91 	bl	80086c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004daa:	441a      	add	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dbc:	441a      	add	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	615a      	str	r2, [r3, #20]
 8004dc2:	e016      	b.n	8004df2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	0c5b      	lsrs	r3, r3, #17
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d110      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6a38      	ldr	r0, [r7, #32]
 8004ddc:	f003 fc70 	bl	80086c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dec:	441a      	add	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0210 	orr.w	r2, r2, #16
 8004e00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f003 fdee 	bl	80089e8 <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e16:	f040 80a7 	bne.w	8004f68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fdf3 	bl	8008a0e <USB_ReadDevAllOutEpInterrupt>
 8004e28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e2a:	e099      	b.n	8004f60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 808e 	beq.w	8004f54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f003 fe17 	bl	8008a76 <USB_ReadDevOutEPInterrupt>
 8004e48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2301      	movs	r3, #1
 8004e64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fea1 	bl	8005bb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	2308      	movs	r3, #8
 8004e88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 ff77 	bl	8005d80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2310      	movs	r3, #16
 8004eac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d030      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d109      	bne.n	8004ed8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	78db      	ldrb	r3, [r3, #3]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d108      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f006 f998 	bl	800b238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	2302      	movs	r3, #2
 8004f18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	461a      	mov	r2, r3
 8004f32:	2320      	movs	r3, #32
 8004f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f47f af62 	bne.w	8004e2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f003 fd3b 	bl	80089e8 <USB_ReadInterrupts>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f7c:	f040 80db 	bne.w	8005136 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 fd5c 	bl	8008a42 <USB_ReadDevAllInEpInterrupt>
 8004f8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004f90:	e0cd      	b.n	800512e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80c2 	beq.w	8005122 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f003 fd82 	bl	8008ab2 <USB_ReadDevInEPInterrupt>
 8004fae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d057      	beq.n	800506a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fda:	4013      	ands	r3, r2
 8004fdc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	461a      	mov	r2, r3
 8004fec:	2301      	movs	r3, #1
 8004fee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	799b      	ldrb	r3, [r3, #6]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d132      	bne.n	800505e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3320      	adds	r3, #32
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4403      	add	r3, r0
 8005018:	331c      	adds	r3, #28
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4419      	add	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4403      	add	r3, r0
 800502c:	3320      	adds	r3, #32
 800502e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d113      	bne.n	800505e <HAL_PCD_IRQHandler+0x3a2>
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3324      	adds	r3, #36	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d108      	bne.n	800505e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005056:	461a      	mov	r2, r3
 8005058:	2101      	movs	r1, #1
 800505a:	f003 fd89 	bl	8008b70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f006 f862 	bl	800b12e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	2308      	movs	r3, #8
 8005084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	461a      	mov	r2, r3
 800509e:	2310      	movs	r3, #16
 80050a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2340      	movs	r3, #64	; 0x40
 80050bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d023      	beq.n	8005110 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ca:	6a38      	ldr	r0, [r7, #32]
 80050cc:	f002 fd76 	bl	8007bbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	3310      	adds	r3, #16
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	78db      	ldrb	r3, [r3, #3]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d108      	bne.n	80050fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f006 f8af 	bl	800b25c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	2302      	movs	r3, #2
 800510e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800511a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fcbb 	bl	8005a98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	3301      	adds	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f af2e 	bne.w	8004f92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f003 fc54 	bl	80089e8 <USB_ReadInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514a:	d122      	bne.n	8005192 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005166:	2b01      	cmp	r3, #1
 8005168:	d108      	bne.n	800517c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005172:	2100      	movs	r1, #0
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fea1 	bl	8005ebc <HAL_PCDEx_LPM_Callback>
 800517a:	e002      	b.n	8005182 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f006 f84d 	bl	800b21c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f003 fc26 	bl	80089e8 <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a6:	d112      	bne.n	80051ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d102      	bne.n	80051be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f006 f809 	bl	800b1d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051cc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f003 fc08 	bl	80089e8 <USB_ReadInterrupts>
 80051d8:	4603      	mov	r3, r0
 80051da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	f040 80b7 	bne.w	8005354 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2110      	movs	r1, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fcdb 	bl	8007bbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005206:	2300      	movs	r3, #0
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	e046      	b.n	800529a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	461a      	mov	r2, r3
 800521a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800521e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800523e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005252:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005292:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	3301      	adds	r3, #1
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	791b      	ldrb	r3, [r3, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d3b2      	bcc.n	800520c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7bdb      	ldrb	r3, [r3, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d2:	f043 030b 	orr.w	r3, r3, #11
 80052d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e8:	f043 030b 	orr.w	r3, r3, #11
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	e015      	b.n	800531c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005302:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005306:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005316:	f043 030b 	orr.w	r3, r3, #11
 800531a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800532e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800533e:	461a      	mov	r2, r3
 8005340:	f003 fc16 	bl	8008b70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f003 fb45 	bl	80089e8 <USB_ReadInterrupts>
 800535e:	4603      	mov	r3, r0
 8005360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005368:	d123      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f003 fbdb 	bl	8008b2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f002 fc98 	bl	8007cae <USB_GetDevSpeed>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681c      	ldr	r4, [r3, #0]
 800538a:	f001 fa07 	bl	800679c <HAL_RCC_GetHCLKFreq>
 800538e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005394:	461a      	mov	r2, r3
 8005396:	4620      	mov	r0, r4
 8005398:	f002 f99c 	bl	80076d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f005 feee 	bl	800b17e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f003 fb16 	bl	80089e8 <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d10a      	bne.n	80053dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f005 fecb 	bl	800b162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f002 0208 	and.w	r2, r2, #8
 80053da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f003 fb01 	bl	80089e8 <USB_ReadInterrupts>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d123      	bne.n	8005438 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053fc:	2301      	movs	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	e014      	b.n	800542c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb08 	bl	8005a36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	3301      	adds	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	791b      	ldrb	r3, [r3, #4]
 8005430:	461a      	mov	r2, r3
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	4293      	cmp	r3, r2
 8005436:	d3e4      	bcc.n	8005402 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f003 fad3 	bl	80089e8 <USB_ReadInterrupts>
 8005442:	4603      	mov	r3, r0
 8005444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544c:	d13c      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800544e:	2301      	movs	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e02b      	b.n	80054ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	4613      	mov	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3318      	adds	r3, #24
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d115      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800547a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	da12      	bge.n	80054a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3317      	adds	r3, #23
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800549c:	b2db      	uxtb	r3, r3
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fac8 	bl	8005a36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	3301      	adds	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	791b      	ldrb	r3, [r3, #4]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d3cd      	bcc.n	8005454 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80054c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 fa8b 	bl	80089e8 <USB_ReadInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054dc:	d156      	bne.n	800558c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054de:	2301      	movs	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	e045      	b.n	8005570 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d12e      	bne.n	800556a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800550c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	da2b      	bge.n	800556a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800551e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005522:	429a      	cmp	r2, r3
 8005524:	d121      	bne.n	800556a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005566:	6053      	str	r3, [r2, #4]
            break;
 8005568:	e008      	b.n	800557c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	3301      	adds	r3, #1
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	791b      	ldrb	r3, [r3, #4]
 8005574:	461a      	mov	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	4293      	cmp	r3, r2
 800557a:	d3b3      	bcc.n	80054e4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800558a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f003 fa29 	bl	80089e8 <USB_ReadInterrupts>
 8005596:	4603      	mov	r3, r0
 8005598:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d10a      	bne.n	80055b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f005 fe6c 	bl	800b280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f003 fa13 	bl	80089e8 <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d115      	bne.n	80055f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f005 fe5c 	bl	800b29c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
 80055f4:	e000      	b.n	80055f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80055f6:	bf00      	nop
    }
  }
}
 80055f8:	3734      	adds	r7, #52	; 0x34
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}

080055fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_PCD_SetAddress+0x1a>
 8005614:	2302      	movs	r3, #2
 8005616:	e012      	b.n	800563e <HAL_PCD_SetAddress+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f003 f972 	bl	8008918 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	4608      	mov	r0, r1
 8005650:	4611      	mov	r1, r2
 8005652:	461a      	mov	r2, r3
 8005654:	4603      	mov	r3, r0
 8005656:	70fb      	strb	r3, [r7, #3]
 8005658:	460b      	mov	r3, r1
 800565a:	803b      	strh	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005668:	2b00      	cmp	r3, #0
 800566a:	da0f      	bge.n	800568c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	3310      	adds	r3, #16
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	705a      	strb	r2, [r3, #1]
 800568a:	e00f      	b.n	80056ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	3304      	adds	r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056b8:	883a      	ldrh	r2, [r7, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	78ba      	ldrb	r2, [r7, #2]
 80056c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056d6:	78bb      	ldrb	r3, [r7, #2]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d102      	bne.n	80056e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_PCD_EP_Open+0xaa>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e00e      	b.n	800570e <HAL_PCD_EP_Open+0xc8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	4618      	mov	r0, r3
 8005700:	f002 fafa 	bl	8007cf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800570c:	7afb      	ldrb	r3, [r7, #11]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da0f      	bge.n	800574a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	3310      	adds	r3, #16
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	3304      	adds	r3, #4
 8005740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	705a      	strb	r2, [r3, #1]
 8005748:	e00f      	b.n	800576a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	4413      	add	r3, r2
 8005760:	3304      	adds	r3, #4
 8005762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_PCD_EP_Close+0x6e>
 8005780:	2302      	movs	r3, #2
 8005782:	e00e      	b.n	80057a2 <HAL_PCD_EP_Close+0x8c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	4618      	mov	r0, r3
 8005794:	f002 fb38 	bl	8007e08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	460b      	mov	r3, r1
 80057b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ba:	7afb      	ldrb	r3, [r7, #11]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2200      	movs	r2, #0
 80057ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ec:	7afb      	ldrb	r3, [r7, #11]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	799b      	ldrb	r3, [r3, #6]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	799b      	ldrb	r3, [r3, #6]
 800580e:	461a      	mov	r2, r3
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	f002 fbd5 	bl	8007fc0 <USB_EPStartXfer>

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	460b      	mov	r3, r1
 800585e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005860:	7afb      	ldrb	r3, [r7, #11]
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	3310      	adds	r3, #16
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	3304      	adds	r3, #4
 8005876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2201      	movs	r2, #1
 800588e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	b2da      	uxtb	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	799b      	ldrb	r3, [r3, #6]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d102      	bne.n	80058aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	799b      	ldrb	r3, [r3, #6]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	f002 fb83 	bl	8007fc0 <USB_EPStartXfer>

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	7912      	ldrb	r2, [r2, #4]
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e04f      	b.n	8005982 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da0f      	bge.n	800590a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	3310      	adds	r3, #16
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	3304      	adds	r3, #4
 8005900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	705a      	strb	r2, [r3, #1]
 8005908:	e00d      	b.n	8005926 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_PCD_EP_SetStall+0x82>
 8005942:	2302      	movs	r3, #2
 8005944:	e01d      	b.n	8005982 <HAL_PCD_EP_SetStall+0xbe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	4618      	mov	r0, r3
 8005956:	f002 ff0b 	bl	8008770 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7999      	ldrb	r1, [r3, #6]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005972:	461a      	mov	r2, r3
 8005974:	f003 f8fc 	bl	8008b70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	7912      	ldrb	r2, [r2, #4]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e042      	b.n	8005a2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da0f      	bge.n	80059d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	f003 020f 	and.w	r2, r3, #15
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	3310      	adds	r3, #16
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	3304      	adds	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	705a      	strb	r2, [r3, #1]
 80059ce:	e00f      	b.n	80059f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4413      	add	r3, r2
 80059e6:	3304      	adds	r3, #4
 80059e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_PCD_EP_ClrStall+0x86>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e00e      	b.n	8005a2e <HAL_PCD_EP_ClrStall+0xa4>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68f9      	ldr	r1, [r7, #12]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 ff14 	bl	800884c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da0c      	bge.n	8005a64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	3310      	adds	r3, #16
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3304      	adds	r3, #4
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e00c      	b.n	8005a7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 fd33 	bl	80084f0 <USB_EPStopXfer>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d901      	bls.n	8005ad0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e06b      	b.n	8005ba8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d902      	bls.n	8005aec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3303      	adds	r3, #3
 8005af0:	089b      	lsrs	r3, r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005af4:	e02a      	b.n	8005b4c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d902      	bls.n	8005b12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3303      	adds	r3, #3
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68d9      	ldr	r1, [r3, #12]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f002 fd88 	bl	8008644 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	441a      	add	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d809      	bhi.n	8005b76 <PCD_WriteEmptyTxFifo+0xde>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d203      	bcs.n	8005b76 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1bf      	bne.n	8005af6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d811      	bhi.n	8005ba6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	6939      	ldr	r1, [r7, #16]
 8005b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	333c      	adds	r3, #60	; 0x3c
 8005bc8:	3304      	adds	r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	799b      	ldrb	r3, [r3, #6]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d17b      	bne.n	8005cde <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4a61      	ldr	r2, [pc, #388]	; (8005d78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f240 80b9 	bls.w	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b3 	beq.w	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	461a      	mov	r2, r3
 8005c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c18:	6093      	str	r3, [r2, #8]
 8005c1a:	e0a7      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	2320      	movs	r3, #32
 8005c36:	6093      	str	r3, [r2, #8]
 8005c38:	e098      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8093 	bne.w	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4a4b      	ldr	r2, [pc, #300]	; (8005d78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d90f      	bls.n	8005c6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	6093      	str	r3, [r2, #8]
 8005c6c:	e07e      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4413      	add	r3, r2
 8005c80:	3304      	adds	r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	0159      	lsls	r1, r3, #5
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	440b      	add	r3, r1
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d114      	bne.n	8005cd0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2101      	movs	r1, #1
 8005cbc:	f002 ff58 	bl	8008b70 <USB_EP0_OutStart>
 8005cc0:	e006      	b.n	8005cd0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f005 fa0e 	bl	800b0f8 <HAL_PCD_DataOutStageCallback>
 8005cdc:	e046      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4a26      	ldr	r2, [pc, #152]	; (8005d7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d124      	bne.n	8005d30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d02:	6093      	str	r3, [r2, #8]
 8005d04:	e032      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2320      	movs	r3, #32
 8005d20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f005 f9e5 	bl	800b0f8 <HAL_PCD_DataOutStageCallback>
 8005d2e:	e01d      	b.n	8005d6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d114      	bne.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f002 ff08 	bl	8008b70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f005 f9c6 	bl	800b0f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	4f54300a 	.word	0x4f54300a
 8005d7c:	4f54310a 	.word	0x4f54310a

08005d80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	333c      	adds	r3, #60	; 0x3c
 8005d98:	3304      	adds	r3, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d90e      	bls.n	8005dd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f005 f97d 	bl	800b0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d90c      	bls.n	8005dfc <PCD_EP_OutSetupPacket_int+0x7c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	799b      	ldrb	r3, [r3, #6]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d108      	bne.n	8005dfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005df4:	461a      	mov	r2, r3
 8005df6:	2101      	movs	r1, #1
 8005df8:	f002 feba 	bl	8008b70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	4f54300a 	.word	0x4f54300a

08005e0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e2a:	883b      	ldrh	r3, [r7, #0]
 8005e2c:	0419      	lsls	r1, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
 8005e38:	e028      	b.n	8005e8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e00d      	b.n	8005e6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	3340      	adds	r3, #64	; 0x40
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	3301      	adds	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3ec      	bcc.n	8005e4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e74:	883b      	ldrh	r3, [r7, #0]
 8005e76:	0418      	lsls	r0, r3, #16
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	4302      	orrs	r2, r0
 8005e84:	3340      	adds	r3, #64	; 0x40
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	887a      	ldrh	r2, [r7, #2]
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e267      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d075      	beq.n	8005fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d00c      	beq.n	8005f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efe:	4b85      	ldr	r3, [pc, #532]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d112      	bne.n	8005f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f0a:	4b82      	ldr	r3, [pc, #520]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f18:	4b7e      	ldr	r3, [pc, #504]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05b      	beq.n	8005fdc <HAL_RCC_OscConfig+0x108>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d157      	bne.n	8005fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e242      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d106      	bne.n	8005f48 <HAL_RCC_OscConfig+0x74>
 8005f3a:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a75      	ldr	r2, [pc, #468]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e01d      	b.n	8005f84 <HAL_RCC_OscConfig+0xb0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f50:	d10c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x98>
 8005f52:	4b70      	ldr	r3, [pc, #448]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6f      	ldr	r2, [pc, #444]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4b6d      	ldr	r3, [pc, #436]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6c      	ldr	r2, [pc, #432]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e00b      	b.n	8005f84 <HAL_RCC_OscConfig+0xb0>
 8005f6c:	4b69      	ldr	r3, [pc, #420]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a68      	ldr	r2, [pc, #416]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	4b66      	ldr	r3, [pc, #408]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a65      	ldr	r2, [pc, #404]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d013      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fc f94a 	bl	8002224 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f94:	f7fc f946 	bl	8002224 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e207      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa6:	4b5b      	ldr	r3, [pc, #364]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0xc0>
 8005fb2:	e014      	b.n	8005fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb4:	f7fc f936 	bl	8002224 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fbc:	f7fc f932 	bl	8002224 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b64      	cmp	r3, #100	; 0x64
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e1f3      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fce:	4b51      	ldr	r3, [pc, #324]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0xe8>
 8005fda:	e000      	b.n	8005fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d063      	beq.n	80060b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fea:	4b4a      	ldr	r3, [pc, #296]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff6:	4b47      	ldr	r3, [pc, #284]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d11c      	bne.n	800603c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006002:	4b44      	ldr	r3, [pc, #272]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_RCC_OscConfig+0x152>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d001      	beq.n	8006026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e1c7      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006026:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4937      	ldr	r1, [pc, #220]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603a:	e03a      	b.n	80060b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006044:	4b34      	ldr	r3, [pc, #208]	; (8006118 <HAL_RCC_OscConfig+0x244>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fc f8eb 	bl	8002224 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006052:	f7fc f8e7 	bl	8002224 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e1a8      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006064:	4b2b      	ldr	r3, [pc, #172]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006070:	4b28      	ldr	r3, [pc, #160]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4925      	ldr	r1, [pc, #148]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 8006080:	4313      	orrs	r3, r2
 8006082:	600b      	str	r3, [r1, #0]
 8006084:	e015      	b.n	80060b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <HAL_RCC_OscConfig+0x244>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fc f8ca 	bl	8002224 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006094:	f7fc f8c6 	bl	8002224 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e187      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d036      	beq.n	800612c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <HAL_RCC_OscConfig+0x248>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fc f8aa 	bl	8002224 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060d4:	f7fc f8a6 	bl	8002224 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e167      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_OscConfig+0x240>)
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCC_OscConfig+0x200>
 80060f2:	e01b      	b.n	800612c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_RCC_OscConfig+0x248>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fa:	f7fc f893 	bl	8002224 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006100:	e00e      	b.n	8006120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006102:	f7fc f88f 	bl	8002224 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d907      	bls.n	8006120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e150      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
 8006114:	40023800 	.word	0x40023800
 8006118:	42470000 	.word	0x42470000
 800611c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ea      	bne.n	8006102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8097 	beq.w	8006268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800613e:	4b81      	ldr	r3, [pc, #516]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10f      	bne.n	800616a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	4b7d      	ldr	r3, [pc, #500]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	4a7c      	ldr	r2, [pc, #496]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006158:	6413      	str	r3, [r2, #64]	; 0x40
 800615a:	4b7a      	ldr	r3, [pc, #488]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616a:	4b77      	ldr	r3, [pc, #476]	; (8006348 <HAL_RCC_OscConfig+0x474>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d118      	bne.n	80061a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006176:	4b74      	ldr	r3, [pc, #464]	; (8006348 <HAL_RCC_OscConfig+0x474>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a73      	ldr	r2, [pc, #460]	; (8006348 <HAL_RCC_OscConfig+0x474>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006182:	f7fc f84f 	bl	8002224 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618a:	f7fc f84b 	bl	8002224 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e10c      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	4b6a      	ldr	r3, [pc, #424]	; (8006348 <HAL_RCC_OscConfig+0x474>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d106      	bne.n	80061be <HAL_RCC_OscConfig+0x2ea>
 80061b0:	4b64      	ldr	r3, [pc, #400]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	4a63      	ldr	r2, [pc, #396]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	6713      	str	r3, [r2, #112]	; 0x70
 80061bc:	e01c      	b.n	80061f8 <HAL_RCC_OscConfig+0x324>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x30c>
 80061c6:	4b5f      	ldr	r3, [pc, #380]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ca:	4a5e      	ldr	r2, [pc, #376]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061cc:	f043 0304 	orr.w	r3, r3, #4
 80061d0:	6713      	str	r3, [r2, #112]	; 0x70
 80061d2:	4b5c      	ldr	r3, [pc, #368]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	4a5b      	ldr	r2, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6713      	str	r3, [r2, #112]	; 0x70
 80061de:	e00b      	b.n	80061f8 <HAL_RCC_OscConfig+0x324>
 80061e0:	4b58      	ldr	r3, [pc, #352]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	4a57      	ldr	r2, [pc, #348]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	; 0x70
 80061ec:	4b55      	ldr	r3, [pc, #340]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	4a54      	ldr	r2, [pc, #336]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80061f2:	f023 0304 	bic.w	r3, r3, #4
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006200:	f7fc f810 	bl	8002224 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006206:	e00a      	b.n	800621e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006208:	f7fc f80c 	bl	8002224 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	; 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e0cb      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	4b49      	ldr	r3, [pc, #292]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0ee      	beq.n	8006208 <HAL_RCC_OscConfig+0x334>
 800622a:	e014      	b.n	8006256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622c:	f7fb fffa 	bl	8002224 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fb fff6 	bl	8002224 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e0b5      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624a:	4b3e      	ldr	r3, [pc, #248]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1ee      	bne.n	8006234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625c:	4b39      	ldr	r3, [pc, #228]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	4a38      	ldr	r2, [pc, #224]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a1 	beq.w	80063b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006272:	4b34      	ldr	r3, [pc, #208]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	2b08      	cmp	r3, #8
 800627c:	d05c      	beq.n	8006338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d141      	bne.n	800630a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <HAL_RCC_OscConfig+0x478>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fb ffca 	bl	8002224 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006294:	f7fb ffc6 	bl	8002224 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e087      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	3b01      	subs	r3, #1
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	061b      	lsls	r3, r3, #24
 80062d6:	491b      	ldr	r1, [pc, #108]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_RCC_OscConfig+0x478>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e2:	f7fb ff9f 	bl	8002224 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ea:	f7fb ff9b 	bl	8002224 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e05c      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x416>
 8006308:	e054      	b.n	80063b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <HAL_RCC_OscConfig+0x478>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006310:	f7fb ff88 	bl	8002224 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006318:	f7fb ff84 	bl	8002224 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e045      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_OscConfig+0x470>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x444>
 8006336:	e03d      	b.n	80063b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d107      	bne.n	8006350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e038      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
 8006344:	40023800 	.word	0x40023800
 8006348:	40007000 	.word	0x40007000
 800634c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006350:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <HAL_RCC_OscConfig+0x4ec>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d028      	beq.n	80063b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d121      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	429a      	cmp	r2, r3
 8006378:	d11a      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006380:	4013      	ands	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006388:	4293      	cmp	r3, r2
 800638a:	d111      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	3b01      	subs	r3, #1
 800639a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40023800 	.word	0x40023800

080063c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0cc      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063d8:	4b68      	ldr	r3, [pc, #416]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d90c      	bls.n	8006400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b65      	ldr	r3, [pc, #404]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b63      	ldr	r3, [pc, #396]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0b8      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d020      	beq.n	800644e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006418:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	4a58      	ldr	r2, [pc, #352]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006430:	4b53      	ldr	r3, [pc, #332]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a52      	ldr	r2, [pc, #328]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800643a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800643c:	4b50      	ldr	r3, [pc, #320]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	494d      	ldr	r1, [pc, #308]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d044      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006462:	4b47      	ldr	r3, [pc, #284]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d119      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e07f      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d003      	beq.n	8006482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800647e:	2b03      	cmp	r3, #3
 8006480:	d107      	bne.n	8006492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006482:	4b3f      	ldr	r3, [pc, #252]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e06f      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006492:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e067      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 0203 	bic.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4934      	ldr	r1, [pc, #208]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064b4:	f7fb feb6 	bl	8002224 <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ba:	e00a      	b.n	80064d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064bc:	f7fb feb2 	bl	8002224 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e04f      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d2:	4b2b      	ldr	r3, [pc, #172]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 020c 	and.w	r2, r3, #12
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d1eb      	bne.n	80064bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d20c      	bcs.n	800650c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b20      	ldr	r3, [pc, #128]	; (800657c <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e032      	b.n	8006572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4916      	ldr	r1, [pc, #88]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	4313      	orrs	r3, r2
 8006528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006536:	4b12      	ldr	r3, [pc, #72]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	490e      	ldr	r1, [pc, #56]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800654a:	f000 f821 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 800654e:	4602      	mov	r2, r0
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	091b      	lsrs	r3, r3, #4
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	490a      	ldr	r1, [pc, #40]	; (8006584 <HAL_RCC_ClockConfig+0x1c0>)
 800655c:	5ccb      	ldrb	r3, [r1, r3]
 800655e:	fa22 f303 	lsr.w	r3, r2, r3
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <HAL_RCC_ClockConfig+0x1c4>)
 8006564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006566:	4b09      	ldr	r3, [pc, #36]	; (800658c <HAL_RCC_ClockConfig+0x1c8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fb fe16 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40023c00 	.word	0x40023c00
 8006580:	40023800 	.word	0x40023800
 8006584:	0800f44c 	.word	0x0800f44c
 8006588:	20000000 	.word	0x20000000
 800658c:	20000004 	.word	0x20000004

08006590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006594:	b094      	sub	sp, #80	; 0x50
 8006596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	647b      	str	r3, [r7, #68]	; 0x44
 800659c:	2300      	movs	r3, #0
 800659e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a0:	2300      	movs	r3, #0
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065a8:	4b79      	ldr	r3, [pc, #484]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d00d      	beq.n	80065d0 <HAL_RCC_GetSysClockFreq+0x40>
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	f200 80e1 	bhi.w	800677c <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_RCC_GetSysClockFreq+0x34>
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d003      	beq.n	80065ca <HAL_RCC_GetSysClockFreq+0x3a>
 80065c2:	e0db      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065c4:	4b73      	ldr	r3, [pc, #460]	; (8006794 <HAL_RCC_GetSysClockFreq+0x204>)
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065c8:	e0db      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ca:	4b73      	ldr	r3, [pc, #460]	; (8006798 <HAL_RCC_GetSysClockFreq+0x208>)
 80065cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065ce:	e0d8      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065d0:	4b6f      	ldr	r3, [pc, #444]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065da:	4b6d      	ldr	r3, [pc, #436]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d063      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e6:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	2200      	movs	r2, #0
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
 80065fa:	2300      	movs	r3, #0
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006602:	4622      	mov	r2, r4
 8006604:	462b      	mov	r3, r5
 8006606:	f04f 0000 	mov.w	r0, #0
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	0159      	lsls	r1, r3, #5
 8006610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006614:	0150      	lsls	r0, r2, #5
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4621      	mov	r1, r4
 800661c:	1a51      	subs	r1, r2, r1
 800661e:	6139      	str	r1, [r7, #16]
 8006620:	4629      	mov	r1, r5
 8006622:	eb63 0301 	sbc.w	r3, r3, r1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006634:	4659      	mov	r1, fp
 8006636:	018b      	lsls	r3, r1, #6
 8006638:	4651      	mov	r1, sl
 800663a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800663e:	4651      	mov	r1, sl
 8006640:	018a      	lsls	r2, r1, #6
 8006642:	4651      	mov	r1, sl
 8006644:	ebb2 0801 	subs.w	r8, r2, r1
 8006648:	4659      	mov	r1, fp
 800664a:	eb63 0901 	sbc.w	r9, r3, r1
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006662:	4690      	mov	r8, r2
 8006664:	4699      	mov	r9, r3
 8006666:	4623      	mov	r3, r4
 8006668:	eb18 0303 	adds.w	r3, r8, r3
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	462b      	mov	r3, r5
 8006670:	eb49 0303 	adc.w	r3, r9, r3
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006682:	4629      	mov	r1, r5
 8006684:	024b      	lsls	r3, r1, #9
 8006686:	4621      	mov	r1, r4
 8006688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800668c:	4621      	mov	r1, r4
 800668e:	024a      	lsls	r2, r1, #9
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
 8006694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006696:	2200      	movs	r2, #0
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a0:	f7fa faa2 	bl	8000be8 <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4613      	mov	r3, r2
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ac:	e058      	b.n	8006760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ae:	4b38      	ldr	r3, [pc, #224]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	099b      	lsrs	r3, r3, #6
 80066b4:	2200      	movs	r2, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	4611      	mov	r1, r2
 80066ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066be:	623b      	str	r3, [r7, #32]
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
 80066c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	f04f 0000 	mov.w	r0, #0
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	0159      	lsls	r1, r3, #5
 80066d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066da:	0150      	lsls	r0, r2, #5
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4641      	mov	r1, r8
 80066e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80066e6:	4649      	mov	r1, r9
 80066e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006700:	ebb2 040a 	subs.w	r4, r2, sl
 8006704:	eb63 050b 	sbc.w	r5, r3, fp
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	00eb      	lsls	r3, r5, #3
 8006712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006716:	00e2      	lsls	r2, r4, #3
 8006718:	4614      	mov	r4, r2
 800671a:	461d      	mov	r5, r3
 800671c:	4643      	mov	r3, r8
 800671e:	18e3      	adds	r3, r4, r3
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	464b      	mov	r3, r9
 8006724:	eb45 0303 	adc.w	r3, r5, r3
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006736:	4629      	mov	r1, r5
 8006738:	028b      	lsls	r3, r1, #10
 800673a:	4621      	mov	r1, r4
 800673c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006740:	4621      	mov	r1, r4
 8006742:	028a      	lsls	r2, r1, #10
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674a:	2200      	movs	r2, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	61fa      	str	r2, [r7, #28]
 8006750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006754:	f7fa fa48 	bl	8000be8 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4613      	mov	r3, r2
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_RCC_GetSysClockFreq+0x200>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	3301      	adds	r3, #1
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800677a:	e002      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetSysClockFreq+0x204>)
 800677e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006784:	4618      	mov	r0, r3
 8006786:	3750      	adds	r7, #80	; 0x50
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	00f42400 	.word	0x00f42400
 8006798:	007a1200 	.word	0x007a1200

0800679c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000000 	.word	0x20000000

080067b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067b8:	f7ff fff0 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0a9b      	lsrs	r3, r3, #10
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4903      	ldr	r1, [pc, #12]	; (80067d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40023800 	.word	0x40023800
 80067d8:	0800f45c 	.word	0x0800f45c

080067dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006800:	2b00      	cmp	r3, #0
 8006802:	d035      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006804:	4b62      	ldr	r3, [pc, #392]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800680a:	f7fb fd0b 	bl	8002224 <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006812:	f7fb fd07 	bl	8002224 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e0b0      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006824:	4b5b      	ldr	r3, [pc, #364]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	019a      	lsls	r2, r3, #6
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	071b      	lsls	r3, r3, #28
 800683c:	4955      	ldr	r1, [pc, #340]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006844:	4b52      	ldr	r3, [pc, #328]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800684a:	f7fb fceb 	bl	8002224 <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006852:	f7fb fce7 	bl	8002224 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e090      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006864:	4b4b      	ldr	r3, [pc, #300]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8083 	beq.w	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	4b44      	ldr	r3, [pc, #272]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	4a43      	ldr	r2, [pc, #268]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688c:	6413      	str	r3, [r2, #64]	; 0x40
 800688e:	4b41      	ldr	r3, [pc, #260]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800689a:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a3e      	ldr	r2, [pc, #248]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a6:	f7fb fcbd 	bl	8002224 <HAL_GetTick>
 80068aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068ac:	e008      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ae:	f7fb fcb9 	bl	8002224 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e062      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068c0:	4b35      	ldr	r3, [pc, #212]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068cc:	4b31      	ldr	r3, [pc, #196]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02f      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d028      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ea:	4b2a      	ldr	r3, [pc, #168]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068f4:	4b29      	ldr	r3, [pc, #164]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068fa:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006906:	4b23      	ldr	r3, [pc, #140]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b01      	cmp	r3, #1
 8006910:	d114      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006912:	f7fb fc87 	bl	8002224 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006918:	e00a      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fb fc83 	bl	8002224 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	; 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e02a      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006930:	4b18      	ldr	r3, [pc, #96]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0ee      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006948:	d10d      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800695a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695e:	490d      	ldr	r1, [pc, #52]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006960:	4313      	orrs	r3, r2
 8006962:	608b      	str	r3, [r1, #8]
 8006964:	e005      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006970:	6093      	str	r3, [r2, #8]
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697e:	4905      	ldr	r1, [pc, #20]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006980:	4313      	orrs	r3, r2
 8006982:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	42470068 	.word	0x42470068
 8006994:	40023800 	.word	0x40023800
 8006998:	40007000 	.word	0x40007000
 800699c:	42470e40 	.word	0x42470e40

080069a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d13f      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d4:	d12f      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80069d8:	617b      	str	r3, [r7, #20]
          break;
 80069da:	e02f      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069dc:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e8:	d108      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069ea:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f2:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e007      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a0c:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	0f1b      	lsrs	r3, r3, #28
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	617b      	str	r3, [r7, #20]
          break;
 8006a34:	e002      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
          break;
 8006a3a:	bf00      	nop
        }
      }
      break;
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006a3e:	bf00      	nop
    }
  }
  return frequency;
 8006a40:	697b      	ldr	r3, [r7, #20]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40023800 	.word	0x40023800
 8006a54:	00bb8000 	.word	0x00bb8000
 8006a58:	007a1200 	.word	0x007a1200
 8006a5c:	00f42400 	.word	0x00f42400

08006a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e07b      	b.n	8006b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a82:	d009      	beq.n	8006a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
 8006a8a:	e005      	b.n	8006a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fef4 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1c:	ea42 0103 	orr.w	r1, r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	f003 0104 	and.w	r1, r3, #4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f003 0210 	and.w	r2, r3, #16
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_SPI_Transmit+0x22>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e12d      	b.n	8006df0 <HAL_SPI_Transmit+0x27e>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b9c:	f7fb fb42 	bl	8002224 <HAL_GetTick>
 8006ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb6:	e116      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_SPI_Transmit+0x52>
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc8:	e10d      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	88fa      	ldrh	r2, [r7, #6]
 8006be8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c10:	d10f      	bne.n	8006c32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d007      	beq.n	8006c50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c58:	d14f      	bne.n	8006cfa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Transmit+0xf6>
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d142      	bne.n	8006cee <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c8c:	e02f      	b.n	8006cee <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d112      	bne.n	8006cc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cc0:	e015      	b.n	8006cee <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc2:	f7fb faaf 	bl	8002224 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d803      	bhi.n	8006cda <HAL_SPI_Transmit+0x168>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_Transmit+0x16e>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006cec:	e07b      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ca      	bne.n	8006c8e <HAL_SPI_Transmit+0x11c>
 8006cf8:	e050      	b.n	8006d9c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Transmit+0x196>
 8006d02:	8afb      	ldrh	r3, [r7, #22]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d144      	bne.n	8006d92 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d2e:	e030      	b.n	8006d92 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d113      	bne.n	8006d66 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d64:	e015      	b.n	8006d92 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d66:	f7fb fa5d 	bl	8002224 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d803      	bhi.n	8006d7e <HAL_SPI_Transmit+0x20c>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d102      	bne.n	8006d84 <HAL_SPI_Transmit+0x212>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006d90:	e029      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1c9      	bne.n	8006d30 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fbdf 	bl	8007564 <SPI_EndRxTxTransaction>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e003      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3720      	adds	r7, #32
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d002      	beq.n	8006e1e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e1c:	e0fb      	b.n	8007016 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e26:	d112      	bne.n	8006e4e <HAL_SPI_Receive+0x56>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10e      	bne.n	8006e4e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2204      	movs	r2, #4
 8006e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f8ef 	bl	8007028 <HAL_SPI_TransmitReceive>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	e0e8      	b.n	8007020 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_SPI_Receive+0x64>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e0e1      	b.n	8007020 <HAL_SPI_Receive+0x228>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e64:	f7fb f9de 	bl	8002224 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_SPI_Receive+0x7e>
 8006e70:	88fb      	ldrh	r3, [r7, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e7a:	e0cc      	b.n	8007016 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec2:	d10f      	bne.n	8006ee4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ee2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d007      	beq.n	8006f02 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d16a      	bne.n	8006fe0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f0a:	e032      	b.n	8006f72 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d115      	bne.n	8006f46 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f103 020c 	add.w	r2, r3, #12
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f44:	e015      	b.n	8006f72 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f46:	f7fb f96d 	bl	8002224 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d803      	bhi.n	8006f5e <HAL_SPI_Receive+0x166>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d102      	bne.n	8006f64 <HAL_SPI_Receive+0x16c>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006f70:	e051      	b.n	8007016 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1c7      	bne.n	8006f0c <HAL_SPI_Receive+0x114>
 8006f7c:	e035      	b.n	8006fea <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d113      	bne.n	8006fb4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	b292      	uxth	r2, r2
 8006f98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb2:	e015      	b.n	8006fe0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb4:	f7fb f936 	bl	8002224 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d803      	bhi.n	8006fcc <HAL_SPI_Receive+0x1d4>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Receive+0x1da>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006fde:	e01a      	b.n	8007016 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1c9      	bne.n	8006f7e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fa52 	bl	8007498 <SPI_EndRxTransaction>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
 800700c:	e003      	b.n	8007016 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007036:	2301      	movs	r3, #1
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_SPI_TransmitReceive+0x26>
 800704a:	2302      	movs	r3, #2
 800704c:	e198      	b.n	8007380 <HAL_SPI_TransmitReceive+0x358>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007056:	f7fb f8e5 	bl	8002224 <HAL_GetTick>
 800705a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007074:	2b01      	cmp	r3, #1
 8007076:	d00f      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x70>
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d107      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x68>
 8007088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800708c:	2b04      	cmp	r3, #4
 800708e:	d003      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007090:	2302      	movs	r3, #2
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007096:	e16d      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x82>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x82>
 80070a4:	887b      	ldrh	r3, [r7, #2]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070b0:	e160      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d003      	beq.n	80070c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2205      	movs	r2, #5
 80070c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	887a      	ldrh	r2, [r7, #2]
 80070d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	887a      	ldrh	r2, [r7, #2]
 80070ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d007      	beq.n	800711a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007122:	d17c      	bne.n	800721e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SPI_TransmitReceive+0x10a>
 800712c:	8b7b      	ldrh	r3, [r7, #26]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d16a      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007156:	e057      	b.n	8007208 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b02      	cmp	r3, #2
 8007164:	d11b      	bne.n	800719e <HAL_SPI_TransmitReceive+0x176>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <HAL_SPI_TransmitReceive+0x176>
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d113      	bne.n	800719e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d119      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x1b8>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d014      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	b292      	uxth	r2, r2
 80071c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	1c9a      	adds	r2, r3, #2
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071dc:	2301      	movs	r3, #1
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071e0:	f7fb f820 	bl	8002224 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d80b      	bhi.n	8007208 <HAL_SPI_TransmitReceive+0x1e0>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d007      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007206:	e0b5      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1a2      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x130>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d19d      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x130>
 800721c:	e080      	b.n	8007320 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_SPI_TransmitReceive+0x204>
 8007226:	8b7b      	ldrh	r3, [r7, #26]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d16f      	bne.n	800730c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007252:	e05b      	b.n	800730c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b02      	cmp	r3, #2
 8007260:	d11c      	bne.n	800729c <HAL_SPI_TransmitReceive+0x274>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d017      	beq.n	800729c <HAL_SPI_TransmitReceive+0x274>
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d114      	bne.n	800729c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d119      	bne.n	80072de <HAL_SPI_TransmitReceive+0x2b6>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d014      	beq.n	80072de <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072da:	2301      	movs	r3, #1
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072de:	f7fa ffa1 	bl	8002224 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d803      	bhi.n	80072f6 <HAL_SPI_TransmitReceive+0x2ce>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x2d4>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d107      	bne.n	800730c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800730a:	e033      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d19e      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x22c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d199      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f91d 	bl	8007564 <SPI_EndRxTxTransaction>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800733c:	e01a      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736a:	e003      	b.n	8007374 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800737c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007380:	4618      	mov	r0, r3
 8007382:	3730      	adds	r7, #48	; 0x30
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007398:	f7fa ff44 	bl	8002224 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073a8:	f7fa ff3c 	bl	8002224 <HAL_GetTick>
 80073ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ae:	4b39      	ldr	r3, [pc, #228]	; (8007494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	015b      	lsls	r3, r3, #5
 80073b4:	0d1b      	lsrs	r3, r3, #20
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073be:	e054      	b.n	800746a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d050      	beq.n	800746a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073c8:	f7fa ff2c 	bl	8002224 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d902      	bls.n	80073de <SPI_WaitFlagStateUntilTimeout+0x56>
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d13d      	bne.n	800745a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f6:	d111      	bne.n	800741c <SPI_WaitFlagStateUntilTimeout+0x94>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007400:	d004      	beq.n	800740c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740a:	d107      	bne.n	800741c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800741a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007424:	d10f      	bne.n	8007446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e017      	b.n	800748a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3b01      	subs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4013      	ands	r3, r2
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	429a      	cmp	r2, r3
 8007486:	d19b      	bne.n	80073c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000000 	.word	0x20000000

08007498 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ac:	d111      	bne.n	80074d2 <SPI_EndRxTransaction+0x3a>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b6:	d004      	beq.n	80074c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d107      	bne.n	80074d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074da:	d12a      	bne.n	8007532 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e4:	d012      	beq.n	800750c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff ff49 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02d      	beq.n	8007558 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	f043 0220 	orr.w	r2, r3, #32
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e026      	b.n	800755a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	2101      	movs	r1, #1
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff ff36 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01a      	beq.n	8007558 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f043 0220 	orr.w	r2, r3, #32
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e013      	b.n	800755a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	2101      	movs	r1, #1
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff ff23 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e000      	b.n	800755a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af02      	add	r7, sp, #8
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2201      	movs	r2, #1
 8007578:	2102      	movs	r1, #2
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff ff04 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	f043 0220 	orr.w	r2, r3, #32
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e032      	b.n	80075fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007596:	4b1b      	ldr	r3, [pc, #108]	; (8007604 <SPI_EndRxTxTransaction+0xa0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <SPI_EndRxTxTransaction+0xa4>)
 800759c:	fba2 2303 	umull	r2, r3, r2, r3
 80075a0:	0d5b      	lsrs	r3, r3, #21
 80075a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b4:	d112      	bne.n	80075dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fee1 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f043 0220 	orr.w	r2, r3, #32
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e00f      	b.n	80075fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d0f2      	beq.n	80075dc <SPI_EndRxTxTransaction+0x78>
 80075f6:	e000      	b.n	80075fa <SPI_EndRxTxTransaction+0x96>
        break;
 80075f8:	bf00      	nop
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000000 	.word	0x20000000
 8007608:	165e9f81 	.word	0x165e9f81

0800760c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800760c:	b084      	sub	sp, #16
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	f107 001c 	add.w	r0, r7, #28
 800761a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800761e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007622:	2b01      	cmp	r3, #1
 8007624:	d123      	bne.n	800766e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800764e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007652:	2b01      	cmp	r3, #1
 8007654:	d105      	bne.n	8007662 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fae2 	bl	8008c2c <USB_CoreReset>
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e01b      	b.n	80076a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fad6 	bl	8008c2c <USB_CoreReset>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007684:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	; 0x38
 8007698:	e005      	b.n	80076a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076a6:	7fbb      	ldrb	r3, [r7, #30]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d10b      	bne.n	80076c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f043 0206 	orr.w	r2, r3, #6
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f043 0220 	orr.w	r2, r3, #32
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076d0:	b004      	add	sp, #16
 80076d2:	4770      	bx	lr

080076d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d165      	bne.n	80077b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4a41      	ldr	r2, [pc, #260]	; (80077f0 <USB_SetTurnaroundTime+0x11c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d906      	bls.n	80076fe <USB_SetTurnaroundTime+0x2a>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4a40      	ldr	r2, [pc, #256]	; (80077f4 <USB_SetTurnaroundTime+0x120>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d202      	bcs.n	80076fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076f8:	230f      	movs	r3, #15
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e062      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4a3c      	ldr	r2, [pc, #240]	; (80077f4 <USB_SetTurnaroundTime+0x120>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d306      	bcc.n	8007714 <USB_SetTurnaroundTime+0x40>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4a3b      	ldr	r2, [pc, #236]	; (80077f8 <USB_SetTurnaroundTime+0x124>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d202      	bcs.n	8007714 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800770e:	230e      	movs	r3, #14
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e057      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4a38      	ldr	r2, [pc, #224]	; (80077f8 <USB_SetTurnaroundTime+0x124>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d306      	bcc.n	800772a <USB_SetTurnaroundTime+0x56>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4a37      	ldr	r2, [pc, #220]	; (80077fc <USB_SetTurnaroundTime+0x128>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d202      	bcs.n	800772a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007724:	230d      	movs	r3, #13
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e04c      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4a33      	ldr	r2, [pc, #204]	; (80077fc <USB_SetTurnaroundTime+0x128>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d306      	bcc.n	8007740 <USB_SetTurnaroundTime+0x6c>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4a32      	ldr	r2, [pc, #200]	; (8007800 <USB_SetTurnaroundTime+0x12c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d802      	bhi.n	8007740 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800773a:	230c      	movs	r3, #12
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	e041      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <USB_SetTurnaroundTime+0x12c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d906      	bls.n	8007756 <USB_SetTurnaroundTime+0x82>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a2e      	ldr	r2, [pc, #184]	; (8007804 <USB_SetTurnaroundTime+0x130>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d802      	bhi.n	8007756 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007750:	230b      	movs	r3, #11
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e036      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4a2a      	ldr	r2, [pc, #168]	; (8007804 <USB_SetTurnaroundTime+0x130>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d906      	bls.n	800776c <USB_SetTurnaroundTime+0x98>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4a29      	ldr	r2, [pc, #164]	; (8007808 <USB_SetTurnaroundTime+0x134>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d802      	bhi.n	800776c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007766:	230a      	movs	r3, #10
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e02b      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a26      	ldr	r2, [pc, #152]	; (8007808 <USB_SetTurnaroundTime+0x134>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d906      	bls.n	8007782 <USB_SetTurnaroundTime+0xae>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4a25      	ldr	r2, [pc, #148]	; (800780c <USB_SetTurnaroundTime+0x138>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d202      	bcs.n	8007782 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800777c:	2309      	movs	r3, #9
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e020      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <USB_SetTurnaroundTime+0x138>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d306      	bcc.n	8007798 <USB_SetTurnaroundTime+0xc4>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <USB_SetTurnaroundTime+0x13c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d802      	bhi.n	8007798 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007792:	2308      	movs	r3, #8
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e015      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <USB_SetTurnaroundTime+0x13c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d906      	bls.n	80077ae <USB_SetTurnaroundTime+0xda>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <USB_SetTurnaroundTime+0x140>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d202      	bcs.n	80077ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077a8:	2307      	movs	r3, #7
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e00a      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ae:	2306      	movs	r3, #6
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e007      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077ba:	2309      	movs	r3, #9
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e001      	b.n	80077c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077c0:	2309      	movs	r3, #9
 80077c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	00d8acbf 	.word	0x00d8acbf
 80077f4:	00e4e1c0 	.word	0x00e4e1c0
 80077f8:	00f42400 	.word	0x00f42400
 80077fc:	01067380 	.word	0x01067380
 8007800:	011a499f 	.word	0x011a499f
 8007804:	01312cff 	.word	0x01312cff
 8007808:	014ca43f 	.word	0x014ca43f
 800780c:	016e3600 	.word	0x016e3600
 8007810:	01a6ab1f 	.word	0x01a6ab1f
 8007814:	01e84800 	.word	0x01e84800

08007818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f043 0201 	orr.w	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f023 0201 	bic.w	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d115      	bne.n	80078aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800788a:	200a      	movs	r0, #10
 800788c:	f7fa fcd6 	bl	800223c <HAL_Delay>
      ms += 10U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	330a      	adds	r3, #10
 8007894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 f939 	bl	8008b0e <USB_GetMode>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d01e      	beq.n	80078e0 <USB_SetCurrentMode+0x84>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2bc7      	cmp	r3, #199	; 0xc7
 80078a6:	d9f0      	bls.n	800788a <USB_SetCurrentMode+0x2e>
 80078a8:	e01a      	b.n	80078e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d115      	bne.n	80078dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078bc:	200a      	movs	r0, #10
 80078be:	f7fa fcbd 	bl	800223c <HAL_Delay>
      ms += 10U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	330a      	adds	r3, #10
 80078c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f920 	bl	8008b0e <USB_GetMode>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <USB_SetCurrentMode+0x84>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2bc7      	cmp	r3, #199	; 0xc7
 80078d8:	d9f0      	bls.n	80078bc <USB_SetCurrentMode+0x60>
 80078da:	e001      	b.n	80078e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e005      	b.n	80078ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2bc8      	cmp	r3, #200	; 0xc8
 80078e4:	d101      	bne.n	80078ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078f4:	b084      	sub	sp, #16
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b086      	sub	sp, #24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e009      	b.n	8007928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3340      	adds	r3, #64	; 0x40
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	2200      	movs	r2, #0
 8007920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3301      	adds	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b0e      	cmp	r3, #14
 800792c:	d9f2      	bls.n	8007914 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800792e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11c      	bne.n	8007970 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007944:	f043 0302 	orr.w	r3, r3, #2
 8007948:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
 800796e:	e00b      	b.n	8007988 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007994:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007998:	2b01      	cmp	r3, #1
 800799a:	d10d      	bne.n	80079b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800799c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079a4:	2100      	movs	r1, #0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f968 	bl	8007c7c <USB_SetDevSpeed>
 80079ac:	e008      	b.n	80079c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079ae:	2101      	movs	r1, #1
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f963 	bl	8007c7c <USB_SetDevSpeed>
 80079b6:	e003      	b.n	80079c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079b8:	2103      	movs	r1, #3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f95e 	bl	8007c7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079c0:	2110      	movs	r1, #16
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f8fa 	bl	8007bbc <USB_FlushTxFifo>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f924 	bl	8007c20 <USB_FlushRxFifo>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e8:	461a      	mov	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	461a      	mov	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	e043      	b.n	8007a94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a22:	d118      	bne.n	8007a56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	461a      	mov	r2, r3
 8007a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e013      	b.n	8007a68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e008      	b.n	8007a68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	461a      	mov	r2, r3
 8007a88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a98:	461a      	mov	r2, r3
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d3b5      	bcc.n	8007a0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	e043      	b.n	8007b2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007abc:	d118      	bne.n	8007af0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e013      	b.n	8007b02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e008      	b.n	8007b02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	461a      	mov	r2, r3
 8007afe:	2300      	movs	r3, #0
 8007b00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b20:	461a      	mov	r2, r3
 8007b22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b32:	461a      	mov	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d3b5      	bcc.n	8007aa6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f043 0210 	orr.w	r2, r3, #16
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <USB_DevInit+0x2c4>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f043 0208 	orr.w	r2, r3, #8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d107      	bne.n	8007ba8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba0:	f043 0304 	orr.w	r3, r3, #4
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bb4:	b004      	add	sp, #16
 8007bb6:	4770      	bx	lr
 8007bb8:	803c3800 	.word	0x803c3800

08007bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bd6:	d901      	bls.n	8007bdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e01b      	b.n	8007c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	daf2      	bge.n	8007bca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	019b      	lsls	r3, r3, #6
 8007bec:	f043 0220 	orr.w	r2, r3, #32
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c00:	d901      	bls.n	8007c06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d0f0      	beq.n	8007bf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c38:	d901      	bls.n	8007c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e018      	b.n	8007c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	daf2      	bge.n	8007c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d0f0      	beq.n	8007c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b087      	sub	sp, #28
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0306 	and.w	r3, r3, #6
 8007cc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
 8007cd2:	e00a      	b.n	8007cea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d002      	beq.n	8007ce0 <USB_GetDevSpeed+0x32>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	d102      	bne.n	8007ce6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	75fb      	strb	r3, [r7, #23]
 8007ce4:	e001      	b.n	8007cea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ce6:	230f      	movs	r3, #15
 8007ce8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d13a      	bne.n	8007d8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	2101      	movs	r1, #1
 8007d26:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d155      	bne.n	8007df8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	059b      	lsls	r3, r3, #22
 8007d6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d70:	4313      	orrs	r3, r2
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e036      	b.n	8007df8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	69da      	ldr	r2, [r3, #28]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d11a      	bne.n	8007df8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	791b      	ldrb	r3, [r3, #4]
 8007ddc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dde:	430b      	orrs	r3, r1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d161      	bne.n	8007ee8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e3a:	d11f      	bne.n	8007e7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	43db      	mvns	r3, r3
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	0159      	lsls	r1, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	440b      	add	r3, r1
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4b35      	ldr	r3, [pc, #212]	; (8007fb8 <USB_DeactivateEndpoint+0x1b0>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	600b      	str	r3, [r1, #0]
 8007ee6:	e060      	b.n	8007faa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007efe:	d11f      	bne.n	8007f40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	2101      	movs	r1, #1
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f60:	4013      	ands	r3, r2
 8007f62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f84:	4013      	ands	r3, r2
 8007f86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	0159      	lsls	r1, r3, #5
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	440b      	add	r3, r1
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <USB_DeactivateEndpoint+0x1b4>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	ec337800 	.word	0xec337800
 8007fbc:	eff37800 	.word	0xeff37800

08007fc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	f040 817a 	bne.w	80082d6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d132      	bne.n	8008050 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800800c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800802c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008048:	0cdb      	lsrs	r3, r3, #19
 800804a:	04db      	lsls	r3, r3, #19
 800804c:	6113      	str	r3, [r2, #16]
 800804e:	e092      	b.n	8008176 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	0cdb      	lsrs	r3, r3, #19
 800806c:	04db      	lsls	r3, r3, #19
 800806e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800808e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008092:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d11a      	bne.n	80080d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d903      	bls.n	80080ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080cc:	6113      	str	r3, [r2, #16]
 80080ce:	e01b      	b.n	8008108 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6919      	ldr	r1, [r3, #16]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	440b      	add	r3, r1
 80080e8:	1e59      	subs	r1, r3, #1
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080f4:	4ba2      	ldr	r3, [pc, #648]	; (8008380 <USB_EPStartXfer+0x3c0>)
 80080f6:	400b      	ands	r3, r1
 80080f8:	69b9      	ldr	r1, [r7, #24]
 80080fa:	0148      	lsls	r0, r1, #5
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	4401      	add	r1, r0
 8008100:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008104:	4313      	orrs	r3, r2
 8008106:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	0148      	lsls	r0, r1, #5
 8008122:	69f9      	ldr	r1, [r7, #28]
 8008124:	4401      	add	r1, r0
 8008126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800812a:	4313      	orrs	r3, r2
 800812c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d11f      	bne.n	8008176 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008150:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008154:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008174:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d14b      	bne.n	8008214 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008190:	461a      	mov	r2, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	791b      	ldrb	r3, [r3, #4]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d128      	bne.n	80081f2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d110      	bne.n	80081d2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	e00f      	b.n	80081f2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	440a      	add	r2, r1
 8008208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e165      	b.n	80084e0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008232:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d015      	beq.n	8008268 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 814d 	beq.w	80084e0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	2101      	movs	r1, #1
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008262:	4313      	orrs	r3, r2
 8008264:	634b      	str	r3, [r1, #52]	; 0x34
 8008266:	e13b      	b.n	80084e0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d110      	bne.n	800829a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	e00f      	b.n	80082ba <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	68d9      	ldr	r1, [r3, #12]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	b298      	uxth	r0, r3
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4603      	mov	r3, r0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 f9b8 	bl	8008644 <USB_WritePacket>
 80082d4:	e104      	b.n	80084e0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f0:	0cdb      	lsrs	r3, r3, #19
 80082f2:	04db      	lsls	r3, r3, #19
 80082f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	440a      	add	r2, r1
 800830c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008318:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d131      	bne.n	8008384 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	0148      	lsls	r0, r1, #5
 8008352:	69f9      	ldr	r1, [r7, #28]
 8008354:	4401      	add	r1, r0
 8008356:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800835a:	4313      	orrs	r3, r2
 800835c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837c:	6113      	str	r3, [r2, #16]
 800837e:	e061      	b.n	8008444 <USB_EPStartXfer+0x484>
 8008380:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d123      	bne.n	80083d4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083a2:	69b9      	ldr	r1, [r7, #24]
 80083a4:	0148      	lsls	r0, r1, #5
 80083a6:	69f9      	ldr	r1, [r7, #28]
 80083a8:	4401      	add	r1, r0
 80083aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083ae:	4313      	orrs	r3, r2
 80083b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d0:	6113      	str	r3, [r2, #16]
 80083d2:	e037      	b.n	8008444 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	1e5a      	subs	r2, r3, #1
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	8afa      	ldrh	r2, [r7, #22]
 80083f0:	fb03 f202 	mul.w	r2, r3, r2
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	8afb      	ldrh	r3, [r7, #22]
 8008408:	04d9      	lsls	r1, r3, #19
 800840a:	4b38      	ldr	r3, [pc, #224]	; (80084ec <USB_EPStartXfer+0x52c>)
 800840c:	400b      	ands	r3, r1
 800840e:	69b9      	ldr	r1, [r7, #24]
 8008410:	0148      	lsls	r0, r1, #5
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	4401      	add	r1, r0
 8008416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800841a:	4313      	orrs	r3, r2
 800841c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008434:	69b9      	ldr	r1, [r7, #24]
 8008436:	0148      	lsls	r0, r1, #5
 8008438:	69f9      	ldr	r1, [r7, #28]
 800843a:	4401      	add	r1, r0
 800843c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008440:	4313      	orrs	r3, r2
 8008442:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10d      	bne.n	8008466 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68d9      	ldr	r1, [r3, #12]
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	460a      	mov	r2, r1
 8008464:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	791b      	ldrb	r3, [r3, #4]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d128      	bne.n	80084c0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d110      	bne.n	80084a0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	e00f      	b.n	80084c0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	0151      	lsls	r1, r2, #5
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	440a      	add	r2, r1
 80084b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	1ff80000 	.word	0x1ff80000

080084f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d14a      	bne.n	80085a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008526:	f040 8086 	bne.w	8008636 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800854c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	440a      	add	r2, r1
 8008568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008570:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f242 7210 	movw	r2, #10000	; 0x2710
 800857e:	4293      	cmp	r3, r2
 8008580:	d902      	bls.n	8008588 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
          break;
 8008586:	e056      	b.n	8008636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800859c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a0:	d0e7      	beq.n	8008572 <USB_EPStopXfer+0x82>
 80085a2:	e048      	b.n	8008636 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085bc:	d13b      	bne.n	8008636 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	7812      	ldrb	r2, [r2, #0]
 80085d2:	0151      	lsls	r1, r2, #5
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	440a      	add	r2, r1
 80085d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	7812      	ldrb	r2, [r2, #0]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008604:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3301      	adds	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008612:	4293      	cmp	r3, r2
 8008614:	d902      	bls.n	800861c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
          break;
 800861a:	e00c      	b.n	8008636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008634:	d0e7      	beq.n	8008606 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	; 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	460b      	mov	r3, r1
 8008654:	71fb      	strb	r3, [r7, #7]
 8008656:	4613      	mov	r3, r2
 8008658:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d123      	bne.n	80086b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800866a:	88bb      	ldrh	r3, [r7, #4]
 800866c:	3303      	adds	r3, #3
 800866e:	089b      	lsrs	r3, r3, #2
 8008670:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	e018      	b.n	80086aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	031a      	lsls	r2, r3, #12
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	4413      	add	r3, r2
 8008680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008684:	461a      	mov	r2, r3
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3301      	adds	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	3301      	adds	r3, #1
 8008696:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	3301      	adds	r3, #1
 800869c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	3301      	adds	r3, #1
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d3e2      	bcc.n	8008678 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3724      	adds	r7, #36	; 0x24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b08b      	sub	sp, #44	; 0x2c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	623b      	str	r3, [r7, #32]
 80086ea:	e014      	b.n	8008716 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	3301      	adds	r3, #1
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	3301      	adds	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	3301      	adds	r3, #1
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	3301      	adds	r3, #1
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	3301      	adds	r3, #1
 8008714:	623b      	str	r3, [r7, #32]
 8008716:	6a3a      	ldr	r2, [r7, #32]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	429a      	cmp	r2, r3
 800871c:	d3e6      	bcc.n	80086ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800871e:	8bfb      	ldrh	r3, [r7, #30]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01e      	beq.n	8008762 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872e:	461a      	mov	r2, r3
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	b2da      	uxtb	r2, r3
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	701a      	strb	r2, [r3, #0]
      i++;
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	3301      	adds	r3, #1
 800874e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	3301      	adds	r3, #1
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008756:	8bfb      	ldrh	r3, [r7, #30]
 8008758:	3b01      	subs	r3, #1
 800875a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800875c:	8bfb      	ldrh	r3, [r7, #30]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1ea      	bne.n	8008738 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008764:	4618      	mov	r0, r3
 8008766:	372c      	adds	r7, #44	; 0x2c
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d12c      	bne.n	80087e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	db12      	blt.n	80087c4 <USB_EPSetStall+0x54>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00f      	beq.n	80087c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	0151      	lsls	r1, r2, #5
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	440a      	add	r2, r1
 80087ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	e02b      	b.n	800883e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	db12      	blt.n	800881e <USB_EPSetStall+0xae>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00f      	beq.n	800881e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800881c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800883c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d128      	bne.n	80088ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008886:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	2b03      	cmp	r3, #3
 800888e:	d003      	beq.n	8008898 <USB_EPClearStall+0x4c>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	791b      	ldrb	r3, [r3, #4]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d138      	bne.n	800890a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	e027      	b.n	800890a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	791b      	ldrb	r3, [r3, #4]
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d003      	beq.n	80088ea <USB_EPClearStall+0x9e>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d10f      	bne.n	800890a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008908:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800893a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800894c:	68f9      	ldr	r1, [r7, #12]
 800894e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008952:	4313      	orrs	r3, r2
 8008954:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008992:	f023 0302 	bic.w	r3, r3, #2
 8008996:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	0c1b      	lsrs	r3, r3, #16
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	4013      	ands	r3, r2
 8008a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	b29b      	uxth	r3, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	01db      	lsls	r3, r3, #7
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4013      	ands	r3, r2
 8008afe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b00:	68bb      	ldr	r3, [r7, #8]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	f003 0301 	and.w	r3, r3, #1
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b48:	f023 0307 	bic.w	r3, r3, #7
 8008b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	333c      	adds	r3, #60	; 0x3c
 8008b86:	3304      	adds	r3, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <USB_EP0_OutStart+0xb8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d90a      	bls.n	8008baa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d101      	bne.n	8008baa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e037      	b.n	8008c1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd8:	f043 0318 	orr.w	r3, r3, #24
 8008bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008bf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d10f      	bne.n	8008c18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	4f54300a 	.word	0x4f54300a

08008c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c44:	d901      	bls.n	8008c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e01b      	b.n	8008c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	daf2      	bge.n	8008c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f043 0201 	orr.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3301      	adds	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c6e:	d901      	bls.n	8008c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e006      	b.n	8008c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d0f0      	beq.n	8008c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ca0:	f002 fc94 	bl	800b5cc <USBD_static_malloc>
 8008ca4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d109      	bne.n	8008cc0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32b0      	adds	r2, #176	; 0xb0
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e0d4      	b.n	8008e6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008cc0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f003 fa4f 	bl	800c16a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	32b0      	adds	r2, #176	; 0xb0
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	32b0      	adds	r2, #176	; 0xb0
 8008ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7c1b      	ldrb	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d138      	bne.n	8008d6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008cf8:	4b5e      	ldr	r3, [pc, #376]	; (8008e74 <USBD_CDC_Init+0x1e4>)
 8008cfa:	7819      	ldrb	r1, [r3, #0]
 8008cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d00:	2202      	movs	r2, #2
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f002 fb3f 	bl	800b386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d08:	4b5a      	ldr	r3, [pc, #360]	; (8008e74 <USBD_CDC_Init+0x1e4>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f003 020f 	and.w	r2, r3, #15
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	3324      	adds	r3, #36	; 0x24
 8008d1e:	2201      	movs	r2, #1
 8008d20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d22:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008d24:	7819      	ldrb	r1, [r3, #0]
 8008d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f002 fb2a 	bl	800b386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d32:	4b51      	ldr	r3, [pc, #324]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f003 020f 	and.w	r2, r3, #15
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d4e:	4b4b      	ldr	r3, [pc, #300]	; (8008e7c <USBD_CDC_Init+0x1ec>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	3326      	adds	r3, #38	; 0x26
 8008d64:	2210      	movs	r2, #16
 8008d66:	801a      	strh	r2, [r3, #0]
 8008d68:	e035      	b.n	8008dd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d6a:	4b42      	ldr	r3, [pc, #264]	; (8008e74 <USBD_CDC_Init+0x1e4>)
 8008d6c:	7819      	ldrb	r1, [r3, #0]
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	2202      	movs	r2, #2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f002 fb07 	bl	800b386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d78:	4b3e      	ldr	r3, [pc, #248]	; (8008e74 <USBD_CDC_Init+0x1e4>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3324      	adds	r3, #36	; 0x24
 8008d8e:	2201      	movs	r2, #1
 8008d90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d92:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008d94:	7819      	ldrb	r1, [r3, #0]
 8008d96:	2340      	movs	r3, #64	; 0x40
 8008d98:	2202      	movs	r2, #2
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f002 faf3 	bl	800b386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008da0:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	f003 020f 	and.w	r2, r3, #15
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008db8:	2201      	movs	r2, #1
 8008dba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008dbc:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <USBD_CDC_Init+0x1ec>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 020f 	and.w	r2, r3, #15
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3326      	adds	r3, #38	; 0x26
 8008dd2:	2210      	movs	r2, #16
 8008dd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008dd6:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <USBD_CDC_Init+0x1ec>)
 8008dd8:	7819      	ldrb	r1, [r3, #0]
 8008dda:	2308      	movs	r3, #8
 8008ddc:	2203      	movs	r2, #3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f002 fad1 	bl	800b386 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008de4:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <USBD_CDC_Init+0x1ec>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	f003 020f 	and.w	r2, r3, #15
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	440b      	add	r3, r1
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	33b0      	adds	r3, #176	; 0xb0
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008e34:	2302      	movs	r3, #2
 8008e36:	e018      	b.n	8008e6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	7c1b      	ldrb	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008e42:	7819      	ldrb	r1, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f002 fb88 	bl	800b564 <USBD_LL_PrepareReceive>
 8008e54:	e008      	b.n	8008e68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <USBD_CDC_Init+0x1e8>)
 8008e58:	7819      	ldrb	r1, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e60:	2340      	movs	r3, #64	; 0x40
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f002 fb7e 	bl	800b564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000093 	.word	0x20000093
 8008e78:	20000094 	.word	0x20000094
 8008e7c:	20000095 	.word	0x20000095

08008e80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e8c:	4b3a      	ldr	r3, [pc, #232]	; (8008f78 <USBD_CDC_DeInit+0xf8>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f002 fa9d 	bl	800b3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e98:	4b37      	ldr	r3, [pc, #220]	; (8008f78 <USBD_CDC_DeInit+0xf8>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	f003 020f 	and.w	r2, r3, #15
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3324      	adds	r3, #36	; 0x24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008eb2:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <USBD_CDC_DeInit+0xfc>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f002 fa8a 	bl	800b3d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <USBD_CDC_DeInit+0xfc>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	f003 020f 	and.w	r2, r3, #15
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008eda:	4b29      	ldr	r3, [pc, #164]	; (8008f80 <USBD_CDC_DeInit+0x100>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 fa76 	bl	800b3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008ee6:	4b26      	ldr	r3, [pc, #152]	; (8008f80 <USBD_CDC_DeInit+0x100>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f003 020f 	and.w	r2, r3, #15
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	3324      	adds	r3, #36	; 0x24
 8008efc:	2200      	movs	r2, #0
 8008efe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f00:	4b1f      	ldr	r3, [pc, #124]	; (8008f80 <USBD_CDC_DeInit+0x100>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	3326      	adds	r3, #38	; 0x26
 8008f16:	2200      	movs	r2, #0
 8008f18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	32b0      	adds	r2, #176	; 0xb0
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01f      	beq.n	8008f6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	33b0      	adds	r3, #176	; 0xb0
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32b0      	adds	r2, #176	; 0xb0
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f002 fb4a 	bl	800b5e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32b0      	adds	r2, #176	; 0xb0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000093 	.word	0x20000093
 8008f7c:	20000094 	.word	0x20000094
 8008f80:	20000095 	.word	0x20000095

08008f84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	32b0      	adds	r2, #176	; 0xb0
 8008f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e0bf      	b.n	8009134 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d050      	beq.n	8009062 <USBD_CDC_Setup+0xde>
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	f040 80af 	bne.w	8009124 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88db      	ldrh	r3, [r3, #6]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d03a      	beq.n	8009044 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	b25b      	sxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	da1b      	bge.n	8009010 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	33b0      	adds	r3, #176	; 0xb0
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008fee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	88d2      	ldrh	r2, [r2, #6]
 8008ff4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	88db      	ldrh	r3, [r3, #6]
 8008ffa:	2b07      	cmp	r3, #7
 8008ffc:	bf28      	it	cs
 8008ffe:	2307      	movcs	r3, #7
 8009000:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	89fa      	ldrh	r2, [r7, #14]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fd89 	bl	800ab20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800900e:	e090      	b.n	8009132 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785a      	ldrb	r2, [r3, #1]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	2b3f      	cmp	r3, #63	; 0x3f
 8009020:	d803      	bhi.n	800902a <USBD_CDC_Setup+0xa6>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	b2da      	uxtb	r2, r3
 8009028:	e000      	b.n	800902c <USBD_CDC_Setup+0xa8>
 800902a:	2240      	movs	r2, #64	; 0x40
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009032:	6939      	ldr	r1, [r7, #16]
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800903a:	461a      	mov	r2, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fd9b 	bl	800ab78 <USBD_CtlPrepareRx>
      break;
 8009042:	e076      	b.n	8009132 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	33b0      	adds	r3, #176	; 0xb0
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	7850      	ldrb	r0, [r2, #1]
 800905a:	2200      	movs	r2, #0
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	4798      	blx	r3
      break;
 8009060:	e067      	b.n	8009132 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	2b0b      	cmp	r3, #11
 8009068:	d851      	bhi.n	800910e <USBD_CDC_Setup+0x18a>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBD_CDC_Setup+0xec>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	080090a1 	.word	0x080090a1
 8009074:	0800911d 	.word	0x0800911d
 8009078:	0800910f 	.word	0x0800910f
 800907c:	0800910f 	.word	0x0800910f
 8009080:	0800910f 	.word	0x0800910f
 8009084:	0800910f 	.word	0x0800910f
 8009088:	0800910f 	.word	0x0800910f
 800908c:	0800910f 	.word	0x0800910f
 8009090:	0800910f 	.word	0x0800910f
 8009094:	0800910f 	.word	0x0800910f
 8009098:	080090cb 	.word	0x080090cb
 800909c:	080090f5 	.word	0x080090f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d107      	bne.n	80090bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090ac:	f107 030a 	add.w	r3, r7, #10
 80090b0:	2202      	movs	r2, #2
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 fd33 	bl	800ab20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090ba:	e032      	b.n	8009122 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fcbd 	bl	800aa3e <USBD_CtlError>
            ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	75fb      	strb	r3, [r7, #23]
          break;
 80090c8:	e02b      	b.n	8009122 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d107      	bne.n	80090e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80090d6:	f107 030d 	add.w	r3, r7, #13
 80090da:	2201      	movs	r2, #1
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 fd1e 	bl	800ab20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090e4:	e01d      	b.n	8009122 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fca8 	bl	800aa3e <USBD_CtlError>
            ret = USBD_FAIL;
 80090ee:	2303      	movs	r3, #3
 80090f0:	75fb      	strb	r3, [r7, #23]
          break;
 80090f2:	e016      	b.n	8009122 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d00f      	beq.n	8009120 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fc9b 	bl	800aa3e <USBD_CtlError>
            ret = USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800910c:	e008      	b.n	8009120 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fc94 	bl	800aa3e <USBD_CtlError>
          ret = USBD_FAIL;
 8009116:	2303      	movs	r3, #3
 8009118:	75fb      	strb	r3, [r7, #23]
          break;
 800911a:	e002      	b.n	8009122 <USBD_CDC_Setup+0x19e>
          break;
 800911c:	bf00      	nop
 800911e:	e008      	b.n	8009132 <USBD_CDC_Setup+0x1ae>
          break;
 8009120:	bf00      	nop
      }
      break;
 8009122:	e006      	b.n	8009132 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fc89 	bl	800aa3e <USBD_CtlError>
      ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	bf00      	nop
  }

  return (uint8_t)ret;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800914e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32b0      	adds	r2, #176	; 0xb0
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009162:	2303      	movs	r3, #3
 8009164:	e065      	b.n	8009232 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	32b0      	adds	r2, #176	; 0xb0
 8009170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009174:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3318      	adds	r3, #24
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d02f      	beq.n	80091f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	f003 020f 	and.w	r2, r3, #15
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	3318      	adds	r3, #24
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	f003 010f 	and.w	r1, r3, #15
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	460b      	mov	r3, r1
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	440b      	add	r3, r1
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4403      	add	r3, r0
 80091b8:	331c      	adds	r3, #28
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d112      	bne.n	80091f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	f003 020f 	and.w	r2, r3, #15
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	3318      	adds	r3, #24
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091e2:	78f9      	ldrb	r1, [r7, #3]
 80091e4:	2300      	movs	r3, #0
 80091e6:	2200      	movs	r2, #0
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 f99a 	bl	800b522 <USBD_LL_Transmit>
 80091ee:	e01f      	b.n	8009230 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	33b0      	adds	r3, #176	; 0xb0
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d010      	beq.n	8009230 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	33b0      	adds	r3, #176	; 0xb0
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	460b      	mov	r3, r1
 8009244:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	32b0      	adds	r2, #176	; 0xb0
 8009250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009254:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	32b0      	adds	r2, #176	; 0xb0
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e01a      	b.n	80092a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 f998 	bl	800b5a6 <USBD_LL_GetRxDataSize>
 8009276:	4602      	mov	r2, r0
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	33b0      	adds	r3, #176	; 0xb0
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800929c:	4611      	mov	r1, r2
 800929e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	32b0      	adds	r2, #176	; 0xb0
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e025      	b.n	8009318 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	33b0      	adds	r3, #176	; 0xb0
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01a      	beq.n	8009316 <USBD_CDC_EP0_RxReady+0x6c>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092e6:	2bff      	cmp	r3, #255	; 0xff
 80092e8:	d015      	beq.n	8009316 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	33b0      	adds	r3, #176	; 0xb0
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009302:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800930a:	b292      	uxth	r2, r2
 800930c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009328:	2182      	movs	r1, #130	; 0x82
 800932a:	4818      	ldr	r0, [pc, #96]	; (800938c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800932c:	f000 fd4f 	bl	8009dce <USBD_GetEpDesc>
 8009330:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009332:	2101      	movs	r1, #1
 8009334:	4815      	ldr	r0, [pc, #84]	; (800938c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009336:	f000 fd4a 	bl	8009dce <USBD_GetEpDesc>
 800933a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800933c:	2181      	movs	r1, #129	; 0x81
 800933e:	4813      	ldr	r0, [pc, #76]	; (800938c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009340:	f000 fd45 	bl	8009dce <USBD_GetEpDesc>
 8009344:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2210      	movs	r2, #16
 8009350:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2200      	movs	r2, #0
 800935c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009360:	711a      	strb	r2, [r3, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d006      	beq.n	800937a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009374:	711a      	strb	r2, [r3, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2243      	movs	r2, #67	; 0x43
 800937e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000050 	.word	0x20000050

08009390 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009398:	2182      	movs	r1, #130	; 0x82
 800939a:	4818      	ldr	r0, [pc, #96]	; (80093fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800939c:	f000 fd17 	bl	8009dce <USBD_GetEpDesc>
 80093a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093a2:	2101      	movs	r1, #1
 80093a4:	4815      	ldr	r0, [pc, #84]	; (80093fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093a6:	f000 fd12 	bl	8009dce <USBD_GetEpDesc>
 80093aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093ac:	2181      	movs	r1, #129	; 0x81
 80093ae:	4813      	ldr	r0, [pc, #76]	; (80093fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093b0:	f000 fd0d 	bl	8009dce <USBD_GetEpDesc>
 80093b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2210      	movs	r2, #16
 80093c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d006      	beq.n	80093d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2200      	movs	r2, #0
 80093cc:	711a      	strb	r2, [r3, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f042 0202 	orr.w	r2, r2, #2
 80093d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	711a      	strb	r2, [r3, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f042 0202 	orr.w	r2, r2, #2
 80093e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2243      	movs	r2, #67	; 0x43
 80093ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000050 	.word	0x20000050

08009400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009408:	2182      	movs	r1, #130	; 0x82
 800940a:	4818      	ldr	r0, [pc, #96]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800940c:	f000 fcdf 	bl	8009dce <USBD_GetEpDesc>
 8009410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009412:	2101      	movs	r1, #1
 8009414:	4815      	ldr	r0, [pc, #84]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009416:	f000 fcda 	bl	8009dce <USBD_GetEpDesc>
 800941a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800941c:	2181      	movs	r1, #129	; 0x81
 800941e:	4813      	ldr	r0, [pc, #76]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009420:	f000 fcd5 	bl	8009dce <USBD_GetEpDesc>
 8009424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2210      	movs	r2, #16
 8009430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2200      	movs	r2, #0
 800943c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009440:	711a      	strb	r2, [r3, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d006      	beq.n	800945a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009454:	711a      	strb	r2, [r3, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2243      	movs	r2, #67	; 0x43
 800945e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000050 	.word	0x20000050

08009470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220a      	movs	r2, #10
 800947c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	2000000c 	.word	0x2000000c

08009490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e009      	b.n	80094b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	33b0      	adds	r3, #176	; 0xb0
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	32b0      	adds	r2, #176	; 0xb0
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e008      	b.n	80094fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	32b0      	adds	r2, #176	; 0xb0
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	e004      	b.n	8009536 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	32b0      	adds	r2, #176	; 0xb0
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800955c:	2301      	movs	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	e025      	b.n	80095b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009570:	2b00      	cmp	r3, #0
 8009572:	d11f      	bne.n	80095b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2201      	movs	r2, #1
 8009578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <USBD_CDC_TransmitPacket+0x7c>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 020f 	and.w	r2, r3, #15
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4403      	add	r3, r0
 8009596:	3318      	adds	r3, #24
 8009598:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <USBD_CDC_TransmitPacket+0x7c>)
 800959c:	7819      	ldrb	r1, [r3, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 ffb9 	bl	800b522 <USBD_LL_Transmit>

    ret = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000093 	.word	0x20000093

080095c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	32b0      	adds	r2, #176	; 0xb0
 80095d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32b0      	adds	r2, #176	; 0xb0
 80095e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e018      	b.n	8009624 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7c1b      	ldrb	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095fa:	4b0c      	ldr	r3, [pc, #48]	; (800962c <USBD_CDC_ReceivePacket+0x68>)
 80095fc:	7819      	ldrb	r1, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 ffab 	bl	800b564 <USBD_LL_PrepareReceive>
 800960e:	e008      	b.n	8009622 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <USBD_CDC_ReceivePacket+0x68>)
 8009612:	7819      	ldrb	r1, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800961a:	2340      	movs	r3, #64	; 0x40
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 ffa1 	bl	800b564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000094 	.word	0x20000094

08009630 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009644:	2303      	movs	r3, #3
 8009646:	e01f      	b.n	8009688 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	79fa      	ldrb	r2, [r7, #7]
 800967a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 fe1b 	bl	800b2b8 <USBD_LL_Init>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e025      	b.n	80096f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	32ae      	adds	r2, #174	; 0xae
 80096ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00f      	beq.n	80096e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	32ae      	adds	r2, #174	; 0xae
 80096ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	f107 020e 	add.w	r2, r7, #14
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	4602      	mov	r2, r0
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 fe23 	bl	800b350 <USBD_LL_Start>
 800970a:	4603      	mov	r3, r0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	4611      	mov	r1, r2
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	4611      	mov	r1, r2
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 f90e 	bl	800a9ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097bc:	461a      	mov	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d01a      	beq.n	8009808 <USBD_LL_SetupStage+0x72>
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d822      	bhi.n	800981c <USBD_LL_SetupStage+0x86>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <USBD_LL_SetupStage+0x4a>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d00a      	beq.n	80097f4 <USBD_LL_SetupStage+0x5e>
 80097de:	e01d      	b.n	800981c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fb65 	bl	8009eb8 <USBD_StdDevReq>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
      break;
 80097f2:	e020      	b.n	8009836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fbcd 	bl	8009f9c <USBD_StdItfReq>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
      break;
 8009806:	e016      	b.n	8009836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc2f 	bl	800a074 <USBD_StdEPReq>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
      break;
 800981a:	e00c      	b.n	8009836 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009826:	b2db      	uxtb	r3, r3
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 fdf0 	bl	800b410 <USBD_LL_StallEP>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	bf00      	nop
  }

  return ret;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	460b      	mov	r3, r1
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d16e      	bne.n	8009936 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800985e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009866:	2b03      	cmp	r3, #3
 8009868:	f040 8098 	bne.w	800999c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d913      	bls.n	80098a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	1ad2      	subs	r2, r2, r3
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	4293      	cmp	r3, r2
 8009890:	bf28      	it	cs
 8009892:	4613      	movcs	r3, r2
 8009894:	461a      	mov	r2, r3
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f001 f98a 	bl	800abb2 <USBD_CtlContinueRx>
 800989e:	e07d      	b.n	800999c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d014      	beq.n	80098d8 <USBD_LL_DataOutStage+0x98>
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d81d      	bhi.n	80098ee <USBD_LL_DataOutStage+0xae>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <USBD_LL_DataOutStage+0x7c>
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d003      	beq.n	80098c2 <USBD_LL_DataOutStage+0x82>
 80098ba:	e018      	b.n	80098ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	75bb      	strb	r3, [r7, #22]
            break;
 80098c0:	e018      	b.n	80098f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fa64 	bl	8009d9a <USBD_CoreFindIF>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75bb      	strb	r3, [r7, #22]
            break;
 80098d6:	e00d      	b.n	80098f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	4619      	mov	r1, r3
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fa66 	bl	8009db4 <USBD_CoreFindEP>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75bb      	strb	r3, [r7, #22]
            break;
 80098ec:	e002      	b.n	80098f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75bb      	strb	r3, [r7, #22]
            break;
 80098f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80098f4:	7dbb      	ldrb	r3, [r7, #22]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d119      	bne.n	800992e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b03      	cmp	r3, #3
 8009904:	d113      	bne.n	800992e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009906:	7dba      	ldrb	r2, [r7, #22]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	32ae      	adds	r2, #174	; 0xae
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009916:	7dba      	ldrb	r2, [r7, #22]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800991e:	7dba      	ldrb	r2, [r7, #22]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	32ae      	adds	r2, #174	; 0xae
 8009924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f001 f950 	bl	800abd4 <USBD_CtlSendStatus>
 8009934:	e032      	b.n	800999c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993c:	b2db      	uxtb	r3, r3
 800993e:	4619      	mov	r1, r3
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fa37 	bl	8009db4 <USBD_CoreFindEP>
 8009946:	4603      	mov	r3, r0
 8009948:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	2bff      	cmp	r3, #255	; 0xff
 800994e:	d025      	beq.n	800999c <USBD_LL_DataOutStage+0x15c>
 8009950:	7dbb      	ldrb	r3, [r7, #22]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d122      	bne.n	800999c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b03      	cmp	r3, #3
 8009960:	d117      	bne.n	8009992 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009962:	7dba      	ldrb	r2, [r7, #22]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	32ae      	adds	r2, #174	; 0xae
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00f      	beq.n	8009992 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009972:	7dba      	ldrb	r2, [r7, #22]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800997a:	7dba      	ldrb	r2, [r7, #22]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	32ae      	adds	r2, #174	; 0xae
 8009980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	7afa      	ldrb	r2, [r7, #11]
 8009988:	4611      	mov	r1, r2
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	4798      	blx	r3
 800998e:	4603      	mov	r3, r0
 8009990:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	e000      	b.n	800999e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	460b      	mov	r3, r1
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d16f      	bne.n	8009a9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3314      	adds	r3, #20
 80099be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d15a      	bne.n	8009a80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d914      	bls.n	8009a00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f001 f8b2 	bl	800ab56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f2:	2300      	movs	r3, #0
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f001 fdb3 	bl	800b564 <USBD_LL_PrepareReceive>
 80099fe:	e03f      	b.n	8009a80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d11c      	bne.n	8009a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d316      	bcc.n	8009a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d20f      	bcs.n	8009a46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a26:	2200      	movs	r2, #0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f001 f893 	bl	800ab56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f001 fd90 	bl	800b564 <USBD_LL_PrepareReceive>
 8009a44:	e01c      	b.n	8009a80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d10f      	bne.n	8009a72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d009      	beq.n	8009a72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a72:	2180      	movs	r1, #128	; 0x80
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f001 fccb 	bl	800b410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f001 f8bd 	bl	800abfa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d03a      	beq.n	8009b00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fe42 	bl	8009714 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a98:	e032      	b.n	8009b00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f985 	bl	8009db4 <USBD_CoreFindEP>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	2bff      	cmp	r3, #255	; 0xff
 8009ab2:	d025      	beq.n	8009b00 <USBD_LL_DataInStage+0x15a>
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d122      	bne.n	8009b00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d11c      	bne.n	8009b00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009ac6:	7dfa      	ldrb	r2, [r7, #23]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	32ae      	adds	r2, #174	; 0xae
 8009acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d014      	beq.n	8009b00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009ad6:	7dfa      	ldrb	r2, [r7, #23]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ade:	7dfa      	ldrb	r2, [r7, #23]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	32ae      	adds	r2, #174	; 0xae
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	7afa      	ldrb	r2, [r7, #11]
 8009aec:	4611      	mov	r1, r2
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	4798      	blx	r3
 8009af2:	4603      	mov	r3, r0
 8009af4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009af6:	7dbb      	ldrb	r3, [r7, #22]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009afc:	7dbb      	ldrb	r3, [r7, #22]
 8009afe:	e000      	b.n	8009b02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d014      	beq.n	8009b70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00e      	beq.n	8009b70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6852      	ldr	r2, [r2, #4]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	4611      	mov	r1, r2
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	2200      	movs	r2, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fc05 	bl	800b386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2240      	movs	r2, #64	; 0x40
 8009b88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fbf7 	bl	800b386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2240      	movs	r2, #64	; 0x40
 8009ba2:	621a      	str	r2, [r3, #32]

  return ret;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d006      	beq.n	8009bf0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d106      	bne.n	8009c28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d110      	bne.n	8009c6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00b      	beq.n	8009c6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	32ae      	adds	r2, #174	; 0xae
 8009c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e01c      	b.n	8009cd2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d115      	bne.n	8009cd0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	32ae      	adds	r2, #174	; 0xae
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	32ae      	adds	r2, #174	; 0xae
 8009cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	32ae      	adds	r2, #174	; 0xae
 8009cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e01c      	b.n	8009d36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d115      	bne.n	8009d34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32ae      	adds	r2, #174	; 0xae
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	32ae      	adds	r2, #174	; 0xae
 8009d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00e      	beq.n	8009d90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6852      	ldr	r2, [r2, #4]
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	4611      	mov	r1, r2
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009da6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d920      	bls.n	8009e38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009dfe:	e013      	b.n	8009e28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e00:	f107 030a 	add.w	r3, r7, #10
 8009e04:	4619      	mov	r1, r3
 8009e06:	6978      	ldr	r0, [r7, #20]
 8009e08:	f000 f81b 	bl	8009e42 <USBD_GetNextDesc>
 8009e0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d108      	bne.n	8009e28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	789b      	ldrb	r3, [r3, #2]
 8009e1e:	78fa      	ldrb	r2, [r7, #3]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d008      	beq.n	8009e36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	885b      	ldrh	r3, [r3, #2]
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	897b      	ldrh	r3, [r7, #10]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d8e5      	bhi.n	8009e00 <USBD_GetEpDesc+0x32>
 8009e34:	e000      	b.n	8009e38 <USBD_GetEpDesc+0x6a>
          break;
 8009e36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e38:	693b      	ldr	r3, [r7, #16]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	881a      	ldrh	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	3301      	adds	r3, #1
 8009e92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e9a:	8a3b      	ldrh	r3, [r7, #16]
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	b21a      	sxth	r2, r3
 8009ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	b21b      	sxth	r3, r3
 8009ea8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009eaa:	89fb      	ldrh	r3, [r7, #14]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d005      	beq.n	8009ede <USBD_StdDevReq+0x26>
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d857      	bhi.n	8009f86 <USBD_StdDevReq+0xce>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00f      	beq.n	8009efa <USBD_StdDevReq+0x42>
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d153      	bne.n	8009f86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	32ae      	adds	r2, #174	; 0xae
 8009ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef8:	e04a      	b.n	8009f90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b09      	cmp	r3, #9
 8009f00:	d83b      	bhi.n	8009f7a <USBD_StdDevReq+0xc2>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_StdDevReq+0x50>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f5d 	.word	0x08009f5d
 8009f0c:	08009f71 	.word	0x08009f71
 8009f10:	08009f7b 	.word	0x08009f7b
 8009f14:	08009f67 	.word	0x08009f67
 8009f18:	08009f7b 	.word	0x08009f7b
 8009f1c:	08009f3b 	.word	0x08009f3b
 8009f20:	08009f31 	.word	0x08009f31
 8009f24:	08009f7b 	.word	0x08009f7b
 8009f28:	08009f53 	.word	0x08009f53
 8009f2c:	08009f45 	.word	0x08009f45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa3c 	bl	800a3b0 <USBD_GetDescriptor>
          break;
 8009f38:	e024      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fba1 	bl	800a684 <USBD_SetAddress>
          break;
 8009f42:	e01f      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fbe0 	bl	800a70c <USBD_SetConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
          break;
 8009f50:	e018      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fc83 	bl	800a860 <USBD_GetConfig>
          break;
 8009f5a:	e013      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fcb4 	bl	800a8cc <USBD_GetStatus>
          break;
 8009f64:	e00e      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fce3 	bl	800a934 <USBD_SetFeature>
          break;
 8009f6e:	e009      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fd07 	bl	800a986 <USBD_ClrFeature>
          break;
 8009f78:	e004      	b.n	8009f84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fd5e 	bl	800aa3e <USBD_CtlError>
          break;
 8009f82:	bf00      	nop
      }
      break;
 8009f84:	e004      	b.n	8009f90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fd58 	bl	800aa3e <USBD_CtlError>
      break;
 8009f8e:	bf00      	nop
  }

  return ret;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop

08009f9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fb2:	2b40      	cmp	r3, #64	; 0x40
 8009fb4:	d005      	beq.n	8009fc2 <USBD_StdItfReq+0x26>
 8009fb6:	2b40      	cmp	r3, #64	; 0x40
 8009fb8:	d852      	bhi.n	800a060 <USBD_StdItfReq+0xc4>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <USBD_StdItfReq+0x26>
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	d14e      	bne.n	800a060 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d840      	bhi.n	800a052 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	889b      	ldrh	r3, [r3, #4]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d836      	bhi.n	800a048 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	889b      	ldrh	r3, [r3, #4]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7ff fed9 	bl	8009d9a <USBD_CoreFindIF>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2bff      	cmp	r3, #255	; 0xff
 8009ff0:	d01d      	beq.n	800a02e <USBD_StdItfReq+0x92>
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11a      	bne.n	800a02e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ff8:	7bba      	ldrb	r2, [r7, #14]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	32ae      	adds	r2, #174	; 0xae
 8009ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00f      	beq.n	800a028 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a008:	7bba      	ldrb	r2, [r7, #14]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a010:	7bba      	ldrb	r2, [r7, #14]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	32ae      	adds	r2, #174	; 0xae
 800a016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	4798      	blx	r3
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a026:	e004      	b.n	800a032 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a02c:	e001      	b.n	800a032 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a02e:	2303      	movs	r3, #3
 800a030:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	88db      	ldrh	r3, [r3, #6]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d110      	bne.n	800a05c <USBD_StdItfReq+0xc0>
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10d      	bne.n	800a05c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fdc7 	bl	800abd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a046:	e009      	b.n	800a05c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fcf7 	bl	800aa3e <USBD_CtlError>
          break;
 800a050:	e004      	b.n	800a05c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fcf2 	bl	800aa3e <USBD_CtlError>
          break;
 800a05a:	e000      	b.n	800a05e <USBD_StdItfReq+0xc2>
          break;
 800a05c:	bf00      	nop
      }
      break;
 800a05e:	e004      	b.n	800a06a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fceb 	bl	800aa3e <USBD_CtlError>
      break;
 800a068:	bf00      	nop
  }

  return ret;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	889b      	ldrh	r3, [r3, #4]
 800a086:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	d007      	beq.n	800a0a4 <USBD_StdEPReq+0x30>
 800a094:	2b40      	cmp	r3, #64	; 0x40
 800a096:	f200 817f 	bhi.w	800a398 <USBD_StdEPReq+0x324>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d02a      	beq.n	800a0f4 <USBD_StdEPReq+0x80>
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	f040 817a 	bne.w	800a398 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fe83 	bl	8009db4 <USBD_CoreFindEP>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0b2:	7b7b      	ldrb	r3, [r7, #13]
 800a0b4:	2bff      	cmp	r3, #255	; 0xff
 800a0b6:	f000 8174 	beq.w	800a3a2 <USBD_StdEPReq+0x32e>
 800a0ba:	7b7b      	ldrb	r3, [r7, #13]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 8170 	bne.w	800a3a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0c2:	7b7a      	ldrb	r2, [r7, #13]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a0ca:	7b7a      	ldrb	r2, [r7, #13]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	32ae      	adds	r2, #174	; 0xae
 800a0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 8163 	beq.w	800a3a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a0dc:	7b7a      	ldrb	r2, [r7, #13]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	32ae      	adds	r2, #174	; 0xae
 800a0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0f2:	e156      	b.n	800a3a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	785b      	ldrb	r3, [r3, #1]
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d008      	beq.n	800a10e <USBD_StdEPReq+0x9a>
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	f300 8145 	bgt.w	800a38c <USBD_StdEPReq+0x318>
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 809b 	beq.w	800a23e <USBD_StdEPReq+0x1ca>
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d03c      	beq.n	800a186 <USBD_StdEPReq+0x112>
 800a10c:	e13e      	b.n	800a38c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d002      	beq.n	800a120 <USBD_StdEPReq+0xac>
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d016      	beq.n	800a14c <USBD_StdEPReq+0xd8>
 800a11e:	e02c      	b.n	800a17a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <USBD_StdEPReq+0xce>
 800a126:	7bbb      	ldrb	r3, [r7, #14]
 800a128:	2b80      	cmp	r3, #128	; 0x80
 800a12a:	d00a      	beq.n	800a142 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f96d 	bl	800b410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a136:	2180      	movs	r1, #128	; 0x80
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 f969 	bl	800b410 <USBD_LL_StallEP>
 800a13e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a140:	e020      	b.n	800a184 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fc7a 	bl	800aa3e <USBD_CtlError>
              break;
 800a14a:	e01b      	b.n	800a184 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	885b      	ldrh	r3, [r3, #2]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10e      	bne.n	800a172 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00b      	beq.n	800a172 <USBD_StdEPReq+0xfe>
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b80      	cmp	r3, #128	; 0x80
 800a15e:	d008      	beq.n	800a172 <USBD_StdEPReq+0xfe>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	88db      	ldrh	r3, [r3, #6]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d104      	bne.n	800a172 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f94f 	bl	800b410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fd2e 	bl	800abd4 <USBD_CtlSendStatus>

              break;
 800a178:	e004      	b.n	800a184 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fc5e 	bl	800aa3e <USBD_CtlError>
              break;
 800a182:	bf00      	nop
          }
          break;
 800a184:	e107      	b.n	800a396 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d002      	beq.n	800a198 <USBD_StdEPReq+0x124>
 800a192:	2b03      	cmp	r3, #3
 800a194:	d016      	beq.n	800a1c4 <USBD_StdEPReq+0x150>
 800a196:	e04b      	b.n	800a230 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00d      	beq.n	800a1ba <USBD_StdEPReq+0x146>
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b80      	cmp	r3, #128	; 0x80
 800a1a2:	d00a      	beq.n	800a1ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 f931 	bl	800b410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f001 f92d 	bl	800b410 <USBD_LL_StallEP>
 800a1b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1b8:	e040      	b.n	800a23c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fc3e 	bl	800aa3e <USBD_CtlError>
              break;
 800a1c2:	e03b      	b.n	800a23c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	885b      	ldrh	r3, [r3, #2]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d136      	bne.n	800a23a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d004      	beq.n	800a1e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 f937 	bl	800b44e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fcf7 	bl	800abd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff fde2 	bl	8009db4 <USBD_CoreFindEP>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1f4:	7b7b      	ldrb	r3, [r7, #13]
 800a1f6:	2bff      	cmp	r3, #255	; 0xff
 800a1f8:	d01f      	beq.n	800a23a <USBD_StdEPReq+0x1c6>
 800a1fa:	7b7b      	ldrb	r3, [r7, #13]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d11c      	bne.n	800a23a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a200:	7b7a      	ldrb	r2, [r7, #13]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a208:	7b7a      	ldrb	r2, [r7, #13]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	32ae      	adds	r2, #174	; 0xae
 800a20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d010      	beq.n	800a23a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a218:	7b7a      	ldrb	r2, [r7, #13]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	32ae      	adds	r2, #174	; 0xae
 800a21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	4798      	blx	r3
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a22e:	e004      	b.n	800a23a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc03 	bl	800aa3e <USBD_CtlError>
              break;
 800a238:	e000      	b.n	800a23c <USBD_StdEPReq+0x1c8>
              break;
 800a23a:	bf00      	nop
          }
          break;
 800a23c:	e0ab      	b.n	800a396 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d002      	beq.n	800a250 <USBD_StdEPReq+0x1dc>
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d032      	beq.n	800a2b4 <USBD_StdEPReq+0x240>
 800a24e:	e097      	b.n	800a380 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d007      	beq.n	800a266 <USBD_StdEPReq+0x1f2>
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	2b80      	cmp	r3, #128	; 0x80
 800a25a:	d004      	beq.n	800a266 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fbed 	bl	800aa3e <USBD_CtlError>
                break;
 800a264:	e091      	b.n	800a38a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da0b      	bge.n	800a286 <USBD_StdEPReq+0x212>
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	3310      	adds	r3, #16
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	4413      	add	r3, r2
 800a282:	3304      	adds	r3, #4
 800a284:	e00b      	b.n	800a29e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4413      	add	r3, r2
 800a29c:	3304      	adds	r3, #4
 800a29e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fc37 	bl	800ab20 <USBD_CtlSendData>
              break;
 800a2b2:	e06a      	b.n	800a38a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da11      	bge.n	800a2e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	f003 020f 	and.w	r2, r3, #15
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3324      	adds	r3, #36	; 0x24
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d117      	bne.n	800a306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fbb0 	bl	800aa3e <USBD_CtlError>
                  break;
 800a2de:	e054      	b.n	800a38a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	f003 020f 	and.w	r2, r3, #15
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d104      	bne.n	800a306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fb9d 	bl	800aa3e <USBD_CtlError>
                  break;
 800a304:	e041      	b.n	800a38a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da0b      	bge.n	800a326 <USBD_StdEPReq+0x2b2>
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	3310      	adds	r3, #16
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	4413      	add	r3, r2
 800a322:	3304      	adds	r3, #4
 800a324:	e00b      	b.n	800a33e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a326:	7bbb      	ldrb	r3, [r7, #14]
 800a328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	4413      	add	r3, r2
 800a33c:	3304      	adds	r3, #4
 800a33e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <USBD_StdEPReq+0x2d8>
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b80      	cmp	r3, #128	; 0x80
 800a34a:	d103      	bne.n	800a354 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	e00e      	b.n	800a372 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 f897 	bl	800b48c <USBD_LL_IsStallEP>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2201      	movs	r2, #1
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	e002      	b.n	800a372 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2202      	movs	r2, #2
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fbd1 	bl	800ab20 <USBD_CtlSendData>
              break;
 800a37e:	e004      	b.n	800a38a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fb5b 	bl	800aa3e <USBD_CtlError>
              break;
 800a388:	bf00      	nop
          }
          break;
 800a38a:	e004      	b.n	800a396 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fb55 	bl	800aa3e <USBD_CtlError>
          break;
 800a394:	bf00      	nop
      }
      break;
 800a396:	e005      	b.n	800a3a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fb4f 	bl	800aa3e <USBD_CtlError>
      break;
 800a3a0:	e000      	b.n	800a3a4 <USBD_StdEPReq+0x330>
      break;
 800a3a2:	bf00      	nop
  }

  return ret;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	885b      	ldrh	r3, [r3, #2]
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	2b06      	cmp	r3, #6
 800a3d2:	f200 8128 	bhi.w	800a626 <USBD_GetDescriptor+0x276>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <USBD_GetDescriptor+0x2c>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a411 	.word	0x0800a411
 800a3e4:	0800a451 	.word	0x0800a451
 800a3e8:	0800a627 	.word	0x0800a627
 800a3ec:	0800a627 	.word	0x0800a627
 800a3f0:	0800a5c7 	.word	0x0800a5c7
 800a3f4:	0800a5f3 	.word	0x0800a5f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	7c12      	ldrb	r2, [r2, #16]
 800a404:	f107 0108 	add.w	r1, r7, #8
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
 800a40c:	60f8      	str	r0, [r7, #12]
      break;
 800a40e:	e112      	b.n	800a636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7c1b      	ldrb	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10d      	bne.n	800a434 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a420:	f107 0208 	add.w	r2, r7, #8
 800a424:	4610      	mov	r0, r2
 800a426:	4798      	blx	r3
 800a428:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	2202      	movs	r2, #2
 800a430:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a432:	e100      	b.n	800a636 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43c:	f107 0208 	add.w	r2, r7, #8
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
 800a444:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	2202      	movs	r2, #2
 800a44c:	701a      	strb	r2, [r3, #0]
      break;
 800a44e:	e0f2      	b.n	800a636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b05      	cmp	r3, #5
 800a458:	f200 80ac 	bhi.w	800a5b4 <USBD_GetDescriptor+0x204>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <USBD_GetDescriptor+0xb4>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a47d 	.word	0x0800a47d
 800a468:	0800a4b1 	.word	0x0800a4b1
 800a46c:	0800a4e5 	.word	0x0800a4e5
 800a470:	0800a519 	.word	0x0800a519
 800a474:	0800a54d 	.word	0x0800a54d
 800a478:	0800a581 	.word	0x0800a581
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00b      	beq.n	800a4a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	7c12      	ldrb	r2, [r2, #16]
 800a494:	f107 0108 	add.w	r1, r7, #8
 800a498:	4610      	mov	r0, r2
 800a49a:	4798      	blx	r3
 800a49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a49e:	e091      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 facb 	bl	800aa3e <USBD_CtlError>
            err++;
 800a4a8:	7afb      	ldrb	r3, [r7, #11]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ae:	e089      	b.n	800a5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	7c12      	ldrb	r2, [r2, #16]
 800a4c8:	f107 0108 	add.w	r1, r7, #8
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4d2:	e077      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fab1 	bl	800aa3e <USBD_CtlError>
            err++;
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4e2:	e06f      	b.n	800a5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	7c12      	ldrb	r2, [r2, #16]
 800a4fc:	f107 0108 	add.w	r1, r7, #8
 800a500:	4610      	mov	r0, r2
 800a502:	4798      	blx	r3
 800a504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a506:	e05d      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fa97 	bl	800aa3e <USBD_CtlError>
            err++;
 800a510:	7afb      	ldrb	r3, [r7, #11]
 800a512:	3301      	adds	r3, #1
 800a514:	72fb      	strb	r3, [r7, #11]
          break;
 800a516:	e055      	b.n	800a5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	7c12      	ldrb	r2, [r2, #16]
 800a530:	f107 0108 	add.w	r1, r7, #8
 800a534:	4610      	mov	r0, r2
 800a536:	4798      	blx	r3
 800a538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a53a:	e043      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fa7d 	bl	800aa3e <USBD_CtlError>
            err++;
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	3301      	adds	r3, #1
 800a548:	72fb      	strb	r3, [r7, #11]
          break;
 800a54a:	e03b      	b.n	800a5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00b      	beq.n	800a570 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	7c12      	ldrb	r2, [r2, #16]
 800a564:	f107 0108 	add.w	r1, r7, #8
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a56e:	e029      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa63 	bl	800aa3e <USBD_CtlError>
            err++;
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	3301      	adds	r3, #1
 800a57c:	72fb      	strb	r3, [r7, #11]
          break;
 800a57e:	e021      	b.n	800a5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00b      	beq.n	800a5a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	7c12      	ldrb	r2, [r2, #16]
 800a598:	f107 0108 	add.w	r1, r7, #8
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3
 800a5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5a2:	e00f      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa49 	bl	800aa3e <USBD_CtlError>
            err++;
 800a5ac:	7afb      	ldrb	r3, [r7, #11]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5b2:	e007      	b.n	800a5c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa41 	bl	800aa3e <USBD_CtlError>
          err++;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a5c2:	bf00      	nop
      }
      break;
 800a5c4:	e037      	b.n	800a636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7c1b      	ldrb	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d109      	bne.n	800a5e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d6:	f107 0208 	add.w	r2, r7, #8
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4798      	blx	r3
 800a5de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5e0:	e029      	b.n	800a636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa2a 	bl	800aa3e <USBD_CtlError>
        err++;
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a5f0:	e021      	b.n	800a636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	7c1b      	ldrb	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10d      	bne.n	800a616 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a602:	f107 0208 	add.w	r2, r7, #8
 800a606:	4610      	mov	r0, r2
 800a608:	4798      	blx	r3
 800a60a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	2207      	movs	r2, #7
 800a612:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a614:	e00f      	b.n	800a636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fa10 	bl	800aa3e <USBD_CtlError>
        err++;
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	3301      	adds	r3, #1
 800a622:	72fb      	strb	r3, [r7, #11]
      break;
 800a624:	e007      	b.n	800a636 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa08 	bl	800aa3e <USBD_CtlError>
      err++;
 800a62e:	7afb      	ldrb	r3, [r7, #11]
 800a630:	3301      	adds	r3, #1
 800a632:	72fb      	strb	r3, [r7, #11]
      break;
 800a634:	bf00      	nop
  }

  if (err != 0U)
 800a636:	7afb      	ldrb	r3, [r7, #11]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d11e      	bne.n	800a67a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	88db      	ldrh	r3, [r3, #6]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d016      	beq.n	800a672 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a644:	893b      	ldrh	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00e      	beq.n	800a668 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	88da      	ldrh	r2, [r3, #6]
 800a64e:	893b      	ldrh	r3, [r7, #8]
 800a650:	4293      	cmp	r3, r2
 800a652:	bf28      	it	cs
 800a654:	4613      	movcs	r3, r2
 800a656:	b29b      	uxth	r3, r3
 800a658:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a65a:	893b      	ldrh	r3, [r7, #8]
 800a65c:	461a      	mov	r2, r3
 800a65e:	68f9      	ldr	r1, [r7, #12]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fa5d 	bl	800ab20 <USBD_CtlSendData>
 800a666:	e009      	b.n	800a67c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f9e7 	bl	800aa3e <USBD_CtlError>
 800a670:	e004      	b.n	800a67c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 faae 	bl	800abd4 <USBD_CtlSendStatus>
 800a678:	e000      	b.n	800a67c <USBD_GetDescriptor+0x2cc>
    return;
 800a67a:	bf00      	nop
  }
}
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop

0800a684 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	889b      	ldrh	r3, [r3, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d131      	bne.n	800a6fa <USBD_SetAddress+0x76>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	88db      	ldrh	r3, [r3, #6]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d12d      	bne.n	800a6fa <USBD_SetAddress+0x76>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	885b      	ldrh	r3, [r3, #2]
 800a6a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6a4:	d829      	bhi.n	800a6fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	885b      	ldrh	r3, [r3, #2]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d104      	bne.n	800a6c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f9bc 	bl	800aa3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c6:	e01d      	b.n	800a704 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7bfa      	ldrb	r2, [r7, #15]
 800a6cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 ff05 	bl	800b4e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fa7a 	bl	800abd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ee:	e009      	b.n	800a704 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f8:	e004      	b.n	800a704 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f99e 	bl	800aa3e <USBD_CtlError>
  }
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	885b      	ldrh	r3, [r3, #2]
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	4b4e      	ldr	r3, [pc, #312]	; (800a85c <USBD_SetConfig+0x150>)
 800a722:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a724:	4b4d      	ldr	r3, [pc, #308]	; (800a85c <USBD_SetConfig+0x150>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d905      	bls.n	800a738 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f985 	bl	800aa3e <USBD_CtlError>
    return USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	e08c      	b.n	800a852 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b02      	cmp	r3, #2
 800a742:	d002      	beq.n	800a74a <USBD_SetConfig+0x3e>
 800a744:	2b03      	cmp	r3, #3
 800a746:	d029      	beq.n	800a79c <USBD_SetConfig+0x90>
 800a748:	e075      	b.n	800a836 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a74a:	4b44      	ldr	r3, [pc, #272]	; (800a85c <USBD_SetConfig+0x150>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d020      	beq.n	800a794 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a752:	4b42      	ldr	r3, [pc, #264]	; (800a85c <USBD_SetConfig+0x150>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a75c:	4b3f      	ldr	r3, [pc, #252]	; (800a85c <USBD_SetConfig+0x150>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7fe ffe1 	bl	800972a <USBD_SetClassConfig>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f962 	bl	800aa3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a782:	e065      	b.n	800a850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa25 	bl	800abd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2203      	movs	r2, #3
 800a78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a792:	e05d      	b.n	800a850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fa1d 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a79a:	e059      	b.n	800a850 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a79c:	4b2f      	ldr	r3, [pc, #188]	; (800a85c <USBD_SetConfig+0x150>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d112      	bne.n	800a7ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <USBD_SetConfig+0x150>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7b6:	4b29      	ldr	r3, [pc, #164]	; (800a85c <USBD_SetConfig+0x150>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7fe ffd0 	bl	8009762 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa06 	bl	800abd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7c8:	e042      	b.n	800a850 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <USBD_SetConfig+0x150>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d02a      	beq.n	800a82e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7fe ffbe 	bl	8009762 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <USBD_SetConfig+0x150>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <USBD_SetConfig+0x150>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7fe ff97 	bl	800972a <USBD_SetClassConfig>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f918 	bl	800aa3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fe ffa3 	bl	8009762 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2202      	movs	r2, #2
 800a820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a824:	e014      	b.n	800a850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f9d4 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a82c:	e010      	b.n	800a850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f9d0 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a834:	e00c      	b.n	800a850 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f900 	bl	800aa3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <USBD_SetConfig+0x150>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7fe ff8c 	bl	8009762 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	73fb      	strb	r3, [r7, #15]
      break;
 800a84e:	bf00      	nop
  }

  return ret;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000498 	.word	0x20000498

0800a860 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	88db      	ldrh	r3, [r3, #6]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d004      	beq.n	800a87c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f8e2 	bl	800aa3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a87a:	e023      	b.n	800a8c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	dc02      	bgt.n	800a88e <USBD_GetConfig+0x2e>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dc03      	bgt.n	800a894 <USBD_GetConfig+0x34>
 800a88c:	e015      	b.n	800a8ba <USBD_GetConfig+0x5a>
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d00b      	beq.n	800a8aa <USBD_GetConfig+0x4a>
 800a892:	e012      	b.n	800a8ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3308      	adds	r3, #8
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f93c 	bl	800ab20 <USBD_CtlSendData>
        break;
 800a8a8:	e00c      	b.n	800a8c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f934 	bl	800ab20 <USBD_CtlSendData>
        break;
 800a8b8:	e004      	b.n	800a8c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f8be 	bl	800aa3e <USBD_CtlError>
        break;
 800a8c2:	bf00      	nop
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d81e      	bhi.n	800a922 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	88db      	ldrh	r3, [r3, #6]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d004      	beq.n	800a8f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8a5 	bl	800aa3e <USBD_CtlError>
        break;
 800a8f4:	e01a      	b.n	800a92c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f043 0202 	orr.w	r2, r3, #2
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	330c      	adds	r3, #12
 800a916:	2202      	movs	r2, #2
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f900 	bl	800ab20 <USBD_CtlSendData>
      break;
 800a920:	e004      	b.n	800a92c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f88a 	bl	800aa3e <USBD_CtlError>
      break;
 800a92a:	bf00      	nop
  }
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	885b      	ldrh	r3, [r3, #2]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d107      	bne.n	800a956 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f940 	bl	800abd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a954:	e013      	b.n	800a97e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d10b      	bne.n	800a976 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	889b      	ldrh	r3, [r3, #4]
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	b29b      	uxth	r3, r3
 800a966:	b2da      	uxtb	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f930 	bl	800abd4 <USBD_CtlSendStatus>
}
 800a974:	e003      	b.n	800a97e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f860 	bl	800aa3e <USBD_CtlError>
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a996:	b2db      	uxtb	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d80b      	bhi.n	800a9b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	885b      	ldrh	r3, [r3, #2]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10c      	bne.n	800a9c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f910 	bl	800abd4 <USBD_CtlSendStatus>
      }
      break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f840 	bl	800aa3e <USBD_CtlError>
      break;
 800a9be:	e000      	b.n	800a9c2 <USBD_ClrFeature+0x3c>
      break;
 800a9c0:	bf00      	nop
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fa41 	bl	8009e7c <SWAPBYTE>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff fa34 	bl	8009e7c <SWAPBYTE>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff fa27 	bl	8009e7c <SWAPBYTE>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	80da      	strh	r2, [r3, #6]
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa48:	2180      	movs	r1, #128	; 0x80
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fce0 	bl	800b410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa50:	2100      	movs	r1, #0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fcdc 	bl	800b410 <USBD_LL_StallEP>
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d036      	beq.n	800aae4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa7a:	6938      	ldr	r0, [r7, #16]
 800aa7c:	f000 f836 	bl	800aaec <USBD_GetLen>
 800aa80:	4603      	mov	r3, r0
 800aa82:	3301      	adds	r3, #1
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	4413      	add	r3, r2
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2203      	movs	r2, #3
 800aaa8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aab0:	e013      	b.n	800aada <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	4413      	add	r3, r2
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	7812      	ldrb	r2, [r2, #0]
 800aabc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3301      	adds	r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
    idx++;
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	3301      	adds	r3, #1
 800aac8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4413      	add	r3, r2
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	3301      	adds	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e7      	bne.n	800aab2 <USBD_GetString+0x52>
 800aae2:	e000      	b.n	800aae6 <USBD_GetString+0x86>
    return;
 800aae4:	bf00      	nop
  }
}
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aafc:	e005      	b.n	800ab0a <USBD_GetLen+0x1e>
  {
    len++;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	3301      	adds	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f5      	bne.n	800aafe <USBD_GetLen+0x12>
  }

  return len;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 fceb 	bl	800b522 <USBD_LL_Transmit>

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	2100      	movs	r1, #0
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fcda 	bl	800b522 <USBD_LL_Transmit>

  return USBD_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2203      	movs	r2, #3
 800ab88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	2100      	movs	r1, #0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 fcde 	bl	800b564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	2100      	movs	r1, #0
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fccd 	bl	800b564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2204      	movs	r2, #4
 800abe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fc99 	bl	800b522 <USBD_LL_Transmit>

  return USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2205      	movs	r2, #5
 800ac06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fca7 	bl	800b564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac24:	2200      	movs	r2, #0
 800ac26:	4912      	ldr	r1, [pc, #72]	; (800ac70 <MX_USB_DEVICE_Init+0x50>)
 800ac28:	4812      	ldr	r0, [pc, #72]	; (800ac74 <MX_USB_DEVICE_Init+0x54>)
 800ac2a:	f7fe fd01 	bl	8009630 <USBD_Init>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac34:	f7f6 fd02 	bl	800163c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac38:	490f      	ldr	r1, [pc, #60]	; (800ac78 <MX_USB_DEVICE_Init+0x58>)
 800ac3a:	480e      	ldr	r0, [pc, #56]	; (800ac74 <MX_USB_DEVICE_Init+0x54>)
 800ac3c:	f7fe fd28 	bl	8009690 <USBD_RegisterClass>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac46:	f7f6 fcf9 	bl	800163c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac4a:	490c      	ldr	r1, [pc, #48]	; (800ac7c <MX_USB_DEVICE_Init+0x5c>)
 800ac4c:	4809      	ldr	r0, [pc, #36]	; (800ac74 <MX_USB_DEVICE_Init+0x54>)
 800ac4e:	f7fe fc1f 	bl	8009490 <USBD_CDC_RegisterInterface>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac58:	f7f6 fcf0 	bl	800163c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac5c:	4805      	ldr	r0, [pc, #20]	; (800ac74 <MX_USB_DEVICE_Init+0x54>)
 800ac5e:	f7fe fd4d 	bl	80096fc <USBD_Start>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac68:	f7f6 fce8 	bl	800163c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac6c:	bf00      	nop
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200000ac 	.word	0x200000ac
 800ac74:	2000049c 	.word	0x2000049c
 800ac78:	20000018 	.word	0x20000018
 800ac7c:	20000098 	.word	0x20000098

0800ac80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac84:	2200      	movs	r2, #0
 800ac86:	4905      	ldr	r1, [pc, #20]	; (800ac9c <CDC_Init_FS+0x1c>)
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <CDC_Init_FS+0x20>)
 800ac8a:	f7fe fc1b 	bl	80094c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac8e:	4905      	ldr	r1, [pc, #20]	; (800aca4 <CDC_Init_FS+0x24>)
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <CDC_Init_FS+0x20>)
 800ac92:	f7fe fc39 	bl	8009508 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000f78 	.word	0x20000f78
 800aca0:	2000049c 	.word	0x2000049c
 800aca4:	20000778 	.word	0x20000778

0800aca8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800acac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acae:	4618      	mov	r0, r3
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
 800acc4:	4613      	mov	r3, r2
 800acc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b23      	cmp	r3, #35	; 0x23
 800accc:	d84a      	bhi.n	800ad64 <CDC_Control_FS+0xac>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <CDC_Control_FS+0x1c>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800ad65 	.word	0x0800ad65
 800acd8:	0800ad65 	.word	0x0800ad65
 800acdc:	0800ad65 	.word	0x0800ad65
 800ace0:	0800ad65 	.word	0x0800ad65
 800ace4:	0800ad65 	.word	0x0800ad65
 800ace8:	0800ad65 	.word	0x0800ad65
 800acec:	0800ad65 	.word	0x0800ad65
 800acf0:	0800ad65 	.word	0x0800ad65
 800acf4:	0800ad65 	.word	0x0800ad65
 800acf8:	0800ad65 	.word	0x0800ad65
 800acfc:	0800ad65 	.word	0x0800ad65
 800ad00:	0800ad65 	.word	0x0800ad65
 800ad04:	0800ad65 	.word	0x0800ad65
 800ad08:	0800ad65 	.word	0x0800ad65
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad65 	.word	0x0800ad65
 800ad14:	0800ad65 	.word	0x0800ad65
 800ad18:	0800ad65 	.word	0x0800ad65
 800ad1c:	0800ad65 	.word	0x0800ad65
 800ad20:	0800ad65 	.word	0x0800ad65
 800ad24:	0800ad65 	.word	0x0800ad65
 800ad28:	0800ad65 	.word	0x0800ad65
 800ad2c:	0800ad65 	.word	0x0800ad65
 800ad30:	0800ad65 	.word	0x0800ad65
 800ad34:	0800ad65 	.word	0x0800ad65
 800ad38:	0800ad65 	.word	0x0800ad65
 800ad3c:	0800ad65 	.word	0x0800ad65
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad65 	.word	0x0800ad65
 800ad48:	0800ad65 	.word	0x0800ad65
 800ad4c:	0800ad65 	.word	0x0800ad65
 800ad50:	0800ad65 	.word	0x0800ad65
 800ad54:	0800ad65 	.word	0x0800ad65
 800ad58:	0800ad65 	.word	0x0800ad65
 800ad5c:	0800ad65 	.word	0x0800ad65
 800ad60:	0800ad65 	.word	0x0800ad65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad64:	bf00      	nop
  }

  return (USBD_OK);
 800ad66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4805      	ldr	r0, [pc, #20]	; (800ad98 <CDC_Receive_FS+0x24>)
 800ad82:	f7fe fbc1 	bl	8009508 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad86:	4804      	ldr	r0, [pc, #16]	; (800ad98 <CDC_Receive_FS+0x24>)
 800ad88:	f7fe fc1c 	bl	80095c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ad8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	2000049c 	.word	0x2000049c

0800ad9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <CDC_Transmit_FS+0x48>)
 800adae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e00b      	b.n	800adda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4806      	ldr	r0, [pc, #24]	; (800ade4 <CDC_Transmit_FS+0x48>)
 800adca:	f7fe fb7b 	bl	80094c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800adce:	4805      	ldr	r0, [pc, #20]	; (800ade4 <CDC_Transmit_FS+0x48>)
 800add0:	f7fe fbb8 	bl	8009544 <USBD_CDC_TransmitPacket>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	2000049c 	.word	0x2000049c

0800ade8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800adfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	6039      	str	r1, [r7, #0]
 800ae16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2212      	movs	r2, #18
 800ae1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae1e:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	200000c8 	.word	0x200000c8

0800ae30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	6039      	str	r1, [r7, #0]
 800ae3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2204      	movs	r2, #4
 800ae40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae42:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	200000dc 	.word	0x200000dc

0800ae54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d105      	bne.n	800ae72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4907      	ldr	r1, [pc, #28]	; (800ae88 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae6a:	4808      	ldr	r0, [pc, #32]	; (800ae8c <USBD_FS_ProductStrDescriptor+0x38>)
 800ae6c:	f7ff fdf8 	bl	800aa60 <USBD_GetString>
 800ae70:	e004      	b.n	800ae7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	4904      	ldr	r1, [pc, #16]	; (800ae88 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae76:	4805      	ldr	r0, [pc, #20]	; (800ae8c <USBD_FS_ProductStrDescriptor+0x38>)
 800ae78:	f7ff fdf2 	bl	800aa60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae7c:	4b02      	ldr	r3, [pc, #8]	; (800ae88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20001778 	.word	0x20001778
 800ae8c:	0800f404 	.word	0x0800f404

0800ae90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	4904      	ldr	r1, [pc, #16]	; (800aeb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aea0:	4804      	ldr	r0, [pc, #16]	; (800aeb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aea2:	f7ff fddd 	bl	800aa60 <USBD_GetString>
  return USBD_StrDesc;
 800aea6:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20001778 	.word	0x20001778
 800aeb4:	0800f41c 	.word	0x0800f41c

0800aeb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	221a      	movs	r2, #26
 800aec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aeca:	f000 f843 	bl	800af54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aece:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	200000e0 	.word	0x200000e0

0800aedc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d105      	bne.n	800aefa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4907      	ldr	r1, [pc, #28]	; (800af10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aef2:	4808      	ldr	r0, [pc, #32]	; (800af14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aef4:	f7ff fdb4 	bl	800aa60 <USBD_GetString>
 800aef8:	e004      	b.n	800af04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	4904      	ldr	r1, [pc, #16]	; (800af10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aefe:	4805      	ldr	r0, [pc, #20]	; (800af14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af00:	f7ff fdae 	bl	800aa60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af04:	4b02      	ldr	r3, [pc, #8]	; (800af10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20001778 	.word	0x20001778
 800af14:	0800f430 	.word	0x0800f430

0800af18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	4907      	ldr	r1, [pc, #28]	; (800af4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af30:	f7ff fd96 	bl	800aa60 <USBD_GetString>
 800af34:	e004      	b.n	800af40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4904      	ldr	r1, [pc, #16]	; (800af4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af3a:	4805      	ldr	r0, [pc, #20]	; (800af50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af3c:	f7ff fd90 	bl	800aa60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af40:	4b02      	ldr	r3, [pc, #8]	; (800af4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20001778 	.word	0x20001778
 800af50:	0800f43c 	.word	0x0800f43c

0800af54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <Get_SerialNum+0x44>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <Get_SerialNum+0x48>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <Get_SerialNum+0x4c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4413      	add	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af7a:	2208      	movs	r2, #8
 800af7c:	4909      	ldr	r1, [pc, #36]	; (800afa4 <Get_SerialNum+0x50>)
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 f814 	bl	800afac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af84:	2204      	movs	r2, #4
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <Get_SerialNum+0x54>)
 800af88:	68b8      	ldr	r0, [r7, #8]
 800af8a:	f000 f80f 	bl	800afac <IntToUnicode>
  }
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	1fff7a10 	.word	0x1fff7a10
 800af9c:	1fff7a14 	.word	0x1fff7a14
 800afa0:	1fff7a18 	.word	0x1fff7a18
 800afa4:	200000e2 	.word	0x200000e2
 800afa8:	200000f2 	.word	0x200000f2

0800afac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e027      	b.n	800b014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	0f1b      	lsrs	r3, r3, #28
 800afc8:	2b09      	cmp	r3, #9
 800afca:	d80b      	bhi.n	800afe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	0f1b      	lsrs	r3, r3, #28
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4619      	mov	r1, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	440b      	add	r3, r1
 800afdc:	3230      	adds	r2, #48	; 0x30
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	e00a      	b.n	800affa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	0f1b      	lsrs	r3, r3, #28
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4619      	mov	r1, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	440b      	add	r3, r1
 800aff4:	3237      	adds	r2, #55	; 0x37
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	3301      	adds	r3, #1
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	4413      	add	r3, r2
 800b00a:	2200      	movs	r2, #0
 800b00c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	3301      	adds	r3, #1
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	7dfa      	ldrb	r2, [r7, #23]
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d3d3      	bcc.n	800afc4 <IntToUnicode+0x18>
  }
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	; 0x28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	609a      	str	r2, [r3, #8]
 800b040:	60da      	str	r2, [r3, #12]
 800b042:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b04c:	d13a      	bne.n	800b0c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
 800b052:	4b1e      	ldr	r3, [pc, #120]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	4a1d      	ldr	r2, [pc, #116]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	6313      	str	r3, [r2, #48]	; 0x30
 800b05e:	4b1b      	ldr	r3, [pc, #108]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b06a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b06e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b070:	2302      	movs	r3, #2
 800b072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b078:	2303      	movs	r3, #3
 800b07a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b07c:	230a      	movs	r3, #10
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b080:	f107 0314 	add.w	r3, r7, #20
 800b084:	4619      	mov	r1, r3
 800b086:	4812      	ldr	r0, [pc, #72]	; (800b0d0 <HAL_PCD_MspInit+0xa4>)
 800b088:	f7f7 fd7e 	bl	8002b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b090:	4a0e      	ldr	r2, [pc, #56]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b096:	6353      	str	r3, [r2, #52]	; 0x34
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a0:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b0a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0a6:	6453      	str	r3, [r2, #68]	; 0x44
 800b0a8:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <HAL_PCD_MspInit+0xa0>)
 800b0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2043      	movs	r0, #67	; 0x43
 800b0ba:	f7f7 f9be 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0be:	2043      	movs	r0, #67	; 0x43
 800b0c0:	f7f7 f9d7 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	3728      	adds	r7, #40	; 0x28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	40020000 	.word	0x40020000

0800b0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fe fb53 	bl	8009796 <USBD_LL_SetupStage>
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b10a:	78fa      	ldrb	r2, [r7, #3]
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	4619      	mov	r1, r3
 800b122:	f7fe fb8d 	bl	8009840 <USBD_LL_DataOutStage>
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3320      	adds	r3, #32
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	4619      	mov	r1, r3
 800b156:	f7fe fc26 	bl	80099a6 <USBD_LL_DataInStage>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fd60 	bl	8009c36 <USBD_LL_SOF>
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	79db      	ldrb	r3, [r3, #7]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d102      	bne.n	800b198 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
 800b196:	e008      	b.n	800b1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	79db      	ldrb	r3, [r3, #7]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d102      	bne.n	800b1a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e001      	b.n	800b1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b1a6:	f7f6 fa49 	bl	800163c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b1b0:	7bfa      	ldrb	r2, [r7, #15]
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe fcfa 	bl	8009bae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fca2 	bl	8009b0a <USBD_LL_Reset>
}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fcf5 	bl	8009bce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6812      	ldr	r2, [r2, #0]
 800b1f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7adb      	ldrb	r3, [r3, #11]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d005      	beq.n	800b210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b204:	4b04      	ldr	r3, [pc, #16]	; (800b218 <HAL_PCD_SuspendCallback+0x48>)
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	4a03      	ldr	r2, [pc, #12]	; (800b218 <HAL_PCD_SuspendCallback+0x48>)
 800b20a:	f043 0306 	orr.w	r3, r3, #6
 800b20e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	e000ed00 	.word	0xe000ed00

0800b21c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe fceb 	bl	8009c06 <USBD_LL_Resume>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b24a:	78fa      	ldrb	r2, [r7, #3]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fd43 	bl	8009cda <USBD_LL_IsoOUTIncomplete>
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b26e:	78fa      	ldrb	r2, [r7, #3]
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fcff 	bl	8009c76 <USBD_LL_IsoINIncomplete>
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fd55 	bl	8009d3e <USBD_LL_DevConnected>
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fd52 	bl	8009d54 <USBD_LL_DevDisconnected>
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d13c      	bne.n	800b342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b2c8:	4a20      	ldr	r2, [pc, #128]	; (800b34c <USBD_LL_Init+0x94>)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <USBD_LL_Init+0x94>)
 800b2d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <USBD_LL_Init+0x94>)
 800b2da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b2e0:	4b1a      	ldr	r3, [pc, #104]	; (800b34c <USBD_LL_Init+0x94>)
 800b2e2:	2204      	movs	r2, #4
 800b2e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b2e6:	4b19      	ldr	r3, [pc, #100]	; (800b34c <USBD_LL_Init+0x94>)
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2ec:	4b17      	ldr	r3, [pc, #92]	; (800b34c <USBD_LL_Init+0x94>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2f2:	4b16      	ldr	r3, [pc, #88]	; (800b34c <USBD_LL_Init+0x94>)
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2f8:	4b14      	ldr	r3, [pc, #80]	; (800b34c <USBD_LL_Init+0x94>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <USBD_LL_Init+0x94>)
 800b300:	2200      	movs	r2, #0
 800b302:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b304:	4b11      	ldr	r3, [pc, #68]	; (800b34c <USBD_LL_Init+0x94>)
 800b306:	2200      	movs	r2, #0
 800b308:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b30a:	4b10      	ldr	r3, [pc, #64]	; (800b34c <USBD_LL_Init+0x94>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <USBD_LL_Init+0x94>)
 800b312:	2200      	movs	r2, #0
 800b314:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b316:	480d      	ldr	r0, [pc, #52]	; (800b34c <USBD_LL_Init+0x94>)
 800b318:	f7f9 fb8c 	bl	8004a34 <HAL_PCD_Init>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b322:	f7f6 f98b 	bl	800163c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b326:	2180      	movs	r1, #128	; 0x80
 800b328:	4808      	ldr	r0, [pc, #32]	; (800b34c <USBD_LL_Init+0x94>)
 800b32a:	f7fa fdb6 	bl	8005e9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b32e:	2240      	movs	r2, #64	; 0x40
 800b330:	2100      	movs	r1, #0
 800b332:	4806      	ldr	r0, [pc, #24]	; (800b34c <USBD_LL_Init+0x94>)
 800b334:	f7fa fd6a 	bl	8005e0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b338:	2280      	movs	r2, #128	; 0x80
 800b33a:	2101      	movs	r1, #1
 800b33c:	4803      	ldr	r0, [pc, #12]	; (800b34c <USBD_LL_Init+0x94>)
 800b33e:	f7fa fd65 	bl	8005e0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20001978 	.word	0x20001978

0800b350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b366:	4618      	mov	r0, r3
 800b368:	f7f9 fc73 	bl	8004c52 <HAL_PCD_Start>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	4618      	mov	r0, r3
 800b374:	f000 f942 	bl	800b5fc <USBD_Get_USB_Status>
 800b378:	4603      	mov	r3, r0
 800b37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	461a      	mov	r2, r3
 800b394:	4603      	mov	r3, r0
 800b396:	70fb      	strb	r3, [r7, #3]
 800b398:	460b      	mov	r3, r1
 800b39a:	70bb      	strb	r3, [r7, #2]
 800b39c:	4613      	mov	r3, r2
 800b39e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3ae:	78bb      	ldrb	r3, [r7, #2]
 800b3b0:	883a      	ldrh	r2, [r7, #0]
 800b3b2:	78f9      	ldrb	r1, [r7, #3]
 800b3b4:	f7fa f947 	bl	8005646 <HAL_PCD_EP_Open>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f91c 	bl	800b5fc <USBD_Get_USB_Status>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3ec:	78fa      	ldrb	r2, [r7, #3]
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fa f990 	bl	8005716 <HAL_PCD_EP_Close>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f8fd 	bl	800b5fc <USBD_Get_USB_Status>
 800b402:	4603      	mov	r3, r0
 800b404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b406:	7bbb      	ldrb	r3, [r7, #14]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b42a:	78fa      	ldrb	r2, [r7, #3]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fa fa48 	bl	80058c4 <HAL_PCD_EP_SetStall>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f8de 	bl	800b5fc <USBD_Get_USB_Status>
 800b440:	4603      	mov	r3, r0
 800b442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b444:	7bbb      	ldrb	r3, [r7, #14]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b468:	78fa      	ldrb	r2, [r7, #3]
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fa fa8c 	bl	800598a <HAL_PCD_EP_ClrStall>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f8bf 	bl	800b5fc <USBD_Get_USB_Status>
 800b47e:	4603      	mov	r3, r0
 800b480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b482:	7bbb      	ldrb	r3, [r7, #14]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b49e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da0b      	bge.n	800b4c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ae:	68f9      	ldr	r1, [r7, #12]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	3316      	adds	r3, #22
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	e00b      	b.n	800b4d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	4611      	mov	r1, r2
 800b502:	4618      	mov	r0, r3
 800b504:	f7fa f87b 	bl	80055fe <HAL_PCD_SetAddress>
 800b508:	4603      	mov	r3, r0
 800b50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f874 	bl	800b5fc <USBD_Get_USB_Status>
 800b514:	4603      	mov	r3, r0
 800b516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b518:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	603b      	str	r3, [r7, #0]
 800b52e:	460b      	mov	r3, r1
 800b530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b540:	7af9      	ldrb	r1, [r7, #11]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	f7fa f983 	bl	8005850 <HAL_PCD_EP_Transmit>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f853 	bl	800b5fc <USBD_Get_USB_Status>
 800b556:	4603      	mov	r3, r0
 800b558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b55a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	607a      	str	r2, [r7, #4]
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	460b      	mov	r3, r1
 800b572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b582:	7af9      	ldrb	r1, [r7, #11]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	f7fa f90f 	bl	80057aa <HAL_PCD_EP_Receive>
 800b58c:	4603      	mov	r3, r0
 800b58e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f832 	bl	800b5fc <USBD_Get_USB_Status>
 800b598:	4603      	mov	r3, r0
 800b59a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b59c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5b8:	78fa      	ldrb	r2, [r7, #3]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fa f92f 	bl	8005820 <HAL_PCD_EP_GetRxCount>
 800b5c2:	4603      	mov	r3, r0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5d4:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <USBD_static_malloc+0x18>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20001e5c 	.word	0x20001e5c

0800b5e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]

}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d817      	bhi.n	800b640 <USBD_Get_USB_Status+0x44>
 800b610:	a201      	add	r2, pc, #4	; (adr r2, 800b618 <USBD_Get_USB_Status+0x1c>)
 800b612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b616:	bf00      	nop
 800b618:	0800b629 	.word	0x0800b629
 800b61c:	0800b62f 	.word	0x0800b62f
 800b620:	0800b635 	.word	0x0800b635
 800b624:	0800b63b 	.word	0x0800b63b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
    break;
 800b62c:	e00b      	b.n	800b646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b62e:	2303      	movs	r3, #3
 800b630:	73fb      	strb	r3, [r7, #15]
    break;
 800b632:	e008      	b.n	800b646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
    break;
 800b638:	e005      	b.n	800b646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	73fb      	strb	r3, [r7, #15]
    break;
 800b63e:	e002      	b.n	800b646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	73fb      	strb	r3, [r7, #15]
    break;
 800b644:	bf00      	nop
  }
  return usb_status;
 800b646:	7bfb      	ldrb	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <__cvt>:
 800b654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	ec55 4b10 	vmov	r4, r5, d0
 800b65c:	2d00      	cmp	r5, #0
 800b65e:	460e      	mov	r6, r1
 800b660:	4619      	mov	r1, r3
 800b662:	462b      	mov	r3, r5
 800b664:	bfbb      	ittet	lt
 800b666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b66a:	461d      	movlt	r5, r3
 800b66c:	2300      	movge	r3, #0
 800b66e:	232d      	movlt	r3, #45	; 0x2d
 800b670:	700b      	strb	r3, [r1, #0]
 800b672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b678:	4691      	mov	r9, r2
 800b67a:	f023 0820 	bic.w	r8, r3, #32
 800b67e:	bfbc      	itt	lt
 800b680:	4622      	movlt	r2, r4
 800b682:	4614      	movlt	r4, r2
 800b684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b688:	d005      	beq.n	800b696 <__cvt+0x42>
 800b68a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b68e:	d100      	bne.n	800b692 <__cvt+0x3e>
 800b690:	3601      	adds	r6, #1
 800b692:	2102      	movs	r1, #2
 800b694:	e000      	b.n	800b698 <__cvt+0x44>
 800b696:	2103      	movs	r1, #3
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	ab02      	add	r3, sp, #8
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	ec45 4b10 	vmov	d0, r4, r5
 800b6a4:	4653      	mov	r3, sl
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	f000 fe76 	bl	800c398 <_dtoa_r>
 800b6ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	d102      	bne.n	800b6ba <__cvt+0x66>
 800b6b4:	f019 0f01 	tst.w	r9, #1
 800b6b8:	d022      	beq.n	800b700 <__cvt+0xac>
 800b6ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6be:	eb07 0906 	add.w	r9, r7, r6
 800b6c2:	d110      	bne.n	800b6e6 <__cvt+0x92>
 800b6c4:	783b      	ldrb	r3, [r7, #0]
 800b6c6:	2b30      	cmp	r3, #48	; 0x30
 800b6c8:	d10a      	bne.n	800b6e0 <__cvt+0x8c>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7f5 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d6:	b918      	cbnz	r0, 800b6e0 <__cvt+0x8c>
 800b6d8:	f1c6 0601 	rsb	r6, r6, #1
 800b6dc:	f8ca 6000 	str.w	r6, [sl]
 800b6e0:	f8da 3000 	ldr.w	r3, [sl]
 800b6e4:	4499      	add	r9, r3
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f5 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6f2:	b108      	cbz	r0, 800b6f8 <__cvt+0xa4>
 800b6f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6f8:	2230      	movs	r2, #48	; 0x30
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	454b      	cmp	r3, r9
 800b6fe:	d307      	bcc.n	800b710 <__cvt+0xbc>
 800b700:	9b03      	ldr	r3, [sp, #12]
 800b702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b704:	1bdb      	subs	r3, r3, r7
 800b706:	4638      	mov	r0, r7
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	b004      	add	sp, #16
 800b70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b710:	1c59      	adds	r1, r3, #1
 800b712:	9103      	str	r1, [sp, #12]
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	e7f0      	b.n	800b6fa <__cvt+0xa6>

0800b718 <__exponent>:
 800b718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b71a:	4603      	mov	r3, r0
 800b71c:	2900      	cmp	r1, #0
 800b71e:	bfb8      	it	lt
 800b720:	4249      	neglt	r1, r1
 800b722:	f803 2b02 	strb.w	r2, [r3], #2
 800b726:	bfb4      	ite	lt
 800b728:	222d      	movlt	r2, #45	; 0x2d
 800b72a:	222b      	movge	r2, #43	; 0x2b
 800b72c:	2909      	cmp	r1, #9
 800b72e:	7042      	strb	r2, [r0, #1]
 800b730:	dd2a      	ble.n	800b788 <__exponent+0x70>
 800b732:	f10d 0207 	add.w	r2, sp, #7
 800b736:	4617      	mov	r7, r2
 800b738:	260a      	movs	r6, #10
 800b73a:	4694      	mov	ip, r2
 800b73c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b740:	fb06 1415 	mls	r4, r6, r5, r1
 800b744:	3430      	adds	r4, #48	; 0x30
 800b746:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b74a:	460c      	mov	r4, r1
 800b74c:	2c63      	cmp	r4, #99	; 0x63
 800b74e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b752:	4629      	mov	r1, r5
 800b754:	dcf1      	bgt.n	800b73a <__exponent+0x22>
 800b756:	3130      	adds	r1, #48	; 0x30
 800b758:	f1ac 0402 	sub.w	r4, ip, #2
 800b75c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b760:	1c41      	adds	r1, r0, #1
 800b762:	4622      	mov	r2, r4
 800b764:	42ba      	cmp	r2, r7
 800b766:	d30a      	bcc.n	800b77e <__exponent+0x66>
 800b768:	f10d 0209 	add.w	r2, sp, #9
 800b76c:	eba2 020c 	sub.w	r2, r2, ip
 800b770:	42bc      	cmp	r4, r7
 800b772:	bf88      	it	hi
 800b774:	2200      	movhi	r2, #0
 800b776:	4413      	add	r3, r2
 800b778:	1a18      	subs	r0, r3, r0
 800b77a:	b003      	add	sp, #12
 800b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b782:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b786:	e7ed      	b.n	800b764 <__exponent+0x4c>
 800b788:	2330      	movs	r3, #48	; 0x30
 800b78a:	3130      	adds	r1, #48	; 0x30
 800b78c:	7083      	strb	r3, [r0, #2]
 800b78e:	70c1      	strb	r1, [r0, #3]
 800b790:	1d03      	adds	r3, r0, #4
 800b792:	e7f1      	b.n	800b778 <__exponent+0x60>

0800b794 <_printf_float>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	ed2d 8b02 	vpush	{d8}
 800b79c:	b08d      	sub	sp, #52	; 0x34
 800b79e:	460c      	mov	r4, r1
 800b7a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	461f      	mov	r7, r3
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	f000 fce7 	bl	800c17c <_localeconv_r>
 800b7ae:	f8d0 a000 	ldr.w	sl, [r0]
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f7f4 fd5c 	bl	8000270 <strlen>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	9305      	str	r3, [sp, #20]
 800b7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7c8:	3307      	adds	r3, #7
 800b7ca:	f023 0307 	bic.w	r3, r3, #7
 800b7ce:	f103 0208 	add.w	r2, r3, #8
 800b7d2:	f8c8 2000 	str.w	r2, [r8]
 800b7d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7e4:	ee08 0a10 	vmov	s16, r0
 800b7e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b7ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7f0:	4b9e      	ldr	r3, [pc, #632]	; (800ba6c <_printf_float+0x2d8>)
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	f7f5 f999 	bl	8000b2c <__aeabi_dcmpun>
 800b7fa:	bb88      	cbnz	r0, 800b860 <_printf_float+0xcc>
 800b7fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b800:	4b9a      	ldr	r3, [pc, #616]	; (800ba6c <_printf_float+0x2d8>)
 800b802:	f04f 32ff 	mov.w	r2, #4294967295
 800b806:	f7f5 f973 	bl	8000af0 <__aeabi_dcmple>
 800b80a:	bb48      	cbnz	r0, 800b860 <_printf_float+0xcc>
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	4640      	mov	r0, r8
 800b812:	4649      	mov	r1, r9
 800b814:	f7f5 f962 	bl	8000adc <__aeabi_dcmplt>
 800b818:	b110      	cbz	r0, 800b820 <_printf_float+0x8c>
 800b81a:	232d      	movs	r3, #45	; 0x2d
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	4a93      	ldr	r2, [pc, #588]	; (800ba70 <_printf_float+0x2dc>)
 800b822:	4b94      	ldr	r3, [pc, #592]	; (800ba74 <_printf_float+0x2e0>)
 800b824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b828:	bf94      	ite	ls
 800b82a:	4690      	movls	r8, r2
 800b82c:	4698      	movhi	r8, r3
 800b82e:	2303      	movs	r3, #3
 800b830:	6123      	str	r3, [r4, #16]
 800b832:	9b05      	ldr	r3, [sp, #20]
 800b834:	f023 0304 	bic.w	r3, r3, #4
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	f04f 0900 	mov.w	r9, #0
 800b83e:	9700      	str	r7, [sp, #0]
 800b840:	4633      	mov	r3, r6
 800b842:	aa0b      	add	r2, sp, #44	; 0x2c
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f000 f9da 	bl	800bc00 <_printf_common>
 800b84c:	3001      	adds	r0, #1
 800b84e:	f040 8090 	bne.w	800b972 <_printf_float+0x1de>
 800b852:	f04f 30ff 	mov.w	r0, #4294967295
 800b856:	b00d      	add	sp, #52	; 0x34
 800b858:	ecbd 8b02 	vpop	{d8}
 800b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b860:	4642      	mov	r2, r8
 800b862:	464b      	mov	r3, r9
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f7f5 f960 	bl	8000b2c <__aeabi_dcmpun>
 800b86c:	b140      	cbz	r0, 800b880 <_printf_float+0xec>
 800b86e:	464b      	mov	r3, r9
 800b870:	2b00      	cmp	r3, #0
 800b872:	bfbc      	itt	lt
 800b874:	232d      	movlt	r3, #45	; 0x2d
 800b876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b87a:	4a7f      	ldr	r2, [pc, #508]	; (800ba78 <_printf_float+0x2e4>)
 800b87c:	4b7f      	ldr	r3, [pc, #508]	; (800ba7c <_printf_float+0x2e8>)
 800b87e:	e7d1      	b.n	800b824 <_printf_float+0x90>
 800b880:	6863      	ldr	r3, [r4, #4]
 800b882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b886:	9206      	str	r2, [sp, #24]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	d13f      	bne.n	800b90c <_printf_float+0x178>
 800b88c:	2306      	movs	r3, #6
 800b88e:	6063      	str	r3, [r4, #4]
 800b890:	9b05      	ldr	r3, [sp, #20]
 800b892:	6861      	ldr	r1, [r4, #4]
 800b894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b898:	2300      	movs	r3, #0
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	ab0a      	add	r3, sp, #40	; 0x28
 800b89e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8a2:	ab09      	add	r3, sp, #36	; 0x24
 800b8a4:	ec49 8b10 	vmov	d0, r8, r9
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	6022      	str	r2, [r4, #0]
 800b8ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff fecf 	bl	800b654 <__cvt>
 800b8b6:	9b06      	ldr	r3, [sp, #24]
 800b8b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8ba:	2b47      	cmp	r3, #71	; 0x47
 800b8bc:	4680      	mov	r8, r0
 800b8be:	d108      	bne.n	800b8d2 <_printf_float+0x13e>
 800b8c0:	1cc8      	adds	r0, r1, #3
 800b8c2:	db02      	blt.n	800b8ca <_printf_float+0x136>
 800b8c4:	6863      	ldr	r3, [r4, #4]
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	dd41      	ble.n	800b94e <_printf_float+0x1ba>
 800b8ca:	f1ab 0302 	sub.w	r3, fp, #2
 800b8ce:	fa5f fb83 	uxtb.w	fp, r3
 800b8d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8d6:	d820      	bhi.n	800b91a <_printf_float+0x186>
 800b8d8:	3901      	subs	r1, #1
 800b8da:	465a      	mov	r2, fp
 800b8dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b8e2:	f7ff ff19 	bl	800b718 <__exponent>
 800b8e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8e8:	1813      	adds	r3, r2, r0
 800b8ea:	2a01      	cmp	r2, #1
 800b8ec:	4681      	mov	r9, r0
 800b8ee:	6123      	str	r3, [r4, #16]
 800b8f0:	dc02      	bgt.n	800b8f8 <_printf_float+0x164>
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	07d2      	lsls	r2, r2, #31
 800b8f6:	d501      	bpl.n	800b8fc <_printf_float+0x168>
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b900:	2b00      	cmp	r3, #0
 800b902:	d09c      	beq.n	800b83e <_printf_float+0xaa>
 800b904:	232d      	movs	r3, #45	; 0x2d
 800b906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b90a:	e798      	b.n	800b83e <_printf_float+0xaa>
 800b90c:	9a06      	ldr	r2, [sp, #24]
 800b90e:	2a47      	cmp	r2, #71	; 0x47
 800b910:	d1be      	bne.n	800b890 <_printf_float+0xfc>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1bc      	bne.n	800b890 <_printf_float+0xfc>
 800b916:	2301      	movs	r3, #1
 800b918:	e7b9      	b.n	800b88e <_printf_float+0xfa>
 800b91a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b91e:	d118      	bne.n	800b952 <_printf_float+0x1be>
 800b920:	2900      	cmp	r1, #0
 800b922:	6863      	ldr	r3, [r4, #4]
 800b924:	dd0b      	ble.n	800b93e <_printf_float+0x1aa>
 800b926:	6121      	str	r1, [r4, #16]
 800b928:	b913      	cbnz	r3, 800b930 <_printf_float+0x19c>
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	07d0      	lsls	r0, r2, #31
 800b92e:	d502      	bpl.n	800b936 <_printf_float+0x1a2>
 800b930:	3301      	adds	r3, #1
 800b932:	440b      	add	r3, r1
 800b934:	6123      	str	r3, [r4, #16]
 800b936:	65a1      	str	r1, [r4, #88]	; 0x58
 800b938:	f04f 0900 	mov.w	r9, #0
 800b93c:	e7de      	b.n	800b8fc <_printf_float+0x168>
 800b93e:	b913      	cbnz	r3, 800b946 <_printf_float+0x1b2>
 800b940:	6822      	ldr	r2, [r4, #0]
 800b942:	07d2      	lsls	r2, r2, #31
 800b944:	d501      	bpl.n	800b94a <_printf_float+0x1b6>
 800b946:	3302      	adds	r3, #2
 800b948:	e7f4      	b.n	800b934 <_printf_float+0x1a0>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e7f2      	b.n	800b934 <_printf_float+0x1a0>
 800b94e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b954:	4299      	cmp	r1, r3
 800b956:	db05      	blt.n	800b964 <_printf_float+0x1d0>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	6121      	str	r1, [r4, #16]
 800b95c:	07d8      	lsls	r0, r3, #31
 800b95e:	d5ea      	bpl.n	800b936 <_printf_float+0x1a2>
 800b960:	1c4b      	adds	r3, r1, #1
 800b962:	e7e7      	b.n	800b934 <_printf_float+0x1a0>
 800b964:	2900      	cmp	r1, #0
 800b966:	bfd4      	ite	le
 800b968:	f1c1 0202 	rsble	r2, r1, #2
 800b96c:	2201      	movgt	r2, #1
 800b96e:	4413      	add	r3, r2
 800b970:	e7e0      	b.n	800b934 <_printf_float+0x1a0>
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	055a      	lsls	r2, r3, #21
 800b976:	d407      	bmi.n	800b988 <_printf_float+0x1f4>
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	4642      	mov	r2, r8
 800b97c:	4631      	mov	r1, r6
 800b97e:	4628      	mov	r0, r5
 800b980:	47b8      	blx	r7
 800b982:	3001      	adds	r0, #1
 800b984:	d12c      	bne.n	800b9e0 <_printf_float+0x24c>
 800b986:	e764      	b.n	800b852 <_printf_float+0xbe>
 800b988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b98c:	f240 80e0 	bls.w	800bb50 <_printf_float+0x3bc>
 800b990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	f7f5 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d034      	beq.n	800ba0a <_printf_float+0x276>
 800b9a0:	4a37      	ldr	r2, [pc, #220]	; (800ba80 <_printf_float+0x2ec>)
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	47b8      	blx	r7
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	f43f af51 	beq.w	800b852 <_printf_float+0xbe>
 800b9b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	db02      	blt.n	800b9be <_printf_float+0x22a>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	07d8      	lsls	r0, r3, #31
 800b9bc:	d510      	bpl.n	800b9e0 <_printf_float+0x24c>
 800b9be:	ee18 3a10 	vmov	r3, s16
 800b9c2:	4652      	mov	r2, sl
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	47b8      	blx	r7
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	f43f af41 	beq.w	800b852 <_printf_float+0xbe>
 800b9d0:	f04f 0800 	mov.w	r8, #0
 800b9d4:	f104 091a 	add.w	r9, r4, #26
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	4543      	cmp	r3, r8
 800b9de:	dc09      	bgt.n	800b9f4 <_printf_float+0x260>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	079b      	lsls	r3, r3, #30
 800b9e4:	f100 8107 	bmi.w	800bbf6 <_printf_float+0x462>
 800b9e8:	68e0      	ldr	r0, [r4, #12]
 800b9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ec:	4298      	cmp	r0, r3
 800b9ee:	bfb8      	it	lt
 800b9f0:	4618      	movlt	r0, r3
 800b9f2:	e730      	b.n	800b856 <_printf_float+0xc2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	464a      	mov	r2, r9
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f af27 	beq.w	800b852 <_printf_float+0xbe>
 800ba04:	f108 0801 	add.w	r8, r8, #1
 800ba08:	e7e6      	b.n	800b9d8 <_printf_float+0x244>
 800ba0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dc39      	bgt.n	800ba84 <_printf_float+0x2f0>
 800ba10:	4a1b      	ldr	r2, [pc, #108]	; (800ba80 <_printf_float+0x2ec>)
 800ba12:	2301      	movs	r3, #1
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b8      	blx	r7
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	f43f af19 	beq.w	800b852 <_printf_float+0xbe>
 800ba20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba24:	4313      	orrs	r3, r2
 800ba26:	d102      	bne.n	800ba2e <_printf_float+0x29a>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	07d9      	lsls	r1, r3, #31
 800ba2c:	d5d8      	bpl.n	800b9e0 <_printf_float+0x24c>
 800ba2e:	ee18 3a10 	vmov	r3, s16
 800ba32:	4652      	mov	r2, sl
 800ba34:	4631      	mov	r1, r6
 800ba36:	4628      	mov	r0, r5
 800ba38:	47b8      	blx	r7
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	f43f af09 	beq.w	800b852 <_printf_float+0xbe>
 800ba40:	f04f 0900 	mov.w	r9, #0
 800ba44:	f104 0a1a 	add.w	sl, r4, #26
 800ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4a:	425b      	negs	r3, r3
 800ba4c:	454b      	cmp	r3, r9
 800ba4e:	dc01      	bgt.n	800ba54 <_printf_float+0x2c0>
 800ba50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba52:	e792      	b.n	800b97a <_printf_float+0x1e6>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4652      	mov	r2, sl
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f43f aef7 	beq.w	800b852 <_printf_float+0xbe>
 800ba64:	f109 0901 	add.w	r9, r9, #1
 800ba68:	e7ee      	b.n	800ba48 <_printf_float+0x2b4>
 800ba6a:	bf00      	nop
 800ba6c:	7fefffff 	.word	0x7fefffff
 800ba70:	0800f46c 	.word	0x0800f46c
 800ba74:	0800f470 	.word	0x0800f470
 800ba78:	0800f474 	.word	0x0800f474
 800ba7c:	0800f478 	.word	0x0800f478
 800ba80:	0800f47c 	.word	0x0800f47c
 800ba84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bfa8      	it	ge
 800ba8c:	461a      	movge	r2, r3
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	4691      	mov	r9, r2
 800ba92:	dc37      	bgt.n	800bb04 <_printf_float+0x370>
 800ba94:	f04f 0b00 	mov.w	fp, #0
 800ba98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba9c:	f104 021a 	add.w	r2, r4, #26
 800baa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800baa2:	9305      	str	r3, [sp, #20]
 800baa4:	eba3 0309 	sub.w	r3, r3, r9
 800baa8:	455b      	cmp	r3, fp
 800baaa:	dc33      	bgt.n	800bb14 <_printf_float+0x380>
 800baac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bab0:	429a      	cmp	r2, r3
 800bab2:	db3b      	blt.n	800bb2c <_printf_float+0x398>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	07da      	lsls	r2, r3, #31
 800bab8:	d438      	bmi.n	800bb2c <_printf_float+0x398>
 800baba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800babe:	eba2 0903 	sub.w	r9, r2, r3
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	1ad2      	subs	r2, r2, r3
 800bac6:	4591      	cmp	r9, r2
 800bac8:	bfa8      	it	ge
 800baca:	4691      	movge	r9, r2
 800bacc:	f1b9 0f00 	cmp.w	r9, #0
 800bad0:	dc35      	bgt.n	800bb3e <_printf_float+0x3aa>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bada:	f104 0a1a 	add.w	sl, r4, #26
 800bade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	eba3 0309 	sub.w	r3, r3, r9
 800bae8:	4543      	cmp	r3, r8
 800baea:	f77f af79 	ble.w	800b9e0 <_printf_float+0x24c>
 800baee:	2301      	movs	r3, #1
 800baf0:	4652      	mov	r2, sl
 800baf2:	4631      	mov	r1, r6
 800baf4:	4628      	mov	r0, r5
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	f43f aeaa 	beq.w	800b852 <_printf_float+0xbe>
 800bafe:	f108 0801 	add.w	r8, r8, #1
 800bb02:	e7ec      	b.n	800bade <_printf_float+0x34a>
 800bb04:	4613      	mov	r3, r2
 800bb06:	4631      	mov	r1, r6
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	47b8      	blx	r7
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d1c0      	bne.n	800ba94 <_printf_float+0x300>
 800bb12:	e69e      	b.n	800b852 <_printf_float+0xbe>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4631      	mov	r1, r6
 800bb18:	4628      	mov	r0, r5
 800bb1a:	9205      	str	r2, [sp, #20]
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f ae97 	beq.w	800b852 <_printf_float+0xbe>
 800bb24:	9a05      	ldr	r2, [sp, #20]
 800bb26:	f10b 0b01 	add.w	fp, fp, #1
 800bb2a:	e7b9      	b.n	800baa0 <_printf_float+0x30c>
 800bb2c:	ee18 3a10 	vmov	r3, s16
 800bb30:	4652      	mov	r2, sl
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d1be      	bne.n	800baba <_printf_float+0x326>
 800bb3c:	e689      	b.n	800b852 <_printf_float+0xbe>
 800bb3e:	9a05      	ldr	r2, [sp, #20]
 800bb40:	464b      	mov	r3, r9
 800bb42:	4442      	add	r2, r8
 800bb44:	4631      	mov	r1, r6
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	d1c1      	bne.n	800bad2 <_printf_float+0x33e>
 800bb4e:	e680      	b.n	800b852 <_printf_float+0xbe>
 800bb50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb52:	2a01      	cmp	r2, #1
 800bb54:	dc01      	bgt.n	800bb5a <_printf_float+0x3c6>
 800bb56:	07db      	lsls	r3, r3, #31
 800bb58:	d53a      	bpl.n	800bbd0 <_printf_float+0x43c>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b8      	blx	r7
 800bb64:	3001      	adds	r0, #1
 800bb66:	f43f ae74 	beq.w	800b852 <_printf_float+0xbe>
 800bb6a:	ee18 3a10 	vmov	r3, s16
 800bb6e:	4652      	mov	r2, sl
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	f43f ae6b 	beq.w	800b852 <_printf_float+0xbe>
 800bb7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb80:	2200      	movs	r2, #0
 800bb82:	2300      	movs	r3, #0
 800bb84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bb88:	f7f4 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb8c:	b9d8      	cbnz	r0, 800bbc6 <_printf_float+0x432>
 800bb8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bb92:	f108 0201 	add.w	r2, r8, #1
 800bb96:	4631      	mov	r1, r6
 800bb98:	4628      	mov	r0, r5
 800bb9a:	47b8      	blx	r7
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d10e      	bne.n	800bbbe <_printf_float+0x42a>
 800bba0:	e657      	b.n	800b852 <_printf_float+0xbe>
 800bba2:	2301      	movs	r3, #1
 800bba4:	4652      	mov	r2, sl
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f ae50 	beq.w	800b852 <_printf_float+0xbe>
 800bbb2:	f108 0801 	add.w	r8, r8, #1
 800bbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	4543      	cmp	r3, r8
 800bbbc:	dcf1      	bgt.n	800bba2 <_printf_float+0x40e>
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbc4:	e6da      	b.n	800b97c <_printf_float+0x1e8>
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	f104 0a1a 	add.w	sl, r4, #26
 800bbce:	e7f2      	b.n	800bbb6 <_printf_float+0x422>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4642      	mov	r2, r8
 800bbd4:	e7df      	b.n	800bb96 <_printf_float+0x402>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	464a      	mov	r2, r9
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f43f ae36 	beq.w	800b852 <_printf_float+0xbe>
 800bbe6:	f108 0801 	add.w	r8, r8, #1
 800bbea:	68e3      	ldr	r3, [r4, #12]
 800bbec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbee:	1a5b      	subs	r3, r3, r1
 800bbf0:	4543      	cmp	r3, r8
 800bbf2:	dcf0      	bgt.n	800bbd6 <_printf_float+0x442>
 800bbf4:	e6f8      	b.n	800b9e8 <_printf_float+0x254>
 800bbf6:	f04f 0800 	mov.w	r8, #0
 800bbfa:	f104 0919 	add.w	r9, r4, #25
 800bbfe:	e7f4      	b.n	800bbea <_printf_float+0x456>

0800bc00 <_printf_common>:
 800bc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc04:	4616      	mov	r6, r2
 800bc06:	4699      	mov	r9, r3
 800bc08:	688a      	ldr	r2, [r1, #8]
 800bc0a:	690b      	ldr	r3, [r1, #16]
 800bc0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc10:	4293      	cmp	r3, r2
 800bc12:	bfb8      	it	lt
 800bc14:	4613      	movlt	r3, r2
 800bc16:	6033      	str	r3, [r6, #0]
 800bc18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b10a      	cbz	r2, 800bc26 <_printf_common+0x26>
 800bc22:	3301      	adds	r3, #1
 800bc24:	6033      	str	r3, [r6, #0]
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	0699      	lsls	r1, r3, #26
 800bc2a:	bf42      	ittt	mi
 800bc2c:	6833      	ldrmi	r3, [r6, #0]
 800bc2e:	3302      	addmi	r3, #2
 800bc30:	6033      	strmi	r3, [r6, #0]
 800bc32:	6825      	ldr	r5, [r4, #0]
 800bc34:	f015 0506 	ands.w	r5, r5, #6
 800bc38:	d106      	bne.n	800bc48 <_printf_common+0x48>
 800bc3a:	f104 0a19 	add.w	sl, r4, #25
 800bc3e:	68e3      	ldr	r3, [r4, #12]
 800bc40:	6832      	ldr	r2, [r6, #0]
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	dc26      	bgt.n	800bc96 <_printf_common+0x96>
 800bc48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc4c:	1e13      	subs	r3, r2, #0
 800bc4e:	6822      	ldr	r2, [r4, #0]
 800bc50:	bf18      	it	ne
 800bc52:	2301      	movne	r3, #1
 800bc54:	0692      	lsls	r2, r2, #26
 800bc56:	d42b      	bmi.n	800bcb0 <_printf_common+0xb0>
 800bc58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4638      	mov	r0, r7
 800bc60:	47c0      	blx	r8
 800bc62:	3001      	adds	r0, #1
 800bc64:	d01e      	beq.n	800bca4 <_printf_common+0xa4>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	6922      	ldr	r2, [r4, #16]
 800bc6a:	f003 0306 	and.w	r3, r3, #6
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	bf02      	ittt	eq
 800bc72:	68e5      	ldreq	r5, [r4, #12]
 800bc74:	6833      	ldreq	r3, [r6, #0]
 800bc76:	1aed      	subeq	r5, r5, r3
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	bf0c      	ite	eq
 800bc7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc80:	2500      	movne	r5, #0
 800bc82:	4293      	cmp	r3, r2
 800bc84:	bfc4      	itt	gt
 800bc86:	1a9b      	subgt	r3, r3, r2
 800bc88:	18ed      	addgt	r5, r5, r3
 800bc8a:	2600      	movs	r6, #0
 800bc8c:	341a      	adds	r4, #26
 800bc8e:	42b5      	cmp	r5, r6
 800bc90:	d11a      	bne.n	800bcc8 <_printf_common+0xc8>
 800bc92:	2000      	movs	r0, #0
 800bc94:	e008      	b.n	800bca8 <_printf_common+0xa8>
 800bc96:	2301      	movs	r3, #1
 800bc98:	4652      	mov	r2, sl
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	47c0      	blx	r8
 800bca0:	3001      	adds	r0, #1
 800bca2:	d103      	bne.n	800bcac <_printf_common+0xac>
 800bca4:	f04f 30ff 	mov.w	r0, #4294967295
 800bca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcac:	3501      	adds	r5, #1
 800bcae:	e7c6      	b.n	800bc3e <_printf_common+0x3e>
 800bcb0:	18e1      	adds	r1, r4, r3
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	2030      	movs	r0, #48	; 0x30
 800bcb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcba:	4422      	add	r2, r4
 800bcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcc4:	3302      	adds	r3, #2
 800bcc6:	e7c7      	b.n	800bc58 <_printf_common+0x58>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	4622      	mov	r2, r4
 800bccc:	4649      	mov	r1, r9
 800bcce:	4638      	mov	r0, r7
 800bcd0:	47c0      	blx	r8
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d0e6      	beq.n	800bca4 <_printf_common+0xa4>
 800bcd6:	3601      	adds	r6, #1
 800bcd8:	e7d9      	b.n	800bc8e <_printf_common+0x8e>
	...

0800bcdc <_printf_i>:
 800bcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	7e0f      	ldrb	r7, [r1, #24]
 800bce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bce4:	2f78      	cmp	r7, #120	; 0x78
 800bce6:	4691      	mov	r9, r2
 800bce8:	4680      	mov	r8, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	469a      	mov	sl, r3
 800bcee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcf2:	d807      	bhi.n	800bd04 <_printf_i+0x28>
 800bcf4:	2f62      	cmp	r7, #98	; 0x62
 800bcf6:	d80a      	bhi.n	800bd0e <_printf_i+0x32>
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	f000 80d4 	beq.w	800bea6 <_printf_i+0x1ca>
 800bcfe:	2f58      	cmp	r7, #88	; 0x58
 800bd00:	f000 80c0 	beq.w	800be84 <_printf_i+0x1a8>
 800bd04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd0c:	e03a      	b.n	800bd84 <_printf_i+0xa8>
 800bd0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd12:	2b15      	cmp	r3, #21
 800bd14:	d8f6      	bhi.n	800bd04 <_printf_i+0x28>
 800bd16:	a101      	add	r1, pc, #4	; (adr r1, 800bd1c <_printf_i+0x40>)
 800bd18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd1c:	0800bd75 	.word	0x0800bd75
 800bd20:	0800bd89 	.word	0x0800bd89
 800bd24:	0800bd05 	.word	0x0800bd05
 800bd28:	0800bd05 	.word	0x0800bd05
 800bd2c:	0800bd05 	.word	0x0800bd05
 800bd30:	0800bd05 	.word	0x0800bd05
 800bd34:	0800bd89 	.word	0x0800bd89
 800bd38:	0800bd05 	.word	0x0800bd05
 800bd3c:	0800bd05 	.word	0x0800bd05
 800bd40:	0800bd05 	.word	0x0800bd05
 800bd44:	0800bd05 	.word	0x0800bd05
 800bd48:	0800be8d 	.word	0x0800be8d
 800bd4c:	0800bdb5 	.word	0x0800bdb5
 800bd50:	0800be47 	.word	0x0800be47
 800bd54:	0800bd05 	.word	0x0800bd05
 800bd58:	0800bd05 	.word	0x0800bd05
 800bd5c:	0800beaf 	.word	0x0800beaf
 800bd60:	0800bd05 	.word	0x0800bd05
 800bd64:	0800bdb5 	.word	0x0800bdb5
 800bd68:	0800bd05 	.word	0x0800bd05
 800bd6c:	0800bd05 	.word	0x0800bd05
 800bd70:	0800be4f 	.word	0x0800be4f
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	602a      	str	r2, [r5, #0]
 800bd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd84:	2301      	movs	r3, #1
 800bd86:	e09f      	b.n	800bec8 <_printf_i+0x1ec>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	0607      	lsls	r7, r0, #24
 800bd8e:	f103 0104 	add.w	r1, r3, #4
 800bd92:	6029      	str	r1, [r5, #0]
 800bd94:	d501      	bpl.n	800bd9a <_printf_i+0xbe>
 800bd96:	681e      	ldr	r6, [r3, #0]
 800bd98:	e003      	b.n	800bda2 <_printf_i+0xc6>
 800bd9a:	0646      	lsls	r6, r0, #25
 800bd9c:	d5fb      	bpl.n	800bd96 <_printf_i+0xba>
 800bd9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bda2:	2e00      	cmp	r6, #0
 800bda4:	da03      	bge.n	800bdae <_printf_i+0xd2>
 800bda6:	232d      	movs	r3, #45	; 0x2d
 800bda8:	4276      	negs	r6, r6
 800bdaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdae:	485a      	ldr	r0, [pc, #360]	; (800bf18 <_printf_i+0x23c>)
 800bdb0:	230a      	movs	r3, #10
 800bdb2:	e012      	b.n	800bdda <_printf_i+0xfe>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	6820      	ldr	r0, [r4, #0]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	6029      	str	r1, [r5, #0]
 800bdbc:	0605      	lsls	r5, r0, #24
 800bdbe:	d501      	bpl.n	800bdc4 <_printf_i+0xe8>
 800bdc0:	681e      	ldr	r6, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <_printf_i+0xee>
 800bdc4:	0641      	lsls	r1, r0, #25
 800bdc6:	d5fb      	bpl.n	800bdc0 <_printf_i+0xe4>
 800bdc8:	881e      	ldrh	r6, [r3, #0]
 800bdca:	4853      	ldr	r0, [pc, #332]	; (800bf18 <_printf_i+0x23c>)
 800bdcc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdce:	bf0c      	ite	eq
 800bdd0:	2308      	moveq	r3, #8
 800bdd2:	230a      	movne	r3, #10
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdda:	6865      	ldr	r5, [r4, #4]
 800bddc:	60a5      	str	r5, [r4, #8]
 800bdde:	2d00      	cmp	r5, #0
 800bde0:	bfa2      	ittt	ge
 800bde2:	6821      	ldrge	r1, [r4, #0]
 800bde4:	f021 0104 	bicge.w	r1, r1, #4
 800bde8:	6021      	strge	r1, [r4, #0]
 800bdea:	b90e      	cbnz	r6, 800bdf0 <_printf_i+0x114>
 800bdec:	2d00      	cmp	r5, #0
 800bdee:	d04b      	beq.n	800be88 <_printf_i+0x1ac>
 800bdf0:	4615      	mov	r5, r2
 800bdf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdf6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdfa:	5dc7      	ldrb	r7, [r0, r7]
 800bdfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be00:	4637      	mov	r7, r6
 800be02:	42bb      	cmp	r3, r7
 800be04:	460e      	mov	r6, r1
 800be06:	d9f4      	bls.n	800bdf2 <_printf_i+0x116>
 800be08:	2b08      	cmp	r3, #8
 800be0a:	d10b      	bne.n	800be24 <_printf_i+0x148>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	07de      	lsls	r6, r3, #31
 800be10:	d508      	bpl.n	800be24 <_printf_i+0x148>
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	6861      	ldr	r1, [r4, #4]
 800be16:	4299      	cmp	r1, r3
 800be18:	bfde      	ittt	le
 800be1a:	2330      	movle	r3, #48	; 0x30
 800be1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be24:	1b52      	subs	r2, r2, r5
 800be26:	6122      	str	r2, [r4, #16]
 800be28:	f8cd a000 	str.w	sl, [sp]
 800be2c:	464b      	mov	r3, r9
 800be2e:	aa03      	add	r2, sp, #12
 800be30:	4621      	mov	r1, r4
 800be32:	4640      	mov	r0, r8
 800be34:	f7ff fee4 	bl	800bc00 <_printf_common>
 800be38:	3001      	adds	r0, #1
 800be3a:	d14a      	bne.n	800bed2 <_printf_i+0x1f6>
 800be3c:	f04f 30ff 	mov.w	r0, #4294967295
 800be40:	b004      	add	sp, #16
 800be42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	f043 0320 	orr.w	r3, r3, #32
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	4833      	ldr	r0, [pc, #204]	; (800bf1c <_printf_i+0x240>)
 800be50:	2778      	movs	r7, #120	; 0x78
 800be52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	6829      	ldr	r1, [r5, #0]
 800be5a:	061f      	lsls	r7, r3, #24
 800be5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be60:	d402      	bmi.n	800be68 <_printf_i+0x18c>
 800be62:	065f      	lsls	r7, r3, #25
 800be64:	bf48      	it	mi
 800be66:	b2b6      	uxthmi	r6, r6
 800be68:	07df      	lsls	r7, r3, #31
 800be6a:	bf48      	it	mi
 800be6c:	f043 0320 	orrmi.w	r3, r3, #32
 800be70:	6029      	str	r1, [r5, #0]
 800be72:	bf48      	it	mi
 800be74:	6023      	strmi	r3, [r4, #0]
 800be76:	b91e      	cbnz	r6, 800be80 <_printf_i+0x1a4>
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	f023 0320 	bic.w	r3, r3, #32
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	2310      	movs	r3, #16
 800be82:	e7a7      	b.n	800bdd4 <_printf_i+0xf8>
 800be84:	4824      	ldr	r0, [pc, #144]	; (800bf18 <_printf_i+0x23c>)
 800be86:	e7e4      	b.n	800be52 <_printf_i+0x176>
 800be88:	4615      	mov	r5, r2
 800be8a:	e7bd      	b.n	800be08 <_printf_i+0x12c>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	6826      	ldr	r6, [r4, #0]
 800be90:	6961      	ldr	r1, [r4, #20]
 800be92:	1d18      	adds	r0, r3, #4
 800be94:	6028      	str	r0, [r5, #0]
 800be96:	0635      	lsls	r5, r6, #24
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	d501      	bpl.n	800bea0 <_printf_i+0x1c4>
 800be9c:	6019      	str	r1, [r3, #0]
 800be9e:	e002      	b.n	800bea6 <_printf_i+0x1ca>
 800bea0:	0670      	lsls	r0, r6, #25
 800bea2:	d5fb      	bpl.n	800be9c <_printf_i+0x1c0>
 800bea4:	8019      	strh	r1, [r3, #0]
 800bea6:	2300      	movs	r3, #0
 800bea8:	6123      	str	r3, [r4, #16]
 800beaa:	4615      	mov	r5, r2
 800beac:	e7bc      	b.n	800be28 <_printf_i+0x14c>
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	1d1a      	adds	r2, r3, #4
 800beb2:	602a      	str	r2, [r5, #0]
 800beb4:	681d      	ldr	r5, [r3, #0]
 800beb6:	6862      	ldr	r2, [r4, #4]
 800beb8:	2100      	movs	r1, #0
 800beba:	4628      	mov	r0, r5
 800bebc:	f7f4 f988 	bl	80001d0 <memchr>
 800bec0:	b108      	cbz	r0, 800bec6 <_printf_i+0x1ea>
 800bec2:	1b40      	subs	r0, r0, r5
 800bec4:	6060      	str	r0, [r4, #4]
 800bec6:	6863      	ldr	r3, [r4, #4]
 800bec8:	6123      	str	r3, [r4, #16]
 800beca:	2300      	movs	r3, #0
 800becc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed0:	e7aa      	b.n	800be28 <_printf_i+0x14c>
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	462a      	mov	r2, r5
 800bed6:	4649      	mov	r1, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	47d0      	blx	sl
 800bedc:	3001      	adds	r0, #1
 800bede:	d0ad      	beq.n	800be3c <_printf_i+0x160>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	079b      	lsls	r3, r3, #30
 800bee4:	d413      	bmi.n	800bf0e <_printf_i+0x232>
 800bee6:	68e0      	ldr	r0, [r4, #12]
 800bee8:	9b03      	ldr	r3, [sp, #12]
 800beea:	4298      	cmp	r0, r3
 800beec:	bfb8      	it	lt
 800beee:	4618      	movlt	r0, r3
 800bef0:	e7a6      	b.n	800be40 <_printf_i+0x164>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4632      	mov	r2, r6
 800bef6:	4649      	mov	r1, r9
 800bef8:	4640      	mov	r0, r8
 800befa:	47d0      	blx	sl
 800befc:	3001      	adds	r0, #1
 800befe:	d09d      	beq.n	800be3c <_printf_i+0x160>
 800bf00:	3501      	adds	r5, #1
 800bf02:	68e3      	ldr	r3, [r4, #12]
 800bf04:	9903      	ldr	r1, [sp, #12]
 800bf06:	1a5b      	subs	r3, r3, r1
 800bf08:	42ab      	cmp	r3, r5
 800bf0a:	dcf2      	bgt.n	800bef2 <_printf_i+0x216>
 800bf0c:	e7eb      	b.n	800bee6 <_printf_i+0x20a>
 800bf0e:	2500      	movs	r5, #0
 800bf10:	f104 0619 	add.w	r6, r4, #25
 800bf14:	e7f5      	b.n	800bf02 <_printf_i+0x226>
 800bf16:	bf00      	nop
 800bf18:	0800f47e 	.word	0x0800f47e
 800bf1c:	0800f48f 	.word	0x0800f48f

0800bf20 <std>:
 800bf20:	2300      	movs	r3, #0
 800bf22:	b510      	push	{r4, lr}
 800bf24:	4604      	mov	r4, r0
 800bf26:	e9c0 3300 	strd	r3, r3, [r0]
 800bf2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf2e:	6083      	str	r3, [r0, #8]
 800bf30:	8181      	strh	r1, [r0, #12]
 800bf32:	6643      	str	r3, [r0, #100]	; 0x64
 800bf34:	81c2      	strh	r2, [r0, #14]
 800bf36:	6183      	str	r3, [r0, #24]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	2208      	movs	r2, #8
 800bf3c:	305c      	adds	r0, #92	; 0x5c
 800bf3e:	f000 f914 	bl	800c16a <memset>
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <std+0x58>)
 800bf44:	6263      	str	r3, [r4, #36]	; 0x24
 800bf46:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <std+0x5c>)
 800bf48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <std+0x60>)
 800bf4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf4e:	4b0d      	ldr	r3, [pc, #52]	; (800bf84 <std+0x64>)
 800bf50:	6323      	str	r3, [r4, #48]	; 0x30
 800bf52:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <std+0x68>)
 800bf54:	6224      	str	r4, [r4, #32]
 800bf56:	429c      	cmp	r4, r3
 800bf58:	d006      	beq.n	800bf68 <std+0x48>
 800bf5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf5e:	4294      	cmp	r4, r2
 800bf60:	d002      	beq.n	800bf68 <std+0x48>
 800bf62:	33d0      	adds	r3, #208	; 0xd0
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d105      	bne.n	800bf74 <std+0x54>
 800bf68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf70:	f000 b978 	b.w	800c264 <__retarget_lock_init_recursive>
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	bf00      	nop
 800bf78:	0800c0e5 	.word	0x0800c0e5
 800bf7c:	0800c107 	.word	0x0800c107
 800bf80:	0800c13f 	.word	0x0800c13f
 800bf84:	0800c163 	.word	0x0800c163
 800bf88:	2000207c 	.word	0x2000207c

0800bf8c <stdio_exit_handler>:
 800bf8c:	4a02      	ldr	r2, [pc, #8]	; (800bf98 <stdio_exit_handler+0xc>)
 800bf8e:	4903      	ldr	r1, [pc, #12]	; (800bf9c <stdio_exit_handler+0x10>)
 800bf90:	4803      	ldr	r0, [pc, #12]	; (800bfa0 <stdio_exit_handler+0x14>)
 800bf92:	f000 b869 	b.w	800c068 <_fwalk_sglue>
 800bf96:	bf00      	nop
 800bf98:	200000fc 	.word	0x200000fc
 800bf9c:	0800dc31 	.word	0x0800dc31
 800bfa0:	20000108 	.word	0x20000108

0800bfa4 <cleanup_stdio>:
 800bfa4:	6841      	ldr	r1, [r0, #4]
 800bfa6:	4b0c      	ldr	r3, [pc, #48]	; (800bfd8 <cleanup_stdio+0x34>)
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	4604      	mov	r4, r0
 800bfae:	d001      	beq.n	800bfb4 <cleanup_stdio+0x10>
 800bfb0:	f001 fe3e 	bl	800dc30 <_fflush_r>
 800bfb4:	68a1      	ldr	r1, [r4, #8]
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <cleanup_stdio+0x38>)
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	d002      	beq.n	800bfc2 <cleanup_stdio+0x1e>
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f001 fe37 	bl	800dc30 <_fflush_r>
 800bfc2:	68e1      	ldr	r1, [r4, #12]
 800bfc4:	4b06      	ldr	r3, [pc, #24]	; (800bfe0 <cleanup_stdio+0x3c>)
 800bfc6:	4299      	cmp	r1, r3
 800bfc8:	d004      	beq.n	800bfd4 <cleanup_stdio+0x30>
 800bfca:	4620      	mov	r0, r4
 800bfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd0:	f001 be2e 	b.w	800dc30 <_fflush_r>
 800bfd4:	bd10      	pop	{r4, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000207c 	.word	0x2000207c
 800bfdc:	200020e4 	.word	0x200020e4
 800bfe0:	2000214c 	.word	0x2000214c

0800bfe4 <global_stdio_init.part.0>:
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <global_stdio_init.part.0+0x30>)
 800bfe8:	4c0b      	ldr	r4, [pc, #44]	; (800c018 <global_stdio_init.part.0+0x34>)
 800bfea:	4a0c      	ldr	r2, [pc, #48]	; (800c01c <global_stdio_init.part.0+0x38>)
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	4620      	mov	r0, r4
 800bff0:	2200      	movs	r2, #0
 800bff2:	2104      	movs	r1, #4
 800bff4:	f7ff ff94 	bl	800bf20 <std>
 800bff8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bffc:	2201      	movs	r2, #1
 800bffe:	2109      	movs	r1, #9
 800c000:	f7ff ff8e 	bl	800bf20 <std>
 800c004:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c008:	2202      	movs	r2, #2
 800c00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00e:	2112      	movs	r1, #18
 800c010:	f7ff bf86 	b.w	800bf20 <std>
 800c014:	200021b4 	.word	0x200021b4
 800c018:	2000207c 	.word	0x2000207c
 800c01c:	0800bf8d 	.word	0x0800bf8d

0800c020 <__sfp_lock_acquire>:
 800c020:	4801      	ldr	r0, [pc, #4]	; (800c028 <__sfp_lock_acquire+0x8>)
 800c022:	f000 b920 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800c026:	bf00      	nop
 800c028:	200021bd 	.word	0x200021bd

0800c02c <__sfp_lock_release>:
 800c02c:	4801      	ldr	r0, [pc, #4]	; (800c034 <__sfp_lock_release+0x8>)
 800c02e:	f000 b91b 	b.w	800c268 <__retarget_lock_release_recursive>
 800c032:	bf00      	nop
 800c034:	200021bd 	.word	0x200021bd

0800c038 <__sinit>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	4604      	mov	r4, r0
 800c03c:	f7ff fff0 	bl	800c020 <__sfp_lock_acquire>
 800c040:	6a23      	ldr	r3, [r4, #32]
 800c042:	b11b      	cbz	r3, 800c04c <__sinit+0x14>
 800c044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c048:	f7ff bff0 	b.w	800c02c <__sfp_lock_release>
 800c04c:	4b04      	ldr	r3, [pc, #16]	; (800c060 <__sinit+0x28>)
 800c04e:	6223      	str	r3, [r4, #32]
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <__sinit+0x2c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f5      	bne.n	800c044 <__sinit+0xc>
 800c058:	f7ff ffc4 	bl	800bfe4 <global_stdio_init.part.0>
 800c05c:	e7f2      	b.n	800c044 <__sinit+0xc>
 800c05e:	bf00      	nop
 800c060:	0800bfa5 	.word	0x0800bfa5
 800c064:	200021b4 	.word	0x200021b4

0800c068 <_fwalk_sglue>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4607      	mov	r7, r0
 800c06e:	4688      	mov	r8, r1
 800c070:	4614      	mov	r4, r2
 800c072:	2600      	movs	r6, #0
 800c074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c078:	f1b9 0901 	subs.w	r9, r9, #1
 800c07c:	d505      	bpl.n	800c08a <_fwalk_sglue+0x22>
 800c07e:	6824      	ldr	r4, [r4, #0]
 800c080:	2c00      	cmp	r4, #0
 800c082:	d1f7      	bne.n	800c074 <_fwalk_sglue+0xc>
 800c084:	4630      	mov	r0, r6
 800c086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d907      	bls.n	800c0a0 <_fwalk_sglue+0x38>
 800c090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c094:	3301      	adds	r3, #1
 800c096:	d003      	beq.n	800c0a0 <_fwalk_sglue+0x38>
 800c098:	4629      	mov	r1, r5
 800c09a:	4638      	mov	r0, r7
 800c09c:	47c0      	blx	r8
 800c09e:	4306      	orrs	r6, r0
 800c0a0:	3568      	adds	r5, #104	; 0x68
 800c0a2:	e7e9      	b.n	800c078 <_fwalk_sglue+0x10>

0800c0a4 <siprintf>:
 800c0a4:	b40e      	push	{r1, r2, r3}
 800c0a6:	b500      	push	{lr}
 800c0a8:	b09c      	sub	sp, #112	; 0x70
 800c0aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c0ac:	9002      	str	r0, [sp, #8]
 800c0ae:	9006      	str	r0, [sp, #24]
 800c0b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0b4:	4809      	ldr	r0, [pc, #36]	; (800c0dc <siprintf+0x38>)
 800c0b6:	9107      	str	r1, [sp, #28]
 800c0b8:	9104      	str	r1, [sp, #16]
 800c0ba:	4909      	ldr	r1, [pc, #36]	; (800c0e0 <siprintf+0x3c>)
 800c0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	6800      	ldr	r0, [r0, #0]
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	a902      	add	r1, sp, #8
 800c0c8:	f001 fc2e 	bl	800d928 <_svfiprintf_r>
 800c0cc:	9b02      	ldr	r3, [sp, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	b01c      	add	sp, #112	; 0x70
 800c0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d8:	b003      	add	sp, #12
 800c0da:	4770      	bx	lr
 800c0dc:	20000154 	.word	0x20000154
 800c0e0:	ffff0208 	.word	0xffff0208

0800c0e4 <__sread>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f86c 	bl	800c1c8 <_read_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	bfab      	itete	ge
 800c0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f8:	181b      	addge	r3, r3, r0
 800c0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0fe:	bfac      	ite	ge
 800c100:	6563      	strge	r3, [r4, #84]	; 0x54
 800c102:	81a3      	strhlt	r3, [r4, #12]
 800c104:	bd10      	pop	{r4, pc}

0800c106 <__swrite>:
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	461f      	mov	r7, r3
 800c10c:	898b      	ldrh	r3, [r1, #12]
 800c10e:	05db      	lsls	r3, r3, #23
 800c110:	4605      	mov	r5, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4616      	mov	r6, r2
 800c116:	d505      	bpl.n	800c124 <__swrite+0x1e>
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	2302      	movs	r3, #2
 800c11e:	2200      	movs	r2, #0
 800c120:	f000 f840 	bl	800c1a4 <_lseek_r>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	4632      	mov	r2, r6
 800c132:	463b      	mov	r3, r7
 800c134:	4628      	mov	r0, r5
 800c136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13a:	f000 b857 	b.w	800c1ec <_write_r>

0800c13e <__sseek>:
 800c13e:	b510      	push	{r4, lr}
 800c140:	460c      	mov	r4, r1
 800c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c146:	f000 f82d 	bl	800c1a4 <_lseek_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	bf15      	itete	ne
 800c150:	6560      	strne	r0, [r4, #84]	; 0x54
 800c152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c15a:	81a3      	strheq	r3, [r4, #12]
 800c15c:	bf18      	it	ne
 800c15e:	81a3      	strhne	r3, [r4, #12]
 800c160:	bd10      	pop	{r4, pc}

0800c162 <__sclose>:
 800c162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c166:	f000 b80d 	b.w	800c184 <_close_r>

0800c16a <memset>:
 800c16a:	4402      	add	r2, r0
 800c16c:	4603      	mov	r3, r0
 800c16e:	4293      	cmp	r3, r2
 800c170:	d100      	bne.n	800c174 <memset+0xa>
 800c172:	4770      	bx	lr
 800c174:	f803 1b01 	strb.w	r1, [r3], #1
 800c178:	e7f9      	b.n	800c16e <memset+0x4>
	...

0800c17c <_localeconv_r>:
 800c17c:	4800      	ldr	r0, [pc, #0]	; (800c180 <_localeconv_r+0x4>)
 800c17e:	4770      	bx	lr
 800c180:	20000248 	.word	0x20000248

0800c184 <_close_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	; (800c1a0 <_close_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f5 fc67 	bl	8001a62 <_close>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_close_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_close_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	200021b8 	.word	0x200021b8

0800c1a4 <_lseek_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d07      	ldr	r5, [pc, #28]	; (800c1c4 <_lseek_r+0x20>)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	4608      	mov	r0, r1
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	602a      	str	r2, [r5, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f7f5 fc7c 	bl	8001ab0 <_lseek>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_lseek_r+0x1e>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_lseek_r+0x1e>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	200021b8 	.word	0x200021b8

0800c1c8 <_read_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d07      	ldr	r5, [pc, #28]	; (800c1e8 <_read_r+0x20>)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	4608      	mov	r0, r1
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	602a      	str	r2, [r5, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7f5 fc0a 	bl	80019f0 <_read>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_read_r+0x1e>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_read_r+0x1e>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	200021b8 	.word	0x200021b8

0800c1ec <_write_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_write_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f5 fc15 	bl	8001a2a <_write>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_write_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_write_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	200021b8 	.word	0x200021b8

0800c210 <__errno>:
 800c210:	4b01      	ldr	r3, [pc, #4]	; (800c218 <__errno+0x8>)
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000154 	.word	0x20000154

0800c21c <__libc_init_array>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4d0d      	ldr	r5, [pc, #52]	; (800c254 <__libc_init_array+0x38>)
 800c220:	4c0d      	ldr	r4, [pc, #52]	; (800c258 <__libc_init_array+0x3c>)
 800c222:	1b64      	subs	r4, r4, r5
 800c224:	10a4      	asrs	r4, r4, #2
 800c226:	2600      	movs	r6, #0
 800c228:	42a6      	cmp	r6, r4
 800c22a:	d109      	bne.n	800c240 <__libc_init_array+0x24>
 800c22c:	4d0b      	ldr	r5, [pc, #44]	; (800c25c <__libc_init_array+0x40>)
 800c22e:	4c0c      	ldr	r4, [pc, #48]	; (800c260 <__libc_init_array+0x44>)
 800c230:	f003 f8d6 	bl	800f3e0 <_init>
 800c234:	1b64      	subs	r4, r4, r5
 800c236:	10a4      	asrs	r4, r4, #2
 800c238:	2600      	movs	r6, #0
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	d105      	bne.n	800c24a <__libc_init_array+0x2e>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f855 3b04 	ldr.w	r3, [r5], #4
 800c244:	4798      	blx	r3
 800c246:	3601      	adds	r6, #1
 800c248:	e7ee      	b.n	800c228 <__libc_init_array+0xc>
 800c24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24e:	4798      	blx	r3
 800c250:	3601      	adds	r6, #1
 800c252:	e7f2      	b.n	800c23a <__libc_init_array+0x1e>
 800c254:	0800f9c0 	.word	0x0800f9c0
 800c258:	0800f9c0 	.word	0x0800f9c0
 800c25c:	0800f9c0 	.word	0x0800f9c0
 800c260:	0800f9c4 	.word	0x0800f9c4

0800c264 <__retarget_lock_init_recursive>:
 800c264:	4770      	bx	lr

0800c266 <__retarget_lock_acquire_recursive>:
 800c266:	4770      	bx	lr

0800c268 <__retarget_lock_release_recursive>:
 800c268:	4770      	bx	lr

0800c26a <memcpy>:
 800c26a:	440a      	add	r2, r1
 800c26c:	4291      	cmp	r1, r2
 800c26e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c272:	d100      	bne.n	800c276 <memcpy+0xc>
 800c274:	4770      	bx	lr
 800c276:	b510      	push	{r4, lr}
 800c278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c280:	4291      	cmp	r1, r2
 800c282:	d1f9      	bne.n	800c278 <memcpy+0xe>
 800c284:	bd10      	pop	{r4, pc}

0800c286 <quorem>:
 800c286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	6903      	ldr	r3, [r0, #16]
 800c28c:	690c      	ldr	r4, [r1, #16]
 800c28e:	42a3      	cmp	r3, r4
 800c290:	4607      	mov	r7, r0
 800c292:	db7e      	blt.n	800c392 <quorem+0x10c>
 800c294:	3c01      	subs	r4, #1
 800c296:	f101 0814 	add.w	r8, r1, #20
 800c29a:	f100 0514 	add.w	r5, r0, #20
 800c29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2bc:	d331      	bcc.n	800c322 <quorem+0x9c>
 800c2be:	f04f 0e00 	mov.w	lr, #0
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	46ac      	mov	ip, r5
 800c2c6:	46f2      	mov	sl, lr
 800c2c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2cc:	b293      	uxth	r3, r2
 800c2ce:	fb06 e303 	mla	r3, r6, r3, lr
 800c2d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2d6:	0c1a      	lsrs	r2, r3, #16
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	ebaa 0303 	sub.w	r3, sl, r3
 800c2de:	f8dc a000 	ldr.w	sl, [ip]
 800c2e2:	fa13 f38a 	uxtah	r3, r3, sl
 800c2e6:	fb06 220e 	mla	r2, r6, lr, r2
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	9b00      	ldr	r3, [sp, #0]
 800c2ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2f2:	b292      	uxth	r2, r2
 800c2f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800c300:	4581      	cmp	r9, r0
 800c302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c306:	f84c 3b04 	str.w	r3, [ip], #4
 800c30a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c30e:	d2db      	bcs.n	800c2c8 <quorem+0x42>
 800c310:	f855 300b 	ldr.w	r3, [r5, fp]
 800c314:	b92b      	cbnz	r3, 800c322 <quorem+0x9c>
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	3b04      	subs	r3, #4
 800c31a:	429d      	cmp	r5, r3
 800c31c:	461a      	mov	r2, r3
 800c31e:	d32c      	bcc.n	800c37a <quorem+0xf4>
 800c320:	613c      	str	r4, [r7, #16]
 800c322:	4638      	mov	r0, r7
 800c324:	f001 f9a6 	bl	800d674 <__mcmp>
 800c328:	2800      	cmp	r0, #0
 800c32a:	db22      	blt.n	800c372 <quorem+0xec>
 800c32c:	3601      	adds	r6, #1
 800c32e:	4629      	mov	r1, r5
 800c330:	2000      	movs	r0, #0
 800c332:	f858 2b04 	ldr.w	r2, [r8], #4
 800c336:	f8d1 c000 	ldr.w	ip, [r1]
 800c33a:	b293      	uxth	r3, r2
 800c33c:	1ac3      	subs	r3, r0, r3
 800c33e:	0c12      	lsrs	r2, r2, #16
 800c340:	fa13 f38c 	uxtah	r3, r3, ip
 800c344:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c352:	45c1      	cmp	r9, r8
 800c354:	f841 3b04 	str.w	r3, [r1], #4
 800c358:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c35c:	d2e9      	bcs.n	800c332 <quorem+0xac>
 800c35e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c366:	b922      	cbnz	r2, 800c372 <quorem+0xec>
 800c368:	3b04      	subs	r3, #4
 800c36a:	429d      	cmp	r5, r3
 800c36c:	461a      	mov	r2, r3
 800c36e:	d30a      	bcc.n	800c386 <quorem+0x100>
 800c370:	613c      	str	r4, [r7, #16]
 800c372:	4630      	mov	r0, r6
 800c374:	b003      	add	sp, #12
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	3b04      	subs	r3, #4
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d1ce      	bne.n	800c320 <quorem+0x9a>
 800c382:	3c01      	subs	r4, #1
 800c384:	e7c9      	b.n	800c31a <quorem+0x94>
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	3b04      	subs	r3, #4
 800c38a:	2a00      	cmp	r2, #0
 800c38c:	d1f0      	bne.n	800c370 <quorem+0xea>
 800c38e:	3c01      	subs	r4, #1
 800c390:	e7eb      	b.n	800c36a <quorem+0xe4>
 800c392:	2000      	movs	r0, #0
 800c394:	e7ee      	b.n	800c374 <quorem+0xee>
	...

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	ed2d 8b04 	vpush	{d8-d9}
 800c3a0:	69c5      	ldr	r5, [r0, #28]
 800c3a2:	b093      	sub	sp, #76	; 0x4c
 800c3a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3a8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3b0:	9107      	str	r1, [sp, #28]
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3b8:	b975      	cbnz	r5, 800c3d8 <_dtoa_r+0x40>
 800c3ba:	2010      	movs	r0, #16
 800c3bc:	f000 fe2a 	bl	800d014 <malloc>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	61e0      	str	r0, [r4, #28]
 800c3c4:	b920      	cbnz	r0, 800c3d0 <_dtoa_r+0x38>
 800c3c6:	4bae      	ldr	r3, [pc, #696]	; (800c680 <_dtoa_r+0x2e8>)
 800c3c8:	21ef      	movs	r1, #239	; 0xef
 800c3ca:	48ae      	ldr	r0, [pc, #696]	; (800c684 <_dtoa_r+0x2ec>)
 800c3cc:	f001 fc82 	bl	800dcd4 <__assert_func>
 800c3d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3d4:	6005      	str	r5, [r0, #0]
 800c3d6:	60c5      	str	r5, [r0, #12]
 800c3d8:	69e3      	ldr	r3, [r4, #28]
 800c3da:	6819      	ldr	r1, [r3, #0]
 800c3dc:	b151      	cbz	r1, 800c3f4 <_dtoa_r+0x5c>
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	604a      	str	r2, [r1, #4]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4093      	lsls	r3, r2
 800c3e6:	608b      	str	r3, [r1, #8]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 ff07 	bl	800d1fc <_Bfree>
 800c3ee:	69e3      	ldr	r3, [r4, #28]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	1e3b      	subs	r3, r7, #0
 800c3f6:	bfbb      	ittet	lt
 800c3f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3fc:	9303      	strlt	r3, [sp, #12]
 800c3fe:	2300      	movge	r3, #0
 800c400:	2201      	movlt	r2, #1
 800c402:	bfac      	ite	ge
 800c404:	f8c8 3000 	strge.w	r3, [r8]
 800c408:	f8c8 2000 	strlt.w	r2, [r8]
 800c40c:	4b9e      	ldr	r3, [pc, #632]	; (800c688 <_dtoa_r+0x2f0>)
 800c40e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c412:	ea33 0308 	bics.w	r3, r3, r8
 800c416:	d11b      	bne.n	800c450 <_dtoa_r+0xb8>
 800c418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c41a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c424:	4333      	orrs	r3, r6
 800c426:	f000 8593 	beq.w	800cf50 <_dtoa_r+0xbb8>
 800c42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c42c:	b963      	cbnz	r3, 800c448 <_dtoa_r+0xb0>
 800c42e:	4b97      	ldr	r3, [pc, #604]	; (800c68c <_dtoa_r+0x2f4>)
 800c430:	e027      	b.n	800c482 <_dtoa_r+0xea>
 800c432:	4b97      	ldr	r3, [pc, #604]	; (800c690 <_dtoa_r+0x2f8>)
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	3308      	adds	r3, #8
 800c438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	9800      	ldr	r0, [sp, #0]
 800c43e:	b013      	add	sp, #76	; 0x4c
 800c440:	ecbd 8b04 	vpop	{d8-d9}
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	4b90      	ldr	r3, [pc, #576]	; (800c68c <_dtoa_r+0x2f4>)
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	3303      	adds	r3, #3
 800c44e:	e7f3      	b.n	800c438 <_dtoa_r+0xa0>
 800c450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c454:	2200      	movs	r2, #0
 800c456:	ec51 0b17 	vmov	r0, r1, d7
 800c45a:	eeb0 8a47 	vmov.f32	s16, s14
 800c45e:	eef0 8a67 	vmov.f32	s17, s15
 800c462:	2300      	movs	r3, #0
 800c464:	f7f4 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800c468:	4681      	mov	r9, r0
 800c46a:	b160      	cbz	r0, 800c486 <_dtoa_r+0xee>
 800c46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c46e:	2301      	movs	r3, #1
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 8568 	beq.w	800cf4a <_dtoa_r+0xbb2>
 800c47a:	4b86      	ldr	r3, [pc, #536]	; (800c694 <_dtoa_r+0x2fc>)
 800c47c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	3b01      	subs	r3, #1
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	e7da      	b.n	800c43c <_dtoa_r+0xa4>
 800c486:	aa10      	add	r2, sp, #64	; 0x40
 800c488:	a911      	add	r1, sp, #68	; 0x44
 800c48a:	4620      	mov	r0, r4
 800c48c:	eeb0 0a48 	vmov.f32	s0, s16
 800c490:	eef0 0a68 	vmov.f32	s1, s17
 800c494:	f001 f994 	bl	800d7c0 <__d2b>
 800c498:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c49c:	4682      	mov	sl, r0
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	d07f      	beq.n	800c5a2 <_dtoa_r+0x20a>
 800c4a2:	ee18 3a90 	vmov	r3, s17
 800c4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4ae:	ec51 0b18 	vmov	r0, r1, d8
 800c4b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4be:	4619      	mov	r1, r3
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b75      	ldr	r3, [pc, #468]	; (800c698 <_dtoa_r+0x300>)
 800c4c4:	f7f3 fee0 	bl	8000288 <__aeabi_dsub>
 800c4c8:	a367      	add	r3, pc, #412	; (adr r3, 800c668 <_dtoa_r+0x2d0>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f893 	bl	80005f8 <__aeabi_dmul>
 800c4d2:	a367      	add	r3, pc, #412	; (adr r3, 800c670 <_dtoa_r+0x2d8>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f3 fed8 	bl	800028c <__adddf3>
 800c4dc:	4606      	mov	r6, r0
 800c4de:	4628      	mov	r0, r5
 800c4e0:	460f      	mov	r7, r1
 800c4e2:	f7f4 f81f 	bl	8000524 <__aeabi_i2d>
 800c4e6:	a364      	add	r3, pc, #400	; (adr r3, 800c678 <_dtoa_r+0x2e0>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f3 fec8 	bl	800028c <__adddf3>
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	460f      	mov	r7, r1
 800c500:	f7f4 fb2a 	bl	8000b58 <__aeabi_d2iz>
 800c504:	2200      	movs	r2, #0
 800c506:	4683      	mov	fp, r0
 800c508:	2300      	movs	r3, #0
 800c50a:	4630      	mov	r0, r6
 800c50c:	4639      	mov	r1, r7
 800c50e:	f7f4 fae5 	bl	8000adc <__aeabi_dcmplt>
 800c512:	b148      	cbz	r0, 800c528 <_dtoa_r+0x190>
 800c514:	4658      	mov	r0, fp
 800c516:	f7f4 f805 	bl	8000524 <__aeabi_i2d>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f4 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c522:	b908      	cbnz	r0, 800c528 <_dtoa_r+0x190>
 800c524:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c528:	f1bb 0f16 	cmp.w	fp, #22
 800c52c:	d857      	bhi.n	800c5de <_dtoa_r+0x246>
 800c52e:	4b5b      	ldr	r3, [pc, #364]	; (800c69c <_dtoa_r+0x304>)
 800c530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	ec51 0b18 	vmov	r0, r1, d8
 800c53c:	f7f4 face 	bl	8000adc <__aeabi_dcmplt>
 800c540:	2800      	cmp	r0, #0
 800c542:	d04e      	beq.n	800c5e2 <_dtoa_r+0x24a>
 800c544:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c548:	2300      	movs	r3, #0
 800c54a:	930c      	str	r3, [sp, #48]	; 0x30
 800c54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c54e:	1b5b      	subs	r3, r3, r5
 800c550:	1e5a      	subs	r2, r3, #1
 800c552:	bf45      	ittet	mi
 800c554:	f1c3 0301 	rsbmi	r3, r3, #1
 800c558:	9305      	strmi	r3, [sp, #20]
 800c55a:	2300      	movpl	r3, #0
 800c55c:	2300      	movmi	r3, #0
 800c55e:	9206      	str	r2, [sp, #24]
 800c560:	bf54      	ite	pl
 800c562:	9305      	strpl	r3, [sp, #20]
 800c564:	9306      	strmi	r3, [sp, #24]
 800c566:	f1bb 0f00 	cmp.w	fp, #0
 800c56a:	db3c      	blt.n	800c5e6 <_dtoa_r+0x24e>
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c572:	445b      	add	r3, fp
 800c574:	9306      	str	r3, [sp, #24]
 800c576:	2300      	movs	r3, #0
 800c578:	9308      	str	r3, [sp, #32]
 800c57a:	9b07      	ldr	r3, [sp, #28]
 800c57c:	2b09      	cmp	r3, #9
 800c57e:	d868      	bhi.n	800c652 <_dtoa_r+0x2ba>
 800c580:	2b05      	cmp	r3, #5
 800c582:	bfc4      	itt	gt
 800c584:	3b04      	subgt	r3, #4
 800c586:	9307      	strgt	r3, [sp, #28]
 800c588:	9b07      	ldr	r3, [sp, #28]
 800c58a:	f1a3 0302 	sub.w	r3, r3, #2
 800c58e:	bfcc      	ite	gt
 800c590:	2500      	movgt	r5, #0
 800c592:	2501      	movle	r5, #1
 800c594:	2b03      	cmp	r3, #3
 800c596:	f200 8085 	bhi.w	800c6a4 <_dtoa_r+0x30c>
 800c59a:	e8df f003 	tbb	[pc, r3]
 800c59e:	3b2e      	.short	0x3b2e
 800c5a0:	5839      	.short	0x5839
 800c5a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5a6:	441d      	add	r5, r3
 800c5a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	bfc1      	itttt	gt
 800c5b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5c0:	bfd6      	itet	le
 800c5c2:	f1c3 0320 	rsble	r3, r3, #32
 800c5c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c5ca:	fa06 f003 	lslle.w	r0, r6, r3
 800c5ce:	f7f3 ff99 	bl	8000504 <__aeabi_ui2d>
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c5d8:	3d01      	subs	r5, #1
 800c5da:	920e      	str	r2, [sp, #56]	; 0x38
 800c5dc:	e76f      	b.n	800c4be <_dtoa_r+0x126>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e7b3      	b.n	800c54a <_dtoa_r+0x1b2>
 800c5e2:	900c      	str	r0, [sp, #48]	; 0x30
 800c5e4:	e7b2      	b.n	800c54c <_dtoa_r+0x1b4>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	eba3 030b 	sub.w	r3, r3, fp
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	f1cb 0300 	rsb	r3, fp, #0
 800c5f2:	9308      	str	r3, [sp, #32]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5f8:	e7bf      	b.n	800c57a <_dtoa_r+0x1e2>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c600:	2b00      	cmp	r3, #0
 800c602:	dc52      	bgt.n	800c6aa <_dtoa_r+0x312>
 800c604:	2301      	movs	r3, #1
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	461a      	mov	r2, r3
 800c60c:	920a      	str	r2, [sp, #40]	; 0x28
 800c60e:	e00b      	b.n	800c628 <_dtoa_r+0x290>
 800c610:	2301      	movs	r3, #1
 800c612:	e7f3      	b.n	800c5fc <_dtoa_r+0x264>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c61a:	445b      	add	r3, fp
 800c61c:	9301      	str	r3, [sp, #4]
 800c61e:	3301      	adds	r3, #1
 800c620:	2b01      	cmp	r3, #1
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	bfb8      	it	lt
 800c626:	2301      	movlt	r3, #1
 800c628:	69e0      	ldr	r0, [r4, #28]
 800c62a:	2100      	movs	r1, #0
 800c62c:	2204      	movs	r2, #4
 800c62e:	f102 0614 	add.w	r6, r2, #20
 800c632:	429e      	cmp	r6, r3
 800c634:	d93d      	bls.n	800c6b2 <_dtoa_r+0x31a>
 800c636:	6041      	str	r1, [r0, #4]
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 fd9f 	bl	800d17c <_Balloc>
 800c63e:	9000      	str	r0, [sp, #0]
 800c640:	2800      	cmp	r0, #0
 800c642:	d139      	bne.n	800c6b8 <_dtoa_r+0x320>
 800c644:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <_dtoa_r+0x308>)
 800c646:	4602      	mov	r2, r0
 800c648:	f240 11af 	movw	r1, #431	; 0x1af
 800c64c:	e6bd      	b.n	800c3ca <_dtoa_r+0x32>
 800c64e:	2301      	movs	r3, #1
 800c650:	e7e1      	b.n	800c616 <_dtoa_r+0x27e>
 800c652:	2501      	movs	r5, #1
 800c654:	2300      	movs	r3, #0
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	9509      	str	r5, [sp, #36]	; 0x24
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	2200      	movs	r2, #0
 800c664:	2312      	movs	r3, #18
 800c666:	e7d1      	b.n	800c60c <_dtoa_r+0x274>
 800c668:	636f4361 	.word	0x636f4361
 800c66c:	3fd287a7 	.word	0x3fd287a7
 800c670:	8b60c8b3 	.word	0x8b60c8b3
 800c674:	3fc68a28 	.word	0x3fc68a28
 800c678:	509f79fb 	.word	0x509f79fb
 800c67c:	3fd34413 	.word	0x3fd34413
 800c680:	0800f4ad 	.word	0x0800f4ad
 800c684:	0800f4c4 	.word	0x0800f4c4
 800c688:	7ff00000 	.word	0x7ff00000
 800c68c:	0800f4a9 	.word	0x0800f4a9
 800c690:	0800f4a0 	.word	0x0800f4a0
 800c694:	0800f47d 	.word	0x0800f47d
 800c698:	3ff80000 	.word	0x3ff80000
 800c69c:	0800f5b0 	.word	0x0800f5b0
 800c6a0:	0800f51c 	.word	0x0800f51c
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	e7d7      	b.n	800c65a <_dtoa_r+0x2c2>
 800c6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	e7ba      	b.n	800c628 <_dtoa_r+0x290>
 800c6b2:	3101      	adds	r1, #1
 800c6b4:	0052      	lsls	r2, r2, #1
 800c6b6:	e7ba      	b.n	800c62e <_dtoa_r+0x296>
 800c6b8:	69e3      	ldr	r3, [r4, #28]
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	2b0e      	cmp	r3, #14
 800c6c2:	f200 80a8 	bhi.w	800c816 <_dtoa_r+0x47e>
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	f000 80a5 	beq.w	800c816 <_dtoa_r+0x47e>
 800c6cc:	f1bb 0f00 	cmp.w	fp, #0
 800c6d0:	dd38      	ble.n	800c744 <_dtoa_r+0x3ac>
 800c6d2:	4bc0      	ldr	r3, [pc, #768]	; (800c9d4 <_dtoa_r+0x63c>)
 800c6d4:	f00b 020f 	and.w	r2, fp, #15
 800c6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c6e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c6e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c6e8:	d019      	beq.n	800c71e <_dtoa_r+0x386>
 800c6ea:	4bbb      	ldr	r3, [pc, #748]	; (800c9d8 <_dtoa_r+0x640>)
 800c6ec:	ec51 0b18 	vmov	r0, r1, d8
 800c6f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6f4:	f7f4 f8aa 	bl	800084c <__aeabi_ddiv>
 800c6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6fc:	f008 080f 	and.w	r8, r8, #15
 800c700:	2503      	movs	r5, #3
 800c702:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c9d8 <_dtoa_r+0x640>
 800c706:	f1b8 0f00 	cmp.w	r8, #0
 800c70a:	d10a      	bne.n	800c722 <_dtoa_r+0x38a>
 800c70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c710:	4632      	mov	r2, r6
 800c712:	463b      	mov	r3, r7
 800c714:	f7f4 f89a 	bl	800084c <__aeabi_ddiv>
 800c718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c71c:	e02b      	b.n	800c776 <_dtoa_r+0x3de>
 800c71e:	2502      	movs	r5, #2
 800c720:	e7ef      	b.n	800c702 <_dtoa_r+0x36a>
 800c722:	f018 0f01 	tst.w	r8, #1
 800c726:	d008      	beq.n	800c73a <_dtoa_r+0x3a2>
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c730:	f7f3 ff62 	bl	80005f8 <__aeabi_dmul>
 800c734:	3501      	adds	r5, #1
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c73e:	f109 0908 	add.w	r9, r9, #8
 800c742:	e7e0      	b.n	800c706 <_dtoa_r+0x36e>
 800c744:	f000 809f 	beq.w	800c886 <_dtoa_r+0x4ee>
 800c748:	f1cb 0600 	rsb	r6, fp, #0
 800c74c:	4ba1      	ldr	r3, [pc, #644]	; (800c9d4 <_dtoa_r+0x63c>)
 800c74e:	4fa2      	ldr	r7, [pc, #648]	; (800c9d8 <_dtoa_r+0x640>)
 800c750:	f006 020f 	and.w	r2, r6, #15
 800c754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	ec51 0b18 	vmov	r0, r1, d8
 800c760:	f7f3 ff4a 	bl	80005f8 <__aeabi_dmul>
 800c764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c768:	1136      	asrs	r6, r6, #4
 800c76a:	2300      	movs	r3, #0
 800c76c:	2502      	movs	r5, #2
 800c76e:	2e00      	cmp	r6, #0
 800c770:	d17e      	bne.n	800c870 <_dtoa_r+0x4d8>
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1d0      	bne.n	800c718 <_dtoa_r+0x380>
 800c776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c778:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 8084 	beq.w	800c88a <_dtoa_r+0x4f2>
 800c782:	4b96      	ldr	r3, [pc, #600]	; (800c9dc <_dtoa_r+0x644>)
 800c784:	2200      	movs	r2, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f4 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d07b      	beq.n	800c88a <_dtoa_r+0x4f2>
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d078      	beq.n	800c88a <_dtoa_r+0x4f2>
 800c798:	9b01      	ldr	r3, [sp, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd39      	ble.n	800c812 <_dtoa_r+0x47a>
 800c79e:	4b90      	ldr	r3, [pc, #576]	; (800c9e0 <_dtoa_r+0x648>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f3 ff27 	bl	80005f8 <__aeabi_dmul>
 800c7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ae:	9e01      	ldr	r6, [sp, #4]
 800c7b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f7f3 feb2 	bl	8000524 <__aeabi_i2d>
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	f7f3 ff18 	bl	80005f8 <__aeabi_dmul>
 800c7c8:	4b86      	ldr	r3, [pc, #536]	; (800c9e4 <_dtoa_r+0x64c>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f7f3 fd5e 	bl	800028c <__adddf3>
 800c7d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d8:	9303      	str	r3, [sp, #12]
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d158      	bne.n	800c890 <_dtoa_r+0x4f8>
 800c7de:	4b82      	ldr	r3, [pc, #520]	; (800c9e8 <_dtoa_r+0x650>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f3 fd4f 	bl	8000288 <__aeabi_dsub>
 800c7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	f7f4 f991 	bl	8000b18 <__aeabi_dcmpgt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f040 8296 	bne.w	800cd28 <_dtoa_r+0x990>
 800c7fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c800:	4640      	mov	r0, r8
 800c802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c806:	4649      	mov	r1, r9
 800c808:	f7f4 f968 	bl	8000adc <__aeabi_dcmplt>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f040 8289 	bne.w	800cd24 <_dtoa_r+0x98c>
 800c812:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f2c0 814e 	blt.w	800caba <_dtoa_r+0x722>
 800c81e:	f1bb 0f0e 	cmp.w	fp, #14
 800c822:	f300 814a 	bgt.w	800caba <_dtoa_r+0x722>
 800c826:	4b6b      	ldr	r3, [pc, #428]	; (800c9d4 <_dtoa_r+0x63c>)
 800c828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c832:	2b00      	cmp	r3, #0
 800c834:	f280 80dc 	bge.w	800c9f0 <_dtoa_r+0x658>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f300 80d8 	bgt.w	800c9f0 <_dtoa_r+0x658>
 800c840:	f040 826f 	bne.w	800cd22 <_dtoa_r+0x98a>
 800c844:	4b68      	ldr	r3, [pc, #416]	; (800c9e8 <_dtoa_r+0x650>)
 800c846:	2200      	movs	r2, #0
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f3 fed4 	bl	80005f8 <__aeabi_dmul>
 800c850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c854:	f7f4 f956 	bl	8000b04 <__aeabi_dcmpge>
 800c858:	9e04      	ldr	r6, [sp, #16]
 800c85a:	4637      	mov	r7, r6
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f040 8245 	bne.w	800ccec <_dtoa_r+0x954>
 800c862:	9d00      	ldr	r5, [sp, #0]
 800c864:	2331      	movs	r3, #49	; 0x31
 800c866:	f805 3b01 	strb.w	r3, [r5], #1
 800c86a:	f10b 0b01 	add.w	fp, fp, #1
 800c86e:	e241      	b.n	800ccf4 <_dtoa_r+0x95c>
 800c870:	07f2      	lsls	r2, r6, #31
 800c872:	d505      	bpl.n	800c880 <_dtoa_r+0x4e8>
 800c874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c878:	f7f3 febe 	bl	80005f8 <__aeabi_dmul>
 800c87c:	3501      	adds	r5, #1
 800c87e:	2301      	movs	r3, #1
 800c880:	1076      	asrs	r6, r6, #1
 800c882:	3708      	adds	r7, #8
 800c884:	e773      	b.n	800c76e <_dtoa_r+0x3d6>
 800c886:	2502      	movs	r5, #2
 800c888:	e775      	b.n	800c776 <_dtoa_r+0x3de>
 800c88a:	9e04      	ldr	r6, [sp, #16]
 800c88c:	465f      	mov	r7, fp
 800c88e:	e792      	b.n	800c7b6 <_dtoa_r+0x41e>
 800c890:	9900      	ldr	r1, [sp, #0]
 800c892:	4b50      	ldr	r3, [pc, #320]	; (800c9d4 <_dtoa_r+0x63c>)
 800c894:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c898:	4431      	add	r1, r6
 800c89a:	9102      	str	r1, [sp, #8]
 800c89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c89e:	eeb0 9a47 	vmov.f32	s18, s14
 800c8a2:	eef0 9a67 	vmov.f32	s19, s15
 800c8a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8ae:	2900      	cmp	r1, #0
 800c8b0:	d044      	beq.n	800c93c <_dtoa_r+0x5a4>
 800c8b2:	494e      	ldr	r1, [pc, #312]	; (800c9ec <_dtoa_r+0x654>)
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	f7f3 ffc9 	bl	800084c <__aeabi_ddiv>
 800c8ba:	ec53 2b19 	vmov	r2, r3, d9
 800c8be:	f7f3 fce3 	bl	8000288 <__aeabi_dsub>
 800c8c2:	9d00      	ldr	r5, [sp, #0]
 800c8c4:	ec41 0b19 	vmov	d9, r0, r1
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	f7f4 f944 	bl	8000b58 <__aeabi_d2iz>
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	f7f3 fe27 	bl	8000524 <__aeabi_i2d>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fcd3 	bl	8000288 <__aeabi_dsub>
 800c8e2:	3630      	adds	r6, #48	; 0x30
 800c8e4:	f805 6b01 	strb.w	r6, [r5], #1
 800c8e8:	ec53 2b19 	vmov	r2, r3, d9
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	f7f4 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d164      	bne.n	800c9c2 <_dtoa_r+0x62a>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	4937      	ldr	r1, [pc, #220]	; (800c9dc <_dtoa_r+0x644>)
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7f3 fcc2 	bl	8000288 <__aeabi_dsub>
 800c904:	ec53 2b19 	vmov	r2, r3, d9
 800c908:	f7f4 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	f040 80b6 	bne.w	800ca7e <_dtoa_r+0x6e6>
 800c912:	9b02      	ldr	r3, [sp, #8]
 800c914:	429d      	cmp	r5, r3
 800c916:	f43f af7c 	beq.w	800c812 <_dtoa_r+0x47a>
 800c91a:	4b31      	ldr	r3, [pc, #196]	; (800c9e0 <_dtoa_r+0x648>)
 800c91c:	ec51 0b19 	vmov	r0, r1, d9
 800c920:	2200      	movs	r2, #0
 800c922:	f7f3 fe69 	bl	80005f8 <__aeabi_dmul>
 800c926:	4b2e      	ldr	r3, [pc, #184]	; (800c9e0 <_dtoa_r+0x648>)
 800c928:	ec41 0b19 	vmov	d9, r0, r1
 800c92c:	2200      	movs	r2, #0
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fe61 	bl	80005f8 <__aeabi_dmul>
 800c936:	4680      	mov	r8, r0
 800c938:	4689      	mov	r9, r1
 800c93a:	e7c5      	b.n	800c8c8 <_dtoa_r+0x530>
 800c93c:	ec51 0b17 	vmov	r0, r1, d7
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	9d00      	ldr	r5, [sp, #0]
 800c948:	930f      	str	r3, [sp, #60]	; 0x3c
 800c94a:	ec41 0b19 	vmov	d9, r0, r1
 800c94e:	4649      	mov	r1, r9
 800c950:	4640      	mov	r0, r8
 800c952:	f7f4 f901 	bl	8000b58 <__aeabi_d2iz>
 800c956:	4606      	mov	r6, r0
 800c958:	f7f3 fde4 	bl	8000524 <__aeabi_i2d>
 800c95c:	3630      	adds	r6, #48	; 0x30
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f3 fc8f 	bl	8000288 <__aeabi_dsub>
 800c96a:	f805 6b01 	strb.w	r6, [r5], #1
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	429d      	cmp	r5, r3
 800c972:	4680      	mov	r8, r0
 800c974:	4689      	mov	r9, r1
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	d124      	bne.n	800c9c6 <_dtoa_r+0x62e>
 800c97c:	4b1b      	ldr	r3, [pc, #108]	; (800c9ec <_dtoa_r+0x654>)
 800c97e:	ec51 0b19 	vmov	r0, r1, d9
 800c982:	f7f3 fc83 	bl	800028c <__adddf3>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f4 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800c992:	2800      	cmp	r0, #0
 800c994:	d173      	bne.n	800ca7e <_dtoa_r+0x6e6>
 800c996:	ec53 2b19 	vmov	r2, r3, d9
 800c99a:	4914      	ldr	r1, [pc, #80]	; (800c9ec <_dtoa_r+0x654>)
 800c99c:	2000      	movs	r0, #0
 800c99e:	f7f3 fc73 	bl	8000288 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f4 f897 	bl	8000adc <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f af2f 	beq.w	800c812 <_dtoa_r+0x47a>
 800c9b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9b6:	1e6b      	subs	r3, r5, #1
 800c9b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9be:	2b30      	cmp	r3, #48	; 0x30
 800c9c0:	d0f8      	beq.n	800c9b4 <_dtoa_r+0x61c>
 800c9c2:	46bb      	mov	fp, r7
 800c9c4:	e04a      	b.n	800ca5c <_dtoa_r+0x6c4>
 800c9c6:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <_dtoa_r+0x648>)
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	e7bd      	b.n	800c94e <_dtoa_r+0x5b6>
 800c9d2:	bf00      	nop
 800c9d4:	0800f5b0 	.word	0x0800f5b0
 800c9d8:	0800f588 	.word	0x0800f588
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	40240000 	.word	0x40240000
 800c9e4:	401c0000 	.word	0x401c0000
 800c9e8:	40140000 	.word	0x40140000
 800c9ec:	3fe00000 	.word	0x3fe00000
 800c9f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9f4:	9d00      	ldr	r5, [sp, #0]
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	f7f3 ff25 	bl	800084c <__aeabi_ddiv>
 800ca02:	f7f4 f8a9 	bl	8000b58 <__aeabi_d2iz>
 800ca06:	9001      	str	r0, [sp, #4]
 800ca08:	f7f3 fd8c 	bl	8000524 <__aeabi_i2d>
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	f7f3 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4630      	mov	r0, r6
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	f7f3 fc34 	bl	8000288 <__aeabi_dsub>
 800ca20:	9e01      	ldr	r6, [sp, #4]
 800ca22:	9f04      	ldr	r7, [sp, #16]
 800ca24:	3630      	adds	r6, #48	; 0x30
 800ca26:	f805 6b01 	strb.w	r6, [r5], #1
 800ca2a:	9e00      	ldr	r6, [sp, #0]
 800ca2c:	1bae      	subs	r6, r5, r6
 800ca2e:	42b7      	cmp	r7, r6
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	d134      	bne.n	800caa0 <_dtoa_r+0x708>
 800ca36:	f7f3 fc29 	bl	800028c <__adddf3>
 800ca3a:	4642      	mov	r2, r8
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460f      	mov	r7, r1
 800ca42:	f7f4 f869 	bl	8000b18 <__aeabi_dcmpgt>
 800ca46:	b9c8      	cbnz	r0, 800ca7c <_dtoa_r+0x6e4>
 800ca48:	4642      	mov	r2, r8
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f4 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca54:	b110      	cbz	r0, 800ca5c <_dtoa_r+0x6c4>
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	07db      	lsls	r3, r3, #31
 800ca5a:	d40f      	bmi.n	800ca7c <_dtoa_r+0x6e4>
 800ca5c:	4651      	mov	r1, sl
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fbcc 	bl	800d1fc <_Bfree>
 800ca64:	2300      	movs	r3, #0
 800ca66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca68:	702b      	strb	r3, [r5, #0]
 800ca6a:	f10b 0301 	add.w	r3, fp, #1
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f43f ace2 	beq.w	800c43c <_dtoa_r+0xa4>
 800ca78:	601d      	str	r5, [r3, #0]
 800ca7a:	e4df      	b.n	800c43c <_dtoa_r+0xa4>
 800ca7c:	465f      	mov	r7, fp
 800ca7e:	462b      	mov	r3, r5
 800ca80:	461d      	mov	r5, r3
 800ca82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca86:	2a39      	cmp	r2, #57	; 0x39
 800ca88:	d106      	bne.n	800ca98 <_dtoa_r+0x700>
 800ca8a:	9a00      	ldr	r2, [sp, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d1f7      	bne.n	800ca80 <_dtoa_r+0x6e8>
 800ca90:	9900      	ldr	r1, [sp, #0]
 800ca92:	2230      	movs	r2, #48	; 0x30
 800ca94:	3701      	adds	r7, #1
 800ca96:	700a      	strb	r2, [r1, #0]
 800ca98:	781a      	ldrb	r2, [r3, #0]
 800ca9a:	3201      	adds	r2, #1
 800ca9c:	701a      	strb	r2, [r3, #0]
 800ca9e:	e790      	b.n	800c9c2 <_dtoa_r+0x62a>
 800caa0:	4ba3      	ldr	r3, [pc, #652]	; (800cd30 <_dtoa_r+0x998>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	f7f3 fda8 	bl	80005f8 <__aeabi_dmul>
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4606      	mov	r6, r0
 800caae:	460f      	mov	r7, r1
 800cab0:	f7f4 f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d09e      	beq.n	800c9f6 <_dtoa_r+0x65e>
 800cab8:	e7d0      	b.n	800ca5c <_dtoa_r+0x6c4>
 800caba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	f000 80ca 	beq.w	800cc56 <_dtoa_r+0x8be>
 800cac2:	9a07      	ldr	r2, [sp, #28]
 800cac4:	2a01      	cmp	r2, #1
 800cac6:	f300 80ad 	bgt.w	800cc24 <_dtoa_r+0x88c>
 800caca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cacc:	2a00      	cmp	r2, #0
 800cace:	f000 80a5 	beq.w	800cc1c <_dtoa_r+0x884>
 800cad2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cad6:	9e08      	ldr	r6, [sp, #32]
 800cad8:	9d05      	ldr	r5, [sp, #20]
 800cada:	9a05      	ldr	r2, [sp, #20]
 800cadc:	441a      	add	r2, r3
 800cade:	9205      	str	r2, [sp, #20]
 800cae0:	9a06      	ldr	r2, [sp, #24]
 800cae2:	2101      	movs	r1, #1
 800cae4:	441a      	add	r2, r3
 800cae6:	4620      	mov	r0, r4
 800cae8:	9206      	str	r2, [sp, #24]
 800caea:	f000 fc3d 	bl	800d368 <__i2b>
 800caee:	4607      	mov	r7, r0
 800caf0:	b165      	cbz	r5, 800cb0c <_dtoa_r+0x774>
 800caf2:	9b06      	ldr	r3, [sp, #24]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dd09      	ble.n	800cb0c <_dtoa_r+0x774>
 800caf8:	42ab      	cmp	r3, r5
 800cafa:	9a05      	ldr	r2, [sp, #20]
 800cafc:	bfa8      	it	ge
 800cafe:	462b      	movge	r3, r5
 800cb00:	1ad2      	subs	r2, r2, r3
 800cb02:	9205      	str	r2, [sp, #20]
 800cb04:	9a06      	ldr	r2, [sp, #24]
 800cb06:	1aed      	subs	r5, r5, r3
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	9306      	str	r3, [sp, #24]
 800cb0c:	9b08      	ldr	r3, [sp, #32]
 800cb0e:	b1f3      	cbz	r3, 800cb4e <_dtoa_r+0x7b6>
 800cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 80a3 	beq.w	800cc5e <_dtoa_r+0x8c6>
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	dd10      	ble.n	800cb3e <_dtoa_r+0x7a6>
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	4632      	mov	r2, r6
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 fce1 	bl	800d4e8 <__pow5mult>
 800cb26:	4652      	mov	r2, sl
 800cb28:	4601      	mov	r1, r0
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 fc31 	bl	800d394 <__multiply>
 800cb32:	4651      	mov	r1, sl
 800cb34:	4680      	mov	r8, r0
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 fb60 	bl	800d1fc <_Bfree>
 800cb3c:	46c2      	mov	sl, r8
 800cb3e:	9b08      	ldr	r3, [sp, #32]
 800cb40:	1b9a      	subs	r2, r3, r6
 800cb42:	d004      	beq.n	800cb4e <_dtoa_r+0x7b6>
 800cb44:	4651      	mov	r1, sl
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 fcce 	bl	800d4e8 <__pow5mult>
 800cb4c:	4682      	mov	sl, r0
 800cb4e:	2101      	movs	r1, #1
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fc09 	bl	800d368 <__i2b>
 800cb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	f340 8081 	ble.w	800cc62 <_dtoa_r+0x8ca>
 800cb60:	461a      	mov	r2, r3
 800cb62:	4601      	mov	r1, r0
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fcbf 	bl	800d4e8 <__pow5mult>
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	dd7a      	ble.n	800cc68 <_dtoa_r+0x8d0>
 800cb72:	f04f 0800 	mov.w	r8, #0
 800cb76:	6933      	ldr	r3, [r6, #16]
 800cb78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb7c:	6918      	ldr	r0, [r3, #16]
 800cb7e:	f000 fba5 	bl	800d2cc <__hi0bits>
 800cb82:	f1c0 0020 	rsb	r0, r0, #32
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	4418      	add	r0, r3
 800cb8a:	f010 001f 	ands.w	r0, r0, #31
 800cb8e:	f000 8094 	beq.w	800ccba <_dtoa_r+0x922>
 800cb92:	f1c0 0320 	rsb	r3, r0, #32
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	f340 8085 	ble.w	800cca6 <_dtoa_r+0x90e>
 800cb9c:	9b05      	ldr	r3, [sp, #20]
 800cb9e:	f1c0 001c 	rsb	r0, r0, #28
 800cba2:	4403      	add	r3, r0
 800cba4:	9305      	str	r3, [sp, #20]
 800cba6:	9b06      	ldr	r3, [sp, #24]
 800cba8:	4403      	add	r3, r0
 800cbaa:	4405      	add	r5, r0
 800cbac:	9306      	str	r3, [sp, #24]
 800cbae:	9b05      	ldr	r3, [sp, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dd05      	ble.n	800cbc0 <_dtoa_r+0x828>
 800cbb4:	4651      	mov	r1, sl
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fcef 	bl	800d59c <__lshift>
 800cbbe:	4682      	mov	sl, r0
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	dd05      	ble.n	800cbd2 <_dtoa_r+0x83a>
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fce6 	bl	800d59c <__lshift>
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d072      	beq.n	800ccbe <_dtoa_r+0x926>
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f000 fd4a 	bl	800d674 <__mcmp>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	da6c      	bge.n	800ccbe <_dtoa_r+0x926>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4651      	mov	r1, sl
 800cbe8:	220a      	movs	r2, #10
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 fb28 	bl	800d240 <__multadd>
 800cbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 81b0 	beq.w	800cf5e <_dtoa_r+0xbc6>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4639      	mov	r1, r7
 800cc02:	220a      	movs	r2, #10
 800cc04:	4620      	mov	r0, r4
 800cc06:	f000 fb1b 	bl	800d240 <__multadd>
 800cc0a:	9b01      	ldr	r3, [sp, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	4607      	mov	r7, r0
 800cc10:	f300 8096 	bgt.w	800cd40 <_dtoa_r+0x9a8>
 800cc14:	9b07      	ldr	r3, [sp, #28]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	dc59      	bgt.n	800ccce <_dtoa_r+0x936>
 800cc1a:	e091      	b.n	800cd40 <_dtoa_r+0x9a8>
 800cc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc22:	e758      	b.n	800cad6 <_dtoa_r+0x73e>
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	1e5e      	subs	r6, r3, #1
 800cc28:	9b08      	ldr	r3, [sp, #32]
 800cc2a:	42b3      	cmp	r3, r6
 800cc2c:	bfbf      	itttt	lt
 800cc2e:	9b08      	ldrlt	r3, [sp, #32]
 800cc30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc32:	9608      	strlt	r6, [sp, #32]
 800cc34:	1af3      	sublt	r3, r6, r3
 800cc36:	bfb4      	ite	lt
 800cc38:	18d2      	addlt	r2, r2, r3
 800cc3a:	1b9e      	subge	r6, r3, r6
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	bfbc      	itt	lt
 800cc40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc42:	2600      	movlt	r6, #0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bfb7      	itett	lt
 800cc48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc50:	1a9d      	sublt	r5, r3, r2
 800cc52:	2300      	movlt	r3, #0
 800cc54:	e741      	b.n	800cada <_dtoa_r+0x742>
 800cc56:	9e08      	ldr	r6, [sp, #32]
 800cc58:	9d05      	ldr	r5, [sp, #20]
 800cc5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc5c:	e748      	b.n	800caf0 <_dtoa_r+0x758>
 800cc5e:	9a08      	ldr	r2, [sp, #32]
 800cc60:	e770      	b.n	800cb44 <_dtoa_r+0x7ac>
 800cc62:	9b07      	ldr	r3, [sp, #28]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	dc19      	bgt.n	800cc9c <_dtoa_r+0x904>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	b9bb      	cbnz	r3, 800cc9c <_dtoa_r+0x904>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc72:	b99b      	cbnz	r3, 800cc9c <_dtoa_r+0x904>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc7a:	0d1b      	lsrs	r3, r3, #20
 800cc7c:	051b      	lsls	r3, r3, #20
 800cc7e:	b183      	cbz	r3, 800cca2 <_dtoa_r+0x90a>
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	3301      	adds	r3, #1
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b06      	ldr	r3, [sp, #24]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	9306      	str	r3, [sp, #24]
 800cc8c:	f04f 0801 	mov.w	r8, #1
 800cc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f47f af6f 	bne.w	800cb76 <_dtoa_r+0x7de>
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e774      	b.n	800cb86 <_dtoa_r+0x7ee>
 800cc9c:	f04f 0800 	mov.w	r8, #0
 800cca0:	e7f6      	b.n	800cc90 <_dtoa_r+0x8f8>
 800cca2:	4698      	mov	r8, r3
 800cca4:	e7f4      	b.n	800cc90 <_dtoa_r+0x8f8>
 800cca6:	d082      	beq.n	800cbae <_dtoa_r+0x816>
 800cca8:	9a05      	ldr	r2, [sp, #20]
 800ccaa:	331c      	adds	r3, #28
 800ccac:	441a      	add	r2, r3
 800ccae:	9205      	str	r2, [sp, #20]
 800ccb0:	9a06      	ldr	r2, [sp, #24]
 800ccb2:	441a      	add	r2, r3
 800ccb4:	441d      	add	r5, r3
 800ccb6:	9206      	str	r2, [sp, #24]
 800ccb8:	e779      	b.n	800cbae <_dtoa_r+0x816>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	e7f4      	b.n	800cca8 <_dtoa_r+0x910>
 800ccbe:	9b04      	ldr	r3, [sp, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dc37      	bgt.n	800cd34 <_dtoa_r+0x99c>
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	dd34      	ble.n	800cd34 <_dtoa_r+0x99c>
 800ccca:	9b04      	ldr	r3, [sp, #16]
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	b963      	cbnz	r3, 800ccec <_dtoa_r+0x954>
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	2205      	movs	r2, #5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f000 fab2 	bl	800d240 <__multadd>
 800ccdc:	4601      	mov	r1, r0
 800ccde:	4606      	mov	r6, r0
 800cce0:	4650      	mov	r0, sl
 800cce2:	f000 fcc7 	bl	800d674 <__mcmp>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	f73f adbb 	bgt.w	800c862 <_dtoa_r+0x4ca>
 800ccec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccee:	9d00      	ldr	r5, [sp, #0]
 800ccf0:	ea6f 0b03 	mvn.w	fp, r3
 800ccf4:	f04f 0800 	mov.w	r8, #0
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fa7e 	bl	800d1fc <_Bfree>
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	f43f aeab 	beq.w	800ca5c <_dtoa_r+0x6c4>
 800cd06:	f1b8 0f00 	cmp.w	r8, #0
 800cd0a:	d005      	beq.n	800cd18 <_dtoa_r+0x980>
 800cd0c:	45b8      	cmp	r8, r7
 800cd0e:	d003      	beq.n	800cd18 <_dtoa_r+0x980>
 800cd10:	4641      	mov	r1, r8
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fa72 	bl	800d1fc <_Bfree>
 800cd18:	4639      	mov	r1, r7
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f000 fa6e 	bl	800d1fc <_Bfree>
 800cd20:	e69c      	b.n	800ca5c <_dtoa_r+0x6c4>
 800cd22:	2600      	movs	r6, #0
 800cd24:	4637      	mov	r7, r6
 800cd26:	e7e1      	b.n	800ccec <_dtoa_r+0x954>
 800cd28:	46bb      	mov	fp, r7
 800cd2a:	4637      	mov	r7, r6
 800cd2c:	e599      	b.n	800c862 <_dtoa_r+0x4ca>
 800cd2e:	bf00      	nop
 800cd30:	40240000 	.word	0x40240000
 800cd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80c8 	beq.w	800cecc <_dtoa_r+0xb34>
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	dd05      	ble.n	800cd50 <_dtoa_r+0x9b8>
 800cd44:	4639      	mov	r1, r7
 800cd46:	462a      	mov	r2, r5
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f000 fc27 	bl	800d59c <__lshift>
 800cd4e:	4607      	mov	r7, r0
 800cd50:	f1b8 0f00 	cmp.w	r8, #0
 800cd54:	d05b      	beq.n	800ce0e <_dtoa_r+0xa76>
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 fa0f 	bl	800d17c <_Balloc>
 800cd5e:	4605      	mov	r5, r0
 800cd60:	b928      	cbnz	r0, 800cd6e <_dtoa_r+0x9d6>
 800cd62:	4b83      	ldr	r3, [pc, #524]	; (800cf70 <_dtoa_r+0xbd8>)
 800cd64:	4602      	mov	r2, r0
 800cd66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cd6a:	f7ff bb2e 	b.w	800c3ca <_dtoa_r+0x32>
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	3202      	adds	r2, #2
 800cd72:	0092      	lsls	r2, r2, #2
 800cd74:	f107 010c 	add.w	r1, r7, #12
 800cd78:	300c      	adds	r0, #12
 800cd7a:	f7ff fa76 	bl	800c26a <memcpy>
 800cd7e:	2201      	movs	r2, #1
 800cd80:	4629      	mov	r1, r5
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fc0a 	bl	800d59c <__lshift>
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd92:	4413      	add	r3, r2
 800cd94:	9308      	str	r3, [sp, #32]
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	46b8      	mov	r8, r7
 800cd9e:	9306      	str	r3, [sp, #24]
 800cda0:	4607      	mov	r7, r0
 800cda2:	9b04      	ldr	r3, [sp, #16]
 800cda4:	4631      	mov	r1, r6
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4650      	mov	r0, sl
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	f7ff fa6b 	bl	800c286 <quorem>
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	9002      	str	r0, [sp, #8]
 800cdb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdb8:	4650      	mov	r0, sl
 800cdba:	f000 fc5b 	bl	800d674 <__mcmp>
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	9005      	str	r0, [sp, #20]
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 fc71 	bl	800d6ac <__mdiff>
 800cdca:	68c2      	ldr	r2, [r0, #12]
 800cdcc:	4605      	mov	r5, r0
 800cdce:	bb02      	cbnz	r2, 800ce12 <_dtoa_r+0xa7a>
 800cdd0:	4601      	mov	r1, r0
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	f000 fc4e 	bl	800d674 <__mcmp>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	4629      	mov	r1, r5
 800cddc:	4620      	mov	r0, r4
 800cdde:	9209      	str	r2, [sp, #36]	; 0x24
 800cde0:	f000 fa0c 	bl	800d1fc <_Bfree>
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde8:	9d04      	ldr	r5, [sp, #16]
 800cdea:	ea43 0102 	orr.w	r1, r3, r2
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	4319      	orrs	r1, r3
 800cdf2:	d110      	bne.n	800ce16 <_dtoa_r+0xa7e>
 800cdf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdf8:	d029      	beq.n	800ce4e <_dtoa_r+0xab6>
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dd02      	ble.n	800ce06 <_dtoa_r+0xa6e>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	f883 9000 	strb.w	r9, [r3]
 800ce0c:	e774      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce0e:	4638      	mov	r0, r7
 800ce10:	e7ba      	b.n	800cd88 <_dtoa_r+0x9f0>
 800ce12:	2201      	movs	r2, #1
 800ce14:	e7e1      	b.n	800cdda <_dtoa_r+0xa42>
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	db04      	blt.n	800ce26 <_dtoa_r+0xa8e>
 800ce1c:	9907      	ldr	r1, [sp, #28]
 800ce1e:	430b      	orrs	r3, r1
 800ce20:	9906      	ldr	r1, [sp, #24]
 800ce22:	430b      	orrs	r3, r1
 800ce24:	d120      	bne.n	800ce68 <_dtoa_r+0xad0>
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	dded      	ble.n	800ce06 <_dtoa_r+0xa6e>
 800ce2a:	4651      	mov	r1, sl
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 fbb4 	bl	800d59c <__lshift>
 800ce34:	4631      	mov	r1, r6
 800ce36:	4682      	mov	sl, r0
 800ce38:	f000 fc1c 	bl	800d674 <__mcmp>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	dc03      	bgt.n	800ce48 <_dtoa_r+0xab0>
 800ce40:	d1e1      	bne.n	800ce06 <_dtoa_r+0xa6e>
 800ce42:	f019 0f01 	tst.w	r9, #1
 800ce46:	d0de      	beq.n	800ce06 <_dtoa_r+0xa6e>
 800ce48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce4c:	d1d8      	bne.n	800ce00 <_dtoa_r+0xa68>
 800ce4e:	9a01      	ldr	r2, [sp, #4]
 800ce50:	2339      	movs	r3, #57	; 0x39
 800ce52:	7013      	strb	r3, [r2, #0]
 800ce54:	462b      	mov	r3, r5
 800ce56:	461d      	mov	r5, r3
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce5e:	2a39      	cmp	r2, #57	; 0x39
 800ce60:	d06c      	beq.n	800cf3c <_dtoa_r+0xba4>
 800ce62:	3201      	adds	r2, #1
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	e747      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce68:	2a00      	cmp	r2, #0
 800ce6a:	dd07      	ble.n	800ce7c <_dtoa_r+0xae4>
 800ce6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce70:	d0ed      	beq.n	800ce4e <_dtoa_r+0xab6>
 800ce72:	9a01      	ldr	r2, [sp, #4]
 800ce74:	f109 0301 	add.w	r3, r9, #1
 800ce78:	7013      	strb	r3, [r2, #0]
 800ce7a:	e73d      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	9a08      	ldr	r2, [sp, #32]
 800ce80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d043      	beq.n	800cf10 <_dtoa_r+0xb78>
 800ce88:	4651      	mov	r1, sl
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 f9d6 	bl	800d240 <__multadd>
 800ce94:	45b8      	cmp	r8, r7
 800ce96:	4682      	mov	sl, r0
 800ce98:	f04f 0300 	mov.w	r3, #0
 800ce9c:	f04f 020a 	mov.w	r2, #10
 800cea0:	4641      	mov	r1, r8
 800cea2:	4620      	mov	r0, r4
 800cea4:	d107      	bne.n	800ceb6 <_dtoa_r+0xb1e>
 800cea6:	f000 f9cb 	bl	800d240 <__multadd>
 800ceaa:	4680      	mov	r8, r0
 800ceac:	4607      	mov	r7, r0
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	e775      	b.n	800cda2 <_dtoa_r+0xa0a>
 800ceb6:	f000 f9c3 	bl	800d240 <__multadd>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4680      	mov	r8, r0
 800cebe:	2300      	movs	r3, #0
 800cec0:	220a      	movs	r2, #10
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 f9bc 	bl	800d240 <__multadd>
 800cec8:	4607      	mov	r7, r0
 800ceca:	e7f0      	b.n	800ceae <_dtoa_r+0xb16>
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	9d00      	ldr	r5, [sp, #0]
 800ced2:	4631      	mov	r1, r6
 800ced4:	4650      	mov	r0, sl
 800ced6:	f7ff f9d6 	bl	800c286 <quorem>
 800ceda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	f805 9b01 	strb.w	r9, [r5], #1
 800cee4:	1aea      	subs	r2, r5, r3
 800cee6:	9b01      	ldr	r3, [sp, #4]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	dd07      	ble.n	800cefc <_dtoa_r+0xb64>
 800ceec:	4651      	mov	r1, sl
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f9a4 	bl	800d240 <__multadd>
 800cef8:	4682      	mov	sl, r0
 800cefa:	e7ea      	b.n	800ced2 <_dtoa_r+0xb3a>
 800cefc:	9b01      	ldr	r3, [sp, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	bfc8      	it	gt
 800cf02:	461d      	movgt	r5, r3
 800cf04:	9b00      	ldr	r3, [sp, #0]
 800cf06:	bfd8      	it	le
 800cf08:	2501      	movle	r5, #1
 800cf0a:	441d      	add	r5, r3
 800cf0c:	f04f 0800 	mov.w	r8, #0
 800cf10:	4651      	mov	r1, sl
 800cf12:	2201      	movs	r2, #1
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 fb41 	bl	800d59c <__lshift>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	f000 fba9 	bl	800d674 <__mcmp>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dc96      	bgt.n	800ce54 <_dtoa_r+0xabc>
 800cf26:	d102      	bne.n	800cf2e <_dtoa_r+0xb96>
 800cf28:	f019 0f01 	tst.w	r9, #1
 800cf2c:	d192      	bne.n	800ce54 <_dtoa_r+0xabc>
 800cf2e:	462b      	mov	r3, r5
 800cf30:	461d      	mov	r5, r3
 800cf32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf36:	2a30      	cmp	r2, #48	; 0x30
 800cf38:	d0fa      	beq.n	800cf30 <_dtoa_r+0xb98>
 800cf3a:	e6dd      	b.n	800ccf8 <_dtoa_r+0x960>
 800cf3c:	9a00      	ldr	r2, [sp, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d189      	bne.n	800ce56 <_dtoa_r+0xabe>
 800cf42:	f10b 0b01 	add.w	fp, fp, #1
 800cf46:	2331      	movs	r3, #49	; 0x31
 800cf48:	e796      	b.n	800ce78 <_dtoa_r+0xae0>
 800cf4a:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <_dtoa_r+0xbdc>)
 800cf4c:	f7ff ba99 	b.w	800c482 <_dtoa_r+0xea>
 800cf50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f47f aa6d 	bne.w	800c432 <_dtoa_r+0x9a>
 800cf58:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <_dtoa_r+0xbe0>)
 800cf5a:	f7ff ba92 	b.w	800c482 <_dtoa_r+0xea>
 800cf5e:	9b01      	ldr	r3, [sp, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dcb5      	bgt.n	800ced0 <_dtoa_r+0xb38>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	f73f aeb1 	bgt.w	800ccce <_dtoa_r+0x936>
 800cf6c:	e7b0      	b.n	800ced0 <_dtoa_r+0xb38>
 800cf6e:	bf00      	nop
 800cf70:	0800f51c 	.word	0x0800f51c
 800cf74:	0800f47c 	.word	0x0800f47c
 800cf78:	0800f4a0 	.word	0x0800f4a0

0800cf7c <_free_r>:
 800cf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	d044      	beq.n	800d00c <_free_r+0x90>
 800cf82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf86:	9001      	str	r0, [sp, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf8e:	bfb8      	it	lt
 800cf90:	18e4      	addlt	r4, r4, r3
 800cf92:	f000 f8e7 	bl	800d164 <__malloc_lock>
 800cf96:	4a1e      	ldr	r2, [pc, #120]	; (800d010 <_free_r+0x94>)
 800cf98:	9801      	ldr	r0, [sp, #4]
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	b933      	cbnz	r3, 800cfac <_free_r+0x30>
 800cf9e:	6063      	str	r3, [r4, #4]
 800cfa0:	6014      	str	r4, [r2, #0]
 800cfa2:	b003      	add	sp, #12
 800cfa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfa8:	f000 b8e2 	b.w	800d170 <__malloc_unlock>
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	d908      	bls.n	800cfc2 <_free_r+0x46>
 800cfb0:	6825      	ldr	r5, [r4, #0]
 800cfb2:	1961      	adds	r1, r4, r5
 800cfb4:	428b      	cmp	r3, r1
 800cfb6:	bf01      	itttt	eq
 800cfb8:	6819      	ldreq	r1, [r3, #0]
 800cfba:	685b      	ldreq	r3, [r3, #4]
 800cfbc:	1949      	addeq	r1, r1, r5
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	e7ed      	b.n	800cf9e <_free_r+0x22>
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	b10b      	cbz	r3, 800cfcc <_free_r+0x50>
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	d9fa      	bls.n	800cfc2 <_free_r+0x46>
 800cfcc:	6811      	ldr	r1, [r2, #0]
 800cfce:	1855      	adds	r5, r2, r1
 800cfd0:	42a5      	cmp	r5, r4
 800cfd2:	d10b      	bne.n	800cfec <_free_r+0x70>
 800cfd4:	6824      	ldr	r4, [r4, #0]
 800cfd6:	4421      	add	r1, r4
 800cfd8:	1854      	adds	r4, r2, r1
 800cfda:	42a3      	cmp	r3, r4
 800cfdc:	6011      	str	r1, [r2, #0]
 800cfde:	d1e0      	bne.n	800cfa2 <_free_r+0x26>
 800cfe0:	681c      	ldr	r4, [r3, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	6053      	str	r3, [r2, #4]
 800cfe6:	440c      	add	r4, r1
 800cfe8:	6014      	str	r4, [r2, #0]
 800cfea:	e7da      	b.n	800cfa2 <_free_r+0x26>
 800cfec:	d902      	bls.n	800cff4 <_free_r+0x78>
 800cfee:	230c      	movs	r3, #12
 800cff0:	6003      	str	r3, [r0, #0]
 800cff2:	e7d6      	b.n	800cfa2 <_free_r+0x26>
 800cff4:	6825      	ldr	r5, [r4, #0]
 800cff6:	1961      	adds	r1, r4, r5
 800cff8:	428b      	cmp	r3, r1
 800cffa:	bf04      	itt	eq
 800cffc:	6819      	ldreq	r1, [r3, #0]
 800cffe:	685b      	ldreq	r3, [r3, #4]
 800d000:	6063      	str	r3, [r4, #4]
 800d002:	bf04      	itt	eq
 800d004:	1949      	addeq	r1, r1, r5
 800d006:	6021      	streq	r1, [r4, #0]
 800d008:	6054      	str	r4, [r2, #4]
 800d00a:	e7ca      	b.n	800cfa2 <_free_r+0x26>
 800d00c:	b003      	add	sp, #12
 800d00e:	bd30      	pop	{r4, r5, pc}
 800d010:	200021c0 	.word	0x200021c0

0800d014 <malloc>:
 800d014:	4b02      	ldr	r3, [pc, #8]	; (800d020 <malloc+0xc>)
 800d016:	4601      	mov	r1, r0
 800d018:	6818      	ldr	r0, [r3, #0]
 800d01a:	f000 b823 	b.w	800d064 <_malloc_r>
 800d01e:	bf00      	nop
 800d020:	20000154 	.word	0x20000154

0800d024 <sbrk_aligned>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4e0e      	ldr	r6, [pc, #56]	; (800d060 <sbrk_aligned+0x3c>)
 800d028:	460c      	mov	r4, r1
 800d02a:	6831      	ldr	r1, [r6, #0]
 800d02c:	4605      	mov	r5, r0
 800d02e:	b911      	cbnz	r1, 800d036 <sbrk_aligned+0x12>
 800d030:	f000 fe40 	bl	800dcb4 <_sbrk_r>
 800d034:	6030      	str	r0, [r6, #0]
 800d036:	4621      	mov	r1, r4
 800d038:	4628      	mov	r0, r5
 800d03a:	f000 fe3b 	bl	800dcb4 <_sbrk_r>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	d00a      	beq.n	800d058 <sbrk_aligned+0x34>
 800d042:	1cc4      	adds	r4, r0, #3
 800d044:	f024 0403 	bic.w	r4, r4, #3
 800d048:	42a0      	cmp	r0, r4
 800d04a:	d007      	beq.n	800d05c <sbrk_aligned+0x38>
 800d04c:	1a21      	subs	r1, r4, r0
 800d04e:	4628      	mov	r0, r5
 800d050:	f000 fe30 	bl	800dcb4 <_sbrk_r>
 800d054:	3001      	adds	r0, #1
 800d056:	d101      	bne.n	800d05c <sbrk_aligned+0x38>
 800d058:	f04f 34ff 	mov.w	r4, #4294967295
 800d05c:	4620      	mov	r0, r4
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	200021c4 	.word	0x200021c4

0800d064 <_malloc_r>:
 800d064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d068:	1ccd      	adds	r5, r1, #3
 800d06a:	f025 0503 	bic.w	r5, r5, #3
 800d06e:	3508      	adds	r5, #8
 800d070:	2d0c      	cmp	r5, #12
 800d072:	bf38      	it	cc
 800d074:	250c      	movcc	r5, #12
 800d076:	2d00      	cmp	r5, #0
 800d078:	4607      	mov	r7, r0
 800d07a:	db01      	blt.n	800d080 <_malloc_r+0x1c>
 800d07c:	42a9      	cmp	r1, r5
 800d07e:	d905      	bls.n	800d08c <_malloc_r+0x28>
 800d080:	230c      	movs	r3, #12
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	2600      	movs	r6, #0
 800d086:	4630      	mov	r0, r6
 800d088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d08c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d160 <_malloc_r+0xfc>
 800d090:	f000 f868 	bl	800d164 <__malloc_lock>
 800d094:	f8d8 3000 	ldr.w	r3, [r8]
 800d098:	461c      	mov	r4, r3
 800d09a:	bb5c      	cbnz	r4, 800d0f4 <_malloc_r+0x90>
 800d09c:	4629      	mov	r1, r5
 800d09e:	4638      	mov	r0, r7
 800d0a0:	f7ff ffc0 	bl	800d024 <sbrk_aligned>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	d155      	bne.n	800d156 <_malloc_r+0xf2>
 800d0aa:	f8d8 4000 	ldr.w	r4, [r8]
 800d0ae:	4626      	mov	r6, r4
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	d145      	bne.n	800d140 <_malloc_r+0xdc>
 800d0b4:	2c00      	cmp	r4, #0
 800d0b6:	d048      	beq.n	800d14a <_malloc_r+0xe6>
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4638      	mov	r0, r7
 800d0be:	eb04 0903 	add.w	r9, r4, r3
 800d0c2:	f000 fdf7 	bl	800dcb4 <_sbrk_r>
 800d0c6:	4581      	cmp	r9, r0
 800d0c8:	d13f      	bne.n	800d14a <_malloc_r+0xe6>
 800d0ca:	6821      	ldr	r1, [r4, #0]
 800d0cc:	1a6d      	subs	r5, r5, r1
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	f7ff ffa7 	bl	800d024 <sbrk_aligned>
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	d037      	beq.n	800d14a <_malloc_r+0xe6>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	442b      	add	r3, r5
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d038      	beq.n	800d15a <_malloc_r+0xf6>
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	42a2      	cmp	r2, r4
 800d0ec:	d12b      	bne.n	800d146 <_malloc_r+0xe2>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	605a      	str	r2, [r3, #4]
 800d0f2:	e00f      	b.n	800d114 <_malloc_r+0xb0>
 800d0f4:	6822      	ldr	r2, [r4, #0]
 800d0f6:	1b52      	subs	r2, r2, r5
 800d0f8:	d41f      	bmi.n	800d13a <_malloc_r+0xd6>
 800d0fa:	2a0b      	cmp	r2, #11
 800d0fc:	d917      	bls.n	800d12e <_malloc_r+0xca>
 800d0fe:	1961      	adds	r1, r4, r5
 800d100:	42a3      	cmp	r3, r4
 800d102:	6025      	str	r5, [r4, #0]
 800d104:	bf18      	it	ne
 800d106:	6059      	strne	r1, [r3, #4]
 800d108:	6863      	ldr	r3, [r4, #4]
 800d10a:	bf08      	it	eq
 800d10c:	f8c8 1000 	streq.w	r1, [r8]
 800d110:	5162      	str	r2, [r4, r5]
 800d112:	604b      	str	r3, [r1, #4]
 800d114:	4638      	mov	r0, r7
 800d116:	f104 060b 	add.w	r6, r4, #11
 800d11a:	f000 f829 	bl	800d170 <__malloc_unlock>
 800d11e:	f026 0607 	bic.w	r6, r6, #7
 800d122:	1d23      	adds	r3, r4, #4
 800d124:	1af2      	subs	r2, r6, r3
 800d126:	d0ae      	beq.n	800d086 <_malloc_r+0x22>
 800d128:	1b9b      	subs	r3, r3, r6
 800d12a:	50a3      	str	r3, [r4, r2]
 800d12c:	e7ab      	b.n	800d086 <_malloc_r+0x22>
 800d12e:	42a3      	cmp	r3, r4
 800d130:	6862      	ldr	r2, [r4, #4]
 800d132:	d1dd      	bne.n	800d0f0 <_malloc_r+0x8c>
 800d134:	f8c8 2000 	str.w	r2, [r8]
 800d138:	e7ec      	b.n	800d114 <_malloc_r+0xb0>
 800d13a:	4623      	mov	r3, r4
 800d13c:	6864      	ldr	r4, [r4, #4]
 800d13e:	e7ac      	b.n	800d09a <_malloc_r+0x36>
 800d140:	4634      	mov	r4, r6
 800d142:	6876      	ldr	r6, [r6, #4]
 800d144:	e7b4      	b.n	800d0b0 <_malloc_r+0x4c>
 800d146:	4613      	mov	r3, r2
 800d148:	e7cc      	b.n	800d0e4 <_malloc_r+0x80>
 800d14a:	230c      	movs	r3, #12
 800d14c:	603b      	str	r3, [r7, #0]
 800d14e:	4638      	mov	r0, r7
 800d150:	f000 f80e 	bl	800d170 <__malloc_unlock>
 800d154:	e797      	b.n	800d086 <_malloc_r+0x22>
 800d156:	6025      	str	r5, [r4, #0]
 800d158:	e7dc      	b.n	800d114 <_malloc_r+0xb0>
 800d15a:	605b      	str	r3, [r3, #4]
 800d15c:	deff      	udf	#255	; 0xff
 800d15e:	bf00      	nop
 800d160:	200021c0 	.word	0x200021c0

0800d164 <__malloc_lock>:
 800d164:	4801      	ldr	r0, [pc, #4]	; (800d16c <__malloc_lock+0x8>)
 800d166:	f7ff b87e 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800d16a:	bf00      	nop
 800d16c:	200021bc 	.word	0x200021bc

0800d170 <__malloc_unlock>:
 800d170:	4801      	ldr	r0, [pc, #4]	; (800d178 <__malloc_unlock+0x8>)
 800d172:	f7ff b879 	b.w	800c268 <__retarget_lock_release_recursive>
 800d176:	bf00      	nop
 800d178:	200021bc 	.word	0x200021bc

0800d17c <_Balloc>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	69c6      	ldr	r6, [r0, #28]
 800d180:	4604      	mov	r4, r0
 800d182:	460d      	mov	r5, r1
 800d184:	b976      	cbnz	r6, 800d1a4 <_Balloc+0x28>
 800d186:	2010      	movs	r0, #16
 800d188:	f7ff ff44 	bl	800d014 <malloc>
 800d18c:	4602      	mov	r2, r0
 800d18e:	61e0      	str	r0, [r4, #28]
 800d190:	b920      	cbnz	r0, 800d19c <_Balloc+0x20>
 800d192:	4b18      	ldr	r3, [pc, #96]	; (800d1f4 <_Balloc+0x78>)
 800d194:	4818      	ldr	r0, [pc, #96]	; (800d1f8 <_Balloc+0x7c>)
 800d196:	216b      	movs	r1, #107	; 0x6b
 800d198:	f000 fd9c 	bl	800dcd4 <__assert_func>
 800d19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a0:	6006      	str	r6, [r0, #0]
 800d1a2:	60c6      	str	r6, [r0, #12]
 800d1a4:	69e6      	ldr	r6, [r4, #28]
 800d1a6:	68f3      	ldr	r3, [r6, #12]
 800d1a8:	b183      	cbz	r3, 800d1cc <_Balloc+0x50>
 800d1aa:	69e3      	ldr	r3, [r4, #28]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1b2:	b9b8      	cbnz	r0, 800d1e4 <_Balloc+0x68>
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	fa01 f605 	lsl.w	r6, r1, r5
 800d1ba:	1d72      	adds	r2, r6, #5
 800d1bc:	0092      	lsls	r2, r2, #2
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 fda6 	bl	800dd10 <_calloc_r>
 800d1c4:	b160      	cbz	r0, 800d1e0 <_Balloc+0x64>
 800d1c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1ca:	e00e      	b.n	800d1ea <_Balloc+0x6e>
 800d1cc:	2221      	movs	r2, #33	; 0x21
 800d1ce:	2104      	movs	r1, #4
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fd9d 	bl	800dd10 <_calloc_r>
 800d1d6:	69e3      	ldr	r3, [r4, #28]
 800d1d8:	60f0      	str	r0, [r6, #12]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1e4      	bne.n	800d1aa <_Balloc+0x2e>
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	6802      	ldr	r2, [r0, #0]
 800d1e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1f0:	e7f7      	b.n	800d1e2 <_Balloc+0x66>
 800d1f2:	bf00      	nop
 800d1f4:	0800f4ad 	.word	0x0800f4ad
 800d1f8:	0800f52d 	.word	0x0800f52d

0800d1fc <_Bfree>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	69c6      	ldr	r6, [r0, #28]
 800d200:	4605      	mov	r5, r0
 800d202:	460c      	mov	r4, r1
 800d204:	b976      	cbnz	r6, 800d224 <_Bfree+0x28>
 800d206:	2010      	movs	r0, #16
 800d208:	f7ff ff04 	bl	800d014 <malloc>
 800d20c:	4602      	mov	r2, r0
 800d20e:	61e8      	str	r0, [r5, #28]
 800d210:	b920      	cbnz	r0, 800d21c <_Bfree+0x20>
 800d212:	4b09      	ldr	r3, [pc, #36]	; (800d238 <_Bfree+0x3c>)
 800d214:	4809      	ldr	r0, [pc, #36]	; (800d23c <_Bfree+0x40>)
 800d216:	218f      	movs	r1, #143	; 0x8f
 800d218:	f000 fd5c 	bl	800dcd4 <__assert_func>
 800d21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d220:	6006      	str	r6, [r0, #0]
 800d222:	60c6      	str	r6, [r0, #12]
 800d224:	b13c      	cbz	r4, 800d236 <_Bfree+0x3a>
 800d226:	69eb      	ldr	r3, [r5, #28]
 800d228:	6862      	ldr	r2, [r4, #4]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d230:	6021      	str	r1, [r4, #0]
 800d232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d236:	bd70      	pop	{r4, r5, r6, pc}
 800d238:	0800f4ad 	.word	0x0800f4ad
 800d23c:	0800f52d 	.word	0x0800f52d

0800d240 <__multadd>:
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	690d      	ldr	r5, [r1, #16]
 800d246:	4607      	mov	r7, r0
 800d248:	460c      	mov	r4, r1
 800d24a:	461e      	mov	r6, r3
 800d24c:	f101 0c14 	add.w	ip, r1, #20
 800d250:	2000      	movs	r0, #0
 800d252:	f8dc 3000 	ldr.w	r3, [ip]
 800d256:	b299      	uxth	r1, r3
 800d258:	fb02 6101 	mla	r1, r2, r1, r6
 800d25c:	0c1e      	lsrs	r6, r3, #16
 800d25e:	0c0b      	lsrs	r3, r1, #16
 800d260:	fb02 3306 	mla	r3, r2, r6, r3
 800d264:	b289      	uxth	r1, r1
 800d266:	3001      	adds	r0, #1
 800d268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d26c:	4285      	cmp	r5, r0
 800d26e:	f84c 1b04 	str.w	r1, [ip], #4
 800d272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d276:	dcec      	bgt.n	800d252 <__multadd+0x12>
 800d278:	b30e      	cbz	r6, 800d2be <__multadd+0x7e>
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	42ab      	cmp	r3, r5
 800d27e:	dc19      	bgt.n	800d2b4 <__multadd+0x74>
 800d280:	6861      	ldr	r1, [r4, #4]
 800d282:	4638      	mov	r0, r7
 800d284:	3101      	adds	r1, #1
 800d286:	f7ff ff79 	bl	800d17c <_Balloc>
 800d28a:	4680      	mov	r8, r0
 800d28c:	b928      	cbnz	r0, 800d29a <__multadd+0x5a>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b0c      	ldr	r3, [pc, #48]	; (800d2c4 <__multadd+0x84>)
 800d292:	480d      	ldr	r0, [pc, #52]	; (800d2c8 <__multadd+0x88>)
 800d294:	21ba      	movs	r1, #186	; 0xba
 800d296:	f000 fd1d 	bl	800dcd4 <__assert_func>
 800d29a:	6922      	ldr	r2, [r4, #16]
 800d29c:	3202      	adds	r2, #2
 800d29e:	f104 010c 	add.w	r1, r4, #12
 800d2a2:	0092      	lsls	r2, r2, #2
 800d2a4:	300c      	adds	r0, #12
 800d2a6:	f7fe ffe0 	bl	800c26a <memcpy>
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff ffa5 	bl	800d1fc <_Bfree>
 800d2b2:	4644      	mov	r4, r8
 800d2b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2b8:	3501      	adds	r5, #1
 800d2ba:	615e      	str	r6, [r3, #20]
 800d2bc:	6125      	str	r5, [r4, #16]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c4:	0800f51c 	.word	0x0800f51c
 800d2c8:	0800f52d 	.word	0x0800f52d

0800d2cc <__hi0bits>:
 800d2cc:	0c03      	lsrs	r3, r0, #16
 800d2ce:	041b      	lsls	r3, r3, #16
 800d2d0:	b9d3      	cbnz	r3, 800d308 <__hi0bits+0x3c>
 800d2d2:	0400      	lsls	r0, r0, #16
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2da:	bf04      	itt	eq
 800d2dc:	0200      	lsleq	r0, r0, #8
 800d2de:	3308      	addeq	r3, #8
 800d2e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2e4:	bf04      	itt	eq
 800d2e6:	0100      	lsleq	r0, r0, #4
 800d2e8:	3304      	addeq	r3, #4
 800d2ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2ee:	bf04      	itt	eq
 800d2f0:	0080      	lsleq	r0, r0, #2
 800d2f2:	3302      	addeq	r3, #2
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	db05      	blt.n	800d304 <__hi0bits+0x38>
 800d2f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d2fc:	f103 0301 	add.w	r3, r3, #1
 800d300:	bf08      	it	eq
 800d302:	2320      	moveq	r3, #32
 800d304:	4618      	mov	r0, r3
 800d306:	4770      	bx	lr
 800d308:	2300      	movs	r3, #0
 800d30a:	e7e4      	b.n	800d2d6 <__hi0bits+0xa>

0800d30c <__lo0bits>:
 800d30c:	6803      	ldr	r3, [r0, #0]
 800d30e:	f013 0207 	ands.w	r2, r3, #7
 800d312:	d00c      	beq.n	800d32e <__lo0bits+0x22>
 800d314:	07d9      	lsls	r1, r3, #31
 800d316:	d422      	bmi.n	800d35e <__lo0bits+0x52>
 800d318:	079a      	lsls	r2, r3, #30
 800d31a:	bf49      	itett	mi
 800d31c:	085b      	lsrmi	r3, r3, #1
 800d31e:	089b      	lsrpl	r3, r3, #2
 800d320:	6003      	strmi	r3, [r0, #0]
 800d322:	2201      	movmi	r2, #1
 800d324:	bf5c      	itt	pl
 800d326:	6003      	strpl	r3, [r0, #0]
 800d328:	2202      	movpl	r2, #2
 800d32a:	4610      	mov	r0, r2
 800d32c:	4770      	bx	lr
 800d32e:	b299      	uxth	r1, r3
 800d330:	b909      	cbnz	r1, 800d336 <__lo0bits+0x2a>
 800d332:	0c1b      	lsrs	r3, r3, #16
 800d334:	2210      	movs	r2, #16
 800d336:	b2d9      	uxtb	r1, r3
 800d338:	b909      	cbnz	r1, 800d33e <__lo0bits+0x32>
 800d33a:	3208      	adds	r2, #8
 800d33c:	0a1b      	lsrs	r3, r3, #8
 800d33e:	0719      	lsls	r1, r3, #28
 800d340:	bf04      	itt	eq
 800d342:	091b      	lsreq	r3, r3, #4
 800d344:	3204      	addeq	r2, #4
 800d346:	0799      	lsls	r1, r3, #30
 800d348:	bf04      	itt	eq
 800d34a:	089b      	lsreq	r3, r3, #2
 800d34c:	3202      	addeq	r2, #2
 800d34e:	07d9      	lsls	r1, r3, #31
 800d350:	d403      	bmi.n	800d35a <__lo0bits+0x4e>
 800d352:	085b      	lsrs	r3, r3, #1
 800d354:	f102 0201 	add.w	r2, r2, #1
 800d358:	d003      	beq.n	800d362 <__lo0bits+0x56>
 800d35a:	6003      	str	r3, [r0, #0]
 800d35c:	e7e5      	b.n	800d32a <__lo0bits+0x1e>
 800d35e:	2200      	movs	r2, #0
 800d360:	e7e3      	b.n	800d32a <__lo0bits+0x1e>
 800d362:	2220      	movs	r2, #32
 800d364:	e7e1      	b.n	800d32a <__lo0bits+0x1e>
	...

0800d368 <__i2b>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	2101      	movs	r1, #1
 800d36e:	f7ff ff05 	bl	800d17c <_Balloc>
 800d372:	4602      	mov	r2, r0
 800d374:	b928      	cbnz	r0, 800d382 <__i2b+0x1a>
 800d376:	4b05      	ldr	r3, [pc, #20]	; (800d38c <__i2b+0x24>)
 800d378:	4805      	ldr	r0, [pc, #20]	; (800d390 <__i2b+0x28>)
 800d37a:	f240 1145 	movw	r1, #325	; 0x145
 800d37e:	f000 fca9 	bl	800dcd4 <__assert_func>
 800d382:	2301      	movs	r3, #1
 800d384:	6144      	str	r4, [r0, #20]
 800d386:	6103      	str	r3, [r0, #16]
 800d388:	bd10      	pop	{r4, pc}
 800d38a:	bf00      	nop
 800d38c:	0800f51c 	.word	0x0800f51c
 800d390:	0800f52d 	.word	0x0800f52d

0800d394 <__multiply>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	4691      	mov	r9, r2
 800d39a:	690a      	ldr	r2, [r1, #16]
 800d39c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	bfb8      	it	lt
 800d3a4:	460b      	movlt	r3, r1
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	bfbc      	itt	lt
 800d3aa:	464c      	movlt	r4, r9
 800d3ac:	4699      	movlt	r9, r3
 800d3ae:	6927      	ldr	r7, [r4, #16]
 800d3b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3b4:	68a3      	ldr	r3, [r4, #8]
 800d3b6:	6861      	ldr	r1, [r4, #4]
 800d3b8:	eb07 060a 	add.w	r6, r7, sl
 800d3bc:	42b3      	cmp	r3, r6
 800d3be:	b085      	sub	sp, #20
 800d3c0:	bfb8      	it	lt
 800d3c2:	3101      	addlt	r1, #1
 800d3c4:	f7ff feda 	bl	800d17c <_Balloc>
 800d3c8:	b930      	cbnz	r0, 800d3d8 <__multiply+0x44>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	4b44      	ldr	r3, [pc, #272]	; (800d4e0 <__multiply+0x14c>)
 800d3ce:	4845      	ldr	r0, [pc, #276]	; (800d4e4 <__multiply+0x150>)
 800d3d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d3d4:	f000 fc7e 	bl	800dcd4 <__assert_func>
 800d3d8:	f100 0514 	add.w	r5, r0, #20
 800d3dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4543      	cmp	r3, r8
 800d3e6:	d321      	bcc.n	800d42c <__multiply+0x98>
 800d3e8:	f104 0314 	add.w	r3, r4, #20
 800d3ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3f0:	f109 0314 	add.w	r3, r9, #20
 800d3f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d3f8:	9202      	str	r2, [sp, #8]
 800d3fa:	1b3a      	subs	r2, r7, r4
 800d3fc:	3a15      	subs	r2, #21
 800d3fe:	f022 0203 	bic.w	r2, r2, #3
 800d402:	3204      	adds	r2, #4
 800d404:	f104 0115 	add.w	r1, r4, #21
 800d408:	428f      	cmp	r7, r1
 800d40a:	bf38      	it	cc
 800d40c:	2204      	movcc	r2, #4
 800d40e:	9201      	str	r2, [sp, #4]
 800d410:	9a02      	ldr	r2, [sp, #8]
 800d412:	9303      	str	r3, [sp, #12]
 800d414:	429a      	cmp	r2, r3
 800d416:	d80c      	bhi.n	800d432 <__multiply+0x9e>
 800d418:	2e00      	cmp	r6, #0
 800d41a:	dd03      	ble.n	800d424 <__multiply+0x90>
 800d41c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d420:	2b00      	cmp	r3, #0
 800d422:	d05b      	beq.n	800d4dc <__multiply+0x148>
 800d424:	6106      	str	r6, [r0, #16]
 800d426:	b005      	add	sp, #20
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42c:	f843 2b04 	str.w	r2, [r3], #4
 800d430:	e7d8      	b.n	800d3e4 <__multiply+0x50>
 800d432:	f8b3 a000 	ldrh.w	sl, [r3]
 800d436:	f1ba 0f00 	cmp.w	sl, #0
 800d43a:	d024      	beq.n	800d486 <__multiply+0xf2>
 800d43c:	f104 0e14 	add.w	lr, r4, #20
 800d440:	46a9      	mov	r9, r5
 800d442:	f04f 0c00 	mov.w	ip, #0
 800d446:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d44a:	f8d9 1000 	ldr.w	r1, [r9]
 800d44e:	fa1f fb82 	uxth.w	fp, r2
 800d452:	b289      	uxth	r1, r1
 800d454:	fb0a 110b 	mla	r1, sl, fp, r1
 800d458:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d45c:	f8d9 2000 	ldr.w	r2, [r9]
 800d460:	4461      	add	r1, ip
 800d462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d466:	fb0a c20b 	mla	r2, sl, fp, ip
 800d46a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d46e:	b289      	uxth	r1, r1
 800d470:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d474:	4577      	cmp	r7, lr
 800d476:	f849 1b04 	str.w	r1, [r9], #4
 800d47a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d47e:	d8e2      	bhi.n	800d446 <__multiply+0xb2>
 800d480:	9a01      	ldr	r2, [sp, #4]
 800d482:	f845 c002 	str.w	ip, [r5, r2]
 800d486:	9a03      	ldr	r2, [sp, #12]
 800d488:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d48c:	3304      	adds	r3, #4
 800d48e:	f1b9 0f00 	cmp.w	r9, #0
 800d492:	d021      	beq.n	800d4d8 <__multiply+0x144>
 800d494:	6829      	ldr	r1, [r5, #0]
 800d496:	f104 0c14 	add.w	ip, r4, #20
 800d49a:	46ae      	mov	lr, r5
 800d49c:	f04f 0a00 	mov.w	sl, #0
 800d4a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d4a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4a8:	fb09 220b 	mla	r2, r9, fp, r2
 800d4ac:	4452      	add	r2, sl
 800d4ae:	b289      	uxth	r1, r1
 800d4b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4b4:	f84e 1b04 	str.w	r1, [lr], #4
 800d4b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4c0:	f8be 1000 	ldrh.w	r1, [lr]
 800d4c4:	fb09 110a 	mla	r1, r9, sl, r1
 800d4c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d4cc:	4567      	cmp	r7, ip
 800d4ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4d2:	d8e5      	bhi.n	800d4a0 <__multiply+0x10c>
 800d4d4:	9a01      	ldr	r2, [sp, #4]
 800d4d6:	50a9      	str	r1, [r5, r2]
 800d4d8:	3504      	adds	r5, #4
 800d4da:	e799      	b.n	800d410 <__multiply+0x7c>
 800d4dc:	3e01      	subs	r6, #1
 800d4de:	e79b      	b.n	800d418 <__multiply+0x84>
 800d4e0:	0800f51c 	.word	0x0800f51c
 800d4e4:	0800f52d 	.word	0x0800f52d

0800d4e8 <__pow5mult>:
 800d4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ec:	4615      	mov	r5, r2
 800d4ee:	f012 0203 	ands.w	r2, r2, #3
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	d007      	beq.n	800d508 <__pow5mult+0x20>
 800d4f8:	4c25      	ldr	r4, [pc, #148]	; (800d590 <__pow5mult+0xa8>)
 800d4fa:	3a01      	subs	r2, #1
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d502:	f7ff fe9d 	bl	800d240 <__multadd>
 800d506:	4607      	mov	r7, r0
 800d508:	10ad      	asrs	r5, r5, #2
 800d50a:	d03d      	beq.n	800d588 <__pow5mult+0xa0>
 800d50c:	69f4      	ldr	r4, [r6, #28]
 800d50e:	b97c      	cbnz	r4, 800d530 <__pow5mult+0x48>
 800d510:	2010      	movs	r0, #16
 800d512:	f7ff fd7f 	bl	800d014 <malloc>
 800d516:	4602      	mov	r2, r0
 800d518:	61f0      	str	r0, [r6, #28]
 800d51a:	b928      	cbnz	r0, 800d528 <__pow5mult+0x40>
 800d51c:	4b1d      	ldr	r3, [pc, #116]	; (800d594 <__pow5mult+0xac>)
 800d51e:	481e      	ldr	r0, [pc, #120]	; (800d598 <__pow5mult+0xb0>)
 800d520:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d524:	f000 fbd6 	bl	800dcd4 <__assert_func>
 800d528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d52c:	6004      	str	r4, [r0, #0]
 800d52e:	60c4      	str	r4, [r0, #12]
 800d530:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d538:	b94c      	cbnz	r4, 800d54e <__pow5mult+0x66>
 800d53a:	f240 2171 	movw	r1, #625	; 0x271
 800d53e:	4630      	mov	r0, r6
 800d540:	f7ff ff12 	bl	800d368 <__i2b>
 800d544:	2300      	movs	r3, #0
 800d546:	f8c8 0008 	str.w	r0, [r8, #8]
 800d54a:	4604      	mov	r4, r0
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	f04f 0900 	mov.w	r9, #0
 800d552:	07eb      	lsls	r3, r5, #31
 800d554:	d50a      	bpl.n	800d56c <__pow5mult+0x84>
 800d556:	4639      	mov	r1, r7
 800d558:	4622      	mov	r2, r4
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ff1a 	bl	800d394 <__multiply>
 800d560:	4639      	mov	r1, r7
 800d562:	4680      	mov	r8, r0
 800d564:	4630      	mov	r0, r6
 800d566:	f7ff fe49 	bl	800d1fc <_Bfree>
 800d56a:	4647      	mov	r7, r8
 800d56c:	106d      	asrs	r5, r5, #1
 800d56e:	d00b      	beq.n	800d588 <__pow5mult+0xa0>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	b938      	cbnz	r0, 800d584 <__pow5mult+0x9c>
 800d574:	4622      	mov	r2, r4
 800d576:	4621      	mov	r1, r4
 800d578:	4630      	mov	r0, r6
 800d57a:	f7ff ff0b 	bl	800d394 <__multiply>
 800d57e:	6020      	str	r0, [r4, #0]
 800d580:	f8c0 9000 	str.w	r9, [r0]
 800d584:	4604      	mov	r4, r0
 800d586:	e7e4      	b.n	800d552 <__pow5mult+0x6a>
 800d588:	4638      	mov	r0, r7
 800d58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58e:	bf00      	nop
 800d590:	0800f678 	.word	0x0800f678
 800d594:	0800f4ad 	.word	0x0800f4ad
 800d598:	0800f52d 	.word	0x0800f52d

0800d59c <__lshift>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	6849      	ldr	r1, [r1, #4]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	4691      	mov	r9, r2
 800d5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5b4:	f108 0601 	add.w	r6, r8, #1
 800d5b8:	42b3      	cmp	r3, r6
 800d5ba:	db0b      	blt.n	800d5d4 <__lshift+0x38>
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f7ff fddd 	bl	800d17c <_Balloc>
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	b948      	cbnz	r0, 800d5da <__lshift+0x3e>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <__lshift+0xd0>)
 800d5ca:	4829      	ldr	r0, [pc, #164]	; (800d670 <__lshift+0xd4>)
 800d5cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d5d0:	f000 fb80 	bl	800dcd4 <__assert_func>
 800d5d4:	3101      	adds	r1, #1
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	e7ee      	b.n	800d5b8 <__lshift+0x1c>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f100 0114 	add.w	r1, r0, #20
 800d5e0:	f100 0210 	add.w	r2, r0, #16
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	4553      	cmp	r3, sl
 800d5e8:	db33      	blt.n	800d652 <__lshift+0xb6>
 800d5ea:	6920      	ldr	r0, [r4, #16]
 800d5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5f0:	f104 0314 	add.w	r3, r4, #20
 800d5f4:	f019 091f 	ands.w	r9, r9, #31
 800d5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d600:	d02b      	beq.n	800d65a <__lshift+0xbe>
 800d602:	f1c9 0e20 	rsb	lr, r9, #32
 800d606:	468a      	mov	sl, r1
 800d608:	2200      	movs	r2, #0
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	fa00 f009 	lsl.w	r0, r0, r9
 800d610:	4310      	orrs	r0, r2
 800d612:	f84a 0b04 	str.w	r0, [sl], #4
 800d616:	f853 2b04 	ldr.w	r2, [r3], #4
 800d61a:	459c      	cmp	ip, r3
 800d61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d620:	d8f3      	bhi.n	800d60a <__lshift+0x6e>
 800d622:	ebac 0304 	sub.w	r3, ip, r4
 800d626:	3b15      	subs	r3, #21
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3304      	adds	r3, #4
 800d62e:	f104 0015 	add.w	r0, r4, #21
 800d632:	4584      	cmp	ip, r0
 800d634:	bf38      	it	cc
 800d636:	2304      	movcc	r3, #4
 800d638:	50ca      	str	r2, [r1, r3]
 800d63a:	b10a      	cbz	r2, 800d640 <__lshift+0xa4>
 800d63c:	f108 0602 	add.w	r6, r8, #2
 800d640:	3e01      	subs	r6, #1
 800d642:	4638      	mov	r0, r7
 800d644:	612e      	str	r6, [r5, #16]
 800d646:	4621      	mov	r1, r4
 800d648:	f7ff fdd8 	bl	800d1fc <_Bfree>
 800d64c:	4628      	mov	r0, r5
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	f842 0f04 	str.w	r0, [r2, #4]!
 800d656:	3301      	adds	r3, #1
 800d658:	e7c5      	b.n	800d5e6 <__lshift+0x4a>
 800d65a:	3904      	subs	r1, #4
 800d65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d660:	f841 2f04 	str.w	r2, [r1, #4]!
 800d664:	459c      	cmp	ip, r3
 800d666:	d8f9      	bhi.n	800d65c <__lshift+0xc0>
 800d668:	e7ea      	b.n	800d640 <__lshift+0xa4>
 800d66a:	bf00      	nop
 800d66c:	0800f51c 	.word	0x0800f51c
 800d670:	0800f52d 	.word	0x0800f52d

0800d674 <__mcmp>:
 800d674:	b530      	push	{r4, r5, lr}
 800d676:	6902      	ldr	r2, [r0, #16]
 800d678:	690c      	ldr	r4, [r1, #16]
 800d67a:	1b12      	subs	r2, r2, r4
 800d67c:	d10e      	bne.n	800d69c <__mcmp+0x28>
 800d67e:	f100 0314 	add.w	r3, r0, #20
 800d682:	3114      	adds	r1, #20
 800d684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d68c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d694:	42a5      	cmp	r5, r4
 800d696:	d003      	beq.n	800d6a0 <__mcmp+0x2c>
 800d698:	d305      	bcc.n	800d6a6 <__mcmp+0x32>
 800d69a:	2201      	movs	r2, #1
 800d69c:	4610      	mov	r0, r2
 800d69e:	bd30      	pop	{r4, r5, pc}
 800d6a0:	4283      	cmp	r3, r0
 800d6a2:	d3f3      	bcc.n	800d68c <__mcmp+0x18>
 800d6a4:	e7fa      	b.n	800d69c <__mcmp+0x28>
 800d6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6aa:	e7f7      	b.n	800d69c <__mcmp+0x28>

0800d6ac <__mdiff>:
 800d6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4690      	mov	r8, r2
 800d6ba:	f7ff ffdb 	bl	800d674 <__mcmp>
 800d6be:	1e05      	subs	r5, r0, #0
 800d6c0:	d110      	bne.n	800d6e4 <__mdiff+0x38>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff fd59 	bl	800d17c <_Balloc>
 800d6ca:	b930      	cbnz	r0, 800d6da <__mdiff+0x2e>
 800d6cc:	4b3a      	ldr	r3, [pc, #232]	; (800d7b8 <__mdiff+0x10c>)
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	f240 2137 	movw	r1, #567	; 0x237
 800d6d4:	4839      	ldr	r0, [pc, #228]	; (800d7bc <__mdiff+0x110>)
 800d6d6:	f000 fafd 	bl	800dcd4 <__assert_func>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e4:	bfa4      	itt	ge
 800d6e6:	4643      	movge	r3, r8
 800d6e8:	46a0      	movge	r8, r4
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6f0:	bfa6      	itte	ge
 800d6f2:	461c      	movge	r4, r3
 800d6f4:	2500      	movge	r5, #0
 800d6f6:	2501      	movlt	r5, #1
 800d6f8:	f7ff fd40 	bl	800d17c <_Balloc>
 800d6fc:	b920      	cbnz	r0, 800d708 <__mdiff+0x5c>
 800d6fe:	4b2e      	ldr	r3, [pc, #184]	; (800d7b8 <__mdiff+0x10c>)
 800d700:	4602      	mov	r2, r0
 800d702:	f240 2145 	movw	r1, #581	; 0x245
 800d706:	e7e5      	b.n	800d6d4 <__mdiff+0x28>
 800d708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d70c:	6926      	ldr	r6, [r4, #16]
 800d70e:	60c5      	str	r5, [r0, #12]
 800d710:	f104 0914 	add.w	r9, r4, #20
 800d714:	f108 0514 	add.w	r5, r8, #20
 800d718:	f100 0e14 	add.w	lr, r0, #20
 800d71c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d724:	f108 0210 	add.w	r2, r8, #16
 800d728:	46f2      	mov	sl, lr
 800d72a:	2100      	movs	r1, #0
 800d72c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d734:	fa11 f88b 	uxtah	r8, r1, fp
 800d738:	b299      	uxth	r1, r3
 800d73a:	0c1b      	lsrs	r3, r3, #16
 800d73c:	eba8 0801 	sub.w	r8, r8, r1
 800d740:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d744:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d748:	fa1f f888 	uxth.w	r8, r8
 800d74c:	1419      	asrs	r1, r3, #16
 800d74e:	454e      	cmp	r6, r9
 800d750:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d754:	f84a 3b04 	str.w	r3, [sl], #4
 800d758:	d8e8      	bhi.n	800d72c <__mdiff+0x80>
 800d75a:	1b33      	subs	r3, r6, r4
 800d75c:	3b15      	subs	r3, #21
 800d75e:	f023 0303 	bic.w	r3, r3, #3
 800d762:	3304      	adds	r3, #4
 800d764:	3415      	adds	r4, #21
 800d766:	42a6      	cmp	r6, r4
 800d768:	bf38      	it	cc
 800d76a:	2304      	movcc	r3, #4
 800d76c:	441d      	add	r5, r3
 800d76e:	4473      	add	r3, lr
 800d770:	469e      	mov	lr, r3
 800d772:	462e      	mov	r6, r5
 800d774:	4566      	cmp	r6, ip
 800d776:	d30e      	bcc.n	800d796 <__mdiff+0xea>
 800d778:	f10c 0203 	add.w	r2, ip, #3
 800d77c:	1b52      	subs	r2, r2, r5
 800d77e:	f022 0203 	bic.w	r2, r2, #3
 800d782:	3d03      	subs	r5, #3
 800d784:	45ac      	cmp	ip, r5
 800d786:	bf38      	it	cc
 800d788:	2200      	movcc	r2, #0
 800d78a:	4413      	add	r3, r2
 800d78c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d790:	b17a      	cbz	r2, 800d7b2 <__mdiff+0x106>
 800d792:	6107      	str	r7, [r0, #16]
 800d794:	e7a4      	b.n	800d6e0 <__mdiff+0x34>
 800d796:	f856 8b04 	ldr.w	r8, [r6], #4
 800d79a:	fa11 f288 	uxtah	r2, r1, r8
 800d79e:	1414      	asrs	r4, r2, #16
 800d7a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7aa:	f84e 2b04 	str.w	r2, [lr], #4
 800d7ae:	1421      	asrs	r1, r4, #16
 800d7b0:	e7e0      	b.n	800d774 <__mdiff+0xc8>
 800d7b2:	3f01      	subs	r7, #1
 800d7b4:	e7ea      	b.n	800d78c <__mdiff+0xe0>
 800d7b6:	bf00      	nop
 800d7b8:	0800f51c 	.word	0x0800f51c
 800d7bc:	0800f52d 	.word	0x0800f52d

0800d7c0 <__d2b>:
 800d7c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7c4:	460f      	mov	r7, r1
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	ec59 8b10 	vmov	r8, r9, d0
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	f7ff fcd5 	bl	800d17c <_Balloc>
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	b930      	cbnz	r0, 800d7e4 <__d2b+0x24>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	4b24      	ldr	r3, [pc, #144]	; (800d86c <__d2b+0xac>)
 800d7da:	4825      	ldr	r0, [pc, #148]	; (800d870 <__d2b+0xb0>)
 800d7dc:	f240 310f 	movw	r1, #783	; 0x30f
 800d7e0:	f000 fa78 	bl	800dcd4 <__assert_func>
 800d7e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7ec:	bb2d      	cbnz	r5, 800d83a <__d2b+0x7a>
 800d7ee:	9301      	str	r3, [sp, #4]
 800d7f0:	f1b8 0300 	subs.w	r3, r8, #0
 800d7f4:	d026      	beq.n	800d844 <__d2b+0x84>
 800d7f6:	4668      	mov	r0, sp
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	f7ff fd87 	bl	800d30c <__lo0bits>
 800d7fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d802:	b1e8      	cbz	r0, 800d840 <__d2b+0x80>
 800d804:	f1c0 0320 	rsb	r3, r0, #32
 800d808:	fa02 f303 	lsl.w	r3, r2, r3
 800d80c:	430b      	orrs	r3, r1
 800d80e:	40c2      	lsrs	r2, r0
 800d810:	6163      	str	r3, [r4, #20]
 800d812:	9201      	str	r2, [sp, #4]
 800d814:	9b01      	ldr	r3, [sp, #4]
 800d816:	61a3      	str	r3, [r4, #24]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf14      	ite	ne
 800d81c:	2202      	movne	r2, #2
 800d81e:	2201      	moveq	r2, #1
 800d820:	6122      	str	r2, [r4, #16]
 800d822:	b1bd      	cbz	r5, 800d854 <__d2b+0x94>
 800d824:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d828:	4405      	add	r5, r0
 800d82a:	603d      	str	r5, [r7, #0]
 800d82c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d830:	6030      	str	r0, [r6, #0]
 800d832:	4620      	mov	r0, r4
 800d834:	b003      	add	sp, #12
 800d836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d83e:	e7d6      	b.n	800d7ee <__d2b+0x2e>
 800d840:	6161      	str	r1, [r4, #20]
 800d842:	e7e7      	b.n	800d814 <__d2b+0x54>
 800d844:	a801      	add	r0, sp, #4
 800d846:	f7ff fd61 	bl	800d30c <__lo0bits>
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	6163      	str	r3, [r4, #20]
 800d84e:	3020      	adds	r0, #32
 800d850:	2201      	movs	r2, #1
 800d852:	e7e5      	b.n	800d820 <__d2b+0x60>
 800d854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d85c:	6038      	str	r0, [r7, #0]
 800d85e:	6918      	ldr	r0, [r3, #16]
 800d860:	f7ff fd34 	bl	800d2cc <__hi0bits>
 800d864:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d868:	e7e2      	b.n	800d830 <__d2b+0x70>
 800d86a:	bf00      	nop
 800d86c:	0800f51c 	.word	0x0800f51c
 800d870:	0800f52d 	.word	0x0800f52d

0800d874 <__ssputs_r>:
 800d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	688e      	ldr	r6, [r1, #8]
 800d87a:	461f      	mov	r7, r3
 800d87c:	42be      	cmp	r6, r7
 800d87e:	680b      	ldr	r3, [r1, #0]
 800d880:	4682      	mov	sl, r0
 800d882:	460c      	mov	r4, r1
 800d884:	4690      	mov	r8, r2
 800d886:	d82c      	bhi.n	800d8e2 <__ssputs_r+0x6e>
 800d888:	898a      	ldrh	r2, [r1, #12]
 800d88a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d88e:	d026      	beq.n	800d8de <__ssputs_r+0x6a>
 800d890:	6965      	ldr	r5, [r4, #20]
 800d892:	6909      	ldr	r1, [r1, #16]
 800d894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d898:	eba3 0901 	sub.w	r9, r3, r1
 800d89c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8a0:	1c7b      	adds	r3, r7, #1
 800d8a2:	444b      	add	r3, r9
 800d8a4:	106d      	asrs	r5, r5, #1
 800d8a6:	429d      	cmp	r5, r3
 800d8a8:	bf38      	it	cc
 800d8aa:	461d      	movcc	r5, r3
 800d8ac:	0553      	lsls	r3, r2, #21
 800d8ae:	d527      	bpl.n	800d900 <__ssputs_r+0x8c>
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	f7ff fbd7 	bl	800d064 <_malloc_r>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	b360      	cbz	r0, 800d914 <__ssputs_r+0xa0>
 800d8ba:	6921      	ldr	r1, [r4, #16]
 800d8bc:	464a      	mov	r2, r9
 800d8be:	f7fe fcd4 	bl	800c26a <memcpy>
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	6126      	str	r6, [r4, #16]
 800d8d0:	6165      	str	r5, [r4, #20]
 800d8d2:	444e      	add	r6, r9
 800d8d4:	eba5 0509 	sub.w	r5, r5, r9
 800d8d8:	6026      	str	r6, [r4, #0]
 800d8da:	60a5      	str	r5, [r4, #8]
 800d8dc:	463e      	mov	r6, r7
 800d8de:	42be      	cmp	r6, r7
 800d8e0:	d900      	bls.n	800d8e4 <__ssputs_r+0x70>
 800d8e2:	463e      	mov	r6, r7
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	4632      	mov	r2, r6
 800d8e8:	4641      	mov	r1, r8
 800d8ea:	f000 f9c9 	bl	800dc80 <memmove>
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	1b9b      	subs	r3, r3, r6
 800d8f2:	60a3      	str	r3, [r4, #8]
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	4433      	add	r3, r6
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d900:	462a      	mov	r2, r5
 800d902:	f000 fa2d 	bl	800dd60 <_realloc_r>
 800d906:	4606      	mov	r6, r0
 800d908:	2800      	cmp	r0, #0
 800d90a:	d1e0      	bne.n	800d8ce <__ssputs_r+0x5a>
 800d90c:	6921      	ldr	r1, [r4, #16]
 800d90e:	4650      	mov	r0, sl
 800d910:	f7ff fb34 	bl	800cf7c <_free_r>
 800d914:	230c      	movs	r3, #12
 800d916:	f8ca 3000 	str.w	r3, [sl]
 800d91a:	89a3      	ldrh	r3, [r4, #12]
 800d91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d920:	81a3      	strh	r3, [r4, #12]
 800d922:	f04f 30ff 	mov.w	r0, #4294967295
 800d926:	e7e9      	b.n	800d8fc <__ssputs_r+0x88>

0800d928 <_svfiprintf_r>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	4698      	mov	r8, r3
 800d92e:	898b      	ldrh	r3, [r1, #12]
 800d930:	061b      	lsls	r3, r3, #24
 800d932:	b09d      	sub	sp, #116	; 0x74
 800d934:	4607      	mov	r7, r0
 800d936:	460d      	mov	r5, r1
 800d938:	4614      	mov	r4, r2
 800d93a:	d50e      	bpl.n	800d95a <_svfiprintf_r+0x32>
 800d93c:	690b      	ldr	r3, [r1, #16]
 800d93e:	b963      	cbnz	r3, 800d95a <_svfiprintf_r+0x32>
 800d940:	2140      	movs	r1, #64	; 0x40
 800d942:	f7ff fb8f 	bl	800d064 <_malloc_r>
 800d946:	6028      	str	r0, [r5, #0]
 800d948:	6128      	str	r0, [r5, #16]
 800d94a:	b920      	cbnz	r0, 800d956 <_svfiprintf_r+0x2e>
 800d94c:	230c      	movs	r3, #12
 800d94e:	603b      	str	r3, [r7, #0]
 800d950:	f04f 30ff 	mov.w	r0, #4294967295
 800d954:	e0d0      	b.n	800daf8 <_svfiprintf_r+0x1d0>
 800d956:	2340      	movs	r3, #64	; 0x40
 800d958:	616b      	str	r3, [r5, #20]
 800d95a:	2300      	movs	r3, #0
 800d95c:	9309      	str	r3, [sp, #36]	; 0x24
 800d95e:	2320      	movs	r3, #32
 800d960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d964:	f8cd 800c 	str.w	r8, [sp, #12]
 800d968:	2330      	movs	r3, #48	; 0x30
 800d96a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db10 <_svfiprintf_r+0x1e8>
 800d96e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d972:	f04f 0901 	mov.w	r9, #1
 800d976:	4623      	mov	r3, r4
 800d978:	469a      	mov	sl, r3
 800d97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97e:	b10a      	cbz	r2, 800d984 <_svfiprintf_r+0x5c>
 800d980:	2a25      	cmp	r2, #37	; 0x25
 800d982:	d1f9      	bne.n	800d978 <_svfiprintf_r+0x50>
 800d984:	ebba 0b04 	subs.w	fp, sl, r4
 800d988:	d00b      	beq.n	800d9a2 <_svfiprintf_r+0x7a>
 800d98a:	465b      	mov	r3, fp
 800d98c:	4622      	mov	r2, r4
 800d98e:	4629      	mov	r1, r5
 800d990:	4638      	mov	r0, r7
 800d992:	f7ff ff6f 	bl	800d874 <__ssputs_r>
 800d996:	3001      	adds	r0, #1
 800d998:	f000 80a9 	beq.w	800daee <_svfiprintf_r+0x1c6>
 800d99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d99e:	445a      	add	r2, fp
 800d9a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80a1 	beq.w	800daee <_svfiprintf_r+0x1c6>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b6:	f10a 0a01 	add.w	sl, sl, #1
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	9307      	str	r3, [sp, #28]
 800d9be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9c4:	4654      	mov	r4, sl
 800d9c6:	2205      	movs	r2, #5
 800d9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9cc:	4850      	ldr	r0, [pc, #320]	; (800db10 <_svfiprintf_r+0x1e8>)
 800d9ce:	f7f2 fbff 	bl	80001d0 <memchr>
 800d9d2:	9a04      	ldr	r2, [sp, #16]
 800d9d4:	b9d8      	cbnz	r0, 800da0e <_svfiprintf_r+0xe6>
 800d9d6:	06d0      	lsls	r0, r2, #27
 800d9d8:	bf44      	itt	mi
 800d9da:	2320      	movmi	r3, #32
 800d9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9e0:	0711      	lsls	r1, r2, #28
 800d9e2:	bf44      	itt	mi
 800d9e4:	232b      	movmi	r3, #43	; 0x2b
 800d9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d9f0:	d015      	beq.n	800da1e <_svfiprintf_r+0xf6>
 800d9f2:	9a07      	ldr	r2, [sp, #28]
 800d9f4:	4654      	mov	r4, sl
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	f04f 0c0a 	mov.w	ip, #10
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da02:	3b30      	subs	r3, #48	; 0x30
 800da04:	2b09      	cmp	r3, #9
 800da06:	d94d      	bls.n	800daa4 <_svfiprintf_r+0x17c>
 800da08:	b1b0      	cbz	r0, 800da38 <_svfiprintf_r+0x110>
 800da0a:	9207      	str	r2, [sp, #28]
 800da0c:	e014      	b.n	800da38 <_svfiprintf_r+0x110>
 800da0e:	eba0 0308 	sub.w	r3, r0, r8
 800da12:	fa09 f303 	lsl.w	r3, r9, r3
 800da16:	4313      	orrs	r3, r2
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	46a2      	mov	sl, r4
 800da1c:	e7d2      	b.n	800d9c4 <_svfiprintf_r+0x9c>
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	1d19      	adds	r1, r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	9103      	str	r1, [sp, #12]
 800da26:	2b00      	cmp	r3, #0
 800da28:	bfbb      	ittet	lt
 800da2a:	425b      	neglt	r3, r3
 800da2c:	f042 0202 	orrlt.w	r2, r2, #2
 800da30:	9307      	strge	r3, [sp, #28]
 800da32:	9307      	strlt	r3, [sp, #28]
 800da34:	bfb8      	it	lt
 800da36:	9204      	strlt	r2, [sp, #16]
 800da38:	7823      	ldrb	r3, [r4, #0]
 800da3a:	2b2e      	cmp	r3, #46	; 0x2e
 800da3c:	d10c      	bne.n	800da58 <_svfiprintf_r+0x130>
 800da3e:	7863      	ldrb	r3, [r4, #1]
 800da40:	2b2a      	cmp	r3, #42	; 0x2a
 800da42:	d134      	bne.n	800daae <_svfiprintf_r+0x186>
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	1d1a      	adds	r2, r3, #4
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	9203      	str	r2, [sp, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	bfb8      	it	lt
 800da50:	f04f 33ff 	movlt.w	r3, #4294967295
 800da54:	3402      	adds	r4, #2
 800da56:	9305      	str	r3, [sp, #20]
 800da58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800db20 <_svfiprintf_r+0x1f8>
 800da5c:	7821      	ldrb	r1, [r4, #0]
 800da5e:	2203      	movs	r2, #3
 800da60:	4650      	mov	r0, sl
 800da62:	f7f2 fbb5 	bl	80001d0 <memchr>
 800da66:	b138      	cbz	r0, 800da78 <_svfiprintf_r+0x150>
 800da68:	9b04      	ldr	r3, [sp, #16]
 800da6a:	eba0 000a 	sub.w	r0, r0, sl
 800da6e:	2240      	movs	r2, #64	; 0x40
 800da70:	4082      	lsls	r2, r0
 800da72:	4313      	orrs	r3, r2
 800da74:	3401      	adds	r4, #1
 800da76:	9304      	str	r3, [sp, #16]
 800da78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7c:	4825      	ldr	r0, [pc, #148]	; (800db14 <_svfiprintf_r+0x1ec>)
 800da7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da82:	2206      	movs	r2, #6
 800da84:	f7f2 fba4 	bl	80001d0 <memchr>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d038      	beq.n	800dafe <_svfiprintf_r+0x1d6>
 800da8c:	4b22      	ldr	r3, [pc, #136]	; (800db18 <_svfiprintf_r+0x1f0>)
 800da8e:	bb1b      	cbnz	r3, 800dad8 <_svfiprintf_r+0x1b0>
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	3307      	adds	r3, #7
 800da94:	f023 0307 	bic.w	r3, r3, #7
 800da98:	3308      	adds	r3, #8
 800da9a:	9303      	str	r3, [sp, #12]
 800da9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9e:	4433      	add	r3, r6
 800daa0:	9309      	str	r3, [sp, #36]	; 0x24
 800daa2:	e768      	b.n	800d976 <_svfiprintf_r+0x4e>
 800daa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800daa8:	460c      	mov	r4, r1
 800daaa:	2001      	movs	r0, #1
 800daac:	e7a6      	b.n	800d9fc <_svfiprintf_r+0xd4>
 800daae:	2300      	movs	r3, #0
 800dab0:	3401      	adds	r4, #1
 800dab2:	9305      	str	r3, [sp, #20]
 800dab4:	4619      	mov	r1, r3
 800dab6:	f04f 0c0a 	mov.w	ip, #10
 800daba:	4620      	mov	r0, r4
 800dabc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac0:	3a30      	subs	r2, #48	; 0x30
 800dac2:	2a09      	cmp	r2, #9
 800dac4:	d903      	bls.n	800dace <_svfiprintf_r+0x1a6>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d0c6      	beq.n	800da58 <_svfiprintf_r+0x130>
 800daca:	9105      	str	r1, [sp, #20]
 800dacc:	e7c4      	b.n	800da58 <_svfiprintf_r+0x130>
 800dace:	fb0c 2101 	mla	r1, ip, r1, r2
 800dad2:	4604      	mov	r4, r0
 800dad4:	2301      	movs	r3, #1
 800dad6:	e7f0      	b.n	800daba <_svfiprintf_r+0x192>
 800dad8:	ab03      	add	r3, sp, #12
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	462a      	mov	r2, r5
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <_svfiprintf_r+0x1f4>)
 800dae0:	a904      	add	r1, sp, #16
 800dae2:	4638      	mov	r0, r7
 800dae4:	f7fd fe56 	bl	800b794 <_printf_float>
 800dae8:	1c42      	adds	r2, r0, #1
 800daea:	4606      	mov	r6, r0
 800daec:	d1d6      	bne.n	800da9c <_svfiprintf_r+0x174>
 800daee:	89ab      	ldrh	r3, [r5, #12]
 800daf0:	065b      	lsls	r3, r3, #25
 800daf2:	f53f af2d 	bmi.w	800d950 <_svfiprintf_r+0x28>
 800daf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daf8:	b01d      	add	sp, #116	; 0x74
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	ab03      	add	r3, sp, #12
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	462a      	mov	r2, r5
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <_svfiprintf_r+0x1f4>)
 800db06:	a904      	add	r1, sp, #16
 800db08:	4638      	mov	r0, r7
 800db0a:	f7fe f8e7 	bl	800bcdc <_printf_i>
 800db0e:	e7eb      	b.n	800dae8 <_svfiprintf_r+0x1c0>
 800db10:	0800f684 	.word	0x0800f684
 800db14:	0800f68e 	.word	0x0800f68e
 800db18:	0800b795 	.word	0x0800b795
 800db1c:	0800d875 	.word	0x0800d875
 800db20:	0800f68a 	.word	0x0800f68a

0800db24 <__sflush_r>:
 800db24:	898a      	ldrh	r2, [r1, #12]
 800db26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2a:	4605      	mov	r5, r0
 800db2c:	0710      	lsls	r0, r2, #28
 800db2e:	460c      	mov	r4, r1
 800db30:	d458      	bmi.n	800dbe4 <__sflush_r+0xc0>
 800db32:	684b      	ldr	r3, [r1, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	dc05      	bgt.n	800db44 <__sflush_r+0x20>
 800db38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	dc02      	bgt.n	800db44 <__sflush_r+0x20>
 800db3e:	2000      	movs	r0, #0
 800db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db46:	2e00      	cmp	r6, #0
 800db48:	d0f9      	beq.n	800db3e <__sflush_r+0x1a>
 800db4a:	2300      	movs	r3, #0
 800db4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db50:	682f      	ldr	r7, [r5, #0]
 800db52:	6a21      	ldr	r1, [r4, #32]
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	d032      	beq.n	800dbbe <__sflush_r+0x9a>
 800db58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	075a      	lsls	r2, r3, #29
 800db5e:	d505      	bpl.n	800db6c <__sflush_r+0x48>
 800db60:	6863      	ldr	r3, [r4, #4]
 800db62:	1ac0      	subs	r0, r0, r3
 800db64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db66:	b10b      	cbz	r3, 800db6c <__sflush_r+0x48>
 800db68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db6a:	1ac0      	subs	r0, r0, r3
 800db6c:	2300      	movs	r3, #0
 800db6e:	4602      	mov	r2, r0
 800db70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db72:	6a21      	ldr	r1, [r4, #32]
 800db74:	4628      	mov	r0, r5
 800db76:	47b0      	blx	r6
 800db78:	1c43      	adds	r3, r0, #1
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	d106      	bne.n	800db8c <__sflush_r+0x68>
 800db7e:	6829      	ldr	r1, [r5, #0]
 800db80:	291d      	cmp	r1, #29
 800db82:	d82b      	bhi.n	800dbdc <__sflush_r+0xb8>
 800db84:	4a29      	ldr	r2, [pc, #164]	; (800dc2c <__sflush_r+0x108>)
 800db86:	410a      	asrs	r2, r1
 800db88:	07d6      	lsls	r6, r2, #31
 800db8a:	d427      	bmi.n	800dbdc <__sflush_r+0xb8>
 800db8c:	2200      	movs	r2, #0
 800db8e:	6062      	str	r2, [r4, #4]
 800db90:	04d9      	lsls	r1, r3, #19
 800db92:	6922      	ldr	r2, [r4, #16]
 800db94:	6022      	str	r2, [r4, #0]
 800db96:	d504      	bpl.n	800dba2 <__sflush_r+0x7e>
 800db98:	1c42      	adds	r2, r0, #1
 800db9a:	d101      	bne.n	800dba0 <__sflush_r+0x7c>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	b903      	cbnz	r3, 800dba2 <__sflush_r+0x7e>
 800dba0:	6560      	str	r0, [r4, #84]	; 0x54
 800dba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dba4:	602f      	str	r7, [r5, #0]
 800dba6:	2900      	cmp	r1, #0
 800dba8:	d0c9      	beq.n	800db3e <__sflush_r+0x1a>
 800dbaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	d002      	beq.n	800dbb8 <__sflush_r+0x94>
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7ff f9e2 	bl	800cf7c <_free_r>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	6360      	str	r0, [r4, #52]	; 0x34
 800dbbc:	e7c0      	b.n	800db40 <__sflush_r+0x1c>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	47b0      	blx	r6
 800dbc4:	1c41      	adds	r1, r0, #1
 800dbc6:	d1c8      	bne.n	800db5a <__sflush_r+0x36>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d0c5      	beq.n	800db5a <__sflush_r+0x36>
 800dbce:	2b1d      	cmp	r3, #29
 800dbd0:	d001      	beq.n	800dbd6 <__sflush_r+0xb2>
 800dbd2:	2b16      	cmp	r3, #22
 800dbd4:	d101      	bne.n	800dbda <__sflush_r+0xb6>
 800dbd6:	602f      	str	r7, [r5, #0]
 800dbd8:	e7b1      	b.n	800db3e <__sflush_r+0x1a>
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe0:	81a3      	strh	r3, [r4, #12]
 800dbe2:	e7ad      	b.n	800db40 <__sflush_r+0x1c>
 800dbe4:	690f      	ldr	r7, [r1, #16]
 800dbe6:	2f00      	cmp	r7, #0
 800dbe8:	d0a9      	beq.n	800db3e <__sflush_r+0x1a>
 800dbea:	0793      	lsls	r3, r2, #30
 800dbec:	680e      	ldr	r6, [r1, #0]
 800dbee:	bf08      	it	eq
 800dbf0:	694b      	ldreq	r3, [r1, #20]
 800dbf2:	600f      	str	r7, [r1, #0]
 800dbf4:	bf18      	it	ne
 800dbf6:	2300      	movne	r3, #0
 800dbf8:	eba6 0807 	sub.w	r8, r6, r7
 800dbfc:	608b      	str	r3, [r1, #8]
 800dbfe:	f1b8 0f00 	cmp.w	r8, #0
 800dc02:	dd9c      	ble.n	800db3e <__sflush_r+0x1a>
 800dc04:	6a21      	ldr	r1, [r4, #32]
 800dc06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc08:	4643      	mov	r3, r8
 800dc0a:	463a      	mov	r2, r7
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	47b0      	blx	r6
 800dc10:	2800      	cmp	r0, #0
 800dc12:	dc06      	bgt.n	800dc22 <__sflush_r+0xfe>
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1a:	81a3      	strh	r3, [r4, #12]
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc20:	e78e      	b.n	800db40 <__sflush_r+0x1c>
 800dc22:	4407      	add	r7, r0
 800dc24:	eba8 0800 	sub.w	r8, r8, r0
 800dc28:	e7e9      	b.n	800dbfe <__sflush_r+0xda>
 800dc2a:	bf00      	nop
 800dc2c:	dfbffffe 	.word	0xdfbffffe

0800dc30 <_fflush_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	690b      	ldr	r3, [r1, #16]
 800dc34:	4605      	mov	r5, r0
 800dc36:	460c      	mov	r4, r1
 800dc38:	b913      	cbnz	r3, 800dc40 <_fflush_r+0x10>
 800dc3a:	2500      	movs	r5, #0
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	bd38      	pop	{r3, r4, r5, pc}
 800dc40:	b118      	cbz	r0, 800dc4a <_fflush_r+0x1a>
 800dc42:	6a03      	ldr	r3, [r0, #32]
 800dc44:	b90b      	cbnz	r3, 800dc4a <_fflush_r+0x1a>
 800dc46:	f7fe f9f7 	bl	800c038 <__sinit>
 800dc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0f3      	beq.n	800dc3a <_fflush_r+0xa>
 800dc52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc54:	07d0      	lsls	r0, r2, #31
 800dc56:	d404      	bmi.n	800dc62 <_fflush_r+0x32>
 800dc58:	0599      	lsls	r1, r3, #22
 800dc5a:	d402      	bmi.n	800dc62 <_fflush_r+0x32>
 800dc5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc5e:	f7fe fb02 	bl	800c266 <__retarget_lock_acquire_recursive>
 800dc62:	4628      	mov	r0, r5
 800dc64:	4621      	mov	r1, r4
 800dc66:	f7ff ff5d 	bl	800db24 <__sflush_r>
 800dc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc6c:	07da      	lsls	r2, r3, #31
 800dc6e:	4605      	mov	r5, r0
 800dc70:	d4e4      	bmi.n	800dc3c <_fflush_r+0xc>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	059b      	lsls	r3, r3, #22
 800dc76:	d4e1      	bmi.n	800dc3c <_fflush_r+0xc>
 800dc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc7a:	f7fe faf5 	bl	800c268 <__retarget_lock_release_recursive>
 800dc7e:	e7dd      	b.n	800dc3c <_fflush_r+0xc>

0800dc80 <memmove>:
 800dc80:	4288      	cmp	r0, r1
 800dc82:	b510      	push	{r4, lr}
 800dc84:	eb01 0402 	add.w	r4, r1, r2
 800dc88:	d902      	bls.n	800dc90 <memmove+0x10>
 800dc8a:	4284      	cmp	r4, r0
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	d807      	bhi.n	800dca0 <memmove+0x20>
 800dc90:	1e43      	subs	r3, r0, #1
 800dc92:	42a1      	cmp	r1, r4
 800dc94:	d008      	beq.n	800dca8 <memmove+0x28>
 800dc96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc9e:	e7f8      	b.n	800dc92 <memmove+0x12>
 800dca0:	4402      	add	r2, r0
 800dca2:	4601      	mov	r1, r0
 800dca4:	428a      	cmp	r2, r1
 800dca6:	d100      	bne.n	800dcaa <memmove+0x2a>
 800dca8:	bd10      	pop	{r4, pc}
 800dcaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcb2:	e7f7      	b.n	800dca4 <memmove+0x24>

0800dcb4 <_sbrk_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d06      	ldr	r5, [pc, #24]	; (800dcd0 <_sbrk_r+0x1c>)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4604      	mov	r4, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	602b      	str	r3, [r5, #0]
 800dcc0:	f7f3 ff04 	bl	8001acc <_sbrk>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_sbrk_r+0x1a>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_sbrk_r+0x1a>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	200021b8 	.word	0x200021b8

0800dcd4 <__assert_func>:
 800dcd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcd6:	4614      	mov	r4, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <__assert_func+0x2c>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4605      	mov	r5, r0
 800dce0:	68d8      	ldr	r0, [r3, #12]
 800dce2:	b14c      	cbz	r4, 800dcf8 <__assert_func+0x24>
 800dce4:	4b07      	ldr	r3, [pc, #28]	; (800dd04 <__assert_func+0x30>)
 800dce6:	9100      	str	r1, [sp, #0]
 800dce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcec:	4906      	ldr	r1, [pc, #24]	; (800dd08 <__assert_func+0x34>)
 800dcee:	462b      	mov	r3, r5
 800dcf0:	f000 f872 	bl	800ddd8 <fiprintf>
 800dcf4:	f000 f882 	bl	800ddfc <abort>
 800dcf8:	4b04      	ldr	r3, [pc, #16]	; (800dd0c <__assert_func+0x38>)
 800dcfa:	461c      	mov	r4, r3
 800dcfc:	e7f3      	b.n	800dce6 <__assert_func+0x12>
 800dcfe:	bf00      	nop
 800dd00:	20000154 	.word	0x20000154
 800dd04:	0800f69f 	.word	0x0800f69f
 800dd08:	0800f6ac 	.word	0x0800f6ac
 800dd0c:	0800f6da 	.word	0x0800f6da

0800dd10 <_calloc_r>:
 800dd10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd12:	fba1 2402 	umull	r2, r4, r1, r2
 800dd16:	b94c      	cbnz	r4, 800dd2c <_calloc_r+0x1c>
 800dd18:	4611      	mov	r1, r2
 800dd1a:	9201      	str	r2, [sp, #4]
 800dd1c:	f7ff f9a2 	bl	800d064 <_malloc_r>
 800dd20:	9a01      	ldr	r2, [sp, #4]
 800dd22:	4605      	mov	r5, r0
 800dd24:	b930      	cbnz	r0, 800dd34 <_calloc_r+0x24>
 800dd26:	4628      	mov	r0, r5
 800dd28:	b003      	add	sp, #12
 800dd2a:	bd30      	pop	{r4, r5, pc}
 800dd2c:	220c      	movs	r2, #12
 800dd2e:	6002      	str	r2, [r0, #0]
 800dd30:	2500      	movs	r5, #0
 800dd32:	e7f8      	b.n	800dd26 <_calloc_r+0x16>
 800dd34:	4621      	mov	r1, r4
 800dd36:	f7fe fa18 	bl	800c16a <memset>
 800dd3a:	e7f4      	b.n	800dd26 <_calloc_r+0x16>

0800dd3c <__ascii_mbtowc>:
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	b901      	cbnz	r1, 800dd42 <__ascii_mbtowc+0x6>
 800dd40:	a901      	add	r1, sp, #4
 800dd42:	b142      	cbz	r2, 800dd56 <__ascii_mbtowc+0x1a>
 800dd44:	b14b      	cbz	r3, 800dd5a <__ascii_mbtowc+0x1e>
 800dd46:	7813      	ldrb	r3, [r2, #0]
 800dd48:	600b      	str	r3, [r1, #0]
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	1e10      	subs	r0, r2, #0
 800dd4e:	bf18      	it	ne
 800dd50:	2001      	movne	r0, #1
 800dd52:	b002      	add	sp, #8
 800dd54:	4770      	bx	lr
 800dd56:	4610      	mov	r0, r2
 800dd58:	e7fb      	b.n	800dd52 <__ascii_mbtowc+0x16>
 800dd5a:	f06f 0001 	mvn.w	r0, #1
 800dd5e:	e7f8      	b.n	800dd52 <__ascii_mbtowc+0x16>

0800dd60 <_realloc_r>:
 800dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd64:	4680      	mov	r8, r0
 800dd66:	4614      	mov	r4, r2
 800dd68:	460e      	mov	r6, r1
 800dd6a:	b921      	cbnz	r1, 800dd76 <_realloc_r+0x16>
 800dd6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	4611      	mov	r1, r2
 800dd72:	f7ff b977 	b.w	800d064 <_malloc_r>
 800dd76:	b92a      	cbnz	r2, 800dd84 <_realloc_r+0x24>
 800dd78:	f7ff f900 	bl	800cf7c <_free_r>
 800dd7c:	4625      	mov	r5, r4
 800dd7e:	4628      	mov	r0, r5
 800dd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd84:	f000 f841 	bl	800de0a <_malloc_usable_size_r>
 800dd88:	4284      	cmp	r4, r0
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	d802      	bhi.n	800dd94 <_realloc_r+0x34>
 800dd8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd92:	d812      	bhi.n	800ddba <_realloc_r+0x5a>
 800dd94:	4621      	mov	r1, r4
 800dd96:	4640      	mov	r0, r8
 800dd98:	f7ff f964 	bl	800d064 <_malloc_r>
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d0ed      	beq.n	800dd7e <_realloc_r+0x1e>
 800dda2:	42bc      	cmp	r4, r7
 800dda4:	4622      	mov	r2, r4
 800dda6:	4631      	mov	r1, r6
 800dda8:	bf28      	it	cs
 800ddaa:	463a      	movcs	r2, r7
 800ddac:	f7fe fa5d 	bl	800c26a <memcpy>
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	f7ff f8e2 	bl	800cf7c <_free_r>
 800ddb8:	e7e1      	b.n	800dd7e <_realloc_r+0x1e>
 800ddba:	4635      	mov	r5, r6
 800ddbc:	e7df      	b.n	800dd7e <_realloc_r+0x1e>

0800ddbe <__ascii_wctomb>:
 800ddbe:	b149      	cbz	r1, 800ddd4 <__ascii_wctomb+0x16>
 800ddc0:	2aff      	cmp	r2, #255	; 0xff
 800ddc2:	bf85      	ittet	hi
 800ddc4:	238a      	movhi	r3, #138	; 0x8a
 800ddc6:	6003      	strhi	r3, [r0, #0]
 800ddc8:	700a      	strbls	r2, [r1, #0]
 800ddca:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddce:	bf98      	it	ls
 800ddd0:	2001      	movls	r0, #1
 800ddd2:	4770      	bx	lr
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	4770      	bx	lr

0800ddd8 <fiprintf>:
 800ddd8:	b40e      	push	{r1, r2, r3}
 800ddda:	b503      	push	{r0, r1, lr}
 800dddc:	4601      	mov	r1, r0
 800ddde:	ab03      	add	r3, sp, #12
 800dde0:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <fiprintf+0x20>)
 800dde2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde6:	6800      	ldr	r0, [r0, #0]
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	f000 f83f 	bl	800de6c <_vfiprintf_r>
 800ddee:	b002      	add	sp, #8
 800ddf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf4:	b003      	add	sp, #12
 800ddf6:	4770      	bx	lr
 800ddf8:	20000154 	.word	0x20000154

0800ddfc <abort>:
 800ddfc:	b508      	push	{r3, lr}
 800ddfe:	2006      	movs	r0, #6
 800de00:	f000 fa0c 	bl	800e21c <raise>
 800de04:	2001      	movs	r0, #1
 800de06:	f7f3 fde9 	bl	80019dc <_exit>

0800de0a <_malloc_usable_size_r>:
 800de0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de0e:	1f18      	subs	r0, r3, #4
 800de10:	2b00      	cmp	r3, #0
 800de12:	bfbc      	itt	lt
 800de14:	580b      	ldrlt	r3, [r1, r0]
 800de16:	18c0      	addlt	r0, r0, r3
 800de18:	4770      	bx	lr

0800de1a <__sfputc_r>:
 800de1a:	6893      	ldr	r3, [r2, #8]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	2b00      	cmp	r3, #0
 800de20:	b410      	push	{r4}
 800de22:	6093      	str	r3, [r2, #8]
 800de24:	da08      	bge.n	800de38 <__sfputc_r+0x1e>
 800de26:	6994      	ldr	r4, [r2, #24]
 800de28:	42a3      	cmp	r3, r4
 800de2a:	db01      	blt.n	800de30 <__sfputc_r+0x16>
 800de2c:	290a      	cmp	r1, #10
 800de2e:	d103      	bne.n	800de38 <__sfputc_r+0x1e>
 800de30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de34:	f000 b934 	b.w	800e0a0 <__swbuf_r>
 800de38:	6813      	ldr	r3, [r2, #0]
 800de3a:	1c58      	adds	r0, r3, #1
 800de3c:	6010      	str	r0, [r2, #0]
 800de3e:	7019      	strb	r1, [r3, #0]
 800de40:	4608      	mov	r0, r1
 800de42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <__sfputs_r>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	4606      	mov	r6, r0
 800de4c:	460f      	mov	r7, r1
 800de4e:	4614      	mov	r4, r2
 800de50:	18d5      	adds	r5, r2, r3
 800de52:	42ac      	cmp	r4, r5
 800de54:	d101      	bne.n	800de5a <__sfputs_r+0x12>
 800de56:	2000      	movs	r0, #0
 800de58:	e007      	b.n	800de6a <__sfputs_r+0x22>
 800de5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5e:	463a      	mov	r2, r7
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff ffda 	bl	800de1a <__sfputc_r>
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	d1f3      	bne.n	800de52 <__sfputs_r+0xa>
 800de6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de6c <_vfiprintf_r>:
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	460d      	mov	r5, r1
 800de72:	b09d      	sub	sp, #116	; 0x74
 800de74:	4614      	mov	r4, r2
 800de76:	4698      	mov	r8, r3
 800de78:	4606      	mov	r6, r0
 800de7a:	b118      	cbz	r0, 800de84 <_vfiprintf_r+0x18>
 800de7c:	6a03      	ldr	r3, [r0, #32]
 800de7e:	b90b      	cbnz	r3, 800de84 <_vfiprintf_r+0x18>
 800de80:	f7fe f8da 	bl	800c038 <__sinit>
 800de84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de86:	07d9      	lsls	r1, r3, #31
 800de88:	d405      	bmi.n	800de96 <_vfiprintf_r+0x2a>
 800de8a:	89ab      	ldrh	r3, [r5, #12]
 800de8c:	059a      	lsls	r2, r3, #22
 800de8e:	d402      	bmi.n	800de96 <_vfiprintf_r+0x2a>
 800de90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de92:	f7fe f9e8 	bl	800c266 <__retarget_lock_acquire_recursive>
 800de96:	89ab      	ldrh	r3, [r5, #12]
 800de98:	071b      	lsls	r3, r3, #28
 800de9a:	d501      	bpl.n	800dea0 <_vfiprintf_r+0x34>
 800de9c:	692b      	ldr	r3, [r5, #16]
 800de9e:	b99b      	cbnz	r3, 800dec8 <_vfiprintf_r+0x5c>
 800dea0:	4629      	mov	r1, r5
 800dea2:	4630      	mov	r0, r6
 800dea4:	f000 f93a 	bl	800e11c <__swsetup_r>
 800dea8:	b170      	cbz	r0, 800dec8 <_vfiprintf_r+0x5c>
 800deaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deac:	07dc      	lsls	r4, r3, #31
 800deae:	d504      	bpl.n	800deba <_vfiprintf_r+0x4e>
 800deb0:	f04f 30ff 	mov.w	r0, #4294967295
 800deb4:	b01d      	add	sp, #116	; 0x74
 800deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deba:	89ab      	ldrh	r3, [r5, #12]
 800debc:	0598      	lsls	r0, r3, #22
 800debe:	d4f7      	bmi.n	800deb0 <_vfiprintf_r+0x44>
 800dec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec2:	f7fe f9d1 	bl	800c268 <__retarget_lock_release_recursive>
 800dec6:	e7f3      	b.n	800deb0 <_vfiprintf_r+0x44>
 800dec8:	2300      	movs	r3, #0
 800deca:	9309      	str	r3, [sp, #36]	; 0x24
 800decc:	2320      	movs	r3, #32
 800dece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ded2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ded6:	2330      	movs	r3, #48	; 0x30
 800ded8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e08c <_vfiprintf_r+0x220>
 800dedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dee0:	f04f 0901 	mov.w	r9, #1
 800dee4:	4623      	mov	r3, r4
 800dee6:	469a      	mov	sl, r3
 800dee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deec:	b10a      	cbz	r2, 800def2 <_vfiprintf_r+0x86>
 800deee:	2a25      	cmp	r2, #37	; 0x25
 800def0:	d1f9      	bne.n	800dee6 <_vfiprintf_r+0x7a>
 800def2:	ebba 0b04 	subs.w	fp, sl, r4
 800def6:	d00b      	beq.n	800df10 <_vfiprintf_r+0xa4>
 800def8:	465b      	mov	r3, fp
 800defa:	4622      	mov	r2, r4
 800defc:	4629      	mov	r1, r5
 800defe:	4630      	mov	r0, r6
 800df00:	f7ff ffa2 	bl	800de48 <__sfputs_r>
 800df04:	3001      	adds	r0, #1
 800df06:	f000 80a9 	beq.w	800e05c <_vfiprintf_r+0x1f0>
 800df0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df0c:	445a      	add	r2, fp
 800df0e:	9209      	str	r2, [sp, #36]	; 0x24
 800df10:	f89a 3000 	ldrb.w	r3, [sl]
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 80a1 	beq.w	800e05c <_vfiprintf_r+0x1f0>
 800df1a:	2300      	movs	r3, #0
 800df1c:	f04f 32ff 	mov.w	r2, #4294967295
 800df20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df24:	f10a 0a01 	add.w	sl, sl, #1
 800df28:	9304      	str	r3, [sp, #16]
 800df2a:	9307      	str	r3, [sp, #28]
 800df2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df30:	931a      	str	r3, [sp, #104]	; 0x68
 800df32:	4654      	mov	r4, sl
 800df34:	2205      	movs	r2, #5
 800df36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df3a:	4854      	ldr	r0, [pc, #336]	; (800e08c <_vfiprintf_r+0x220>)
 800df3c:	f7f2 f948 	bl	80001d0 <memchr>
 800df40:	9a04      	ldr	r2, [sp, #16]
 800df42:	b9d8      	cbnz	r0, 800df7c <_vfiprintf_r+0x110>
 800df44:	06d1      	lsls	r1, r2, #27
 800df46:	bf44      	itt	mi
 800df48:	2320      	movmi	r3, #32
 800df4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df4e:	0713      	lsls	r3, r2, #28
 800df50:	bf44      	itt	mi
 800df52:	232b      	movmi	r3, #43	; 0x2b
 800df54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df58:	f89a 3000 	ldrb.w	r3, [sl]
 800df5c:	2b2a      	cmp	r3, #42	; 0x2a
 800df5e:	d015      	beq.n	800df8c <_vfiprintf_r+0x120>
 800df60:	9a07      	ldr	r2, [sp, #28]
 800df62:	4654      	mov	r4, sl
 800df64:	2000      	movs	r0, #0
 800df66:	f04f 0c0a 	mov.w	ip, #10
 800df6a:	4621      	mov	r1, r4
 800df6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df70:	3b30      	subs	r3, #48	; 0x30
 800df72:	2b09      	cmp	r3, #9
 800df74:	d94d      	bls.n	800e012 <_vfiprintf_r+0x1a6>
 800df76:	b1b0      	cbz	r0, 800dfa6 <_vfiprintf_r+0x13a>
 800df78:	9207      	str	r2, [sp, #28]
 800df7a:	e014      	b.n	800dfa6 <_vfiprintf_r+0x13a>
 800df7c:	eba0 0308 	sub.w	r3, r0, r8
 800df80:	fa09 f303 	lsl.w	r3, r9, r3
 800df84:	4313      	orrs	r3, r2
 800df86:	9304      	str	r3, [sp, #16]
 800df88:	46a2      	mov	sl, r4
 800df8a:	e7d2      	b.n	800df32 <_vfiprintf_r+0xc6>
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	1d19      	adds	r1, r3, #4
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	9103      	str	r1, [sp, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	bfbb      	ittet	lt
 800df98:	425b      	neglt	r3, r3
 800df9a:	f042 0202 	orrlt.w	r2, r2, #2
 800df9e:	9307      	strge	r3, [sp, #28]
 800dfa0:	9307      	strlt	r3, [sp, #28]
 800dfa2:	bfb8      	it	lt
 800dfa4:	9204      	strlt	r2, [sp, #16]
 800dfa6:	7823      	ldrb	r3, [r4, #0]
 800dfa8:	2b2e      	cmp	r3, #46	; 0x2e
 800dfaa:	d10c      	bne.n	800dfc6 <_vfiprintf_r+0x15a>
 800dfac:	7863      	ldrb	r3, [r4, #1]
 800dfae:	2b2a      	cmp	r3, #42	; 0x2a
 800dfb0:	d134      	bne.n	800e01c <_vfiprintf_r+0x1b0>
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	1d1a      	adds	r2, r3, #4
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	9203      	str	r2, [sp, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	bfb8      	it	lt
 800dfbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfc2:	3402      	adds	r4, #2
 800dfc4:	9305      	str	r3, [sp, #20]
 800dfc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e09c <_vfiprintf_r+0x230>
 800dfca:	7821      	ldrb	r1, [r4, #0]
 800dfcc:	2203      	movs	r2, #3
 800dfce:	4650      	mov	r0, sl
 800dfd0:	f7f2 f8fe 	bl	80001d0 <memchr>
 800dfd4:	b138      	cbz	r0, 800dfe6 <_vfiprintf_r+0x17a>
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	eba0 000a 	sub.w	r0, r0, sl
 800dfdc:	2240      	movs	r2, #64	; 0x40
 800dfde:	4082      	lsls	r2, r0
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	3401      	adds	r4, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfea:	4829      	ldr	r0, [pc, #164]	; (800e090 <_vfiprintf_r+0x224>)
 800dfec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dff0:	2206      	movs	r2, #6
 800dff2:	f7f2 f8ed 	bl	80001d0 <memchr>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d03f      	beq.n	800e07a <_vfiprintf_r+0x20e>
 800dffa:	4b26      	ldr	r3, [pc, #152]	; (800e094 <_vfiprintf_r+0x228>)
 800dffc:	bb1b      	cbnz	r3, 800e046 <_vfiprintf_r+0x1da>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	3307      	adds	r3, #7
 800e002:	f023 0307 	bic.w	r3, r3, #7
 800e006:	3308      	adds	r3, #8
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e00c:	443b      	add	r3, r7
 800e00e:	9309      	str	r3, [sp, #36]	; 0x24
 800e010:	e768      	b.n	800dee4 <_vfiprintf_r+0x78>
 800e012:	fb0c 3202 	mla	r2, ip, r2, r3
 800e016:	460c      	mov	r4, r1
 800e018:	2001      	movs	r0, #1
 800e01a:	e7a6      	b.n	800df6a <_vfiprintf_r+0xfe>
 800e01c:	2300      	movs	r3, #0
 800e01e:	3401      	adds	r4, #1
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	4619      	mov	r1, r3
 800e024:	f04f 0c0a 	mov.w	ip, #10
 800e028:	4620      	mov	r0, r4
 800e02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e02e:	3a30      	subs	r2, #48	; 0x30
 800e030:	2a09      	cmp	r2, #9
 800e032:	d903      	bls.n	800e03c <_vfiprintf_r+0x1d0>
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0c6      	beq.n	800dfc6 <_vfiprintf_r+0x15a>
 800e038:	9105      	str	r1, [sp, #20]
 800e03a:	e7c4      	b.n	800dfc6 <_vfiprintf_r+0x15a>
 800e03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e040:	4604      	mov	r4, r0
 800e042:	2301      	movs	r3, #1
 800e044:	e7f0      	b.n	800e028 <_vfiprintf_r+0x1bc>
 800e046:	ab03      	add	r3, sp, #12
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	462a      	mov	r2, r5
 800e04c:	4b12      	ldr	r3, [pc, #72]	; (800e098 <_vfiprintf_r+0x22c>)
 800e04e:	a904      	add	r1, sp, #16
 800e050:	4630      	mov	r0, r6
 800e052:	f7fd fb9f 	bl	800b794 <_printf_float>
 800e056:	4607      	mov	r7, r0
 800e058:	1c78      	adds	r0, r7, #1
 800e05a:	d1d6      	bne.n	800e00a <_vfiprintf_r+0x19e>
 800e05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e05e:	07d9      	lsls	r1, r3, #31
 800e060:	d405      	bmi.n	800e06e <_vfiprintf_r+0x202>
 800e062:	89ab      	ldrh	r3, [r5, #12]
 800e064:	059a      	lsls	r2, r3, #22
 800e066:	d402      	bmi.n	800e06e <_vfiprintf_r+0x202>
 800e068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e06a:	f7fe f8fd 	bl	800c268 <__retarget_lock_release_recursive>
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	065b      	lsls	r3, r3, #25
 800e072:	f53f af1d 	bmi.w	800deb0 <_vfiprintf_r+0x44>
 800e076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e078:	e71c      	b.n	800deb4 <_vfiprintf_r+0x48>
 800e07a:	ab03      	add	r3, sp, #12
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	462a      	mov	r2, r5
 800e080:	4b05      	ldr	r3, [pc, #20]	; (800e098 <_vfiprintf_r+0x22c>)
 800e082:	a904      	add	r1, sp, #16
 800e084:	4630      	mov	r0, r6
 800e086:	f7fd fe29 	bl	800bcdc <_printf_i>
 800e08a:	e7e4      	b.n	800e056 <_vfiprintf_r+0x1ea>
 800e08c:	0800f684 	.word	0x0800f684
 800e090:	0800f68e 	.word	0x0800f68e
 800e094:	0800b795 	.word	0x0800b795
 800e098:	0800de49 	.word	0x0800de49
 800e09c:	0800f68a 	.word	0x0800f68a

0800e0a0 <__swbuf_r>:
 800e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a2:	460e      	mov	r6, r1
 800e0a4:	4614      	mov	r4, r2
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	b118      	cbz	r0, 800e0b2 <__swbuf_r+0x12>
 800e0aa:	6a03      	ldr	r3, [r0, #32]
 800e0ac:	b90b      	cbnz	r3, 800e0b2 <__swbuf_r+0x12>
 800e0ae:	f7fd ffc3 	bl	800c038 <__sinit>
 800e0b2:	69a3      	ldr	r3, [r4, #24]
 800e0b4:	60a3      	str	r3, [r4, #8]
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	071a      	lsls	r2, r3, #28
 800e0ba:	d525      	bpl.n	800e108 <__swbuf_r+0x68>
 800e0bc:	6923      	ldr	r3, [r4, #16]
 800e0be:	b31b      	cbz	r3, 800e108 <__swbuf_r+0x68>
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	6922      	ldr	r2, [r4, #16]
 800e0c4:	1a98      	subs	r0, r3, r2
 800e0c6:	6963      	ldr	r3, [r4, #20]
 800e0c8:	b2f6      	uxtb	r6, r6
 800e0ca:	4283      	cmp	r3, r0
 800e0cc:	4637      	mov	r7, r6
 800e0ce:	dc04      	bgt.n	800e0da <__swbuf_r+0x3a>
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f7ff fdac 	bl	800dc30 <_fflush_r>
 800e0d8:	b9e0      	cbnz	r0, 800e114 <__swbuf_r+0x74>
 800e0da:	68a3      	ldr	r3, [r4, #8]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	60a3      	str	r3, [r4, #8]
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	6022      	str	r2, [r4, #0]
 800e0e6:	701e      	strb	r6, [r3, #0]
 800e0e8:	6962      	ldr	r2, [r4, #20]
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d004      	beq.n	800e0fa <__swbuf_r+0x5a>
 800e0f0:	89a3      	ldrh	r3, [r4, #12]
 800e0f2:	07db      	lsls	r3, r3, #31
 800e0f4:	d506      	bpl.n	800e104 <__swbuf_r+0x64>
 800e0f6:	2e0a      	cmp	r6, #10
 800e0f8:	d104      	bne.n	800e104 <__swbuf_r+0x64>
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f7ff fd97 	bl	800dc30 <_fflush_r>
 800e102:	b938      	cbnz	r0, 800e114 <__swbuf_r+0x74>
 800e104:	4638      	mov	r0, r7
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e108:	4621      	mov	r1, r4
 800e10a:	4628      	mov	r0, r5
 800e10c:	f000 f806 	bl	800e11c <__swsetup_r>
 800e110:	2800      	cmp	r0, #0
 800e112:	d0d5      	beq.n	800e0c0 <__swbuf_r+0x20>
 800e114:	f04f 37ff 	mov.w	r7, #4294967295
 800e118:	e7f4      	b.n	800e104 <__swbuf_r+0x64>
	...

0800e11c <__swsetup_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4b2a      	ldr	r3, [pc, #168]	; (800e1c8 <__swsetup_r+0xac>)
 800e120:	4605      	mov	r5, r0
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	460c      	mov	r4, r1
 800e126:	b118      	cbz	r0, 800e130 <__swsetup_r+0x14>
 800e128:	6a03      	ldr	r3, [r0, #32]
 800e12a:	b90b      	cbnz	r3, 800e130 <__swsetup_r+0x14>
 800e12c:	f7fd ff84 	bl	800c038 <__sinit>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e136:	0718      	lsls	r0, r3, #28
 800e138:	d422      	bmi.n	800e180 <__swsetup_r+0x64>
 800e13a:	06d9      	lsls	r1, r3, #27
 800e13c:	d407      	bmi.n	800e14e <__swsetup_r+0x32>
 800e13e:	2309      	movs	r3, #9
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	e034      	b.n	800e1b8 <__swsetup_r+0x9c>
 800e14e:	0758      	lsls	r0, r3, #29
 800e150:	d512      	bpl.n	800e178 <__swsetup_r+0x5c>
 800e152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e154:	b141      	cbz	r1, 800e168 <__swsetup_r+0x4c>
 800e156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e15a:	4299      	cmp	r1, r3
 800e15c:	d002      	beq.n	800e164 <__swsetup_r+0x48>
 800e15e:	4628      	mov	r0, r5
 800e160:	f7fe ff0c 	bl	800cf7c <_free_r>
 800e164:	2300      	movs	r3, #0
 800e166:	6363      	str	r3, [r4, #52]	; 0x34
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	2300      	movs	r3, #0
 800e172:	6063      	str	r3, [r4, #4]
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	f043 0308 	orr.w	r3, r3, #8
 800e17e:	81a3      	strh	r3, [r4, #12]
 800e180:	6923      	ldr	r3, [r4, #16]
 800e182:	b94b      	cbnz	r3, 800e198 <__swsetup_r+0x7c>
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e18e:	d003      	beq.n	800e198 <__swsetup_r+0x7c>
 800e190:	4621      	mov	r1, r4
 800e192:	4628      	mov	r0, r5
 800e194:	f000 f884 	bl	800e2a0 <__smakebuf_r>
 800e198:	89a0      	ldrh	r0, [r4, #12]
 800e19a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e19e:	f010 0301 	ands.w	r3, r0, #1
 800e1a2:	d00a      	beq.n	800e1ba <__swsetup_r+0x9e>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	60a3      	str	r3, [r4, #8]
 800e1a8:	6963      	ldr	r3, [r4, #20]
 800e1aa:	425b      	negs	r3, r3
 800e1ac:	61a3      	str	r3, [r4, #24]
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	b943      	cbnz	r3, 800e1c4 <__swsetup_r+0xa8>
 800e1b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1b6:	d1c4      	bne.n	800e142 <__swsetup_r+0x26>
 800e1b8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ba:	0781      	lsls	r1, r0, #30
 800e1bc:	bf58      	it	pl
 800e1be:	6963      	ldrpl	r3, [r4, #20]
 800e1c0:	60a3      	str	r3, [r4, #8]
 800e1c2:	e7f4      	b.n	800e1ae <__swsetup_r+0x92>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7f7      	b.n	800e1b8 <__swsetup_r+0x9c>
 800e1c8:	20000154 	.word	0x20000154

0800e1cc <_raise_r>:
 800e1cc:	291f      	cmp	r1, #31
 800e1ce:	b538      	push	{r3, r4, r5, lr}
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	460d      	mov	r5, r1
 800e1d4:	d904      	bls.n	800e1e0 <_raise_r+0x14>
 800e1d6:	2316      	movs	r3, #22
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	f04f 30ff 	mov.w	r0, #4294967295
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e1e2:	b112      	cbz	r2, 800e1ea <_raise_r+0x1e>
 800e1e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1e8:	b94b      	cbnz	r3, 800e1fe <_raise_r+0x32>
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 f830 	bl	800e250 <_getpid_r>
 800e1f0:	462a      	mov	r2, r5
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1fa:	f000 b817 	b.w	800e22c <_kill_r>
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d00a      	beq.n	800e218 <_raise_r+0x4c>
 800e202:	1c59      	adds	r1, r3, #1
 800e204:	d103      	bne.n	800e20e <_raise_r+0x42>
 800e206:	2316      	movs	r3, #22
 800e208:	6003      	str	r3, [r0, #0]
 800e20a:	2001      	movs	r0, #1
 800e20c:	e7e7      	b.n	800e1de <_raise_r+0x12>
 800e20e:	2400      	movs	r4, #0
 800e210:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e214:	4628      	mov	r0, r5
 800e216:	4798      	blx	r3
 800e218:	2000      	movs	r0, #0
 800e21a:	e7e0      	b.n	800e1de <_raise_r+0x12>

0800e21c <raise>:
 800e21c:	4b02      	ldr	r3, [pc, #8]	; (800e228 <raise+0xc>)
 800e21e:	4601      	mov	r1, r0
 800e220:	6818      	ldr	r0, [r3, #0]
 800e222:	f7ff bfd3 	b.w	800e1cc <_raise_r>
 800e226:	bf00      	nop
 800e228:	20000154 	.word	0x20000154

0800e22c <_kill_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d07      	ldr	r5, [pc, #28]	; (800e24c <_kill_r+0x20>)
 800e230:	2300      	movs	r3, #0
 800e232:	4604      	mov	r4, r0
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	602b      	str	r3, [r5, #0]
 800e23a:	f7f3 fbbf 	bl	80019bc <_kill>
 800e23e:	1c43      	adds	r3, r0, #1
 800e240:	d102      	bne.n	800e248 <_kill_r+0x1c>
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	b103      	cbz	r3, 800e248 <_kill_r+0x1c>
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	bd38      	pop	{r3, r4, r5, pc}
 800e24a:	bf00      	nop
 800e24c:	200021b8 	.word	0x200021b8

0800e250 <_getpid_r>:
 800e250:	f7f3 bbac 	b.w	80019ac <_getpid>

0800e254 <__swhatbuf_r>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	460c      	mov	r4, r1
 800e258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25c:	2900      	cmp	r1, #0
 800e25e:	b096      	sub	sp, #88	; 0x58
 800e260:	4615      	mov	r5, r2
 800e262:	461e      	mov	r6, r3
 800e264:	da0d      	bge.n	800e282 <__swhatbuf_r+0x2e>
 800e266:	89a3      	ldrh	r3, [r4, #12]
 800e268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e26c:	f04f 0100 	mov.w	r1, #0
 800e270:	bf0c      	ite	eq
 800e272:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e276:	2340      	movne	r3, #64	; 0x40
 800e278:	2000      	movs	r0, #0
 800e27a:	6031      	str	r1, [r6, #0]
 800e27c:	602b      	str	r3, [r5, #0]
 800e27e:	b016      	add	sp, #88	; 0x58
 800e280:	bd70      	pop	{r4, r5, r6, pc}
 800e282:	466a      	mov	r2, sp
 800e284:	f000 f848 	bl	800e318 <_fstat_r>
 800e288:	2800      	cmp	r0, #0
 800e28a:	dbec      	blt.n	800e266 <__swhatbuf_r+0x12>
 800e28c:	9901      	ldr	r1, [sp, #4]
 800e28e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e292:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e296:	4259      	negs	r1, r3
 800e298:	4159      	adcs	r1, r3
 800e29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29e:	e7eb      	b.n	800e278 <__swhatbuf_r+0x24>

0800e2a0 <__smakebuf_r>:
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a4:	079d      	lsls	r5, r3, #30
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	d507      	bpl.n	800e2bc <__smakebuf_r+0x1c>
 800e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	ab01      	add	r3, sp, #4
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f7ff ffc8 	bl	800e254 <__swhatbuf_r>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7fe fecb 	bl	800d064 <_malloc_r>
 800e2ce:	b948      	cbnz	r0, 800e2e4 <__smakebuf_r+0x44>
 800e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d4ef      	bmi.n	800e2b8 <__smakebuf_r+0x18>
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	e7e3      	b.n	800e2ac <__smakebuf_r+0xc>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	6020      	str	r0, [r4, #0]
 800e2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ec:	81a3      	strh	r3, [r4, #12]
 800e2ee:	9b00      	ldr	r3, [sp, #0]
 800e2f0:	6163      	str	r3, [r4, #20]
 800e2f2:	9b01      	ldr	r3, [sp, #4]
 800e2f4:	6120      	str	r0, [r4, #16]
 800e2f6:	b15b      	cbz	r3, 800e310 <__smakebuf_r+0x70>
 800e2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f000 f81d 	bl	800e33c <_isatty_r>
 800e302:	b128      	cbz	r0, 800e310 <__smakebuf_r+0x70>
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	f023 0303 	bic.w	r3, r3, #3
 800e30a:	f043 0301 	orr.w	r3, r3, #1
 800e30e:	81a3      	strh	r3, [r4, #12]
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	431d      	orrs	r5, r3
 800e314:	81a5      	strh	r5, [r4, #12]
 800e316:	e7cf      	b.n	800e2b8 <__smakebuf_r+0x18>

0800e318 <_fstat_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	; (800e338 <_fstat_r+0x20>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	4611      	mov	r1, r2
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	f7f3 fba8 	bl	8001a7a <_fstat>
 800e32a:	1c43      	adds	r3, r0, #1
 800e32c:	d102      	bne.n	800e334 <_fstat_r+0x1c>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	b103      	cbz	r3, 800e334 <_fstat_r+0x1c>
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	bd38      	pop	{r3, r4, r5, pc}
 800e336:	bf00      	nop
 800e338:	200021b8 	.word	0x200021b8

0800e33c <_isatty_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d06      	ldr	r5, [pc, #24]	; (800e358 <_isatty_r+0x1c>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	f7f3 fba7 	bl	8001a9a <_isatty>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_isatty_r+0x1a>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_isatty_r+0x1a>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	200021b8 	.word	0x200021b8
 800e35c:	00000000 	.word	0x00000000

0800e360 <sin>:
 800e360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e362:	ec53 2b10 	vmov	r2, r3, d0
 800e366:	4828      	ldr	r0, [pc, #160]	; (800e408 <sin+0xa8>)
 800e368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e36c:	4281      	cmp	r1, r0
 800e36e:	dc07      	bgt.n	800e380 <sin+0x20>
 800e370:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e400 <sin+0xa0>
 800e374:	2000      	movs	r0, #0
 800e376:	b005      	add	sp, #20
 800e378:	f85d eb04 	ldr.w	lr, [sp], #4
 800e37c:	f000 b910 	b.w	800e5a0 <__kernel_sin>
 800e380:	4822      	ldr	r0, [pc, #136]	; (800e40c <sin+0xac>)
 800e382:	4281      	cmp	r1, r0
 800e384:	dd09      	ble.n	800e39a <sin+0x3a>
 800e386:	ee10 0a10 	vmov	r0, s0
 800e38a:	4619      	mov	r1, r3
 800e38c:	f7f1 ff7c 	bl	8000288 <__aeabi_dsub>
 800e390:	ec41 0b10 	vmov	d0, r0, r1
 800e394:	b005      	add	sp, #20
 800e396:	f85d fb04 	ldr.w	pc, [sp], #4
 800e39a:	4668      	mov	r0, sp
 800e39c:	f000 f9c0 	bl	800e720 <__ieee754_rem_pio2>
 800e3a0:	f000 0003 	and.w	r0, r0, #3
 800e3a4:	2801      	cmp	r0, #1
 800e3a6:	d00c      	beq.n	800e3c2 <sin+0x62>
 800e3a8:	2802      	cmp	r0, #2
 800e3aa:	d011      	beq.n	800e3d0 <sin+0x70>
 800e3ac:	b9f0      	cbnz	r0, 800e3ec <sin+0x8c>
 800e3ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3b2:	ed9d 0b00 	vldr	d0, [sp]
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	f000 f8f2 	bl	800e5a0 <__kernel_sin>
 800e3bc:	ec51 0b10 	vmov	r0, r1, d0
 800e3c0:	e7e6      	b.n	800e390 <sin+0x30>
 800e3c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3c6:	ed9d 0b00 	vldr	d0, [sp]
 800e3ca:	f000 f821 	bl	800e410 <__kernel_cos>
 800e3ce:	e7f5      	b.n	800e3bc <sin+0x5c>
 800e3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3d4:	ed9d 0b00 	vldr	d0, [sp]
 800e3d8:	2001      	movs	r0, #1
 800e3da:	f000 f8e1 	bl	800e5a0 <__kernel_sin>
 800e3de:	ec53 2b10 	vmov	r2, r3, d0
 800e3e2:	ee10 0a10 	vmov	r0, s0
 800e3e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e3ea:	e7d1      	b.n	800e390 <sin+0x30>
 800e3ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3f0:	ed9d 0b00 	vldr	d0, [sp]
 800e3f4:	f000 f80c 	bl	800e410 <__kernel_cos>
 800e3f8:	e7f1      	b.n	800e3de <sin+0x7e>
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w
	...
 800e408:	3fe921fb 	.word	0x3fe921fb
 800e40c:	7fefffff 	.word	0x7fefffff

0800e410 <__kernel_cos>:
 800e410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	ec57 6b10 	vmov	r6, r7, d0
 800e418:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e41c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e420:	ed8d 1b00 	vstr	d1, [sp]
 800e424:	da07      	bge.n	800e436 <__kernel_cos+0x26>
 800e426:	ee10 0a10 	vmov	r0, s0
 800e42a:	4639      	mov	r1, r7
 800e42c:	f7f2 fb94 	bl	8000b58 <__aeabi_d2iz>
 800e430:	2800      	cmp	r0, #0
 800e432:	f000 8088 	beq.w	800e546 <__kernel_cos+0x136>
 800e436:	4632      	mov	r2, r6
 800e438:	463b      	mov	r3, r7
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 f8db 	bl	80005f8 <__aeabi_dmul>
 800e442:	4b51      	ldr	r3, [pc, #324]	; (800e588 <__kernel_cos+0x178>)
 800e444:	2200      	movs	r2, #0
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f2 f8d5 	bl	80005f8 <__aeabi_dmul>
 800e44e:	a340      	add	r3, pc, #256	; (adr r3, 800e550 <__kernel_cos+0x140>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	4682      	mov	sl, r0
 800e456:	468b      	mov	fp, r1
 800e458:	4620      	mov	r0, r4
 800e45a:	4629      	mov	r1, r5
 800e45c:	f7f2 f8cc 	bl	80005f8 <__aeabi_dmul>
 800e460:	a33d      	add	r3, pc, #244	; (adr r3, 800e558 <__kernel_cos+0x148>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 ff11 	bl	800028c <__adddf3>
 800e46a:	4622      	mov	r2, r4
 800e46c:	462b      	mov	r3, r5
 800e46e:	f7f2 f8c3 	bl	80005f8 <__aeabi_dmul>
 800e472:	a33b      	add	r3, pc, #236	; (adr r3, 800e560 <__kernel_cos+0x150>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 f8ba 	bl	80005f8 <__aeabi_dmul>
 800e484:	a338      	add	r3, pc, #224	; (adr r3, 800e568 <__kernel_cos+0x158>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 feff 	bl	800028c <__adddf3>
 800e48e:	4622      	mov	r2, r4
 800e490:	462b      	mov	r3, r5
 800e492:	f7f2 f8b1 	bl	80005f8 <__aeabi_dmul>
 800e496:	a336      	add	r3, pc, #216	; (adr r3, 800e570 <__kernel_cos+0x160>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	462b      	mov	r3, r5
 800e4a4:	f7f2 f8a8 	bl	80005f8 <__aeabi_dmul>
 800e4a8:	a333      	add	r3, pc, #204	; (adr r3, 800e578 <__kernel_cos+0x168>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f1 feed 	bl	800028c <__adddf3>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	f7f2 f89f 	bl	80005f8 <__aeabi_dmul>
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	462b      	mov	r3, r5
 800e4be:	f7f2 f89b 	bl	80005f8 <__aeabi_dmul>
 800e4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	460d      	mov	r5, r1
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	f7f2 f893 	bl	80005f8 <__aeabi_dmul>
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f7f1 fed5 	bl	8000288 <__aeabi_dsub>
 800e4de:	4b2b      	ldr	r3, [pc, #172]	; (800e58c <__kernel_cos+0x17c>)
 800e4e0:	4598      	cmp	r8, r3
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	dc10      	bgt.n	800e50a <__kernel_cos+0xfa>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	4659      	mov	r1, fp
 800e4f0:	f7f1 feca 	bl	8000288 <__aeabi_dsub>
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4926      	ldr	r1, [pc, #152]	; (800e590 <__kernel_cos+0x180>)
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	f7f1 fec4 	bl	8000288 <__aeabi_dsub>
 800e500:	ec41 0b10 	vmov	d0, r0, r1
 800e504:	b003      	add	sp, #12
 800e506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50a:	4b22      	ldr	r3, [pc, #136]	; (800e594 <__kernel_cos+0x184>)
 800e50c:	4920      	ldr	r1, [pc, #128]	; (800e590 <__kernel_cos+0x180>)
 800e50e:	4598      	cmp	r8, r3
 800e510:	bfcc      	ite	gt
 800e512:	4d21      	ldrgt	r5, [pc, #132]	; (800e598 <__kernel_cos+0x188>)
 800e514:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e518:	2400      	movs	r4, #0
 800e51a:	4622      	mov	r2, r4
 800e51c:	462b      	mov	r3, r5
 800e51e:	2000      	movs	r0, #0
 800e520:	f7f1 feb2 	bl	8000288 <__aeabi_dsub>
 800e524:	4622      	mov	r2, r4
 800e526:	4680      	mov	r8, r0
 800e528:	4689      	mov	r9, r1
 800e52a:	462b      	mov	r3, r5
 800e52c:	4650      	mov	r0, sl
 800e52e:	4659      	mov	r1, fp
 800e530:	f7f1 feaa 	bl	8000288 <__aeabi_dsub>
 800e534:	4632      	mov	r2, r6
 800e536:	463b      	mov	r3, r7
 800e538:	f7f1 fea6 	bl	8000288 <__aeabi_dsub>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4640      	mov	r0, r8
 800e542:	4649      	mov	r1, r9
 800e544:	e7da      	b.n	800e4fc <__kernel_cos+0xec>
 800e546:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e580 <__kernel_cos+0x170>
 800e54a:	e7db      	b.n	800e504 <__kernel_cos+0xf4>
 800e54c:	f3af 8000 	nop.w
 800e550:	be8838d4 	.word	0xbe8838d4
 800e554:	bda8fae9 	.word	0xbda8fae9
 800e558:	bdb4b1c4 	.word	0xbdb4b1c4
 800e55c:	3e21ee9e 	.word	0x3e21ee9e
 800e560:	809c52ad 	.word	0x809c52ad
 800e564:	3e927e4f 	.word	0x3e927e4f
 800e568:	19cb1590 	.word	0x19cb1590
 800e56c:	3efa01a0 	.word	0x3efa01a0
 800e570:	16c15177 	.word	0x16c15177
 800e574:	3f56c16c 	.word	0x3f56c16c
 800e578:	5555554c 	.word	0x5555554c
 800e57c:	3fa55555 	.word	0x3fa55555
 800e580:	00000000 	.word	0x00000000
 800e584:	3ff00000 	.word	0x3ff00000
 800e588:	3fe00000 	.word	0x3fe00000
 800e58c:	3fd33332 	.word	0x3fd33332
 800e590:	3ff00000 	.word	0x3ff00000
 800e594:	3fe90000 	.word	0x3fe90000
 800e598:	3fd20000 	.word	0x3fd20000
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <__kernel_sin>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	ed2d 8b04 	vpush	{d8-d9}
 800e5a8:	eeb0 8a41 	vmov.f32	s16, s2
 800e5ac:	eef0 8a61 	vmov.f32	s17, s3
 800e5b0:	ec55 4b10 	vmov	r4, r5, d0
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e5ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e5be:	9001      	str	r0, [sp, #4]
 800e5c0:	da06      	bge.n	800e5d0 <__kernel_sin+0x30>
 800e5c2:	ee10 0a10 	vmov	r0, s0
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	f7f2 fac6 	bl	8000b58 <__aeabi_d2iz>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d051      	beq.n	800e674 <__kernel_sin+0xd4>
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	462b      	mov	r3, r5
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	f7f2 f80e 	bl	80005f8 <__aeabi_dmul>
 800e5dc:	4682      	mov	sl, r0
 800e5de:	468b      	mov	fp, r1
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f2 f806 	bl	80005f8 <__aeabi_dmul>
 800e5ec:	a341      	add	r3, pc, #260	; (adr r3, 800e6f4 <__kernel_sin+0x154>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	4680      	mov	r8, r0
 800e5f4:	4689      	mov	r9, r1
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	4659      	mov	r1, fp
 800e5fa:	f7f1 fffd 	bl	80005f8 <__aeabi_dmul>
 800e5fe:	a33f      	add	r3, pc, #252	; (adr r3, 800e6fc <__kernel_sin+0x15c>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f7f1 fe40 	bl	8000288 <__aeabi_dsub>
 800e608:	4652      	mov	r2, sl
 800e60a:	465b      	mov	r3, fp
 800e60c:	f7f1 fff4 	bl	80005f8 <__aeabi_dmul>
 800e610:	a33c      	add	r3, pc, #240	; (adr r3, 800e704 <__kernel_sin+0x164>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe39 	bl	800028c <__adddf3>
 800e61a:	4652      	mov	r2, sl
 800e61c:	465b      	mov	r3, fp
 800e61e:	f7f1 ffeb 	bl	80005f8 <__aeabi_dmul>
 800e622:	a33a      	add	r3, pc, #232	; (adr r3, 800e70c <__kernel_sin+0x16c>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fe2e 	bl	8000288 <__aeabi_dsub>
 800e62c:	4652      	mov	r2, sl
 800e62e:	465b      	mov	r3, fp
 800e630:	f7f1 ffe2 	bl	80005f8 <__aeabi_dmul>
 800e634:	a337      	add	r3, pc, #220	; (adr r3, 800e714 <__kernel_sin+0x174>)
 800e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63a:	f7f1 fe27 	bl	800028c <__adddf3>
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	4606      	mov	r6, r0
 800e642:	460f      	mov	r7, r1
 800e644:	b9eb      	cbnz	r3, 800e682 <__kernel_sin+0xe2>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4650      	mov	r0, sl
 800e64c:	4659      	mov	r1, fp
 800e64e:	f7f1 ffd3 	bl	80005f8 <__aeabi_dmul>
 800e652:	a325      	add	r3, pc, #148	; (adr r3, 800e6e8 <__kernel_sin+0x148>)
 800e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e658:	f7f1 fe16 	bl	8000288 <__aeabi_dsub>
 800e65c:	4642      	mov	r2, r8
 800e65e:	464b      	mov	r3, r9
 800e660:	f7f1 ffca 	bl	80005f8 <__aeabi_dmul>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4620      	mov	r0, r4
 800e66a:	4629      	mov	r1, r5
 800e66c:	f7f1 fe0e 	bl	800028c <__adddf3>
 800e670:	4604      	mov	r4, r0
 800e672:	460d      	mov	r5, r1
 800e674:	ec45 4b10 	vmov	d0, r4, r5
 800e678:	b003      	add	sp, #12
 800e67a:	ecbd 8b04 	vpop	{d8-d9}
 800e67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e682:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <__kernel_sin+0x150>)
 800e684:	ec51 0b18 	vmov	r0, r1, d8
 800e688:	2200      	movs	r2, #0
 800e68a:	f7f1 ffb5 	bl	80005f8 <__aeabi_dmul>
 800e68e:	4632      	mov	r2, r6
 800e690:	ec41 0b19 	vmov	d9, r0, r1
 800e694:	463b      	mov	r3, r7
 800e696:	4640      	mov	r0, r8
 800e698:	4649      	mov	r1, r9
 800e69a:	f7f1 ffad 	bl	80005f8 <__aeabi_dmul>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	ec51 0b19 	vmov	r0, r1, d9
 800e6a6:	f7f1 fdef 	bl	8000288 <__aeabi_dsub>
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	465b      	mov	r3, fp
 800e6ae:	f7f1 ffa3 	bl	80005f8 <__aeabi_dmul>
 800e6b2:	ec53 2b18 	vmov	r2, r3, d8
 800e6b6:	f7f1 fde7 	bl	8000288 <__aeabi_dsub>
 800e6ba:	a30b      	add	r3, pc, #44	; (adr r3, 800e6e8 <__kernel_sin+0x148>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	460f      	mov	r7, r1
 800e6c4:	4640      	mov	r0, r8
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	f7f1 ff96 	bl	80005f8 <__aeabi_dmul>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	f7f1 fdda 	bl	800028c <__adddf3>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4620      	mov	r0, r4
 800e6de:	4629      	mov	r1, r5
 800e6e0:	f7f1 fdd2 	bl	8000288 <__aeabi_dsub>
 800e6e4:	e7c4      	b.n	800e670 <__kernel_sin+0xd0>
 800e6e6:	bf00      	nop
 800e6e8:	55555549 	.word	0x55555549
 800e6ec:	3fc55555 	.word	0x3fc55555
 800e6f0:	3fe00000 	.word	0x3fe00000
 800e6f4:	5acfd57c 	.word	0x5acfd57c
 800e6f8:	3de5d93a 	.word	0x3de5d93a
 800e6fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e700:	3e5ae5e6 	.word	0x3e5ae5e6
 800e704:	57b1fe7d 	.word	0x57b1fe7d
 800e708:	3ec71de3 	.word	0x3ec71de3
 800e70c:	19c161d5 	.word	0x19c161d5
 800e710:	3f2a01a0 	.word	0x3f2a01a0
 800e714:	1110f8a6 	.word	0x1110f8a6
 800e718:	3f811111 	.word	0x3f811111
 800e71c:	00000000 	.word	0x00000000

0800e720 <__ieee754_rem_pio2>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	ed2d 8b02 	vpush	{d8}
 800e728:	ec55 4b10 	vmov	r4, r5, d0
 800e72c:	4bca      	ldr	r3, [pc, #808]	; (800ea58 <__ieee754_rem_pio2+0x338>)
 800e72e:	b08b      	sub	sp, #44	; 0x2c
 800e730:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e734:	4598      	cmp	r8, r3
 800e736:	4682      	mov	sl, r0
 800e738:	9502      	str	r5, [sp, #8]
 800e73a:	dc08      	bgt.n	800e74e <__ieee754_rem_pio2+0x2e>
 800e73c:	2200      	movs	r2, #0
 800e73e:	2300      	movs	r3, #0
 800e740:	ed80 0b00 	vstr	d0, [r0]
 800e744:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e748:	f04f 0b00 	mov.w	fp, #0
 800e74c:	e028      	b.n	800e7a0 <__ieee754_rem_pio2+0x80>
 800e74e:	4bc3      	ldr	r3, [pc, #780]	; (800ea5c <__ieee754_rem_pio2+0x33c>)
 800e750:	4598      	cmp	r8, r3
 800e752:	dc78      	bgt.n	800e846 <__ieee754_rem_pio2+0x126>
 800e754:	9b02      	ldr	r3, [sp, #8]
 800e756:	4ec2      	ldr	r6, [pc, #776]	; (800ea60 <__ieee754_rem_pio2+0x340>)
 800e758:	2b00      	cmp	r3, #0
 800e75a:	ee10 0a10 	vmov	r0, s0
 800e75e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ea20 <__ieee754_rem_pio2+0x300>)
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	4629      	mov	r1, r5
 800e766:	dd39      	ble.n	800e7dc <__ieee754_rem_pio2+0xbc>
 800e768:	f7f1 fd8e 	bl	8000288 <__aeabi_dsub>
 800e76c:	45b0      	cmp	r8, r6
 800e76e:	4604      	mov	r4, r0
 800e770:	460d      	mov	r5, r1
 800e772:	d01b      	beq.n	800e7ac <__ieee754_rem_pio2+0x8c>
 800e774:	a3ac      	add	r3, pc, #688	; (adr r3, 800ea28 <__ieee754_rem_pio2+0x308>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 fd85 	bl	8000288 <__aeabi_dsub>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	e9ca 2300 	strd	r2, r3, [sl]
 800e786:	4620      	mov	r0, r4
 800e788:	4629      	mov	r1, r5
 800e78a:	f7f1 fd7d 	bl	8000288 <__aeabi_dsub>
 800e78e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ea28 <__ieee754_rem_pio2+0x308>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 fd78 	bl	8000288 <__aeabi_dsub>
 800e798:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e79c:	f04f 0b01 	mov.w	fp, #1
 800e7a0:	4658      	mov	r0, fp
 800e7a2:	b00b      	add	sp, #44	; 0x2c
 800e7a4:	ecbd 8b02 	vpop	{d8}
 800e7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ac:	a3a0      	add	r3, pc, #640	; (adr r3, 800ea30 <__ieee754_rem_pio2+0x310>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	f7f1 fd69 	bl	8000288 <__aeabi_dsub>
 800e7b6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ea38 <__ieee754_rem_pio2+0x318>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	4604      	mov	r4, r0
 800e7be:	460d      	mov	r5, r1
 800e7c0:	f7f1 fd62 	bl	8000288 <__aeabi_dsub>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	e9ca 2300 	strd	r2, r3, [sl]
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	f7f1 fd5a 	bl	8000288 <__aeabi_dsub>
 800e7d4:	a398      	add	r3, pc, #608	; (adr r3, 800ea38 <__ieee754_rem_pio2+0x318>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	e7db      	b.n	800e794 <__ieee754_rem_pio2+0x74>
 800e7dc:	f7f1 fd56 	bl	800028c <__adddf3>
 800e7e0:	45b0      	cmp	r8, r6
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	d016      	beq.n	800e816 <__ieee754_rem_pio2+0xf6>
 800e7e8:	a38f      	add	r3, pc, #572	; (adr r3, 800ea28 <__ieee754_rem_pio2+0x308>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f1 fd4d 	bl	800028c <__adddf3>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	e9ca 2300 	strd	r2, r3, [sl]
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 fd43 	bl	8000288 <__aeabi_dsub>
 800e802:	a389      	add	r3, pc, #548	; (adr r3, 800ea28 <__ieee754_rem_pio2+0x308>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	f7f1 fd40 	bl	800028c <__adddf3>
 800e80c:	f04f 3bff 	mov.w	fp, #4294967295
 800e810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e814:	e7c4      	b.n	800e7a0 <__ieee754_rem_pio2+0x80>
 800e816:	a386      	add	r3, pc, #536	; (adr r3, 800ea30 <__ieee754_rem_pio2+0x310>)
 800e818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81c:	f7f1 fd36 	bl	800028c <__adddf3>
 800e820:	a385      	add	r3, pc, #532	; (adr r3, 800ea38 <__ieee754_rem_pio2+0x318>)
 800e822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e826:	4604      	mov	r4, r0
 800e828:	460d      	mov	r5, r1
 800e82a:	f7f1 fd2f 	bl	800028c <__adddf3>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	e9ca 2300 	strd	r2, r3, [sl]
 800e836:	4620      	mov	r0, r4
 800e838:	4629      	mov	r1, r5
 800e83a:	f7f1 fd25 	bl	8000288 <__aeabi_dsub>
 800e83e:	a37e      	add	r3, pc, #504	; (adr r3, 800ea38 <__ieee754_rem_pio2+0x318>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	e7e0      	b.n	800e808 <__ieee754_rem_pio2+0xe8>
 800e846:	4b87      	ldr	r3, [pc, #540]	; (800ea64 <__ieee754_rem_pio2+0x344>)
 800e848:	4598      	cmp	r8, r3
 800e84a:	f300 80d8 	bgt.w	800e9fe <__ieee754_rem_pio2+0x2de>
 800e84e:	f000 f96d 	bl	800eb2c <fabs>
 800e852:	ec55 4b10 	vmov	r4, r5, d0
 800e856:	ee10 0a10 	vmov	r0, s0
 800e85a:	a379      	add	r3, pc, #484	; (adr r3, 800ea40 <__ieee754_rem_pio2+0x320>)
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	4629      	mov	r1, r5
 800e862:	f7f1 fec9 	bl	80005f8 <__aeabi_dmul>
 800e866:	4b80      	ldr	r3, [pc, #512]	; (800ea68 <__ieee754_rem_pio2+0x348>)
 800e868:	2200      	movs	r2, #0
 800e86a:	f7f1 fd0f 	bl	800028c <__adddf3>
 800e86e:	f7f2 f973 	bl	8000b58 <__aeabi_d2iz>
 800e872:	4683      	mov	fp, r0
 800e874:	f7f1 fe56 	bl	8000524 <__aeabi_i2d>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	ec43 2b18 	vmov	d8, r2, r3
 800e880:	a367      	add	r3, pc, #412	; (adr r3, 800ea20 <__ieee754_rem_pio2+0x300>)
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	f7f1 feb7 	bl	80005f8 <__aeabi_dmul>
 800e88a:	4602      	mov	r2, r0
 800e88c:	460b      	mov	r3, r1
 800e88e:	4620      	mov	r0, r4
 800e890:	4629      	mov	r1, r5
 800e892:	f7f1 fcf9 	bl	8000288 <__aeabi_dsub>
 800e896:	a364      	add	r3, pc, #400	; (adr r3, 800ea28 <__ieee754_rem_pio2+0x308>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	4606      	mov	r6, r0
 800e89e:	460f      	mov	r7, r1
 800e8a0:	ec51 0b18 	vmov	r0, r1, d8
 800e8a4:	f7f1 fea8 	bl	80005f8 <__aeabi_dmul>
 800e8a8:	f1bb 0f1f 	cmp.w	fp, #31
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	dc0d      	bgt.n	800e8ce <__ieee754_rem_pio2+0x1ae>
 800e8b2:	4b6e      	ldr	r3, [pc, #440]	; (800ea6c <__ieee754_rem_pio2+0x34c>)
 800e8b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8bc:	4543      	cmp	r3, r8
 800e8be:	d006      	beq.n	800e8ce <__ieee754_rem_pio2+0x1ae>
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	4639      	mov	r1, r7
 800e8c8:	f7f1 fcde 	bl	8000288 <__aeabi_dsub>
 800e8cc:	e00e      	b.n	800e8ec <__ieee754_rem_pio2+0x1cc>
 800e8ce:	462b      	mov	r3, r5
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	4639      	mov	r1, r7
 800e8d6:	f7f1 fcd7 	bl	8000288 <__aeabi_dsub>
 800e8da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e8de:	9303      	str	r3, [sp, #12]
 800e8e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e8e4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e8e8:	2b10      	cmp	r3, #16
 800e8ea:	dc02      	bgt.n	800e8f2 <__ieee754_rem_pio2+0x1d2>
 800e8ec:	e9ca 0100 	strd	r0, r1, [sl]
 800e8f0:	e039      	b.n	800e966 <__ieee754_rem_pio2+0x246>
 800e8f2:	a34f      	add	r3, pc, #316	; (adr r3, 800ea30 <__ieee754_rem_pio2+0x310>)
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	ec51 0b18 	vmov	r0, r1, d8
 800e8fc:	f7f1 fe7c 	bl	80005f8 <__aeabi_dmul>
 800e900:	4604      	mov	r4, r0
 800e902:	460d      	mov	r5, r1
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	4630      	mov	r0, r6
 800e90a:	4639      	mov	r1, r7
 800e90c:	f7f1 fcbc 	bl	8000288 <__aeabi_dsub>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4680      	mov	r8, r0
 800e916:	4689      	mov	r9, r1
 800e918:	4630      	mov	r0, r6
 800e91a:	4639      	mov	r1, r7
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	4622      	mov	r2, r4
 800e922:	462b      	mov	r3, r5
 800e924:	f7f1 fcb0 	bl	8000288 <__aeabi_dsub>
 800e928:	a343      	add	r3, pc, #268	; (adr r3, 800ea38 <__ieee754_rem_pio2+0x318>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	4604      	mov	r4, r0
 800e930:	460d      	mov	r5, r1
 800e932:	ec51 0b18 	vmov	r0, r1, d8
 800e936:	f7f1 fe5f 	bl	80005f8 <__aeabi_dmul>
 800e93a:	4622      	mov	r2, r4
 800e93c:	462b      	mov	r3, r5
 800e93e:	f7f1 fca3 	bl	8000288 <__aeabi_dsub>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	4604      	mov	r4, r0
 800e948:	460d      	mov	r5, r1
 800e94a:	4640      	mov	r0, r8
 800e94c:	4649      	mov	r1, r9
 800e94e:	f7f1 fc9b 	bl	8000288 <__aeabi_dsub>
 800e952:	9a03      	ldr	r2, [sp, #12]
 800e954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	2b31      	cmp	r3, #49	; 0x31
 800e95c:	dc24      	bgt.n	800e9a8 <__ieee754_rem_pio2+0x288>
 800e95e:	e9ca 0100 	strd	r0, r1, [sl]
 800e962:	4646      	mov	r6, r8
 800e964:	464f      	mov	r7, r9
 800e966:	e9da 8900 	ldrd	r8, r9, [sl]
 800e96a:	4630      	mov	r0, r6
 800e96c:	4642      	mov	r2, r8
 800e96e:	464b      	mov	r3, r9
 800e970:	4639      	mov	r1, r7
 800e972:	f7f1 fc89 	bl	8000288 <__aeabi_dsub>
 800e976:	462b      	mov	r3, r5
 800e978:	4622      	mov	r2, r4
 800e97a:	f7f1 fc85 	bl	8000288 <__aeabi_dsub>
 800e97e:	9b02      	ldr	r3, [sp, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e986:	f6bf af0b 	bge.w	800e7a0 <__ieee754_rem_pio2+0x80>
 800e98a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e98e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e996:	f8ca 8000 	str.w	r8, [sl]
 800e99a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e99e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e9a2:	f1cb 0b00 	rsb	fp, fp, #0
 800e9a6:	e6fb      	b.n	800e7a0 <__ieee754_rem_pio2+0x80>
 800e9a8:	a327      	add	r3, pc, #156	; (adr r3, 800ea48 <__ieee754_rem_pio2+0x328>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	ec51 0b18 	vmov	r0, r1, d8
 800e9b2:	f7f1 fe21 	bl	80005f8 <__aeabi_dmul>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	f7f1 fc61 	bl	8000288 <__aeabi_dsub>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	460f      	mov	r7, r1
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	f7f1 fc59 	bl	8000288 <__aeabi_dsub>
 800e9d6:	4622      	mov	r2, r4
 800e9d8:	462b      	mov	r3, r5
 800e9da:	f7f1 fc55 	bl	8000288 <__aeabi_dsub>
 800e9de:	a31c      	add	r3, pc, #112	; (adr r3, 800ea50 <__ieee754_rem_pio2+0x330>)
 800e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	ec51 0b18 	vmov	r0, r1, d8
 800e9ec:	f7f1 fe04 	bl	80005f8 <__aeabi_dmul>
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	f7f1 fc48 	bl	8000288 <__aeabi_dsub>
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	e760      	b.n	800e8c0 <__ieee754_rem_pio2+0x1a0>
 800e9fe:	4b1c      	ldr	r3, [pc, #112]	; (800ea70 <__ieee754_rem_pio2+0x350>)
 800ea00:	4598      	cmp	r8, r3
 800ea02:	dd37      	ble.n	800ea74 <__ieee754_rem_pio2+0x354>
 800ea04:	ee10 2a10 	vmov	r2, s0
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fc3b 	bl	8000288 <__aeabi_dsub>
 800ea12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea16:	e9ca 0100 	strd	r0, r1, [sl]
 800ea1a:	e695      	b.n	800e748 <__ieee754_rem_pio2+0x28>
 800ea1c:	f3af 8000 	nop.w
 800ea20:	54400000 	.word	0x54400000
 800ea24:	3ff921fb 	.word	0x3ff921fb
 800ea28:	1a626331 	.word	0x1a626331
 800ea2c:	3dd0b461 	.word	0x3dd0b461
 800ea30:	1a600000 	.word	0x1a600000
 800ea34:	3dd0b461 	.word	0x3dd0b461
 800ea38:	2e037073 	.word	0x2e037073
 800ea3c:	3ba3198a 	.word	0x3ba3198a
 800ea40:	6dc9c883 	.word	0x6dc9c883
 800ea44:	3fe45f30 	.word	0x3fe45f30
 800ea48:	2e000000 	.word	0x2e000000
 800ea4c:	3ba3198a 	.word	0x3ba3198a
 800ea50:	252049c1 	.word	0x252049c1
 800ea54:	397b839a 	.word	0x397b839a
 800ea58:	3fe921fb 	.word	0x3fe921fb
 800ea5c:	4002d97b 	.word	0x4002d97b
 800ea60:	3ff921fb 	.word	0x3ff921fb
 800ea64:	413921fb 	.word	0x413921fb
 800ea68:	3fe00000 	.word	0x3fe00000
 800ea6c:	0800f7dc 	.word	0x0800f7dc
 800ea70:	7fefffff 	.word	0x7fefffff
 800ea74:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ea78:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ea7c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ea80:	4620      	mov	r0, r4
 800ea82:	460d      	mov	r5, r1
 800ea84:	f7f2 f868 	bl	8000b58 <__aeabi_d2iz>
 800ea88:	f7f1 fd4c 	bl	8000524 <__aeabi_i2d>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4620      	mov	r0, r4
 800ea92:	4629      	mov	r1, r5
 800ea94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea98:	f7f1 fbf6 	bl	8000288 <__aeabi_dsub>
 800ea9c:	4b21      	ldr	r3, [pc, #132]	; (800eb24 <__ieee754_rem_pio2+0x404>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f7f1 fdaa 	bl	80005f8 <__aeabi_dmul>
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	f7f2 f856 	bl	8000b58 <__aeabi_d2iz>
 800eaac:	f7f1 fd3a 	bl	8000524 <__aeabi_i2d>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4620      	mov	r0, r4
 800eab6:	4629      	mov	r1, r5
 800eab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eabc:	f7f1 fbe4 	bl	8000288 <__aeabi_dsub>
 800eac0:	4b18      	ldr	r3, [pc, #96]	; (800eb24 <__ieee754_rem_pio2+0x404>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	f7f1 fd98 	bl	80005f8 <__aeabi_dmul>
 800eac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eacc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ead0:	2703      	movs	r7, #3
 800ead2:	2400      	movs	r4, #0
 800ead4:	2500      	movs	r5, #0
 800ead6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800eada:	4622      	mov	r2, r4
 800eadc:	462b      	mov	r3, r5
 800eade:	46b9      	mov	r9, r7
 800eae0:	3f01      	subs	r7, #1
 800eae2:	f7f1 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d1f5      	bne.n	800ead6 <__ieee754_rem_pio2+0x3b6>
 800eaea:	4b0f      	ldr	r3, [pc, #60]	; (800eb28 <__ieee754_rem_pio2+0x408>)
 800eaec:	9301      	str	r3, [sp, #4]
 800eaee:	2302      	movs	r3, #2
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	4632      	mov	r2, r6
 800eaf4:	464b      	mov	r3, r9
 800eaf6:	4651      	mov	r1, sl
 800eaf8:	a804      	add	r0, sp, #16
 800eafa:	f000 f821 	bl	800eb40 <__kernel_rem_pio2>
 800eafe:	9b02      	ldr	r3, [sp, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	4683      	mov	fp, r0
 800eb04:	f6bf ae4c 	bge.w	800e7a0 <__ieee754_rem_pio2+0x80>
 800eb08:	e9da 2100 	ldrd	r2, r1, [sl]
 800eb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb10:	e9ca 2300 	strd	r2, r3, [sl]
 800eb14:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800eb18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb1c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800eb20:	e73f      	b.n	800e9a2 <__ieee754_rem_pio2+0x282>
 800eb22:	bf00      	nop
 800eb24:	41700000 	.word	0x41700000
 800eb28:	0800f85c 	.word	0x0800f85c

0800eb2c <fabs>:
 800eb2c:	ec51 0b10 	vmov	r0, r1, d0
 800eb30:	ee10 2a10 	vmov	r2, s0
 800eb34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb38:	ec43 2b10 	vmov	d0, r2, r3
 800eb3c:	4770      	bx	lr
	...

0800eb40 <__kernel_rem_pio2>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	ed2d 8b02 	vpush	{d8}
 800eb48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800eb4c:	f112 0f14 	cmn.w	r2, #20
 800eb50:	9306      	str	r3, [sp, #24]
 800eb52:	9104      	str	r1, [sp, #16]
 800eb54:	4bc2      	ldr	r3, [pc, #776]	; (800ee60 <__kernel_rem_pio2+0x320>)
 800eb56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eb58:	9009      	str	r0, [sp, #36]	; 0x24
 800eb5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	9b06      	ldr	r3, [sp, #24]
 800eb62:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb66:	bfa8      	it	ge
 800eb68:	1ed4      	subge	r4, r2, #3
 800eb6a:	9305      	str	r3, [sp, #20]
 800eb6c:	bfb2      	itee	lt
 800eb6e:	2400      	movlt	r4, #0
 800eb70:	2318      	movge	r3, #24
 800eb72:	fb94 f4f3 	sdivge	r4, r4, r3
 800eb76:	f06f 0317 	mvn.w	r3, #23
 800eb7a:	fb04 3303 	mla	r3, r4, r3, r3
 800eb7e:	eb03 0a02 	add.w	sl, r3, r2
 800eb82:	9b00      	ldr	r3, [sp, #0]
 800eb84:	9a05      	ldr	r2, [sp, #20]
 800eb86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ee50 <__kernel_rem_pio2+0x310>
 800eb8a:	eb03 0802 	add.w	r8, r3, r2
 800eb8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eb90:	1aa7      	subs	r7, r4, r2
 800eb92:	ae20      	add	r6, sp, #128	; 0x80
 800eb94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eb98:	2500      	movs	r5, #0
 800eb9a:	4545      	cmp	r5, r8
 800eb9c:	dd13      	ble.n	800ebc6 <__kernel_rem_pio2+0x86>
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	aa20      	add	r2, sp, #128	; 0x80
 800eba2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800eba6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ebaa:	f04f 0800 	mov.w	r8, #0
 800ebae:	9b00      	ldr	r3, [sp, #0]
 800ebb0:	4598      	cmp	r8, r3
 800ebb2:	dc31      	bgt.n	800ec18 <__kernel_rem_pio2+0xd8>
 800ebb4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ee50 <__kernel_rem_pio2+0x310>
 800ebb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ebbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ebc0:	462f      	mov	r7, r5
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	e01b      	b.n	800ebfe <__kernel_rem_pio2+0xbe>
 800ebc6:	42ef      	cmn	r7, r5
 800ebc8:	d407      	bmi.n	800ebda <__kernel_rem_pio2+0x9a>
 800ebca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ebce:	f7f1 fca9 	bl	8000524 <__aeabi_i2d>
 800ebd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	e7df      	b.n	800eb9a <__kernel_rem_pio2+0x5a>
 800ebda:	ec51 0b18 	vmov	r0, r1, d8
 800ebde:	e7f8      	b.n	800ebd2 <__kernel_rem_pio2+0x92>
 800ebe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ebe8:	f7f1 fd06 	bl	80005f8 <__aeabi_dmul>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebf4:	f7f1 fb4a 	bl	800028c <__adddf3>
 800ebf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebfc:	3601      	adds	r6, #1
 800ebfe:	9b05      	ldr	r3, [sp, #20]
 800ec00:	429e      	cmp	r6, r3
 800ec02:	f1a7 0708 	sub.w	r7, r7, #8
 800ec06:	ddeb      	ble.n	800ebe0 <__kernel_rem_pio2+0xa0>
 800ec08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec0c:	f108 0801 	add.w	r8, r8, #1
 800ec10:	ecab 7b02 	vstmia	fp!, {d7}
 800ec14:	3508      	adds	r5, #8
 800ec16:	e7ca      	b.n	800ebae <__kernel_rem_pio2+0x6e>
 800ec18:	9b00      	ldr	r3, [sp, #0]
 800ec1a:	aa0c      	add	r2, sp, #48	; 0x30
 800ec1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec22:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ec24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec28:	9c00      	ldr	r4, [sp, #0]
 800ec2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ec2c:	00e3      	lsls	r3, r4, #3
 800ec2e:	9308      	str	r3, [sp, #32]
 800ec30:	ab98      	add	r3, sp, #608	; 0x260
 800ec32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ec3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ec3e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ec44:	46c3      	mov	fp, r8
 800ec46:	46a1      	mov	r9, r4
 800ec48:	f1b9 0f00 	cmp.w	r9, #0
 800ec4c:	f1a5 0508 	sub.w	r5, r5, #8
 800ec50:	dc77      	bgt.n	800ed42 <__kernel_rem_pio2+0x202>
 800ec52:	ec47 6b10 	vmov	d0, r6, r7
 800ec56:	4650      	mov	r0, sl
 800ec58:	f000 fac2 	bl	800f1e0 <scalbn>
 800ec5c:	ec57 6b10 	vmov	r6, r7, d0
 800ec60:	2200      	movs	r2, #0
 800ec62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ec66:	ee10 0a10 	vmov	r0, s0
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ec70:	ec41 0b10 	vmov	d0, r0, r1
 800ec74:	f000 fb34 	bl	800f2e0 <floor>
 800ec78:	4b7a      	ldr	r3, [pc, #488]	; (800ee64 <__kernel_rem_pio2+0x324>)
 800ec7a:	ec51 0b10 	vmov	r0, r1, d0
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f7f1 fcba 	bl	80005f8 <__aeabi_dmul>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	4630      	mov	r0, r6
 800ec8a:	4639      	mov	r1, r7
 800ec8c:	f7f1 fafc 	bl	8000288 <__aeabi_dsub>
 800ec90:	460f      	mov	r7, r1
 800ec92:	4606      	mov	r6, r0
 800ec94:	f7f1 ff60 	bl	8000b58 <__aeabi_d2iz>
 800ec98:	9002      	str	r0, [sp, #8]
 800ec9a:	f7f1 fc43 	bl	8000524 <__aeabi_i2d>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 faef 	bl	8000288 <__aeabi_dsub>
 800ecaa:	f1ba 0f00 	cmp.w	sl, #0
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460f      	mov	r7, r1
 800ecb2:	dd6d      	ble.n	800ed90 <__kernel_rem_pio2+0x250>
 800ecb4:	1e61      	subs	r1, r4, #1
 800ecb6:	ab0c      	add	r3, sp, #48	; 0x30
 800ecb8:	9d02      	ldr	r5, [sp, #8]
 800ecba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecbe:	f1ca 0018 	rsb	r0, sl, #24
 800ecc2:	fa43 f200 	asr.w	r2, r3, r0
 800ecc6:	4415      	add	r5, r2
 800ecc8:	4082      	lsls	r2, r0
 800ecca:	1a9b      	subs	r3, r3, r2
 800eccc:	aa0c      	add	r2, sp, #48	; 0x30
 800ecce:	9502      	str	r5, [sp, #8]
 800ecd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ecd4:	f1ca 0217 	rsb	r2, sl, #23
 800ecd8:	fa43 fb02 	asr.w	fp, r3, r2
 800ecdc:	f1bb 0f00 	cmp.w	fp, #0
 800ece0:	dd65      	ble.n	800edae <__kernel_rem_pio2+0x26e>
 800ece2:	9b02      	ldr	r3, [sp, #8]
 800ece4:	2200      	movs	r2, #0
 800ece6:	3301      	adds	r3, #1
 800ece8:	9302      	str	r3, [sp, #8]
 800ecea:	4615      	mov	r5, r2
 800ecec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ecf0:	4294      	cmp	r4, r2
 800ecf2:	f300 809f 	bgt.w	800ee34 <__kernel_rem_pio2+0x2f4>
 800ecf6:	f1ba 0f00 	cmp.w	sl, #0
 800ecfa:	dd07      	ble.n	800ed0c <__kernel_rem_pio2+0x1cc>
 800ecfc:	f1ba 0f01 	cmp.w	sl, #1
 800ed00:	f000 80c1 	beq.w	800ee86 <__kernel_rem_pio2+0x346>
 800ed04:	f1ba 0f02 	cmp.w	sl, #2
 800ed08:	f000 80c7 	beq.w	800ee9a <__kernel_rem_pio2+0x35a>
 800ed0c:	f1bb 0f02 	cmp.w	fp, #2
 800ed10:	d14d      	bne.n	800edae <__kernel_rem_pio2+0x26e>
 800ed12:	4632      	mov	r2, r6
 800ed14:	463b      	mov	r3, r7
 800ed16:	4954      	ldr	r1, [pc, #336]	; (800ee68 <__kernel_rem_pio2+0x328>)
 800ed18:	2000      	movs	r0, #0
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	4606      	mov	r6, r0
 800ed20:	460f      	mov	r7, r1
 800ed22:	2d00      	cmp	r5, #0
 800ed24:	d043      	beq.n	800edae <__kernel_rem_pio2+0x26e>
 800ed26:	4650      	mov	r0, sl
 800ed28:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ee58 <__kernel_rem_pio2+0x318>
 800ed2c:	f000 fa58 	bl	800f1e0 <scalbn>
 800ed30:	4630      	mov	r0, r6
 800ed32:	4639      	mov	r1, r7
 800ed34:	ec53 2b10 	vmov	r2, r3, d0
 800ed38:	f7f1 faa6 	bl	8000288 <__aeabi_dsub>
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	460f      	mov	r7, r1
 800ed40:	e035      	b.n	800edae <__kernel_rem_pio2+0x26e>
 800ed42:	4b4a      	ldr	r3, [pc, #296]	; (800ee6c <__kernel_rem_pio2+0x32c>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	4630      	mov	r0, r6
 800ed48:	4639      	mov	r1, r7
 800ed4a:	f7f1 fc55 	bl	80005f8 <__aeabi_dmul>
 800ed4e:	f7f1 ff03 	bl	8000b58 <__aeabi_d2iz>
 800ed52:	f7f1 fbe7 	bl	8000524 <__aeabi_i2d>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	ec43 2b18 	vmov	d8, r2, r3
 800ed5e:	4b44      	ldr	r3, [pc, #272]	; (800ee70 <__kernel_rem_pio2+0x330>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	f7f1 fc49 	bl	80005f8 <__aeabi_dmul>
 800ed66:	4602      	mov	r2, r0
 800ed68:	460b      	mov	r3, r1
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	4639      	mov	r1, r7
 800ed6e:	f7f1 fa8b 	bl	8000288 <__aeabi_dsub>
 800ed72:	f7f1 fef1 	bl	8000b58 <__aeabi_d2iz>
 800ed76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed7a:	f84b 0b04 	str.w	r0, [fp], #4
 800ed7e:	ec51 0b18 	vmov	r0, r1, d8
 800ed82:	f7f1 fa83 	bl	800028c <__adddf3>
 800ed86:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	460f      	mov	r7, r1
 800ed8e:	e75b      	b.n	800ec48 <__kernel_rem_pio2+0x108>
 800ed90:	d106      	bne.n	800eda0 <__kernel_rem_pio2+0x260>
 800ed92:	1e63      	subs	r3, r4, #1
 800ed94:	aa0c      	add	r2, sp, #48	; 0x30
 800ed96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed9a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ed9e:	e79d      	b.n	800ecdc <__kernel_rem_pio2+0x19c>
 800eda0:	4b34      	ldr	r3, [pc, #208]	; (800ee74 <__kernel_rem_pio2+0x334>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	f7f1 feae 	bl	8000b04 <__aeabi_dcmpge>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d140      	bne.n	800ee2e <__kernel_rem_pio2+0x2ee>
 800edac:	4683      	mov	fp, r0
 800edae:	2200      	movs	r2, #0
 800edb0:	2300      	movs	r3, #0
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	f7f1 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 800edba:	2800      	cmp	r0, #0
 800edbc:	f000 80c1 	beq.w	800ef42 <__kernel_rem_pio2+0x402>
 800edc0:	1e65      	subs	r5, r4, #1
 800edc2:	462b      	mov	r3, r5
 800edc4:	2200      	movs	r2, #0
 800edc6:	9900      	ldr	r1, [sp, #0]
 800edc8:	428b      	cmp	r3, r1
 800edca:	da6d      	bge.n	800eea8 <__kernel_rem_pio2+0x368>
 800edcc:	2a00      	cmp	r2, #0
 800edce:	f000 808a 	beq.w	800eee6 <__kernel_rem_pio2+0x3a6>
 800edd2:	ab0c      	add	r3, sp, #48	; 0x30
 800edd4:	f1aa 0a18 	sub.w	sl, sl, #24
 800edd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 80ae 	beq.w	800ef3e <__kernel_rem_pio2+0x3fe>
 800ede2:	4650      	mov	r0, sl
 800ede4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ee58 <__kernel_rem_pio2+0x318>
 800ede8:	f000 f9fa 	bl	800f1e0 <scalbn>
 800edec:	1c6b      	adds	r3, r5, #1
 800edee:	00da      	lsls	r2, r3, #3
 800edf0:	9205      	str	r2, [sp, #20]
 800edf2:	ec57 6b10 	vmov	r6, r7, d0
 800edf6:	aa70      	add	r2, sp, #448	; 0x1c0
 800edf8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ee6c <__kernel_rem_pio2+0x32c>
 800edfc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ee00:	462c      	mov	r4, r5
 800ee02:	f04f 0800 	mov.w	r8, #0
 800ee06:	2c00      	cmp	r4, #0
 800ee08:	f280 80d4 	bge.w	800efb4 <__kernel_rem_pio2+0x474>
 800ee0c:	462c      	mov	r4, r5
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	f2c0 8102 	blt.w	800f018 <__kernel_rem_pio2+0x4d8>
 800ee14:	4b18      	ldr	r3, [pc, #96]	; (800ee78 <__kernel_rem_pio2+0x338>)
 800ee16:	461e      	mov	r6, r3
 800ee18:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ee1e:	1b2b      	subs	r3, r5, r4
 800ee20:	f04f 0900 	mov.w	r9, #0
 800ee24:	f04f 0a00 	mov.w	sl, #0
 800ee28:	2700      	movs	r7, #0
 800ee2a:	9306      	str	r3, [sp, #24]
 800ee2c:	e0e6      	b.n	800effc <__kernel_rem_pio2+0x4bc>
 800ee2e:	f04f 0b02 	mov.w	fp, #2
 800ee32:	e756      	b.n	800ece2 <__kernel_rem_pio2+0x1a2>
 800ee34:	f8d8 3000 	ldr.w	r3, [r8]
 800ee38:	bb05      	cbnz	r5, 800ee7c <__kernel_rem_pio2+0x33c>
 800ee3a:	b123      	cbz	r3, 800ee46 <__kernel_rem_pio2+0x306>
 800ee3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ee40:	f8c8 3000 	str.w	r3, [r8]
 800ee44:	2301      	movs	r3, #1
 800ee46:	3201      	adds	r2, #1
 800ee48:	f108 0804 	add.w	r8, r8, #4
 800ee4c:	461d      	mov	r5, r3
 800ee4e:	e74f      	b.n	800ecf0 <__kernel_rem_pio2+0x1b0>
	...
 800ee5c:	3ff00000 	.word	0x3ff00000
 800ee60:	0800f9a8 	.word	0x0800f9a8
 800ee64:	40200000 	.word	0x40200000
 800ee68:	3ff00000 	.word	0x3ff00000
 800ee6c:	3e700000 	.word	0x3e700000
 800ee70:	41700000 	.word	0x41700000
 800ee74:	3fe00000 	.word	0x3fe00000
 800ee78:	0800f968 	.word	0x0800f968
 800ee7c:	1acb      	subs	r3, r1, r3
 800ee7e:	f8c8 3000 	str.w	r3, [r8]
 800ee82:	462b      	mov	r3, r5
 800ee84:	e7df      	b.n	800ee46 <__kernel_rem_pio2+0x306>
 800ee86:	1e62      	subs	r2, r4, #1
 800ee88:	ab0c      	add	r3, sp, #48	; 0x30
 800ee8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ee92:	a90c      	add	r1, sp, #48	; 0x30
 800ee94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ee98:	e738      	b.n	800ed0c <__kernel_rem_pio2+0x1cc>
 800ee9a:	1e62      	subs	r2, r4, #1
 800ee9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ee9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eea6:	e7f4      	b.n	800ee92 <__kernel_rem_pio2+0x352>
 800eea8:	a90c      	add	r1, sp, #48	; 0x30
 800eeaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	e788      	b.n	800edc6 <__kernel_rem_pio2+0x286>
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eeba:	2900      	cmp	r1, #0
 800eebc:	d0fa      	beq.n	800eeb4 <__kernel_rem_pio2+0x374>
 800eebe:	9a08      	ldr	r2, [sp, #32]
 800eec0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eec4:	446a      	add	r2, sp
 800eec6:	3a98      	subs	r2, #152	; 0x98
 800eec8:	9208      	str	r2, [sp, #32]
 800eeca:	9a06      	ldr	r2, [sp, #24]
 800eecc:	a920      	add	r1, sp, #128	; 0x80
 800eece:	18a2      	adds	r2, r4, r2
 800eed0:	18e3      	adds	r3, r4, r3
 800eed2:	f104 0801 	add.w	r8, r4, #1
 800eed6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800eeda:	9302      	str	r3, [sp, #8]
 800eedc:	9b02      	ldr	r3, [sp, #8]
 800eede:	4543      	cmp	r3, r8
 800eee0:	da04      	bge.n	800eeec <__kernel_rem_pio2+0x3ac>
 800eee2:	461c      	mov	r4, r3
 800eee4:	e6a2      	b.n	800ec2c <__kernel_rem_pio2+0xec>
 800eee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eee8:	2301      	movs	r3, #1
 800eeea:	e7e4      	b.n	800eeb6 <__kernel_rem_pio2+0x376>
 800eeec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eef2:	f7f1 fb17 	bl	8000524 <__aeabi_i2d>
 800eef6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefc:	46ab      	mov	fp, r5
 800eefe:	461c      	mov	r4, r3
 800ef00:	f04f 0900 	mov.w	r9, #0
 800ef04:	2600      	movs	r6, #0
 800ef06:	2700      	movs	r7, #0
 800ef08:	9b05      	ldr	r3, [sp, #20]
 800ef0a:	4599      	cmp	r9, r3
 800ef0c:	dd06      	ble.n	800ef1c <__kernel_rem_pio2+0x3dc>
 800ef0e:	9b08      	ldr	r3, [sp, #32]
 800ef10:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ef14:	f108 0801 	add.w	r8, r8, #1
 800ef18:	9308      	str	r3, [sp, #32]
 800ef1a:	e7df      	b.n	800eedc <__kernel_rem_pio2+0x39c>
 800ef1c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ef20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ef24:	f7f1 fb68 	bl	80005f8 <__aeabi_dmul>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	4639      	mov	r1, r7
 800ef30:	f7f1 f9ac 	bl	800028c <__adddf3>
 800ef34:	f109 0901 	add.w	r9, r9, #1
 800ef38:	4606      	mov	r6, r0
 800ef3a:	460f      	mov	r7, r1
 800ef3c:	e7e4      	b.n	800ef08 <__kernel_rem_pio2+0x3c8>
 800ef3e:	3d01      	subs	r5, #1
 800ef40:	e747      	b.n	800edd2 <__kernel_rem_pio2+0x292>
 800ef42:	ec47 6b10 	vmov	d0, r6, r7
 800ef46:	f1ca 0000 	rsb	r0, sl, #0
 800ef4a:	f000 f949 	bl	800f1e0 <scalbn>
 800ef4e:	ec57 6b10 	vmov	r6, r7, d0
 800ef52:	4ba0      	ldr	r3, [pc, #640]	; (800f1d4 <__kernel_rem_pio2+0x694>)
 800ef54:	ee10 0a10 	vmov	r0, s0
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4639      	mov	r1, r7
 800ef5c:	f7f1 fdd2 	bl	8000b04 <__aeabi_dcmpge>
 800ef60:	b1f8      	cbz	r0, 800efa2 <__kernel_rem_pio2+0x462>
 800ef62:	4b9d      	ldr	r3, [pc, #628]	; (800f1d8 <__kernel_rem_pio2+0x698>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	4630      	mov	r0, r6
 800ef68:	4639      	mov	r1, r7
 800ef6a:	f7f1 fb45 	bl	80005f8 <__aeabi_dmul>
 800ef6e:	f7f1 fdf3 	bl	8000b58 <__aeabi_d2iz>
 800ef72:	4680      	mov	r8, r0
 800ef74:	f7f1 fad6 	bl	8000524 <__aeabi_i2d>
 800ef78:	4b96      	ldr	r3, [pc, #600]	; (800f1d4 <__kernel_rem_pio2+0x694>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f7f1 fb3c 	bl	80005f8 <__aeabi_dmul>
 800ef80:	460b      	mov	r3, r1
 800ef82:	4602      	mov	r2, r0
 800ef84:	4639      	mov	r1, r7
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7f1 f97e 	bl	8000288 <__aeabi_dsub>
 800ef8c:	f7f1 fde4 	bl	8000b58 <__aeabi_d2iz>
 800ef90:	1c65      	adds	r5, r4, #1
 800ef92:	ab0c      	add	r3, sp, #48	; 0x30
 800ef94:	f10a 0a18 	add.w	sl, sl, #24
 800ef98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef9c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800efa0:	e71f      	b.n	800ede2 <__kernel_rem_pio2+0x2a2>
 800efa2:	4630      	mov	r0, r6
 800efa4:	4639      	mov	r1, r7
 800efa6:	f7f1 fdd7 	bl	8000b58 <__aeabi_d2iz>
 800efaa:	ab0c      	add	r3, sp, #48	; 0x30
 800efac:	4625      	mov	r5, r4
 800efae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800efb2:	e716      	b.n	800ede2 <__kernel_rem_pio2+0x2a2>
 800efb4:	ab0c      	add	r3, sp, #48	; 0x30
 800efb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800efba:	f7f1 fab3 	bl	8000524 <__aeabi_i2d>
 800efbe:	4632      	mov	r2, r6
 800efc0:	463b      	mov	r3, r7
 800efc2:	f7f1 fb19 	bl	80005f8 <__aeabi_dmul>
 800efc6:	4642      	mov	r2, r8
 800efc8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800efcc:	464b      	mov	r3, r9
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	f7f1 fb11 	bl	80005f8 <__aeabi_dmul>
 800efd6:	3c01      	subs	r4, #1
 800efd8:	4606      	mov	r6, r0
 800efda:	460f      	mov	r7, r1
 800efdc:	e713      	b.n	800ee06 <__kernel_rem_pio2+0x2c6>
 800efde:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800efe2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800efe6:	f7f1 fb07 	bl	80005f8 <__aeabi_dmul>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	4648      	mov	r0, r9
 800eff0:	4651      	mov	r1, sl
 800eff2:	f7f1 f94b 	bl	800028c <__adddf3>
 800eff6:	3701      	adds	r7, #1
 800eff8:	4681      	mov	r9, r0
 800effa:	468a      	mov	sl, r1
 800effc:	9b00      	ldr	r3, [sp, #0]
 800effe:	429f      	cmp	r7, r3
 800f000:	dc02      	bgt.n	800f008 <__kernel_rem_pio2+0x4c8>
 800f002:	9b06      	ldr	r3, [sp, #24]
 800f004:	429f      	cmp	r7, r3
 800f006:	ddea      	ble.n	800efde <__kernel_rem_pio2+0x49e>
 800f008:	9a06      	ldr	r2, [sp, #24]
 800f00a:	ab48      	add	r3, sp, #288	; 0x120
 800f00c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f010:	e9c6 9a00 	strd	r9, sl, [r6]
 800f014:	3c01      	subs	r4, #1
 800f016:	e6fa      	b.n	800ee0e <__kernel_rem_pio2+0x2ce>
 800f018:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	dc0b      	bgt.n	800f036 <__kernel_rem_pio2+0x4f6>
 800f01e:	2b00      	cmp	r3, #0
 800f020:	dc39      	bgt.n	800f096 <__kernel_rem_pio2+0x556>
 800f022:	d05d      	beq.n	800f0e0 <__kernel_rem_pio2+0x5a0>
 800f024:	9b02      	ldr	r3, [sp, #8]
 800f026:	f003 0007 	and.w	r0, r3, #7
 800f02a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f02e:	ecbd 8b02 	vpop	{d8}
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d1f3      	bne.n	800f024 <__kernel_rem_pio2+0x4e4>
 800f03c:	9b05      	ldr	r3, [sp, #20]
 800f03e:	9500      	str	r5, [sp, #0]
 800f040:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f044:	eb0d 0403 	add.w	r4, sp, r3
 800f048:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f04c:	46a2      	mov	sl, r4
 800f04e:	9b00      	ldr	r3, [sp, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f1aa 0a08 	sub.w	sl, sl, #8
 800f056:	dc69      	bgt.n	800f12c <__kernel_rem_pio2+0x5ec>
 800f058:	46aa      	mov	sl, r5
 800f05a:	f1ba 0f01 	cmp.w	sl, #1
 800f05e:	f1a4 0408 	sub.w	r4, r4, #8
 800f062:	f300 8083 	bgt.w	800f16c <__kernel_rem_pio2+0x62c>
 800f066:	9c05      	ldr	r4, [sp, #20]
 800f068:	ab48      	add	r3, sp, #288	; 0x120
 800f06a:	441c      	add	r4, r3
 800f06c:	2000      	movs	r0, #0
 800f06e:	2100      	movs	r1, #0
 800f070:	2d01      	cmp	r5, #1
 800f072:	f300 809a 	bgt.w	800f1aa <__kernel_rem_pio2+0x66a>
 800f076:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f07a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f07e:	f1bb 0f00 	cmp.w	fp, #0
 800f082:	f040 8098 	bne.w	800f1b6 <__kernel_rem_pio2+0x676>
 800f086:	9b04      	ldr	r3, [sp, #16]
 800f088:	e9c3 7800 	strd	r7, r8, [r3]
 800f08c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f090:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f094:	e7c6      	b.n	800f024 <__kernel_rem_pio2+0x4e4>
 800f096:	9e05      	ldr	r6, [sp, #20]
 800f098:	ab48      	add	r3, sp, #288	; 0x120
 800f09a:	441e      	add	r6, r3
 800f09c:	462c      	mov	r4, r5
 800f09e:	2000      	movs	r0, #0
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	2c00      	cmp	r4, #0
 800f0a4:	da33      	bge.n	800f10e <__kernel_rem_pio2+0x5ce>
 800f0a6:	f1bb 0f00 	cmp.w	fp, #0
 800f0aa:	d036      	beq.n	800f11a <__kernel_rem_pio2+0x5da>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0b2:	9c04      	ldr	r4, [sp, #16]
 800f0b4:	e9c4 2300 	strd	r2, r3, [r4]
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f0c0:	f7f1 f8e2 	bl	8000288 <__aeabi_dsub>
 800f0c4:	ae4a      	add	r6, sp, #296	; 0x128
 800f0c6:	2401      	movs	r4, #1
 800f0c8:	42a5      	cmp	r5, r4
 800f0ca:	da29      	bge.n	800f120 <__kernel_rem_pio2+0x5e0>
 800f0cc:	f1bb 0f00 	cmp.w	fp, #0
 800f0d0:	d002      	beq.n	800f0d8 <__kernel_rem_pio2+0x598>
 800f0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	9b04      	ldr	r3, [sp, #16]
 800f0da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f0de:	e7a1      	b.n	800f024 <__kernel_rem_pio2+0x4e4>
 800f0e0:	9c05      	ldr	r4, [sp, #20]
 800f0e2:	ab48      	add	r3, sp, #288	; 0x120
 800f0e4:	441c      	add	r4, r3
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	2d00      	cmp	r5, #0
 800f0ec:	da09      	bge.n	800f102 <__kernel_rem_pio2+0x5c2>
 800f0ee:	f1bb 0f00 	cmp.w	fp, #0
 800f0f2:	d002      	beq.n	800f0fa <__kernel_rem_pio2+0x5ba>
 800f0f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	9b04      	ldr	r3, [sp, #16]
 800f0fc:	e9c3 0100 	strd	r0, r1, [r3]
 800f100:	e790      	b.n	800f024 <__kernel_rem_pio2+0x4e4>
 800f102:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f106:	f7f1 f8c1 	bl	800028c <__adddf3>
 800f10a:	3d01      	subs	r5, #1
 800f10c:	e7ed      	b.n	800f0ea <__kernel_rem_pio2+0x5aa>
 800f10e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f112:	f7f1 f8bb 	bl	800028c <__adddf3>
 800f116:	3c01      	subs	r4, #1
 800f118:	e7c3      	b.n	800f0a2 <__kernel_rem_pio2+0x562>
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	e7c8      	b.n	800f0b2 <__kernel_rem_pio2+0x572>
 800f120:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f124:	f7f1 f8b2 	bl	800028c <__adddf3>
 800f128:	3401      	adds	r4, #1
 800f12a:	e7cd      	b.n	800f0c8 <__kernel_rem_pio2+0x588>
 800f12c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f130:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f134:	9b00      	ldr	r3, [sp, #0]
 800f136:	3b01      	subs	r3, #1
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4632      	mov	r2, r6
 800f13c:	463b      	mov	r3, r7
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 f8a3 	bl	800028c <__adddf3>
 800f146:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4640      	mov	r0, r8
 800f150:	4649      	mov	r1, r9
 800f152:	f7f1 f899 	bl	8000288 <__aeabi_dsub>
 800f156:	4632      	mov	r2, r6
 800f158:	463b      	mov	r3, r7
 800f15a:	f7f1 f897 	bl	800028c <__adddf3>
 800f15e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f162:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f166:	ed8a 7b00 	vstr	d7, [sl]
 800f16a:	e770      	b.n	800f04e <__kernel_rem_pio2+0x50e>
 800f16c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f170:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f174:	4640      	mov	r0, r8
 800f176:	4632      	mov	r2, r6
 800f178:	463b      	mov	r3, r7
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 f886 	bl	800028c <__adddf3>
 800f180:	e9cd 0100 	strd	r0, r1, [sp]
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	4640      	mov	r0, r8
 800f18a:	4649      	mov	r1, r9
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	4632      	mov	r2, r6
 800f192:	463b      	mov	r3, r7
 800f194:	f7f1 f87a 	bl	800028c <__adddf3>
 800f198:	ed9d 7b00 	vldr	d7, [sp]
 800f19c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f1a0:	ed84 7b00 	vstr	d7, [r4]
 800f1a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1a8:	e757      	b.n	800f05a <__kernel_rem_pio2+0x51a>
 800f1aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1ae:	f7f1 f86d 	bl	800028c <__adddf3>
 800f1b2:	3d01      	subs	r5, #1
 800f1b4:	e75c      	b.n	800f070 <__kernel_rem_pio2+0x530>
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	9a04      	ldr	r2, [sp, #16]
 800f1ba:	601f      	str	r7, [r3, #0]
 800f1bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f1c0:	605c      	str	r4, [r3, #4]
 800f1c2:	609d      	str	r5, [r3, #8]
 800f1c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f1c8:	60d3      	str	r3, [r2, #12]
 800f1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1ce:	6110      	str	r0, [r2, #16]
 800f1d0:	6153      	str	r3, [r2, #20]
 800f1d2:	e727      	b.n	800f024 <__kernel_rem_pio2+0x4e4>
 800f1d4:	41700000 	.word	0x41700000
 800f1d8:	3e700000 	.word	0x3e700000
 800f1dc:	00000000 	.word	0x00000000

0800f1e0 <scalbn>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	ec55 4b10 	vmov	r4, r5, d0
 800f1e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	462b      	mov	r3, r5
 800f1ee:	b999      	cbnz	r1, 800f218 <scalbn+0x38>
 800f1f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1f4:	4323      	orrs	r3, r4
 800f1f6:	d03f      	beq.n	800f278 <scalbn+0x98>
 800f1f8:	4b35      	ldr	r3, [pc, #212]	; (800f2d0 <scalbn+0xf0>)
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	ee10 0a10 	vmov	r0, s0
 800f200:	2200      	movs	r2, #0
 800f202:	f7f1 f9f9 	bl	80005f8 <__aeabi_dmul>
 800f206:	4b33      	ldr	r3, [pc, #204]	; (800f2d4 <scalbn+0xf4>)
 800f208:	429e      	cmp	r6, r3
 800f20a:	4604      	mov	r4, r0
 800f20c:	460d      	mov	r5, r1
 800f20e:	da10      	bge.n	800f232 <scalbn+0x52>
 800f210:	a327      	add	r3, pc, #156	; (adr r3, 800f2b0 <scalbn+0xd0>)
 800f212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f216:	e01f      	b.n	800f258 <scalbn+0x78>
 800f218:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f21c:	4291      	cmp	r1, r2
 800f21e:	d10c      	bne.n	800f23a <scalbn+0x5a>
 800f220:	ee10 2a10 	vmov	r2, s0
 800f224:	4620      	mov	r0, r4
 800f226:	4629      	mov	r1, r5
 800f228:	f7f1 f830 	bl	800028c <__adddf3>
 800f22c:	4604      	mov	r4, r0
 800f22e:	460d      	mov	r5, r1
 800f230:	e022      	b.n	800f278 <scalbn+0x98>
 800f232:	460b      	mov	r3, r1
 800f234:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f238:	3936      	subs	r1, #54	; 0x36
 800f23a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f23e:	4296      	cmp	r6, r2
 800f240:	dd0d      	ble.n	800f25e <scalbn+0x7e>
 800f242:	2d00      	cmp	r5, #0
 800f244:	a11c      	add	r1, pc, #112	; (adr r1, 800f2b8 <scalbn+0xd8>)
 800f246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f24a:	da02      	bge.n	800f252 <scalbn+0x72>
 800f24c:	a11c      	add	r1, pc, #112	; (adr r1, 800f2c0 <scalbn+0xe0>)
 800f24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f252:	a319      	add	r3, pc, #100	; (adr r3, 800f2b8 <scalbn+0xd8>)
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f7f1 f9ce 	bl	80005f8 <__aeabi_dmul>
 800f25c:	e7e6      	b.n	800f22c <scalbn+0x4c>
 800f25e:	1872      	adds	r2, r6, r1
 800f260:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f264:	428a      	cmp	r2, r1
 800f266:	dcec      	bgt.n	800f242 <scalbn+0x62>
 800f268:	2a00      	cmp	r2, #0
 800f26a:	dd08      	ble.n	800f27e <scalbn+0x9e>
 800f26c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f270:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f274:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f278:	ec45 4b10 	vmov	d0, r4, r5
 800f27c:	bd70      	pop	{r4, r5, r6, pc}
 800f27e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f282:	da08      	bge.n	800f296 <scalbn+0xb6>
 800f284:	2d00      	cmp	r5, #0
 800f286:	a10a      	add	r1, pc, #40	; (adr r1, 800f2b0 <scalbn+0xd0>)
 800f288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f28c:	dac0      	bge.n	800f210 <scalbn+0x30>
 800f28e:	a10e      	add	r1, pc, #56	; (adr r1, 800f2c8 <scalbn+0xe8>)
 800f290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f294:	e7bc      	b.n	800f210 <scalbn+0x30>
 800f296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f29a:	3236      	adds	r2, #54	; 0x36
 800f29c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <scalbn+0xf8>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	e7d5      	b.n	800f258 <scalbn+0x78>
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	c2f8f359 	.word	0xc2f8f359
 800f2b4:	01a56e1f 	.word	0x01a56e1f
 800f2b8:	8800759c 	.word	0x8800759c
 800f2bc:	7e37e43c 	.word	0x7e37e43c
 800f2c0:	8800759c 	.word	0x8800759c
 800f2c4:	fe37e43c 	.word	0xfe37e43c
 800f2c8:	c2f8f359 	.word	0xc2f8f359
 800f2cc:	81a56e1f 	.word	0x81a56e1f
 800f2d0:	43500000 	.word	0x43500000
 800f2d4:	ffff3cb0 	.word	0xffff3cb0
 800f2d8:	3c900000 	.word	0x3c900000
 800f2dc:	00000000 	.word	0x00000000

0800f2e0 <floor>:
 800f2e0:	ec51 0b10 	vmov	r0, r1, d0
 800f2e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f2f0:	2e13      	cmp	r6, #19
 800f2f2:	ee10 5a10 	vmov	r5, s0
 800f2f6:	ee10 8a10 	vmov	r8, s0
 800f2fa:	460c      	mov	r4, r1
 800f2fc:	dc31      	bgt.n	800f362 <floor+0x82>
 800f2fe:	2e00      	cmp	r6, #0
 800f300:	da14      	bge.n	800f32c <floor+0x4c>
 800f302:	a333      	add	r3, pc, #204	; (adr r3, 800f3d0 <floor+0xf0>)
 800f304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f308:	f7f0 ffc0 	bl	800028c <__adddf3>
 800f30c:	2200      	movs	r2, #0
 800f30e:	2300      	movs	r3, #0
 800f310:	f7f1 fc02 	bl	8000b18 <__aeabi_dcmpgt>
 800f314:	b138      	cbz	r0, 800f326 <floor+0x46>
 800f316:	2c00      	cmp	r4, #0
 800f318:	da53      	bge.n	800f3c2 <floor+0xe2>
 800f31a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f31e:	4325      	orrs	r5, r4
 800f320:	d052      	beq.n	800f3c8 <floor+0xe8>
 800f322:	4c2d      	ldr	r4, [pc, #180]	; (800f3d8 <floor+0xf8>)
 800f324:	2500      	movs	r5, #0
 800f326:	4621      	mov	r1, r4
 800f328:	4628      	mov	r0, r5
 800f32a:	e024      	b.n	800f376 <floor+0x96>
 800f32c:	4f2b      	ldr	r7, [pc, #172]	; (800f3dc <floor+0xfc>)
 800f32e:	4137      	asrs	r7, r6
 800f330:	ea01 0307 	and.w	r3, r1, r7
 800f334:	4303      	orrs	r3, r0
 800f336:	d01e      	beq.n	800f376 <floor+0x96>
 800f338:	a325      	add	r3, pc, #148	; (adr r3, 800f3d0 <floor+0xf0>)
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	f7f0 ffa5 	bl	800028c <__adddf3>
 800f342:	2200      	movs	r2, #0
 800f344:	2300      	movs	r3, #0
 800f346:	f7f1 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d0eb      	beq.n	800f326 <floor+0x46>
 800f34e:	2c00      	cmp	r4, #0
 800f350:	bfbe      	ittt	lt
 800f352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f356:	4133      	asrlt	r3, r6
 800f358:	18e4      	addlt	r4, r4, r3
 800f35a:	ea24 0407 	bic.w	r4, r4, r7
 800f35e:	2500      	movs	r5, #0
 800f360:	e7e1      	b.n	800f326 <floor+0x46>
 800f362:	2e33      	cmp	r6, #51	; 0x33
 800f364:	dd0b      	ble.n	800f37e <floor+0x9e>
 800f366:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f36a:	d104      	bne.n	800f376 <floor+0x96>
 800f36c:	ee10 2a10 	vmov	r2, s0
 800f370:	460b      	mov	r3, r1
 800f372:	f7f0 ff8b 	bl	800028c <__adddf3>
 800f376:	ec41 0b10 	vmov	d0, r0, r1
 800f37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f37e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f382:	f04f 37ff 	mov.w	r7, #4294967295
 800f386:	40df      	lsrs	r7, r3
 800f388:	4238      	tst	r0, r7
 800f38a:	d0f4      	beq.n	800f376 <floor+0x96>
 800f38c:	a310      	add	r3, pc, #64	; (adr r3, 800f3d0 <floor+0xf0>)
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	f7f0 ff7b 	bl	800028c <__adddf3>
 800f396:	2200      	movs	r2, #0
 800f398:	2300      	movs	r3, #0
 800f39a:	f7f1 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d0c1      	beq.n	800f326 <floor+0x46>
 800f3a2:	2c00      	cmp	r4, #0
 800f3a4:	da0a      	bge.n	800f3bc <floor+0xdc>
 800f3a6:	2e14      	cmp	r6, #20
 800f3a8:	d101      	bne.n	800f3ae <floor+0xce>
 800f3aa:	3401      	adds	r4, #1
 800f3ac:	e006      	b.n	800f3bc <floor+0xdc>
 800f3ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	40b3      	lsls	r3, r6
 800f3b6:	441d      	add	r5, r3
 800f3b8:	45a8      	cmp	r8, r5
 800f3ba:	d8f6      	bhi.n	800f3aa <floor+0xca>
 800f3bc:	ea25 0507 	bic.w	r5, r5, r7
 800f3c0:	e7b1      	b.n	800f326 <floor+0x46>
 800f3c2:	2500      	movs	r5, #0
 800f3c4:	462c      	mov	r4, r5
 800f3c6:	e7ae      	b.n	800f326 <floor+0x46>
 800f3c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f3cc:	e7ab      	b.n	800f326 <floor+0x46>
 800f3ce:	bf00      	nop
 800f3d0:	8800759c 	.word	0x8800759c
 800f3d4:	7e37e43c 	.word	0x7e37e43c
 800f3d8:	bff00000 	.word	0xbff00000
 800f3dc:	000fffff 	.word	0x000fffff

0800f3e0 <_init>:
 800f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e2:	bf00      	nop
 800f3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e6:	bc08      	pop	{r3}
 800f3e8:	469e      	mov	lr, r3
 800f3ea:	4770      	bx	lr

0800f3ec <_fini>:
 800f3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ee:	bf00      	nop
 800f3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3f2:	bc08      	pop	{r3}
 800f3f4:	469e      	mov	lr, r3
 800f3f6:	4770      	bx	lr
